[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    mainClass.set(\"seedu.pulsepilot.PulsePilot\")","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    archiveBaseName.set(\"pulsepilot\")","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"JustinSoh":1,"rouvinerh":2,"-":44}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display |     Name      |             Github Profile             | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"raajamani"},"content":"--------|:-------------:|:--------------------------------------:|:---------:","lastModifiedDate":"2024-04-05"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |  Justin Soh   | [Github](https://github.com/JustinSoh) | [Portfolio](https://justinsoh.github.io/)","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |  Rouvin Erh   | [Github](https://github.com/rouvinerh) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |   Alfaatih    |   [Github](https://github.com/L5-Z)    | [Portfolio](https://l5-z.github.io)","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |    Jolene     |  [Github](https://github.com/j013n3)   | [Portfolio](docs/team/j013n3.md)","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |   Ying Jia    |   [Github](https://github.com/syj02)   | [Portfolio](docs/team/syj02.md)","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"raajamani"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | R M Raajamani | [Github](https://github.com/raajamani) | [Portfolio](docs/team/raajamani.md)","lastModifiedDate":"2024-04-05"},{"lineNumber":11,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-05"}],"authorContributionMap":{"j013n3":1,"JustinSoh":1,"rouvinerh":1,"L5-Z":1,"raajamani":3,"syj02":1,"-":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"![Logo](img/logo.jpg)","lastModifiedDate":"2024-04-08"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"## Table of Contents","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"* [Acknowledgements](#acknowledgements)","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"* [Introduction](#introduction)","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"* [Design](#design)","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"* [Implementation of Commands](#commands-and-implementation)","lastModifiedDate":"2024-04-09"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"* [Appendix: DG Requirements](#appendix-requirements)","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    * [Product Scope](#target-user-profile)","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"    * [User Stories](#user-stories)","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    * [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    * [Glossary](#glossary)","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    * [Manual Testing](#manual-testing)","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"\u003c!-- @@author syj02 --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"Our team has referenced [Address Book (Level-3)](https://github.com/se-edu/addressbook-level3) and used their [Developer Guide (DG)](https://se-education.org/addressbook-level3/DeveloperGuide.html) to better structure our own Developer Guide.","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"## Introduction","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"The purpose of this guide is to provide an explanation for all the functions and internal workings in PulsePilot. This enables any technical readers to get a detailed understanding of the application\u0027s implementation, making it easier for them to contribute to the project or adapt it according to their preferences. This is made to complement the User Guide.","lastModifiedDate":"2024-04-12"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"## Design","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"* [Overview of Components](#overview-of-components)","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"* [UI](#ui-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"    * [Handler](#handler)","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"    * [Output](#output)","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"* [Workouts](#workouts-package)","lastModifiedDate":"2024-04-12"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"    * [Workout List](#workouts-list)","lastModifiedDate":"2024-04-12"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"    * [Gym](#gym)","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"        * [GymStation](#gym-station)","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"        * [GymSet](#gym-set)","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"    * [Run](#run)","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"* [Health](#health-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"    * [HealthList](#health-list)","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"    * [Bmi](#bmi)","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"    * [Period](#period)","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"    * [Appointment](#appointment)","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"* [Utility](#utility-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"    * [Parser](#parser)","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"    * [Validation](#validation)","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"    * [CustomExceptions](#custom-exceptions)","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"    * [Filters](#filters)","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"* [Storage](#storage-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"* [Constants](#constants-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"### Overview of Components","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"This part of the guide provides a high-level overview of each package and its classes via a class or sequence diagram. A brief description of each class is given as well.","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"PulsePilot follows an **Object-Oriented Design** approach, with separate packages for handling different components of the application, such as user input, output, workout logging, and health data management.","lastModifiedDate":"2024-04-12"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"The **_Architecture Diagram_** is given below:","lastModifiedDate":"2024-04-12"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"![Architecture Diagram](img/architecture_diagram.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"The `seedu.pulsepilot` package contains the `Main` method, which is the entry point of the application. It is responsible for initialising and processing of user input, and the termination of PulsePilot.","lastModifiedDate":"2024-04-13"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"- `Ui`: The user interface of PulsePilot used for handling user input and printing messages. ","lastModifiedDate":"2024-04-12"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"- `Storage`: Contains the data storage components for PulsePilot.","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"- `Health`: Stores health-related information.","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"- `Workouts`: Stores workout-related information.","lastModifiedDate":"2024-04-12"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"- `Utility`: Contains utility functions, such as input parsing and validation.","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"- `PulsePilot`: The main entry point for the application.","lastModifiedDate":"2024-04-08"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"- `Constants`: Contains all constants used in PulsePilot.","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"\u003c!-- @@author L5-Z --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"### UI Package","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"The `UI` package contains the `Handler` and `Output` classes, which are responsible for handling user input and printing of output to the screen respectively.","lastModifiedDate":"2024-04-13"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"#### Handler","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"The main entry point of the application is the `Handler` class, used to determine the command used. The user\u0027s input is then passed to the corresponding handler method to carry out the action.","lastModifiedDate":"2024-04-13"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"The sequence diagram below shows how the application is initialised and then processes the user\u0027s input using the `Handler` class:","lastModifiedDate":"2024-04-13"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"![Handler Sequence Diagram](img/sequence_diagrams/handler_sequence_diagram.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":101,"author":{"gitId":"L5-Z"},"content":"1. PulsePilot is started via `handler.initialiseBot()`, which checks whether the data file is present and its integrity if applicable. How this is done will be covered [here](#storage-of-data).","lastModifiedDate":"2024-04-12"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"2. `handler.processInput()` is then used to get the user\u0027s input for commands.","lastModifiedDate":"2024-04-12"},{"lineNumber":104,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"3. When PulsePilot exits gracefully via the `exit` command, `terminateBot()` is called to write to the data and hash files.","lastModifiedDate":"2024-04-12"},{"lineNumber":106,"author":{"gitId":"L5-Z"},"content":"    - If a user exits without calling terminateBot(), **data will be lost!** Likewise, this is covered [here](#storage-of-data).","lastModifiedDate":"2024-04-12"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":108,"author":{"gitId":"L5-Z"},"content":"The `Handler` class creates other classes when it is used as shown in this sequence diagram:","lastModifiedDate":"2024-04-12"},{"lineNumber":109,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":110,"author":{"gitId":"L5-Z"},"content":"![Handler Class Creation](img/sequence_diagrams/handler_class_creation.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"The creation of the above classes will be left out of other sequence diagrams to prevent cluttering the diagram. **It is assumed in other class diagrams for `Handler` that the classes have already been created.**","lastModifiedDate":"2024-04-12"},{"lineNumber":113,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":114,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":117,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":118,"author":{"gitId":"L5-Z"},"content":"#### Output","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"L5-Z"},"content":"The `Output` class is responsible for printing messages, prompts, errors and other information to the terminal for the user.","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":122,"author":{"gitId":"L5-Z"},"content":"The class diagram for `Output` has been omitted, since a developer can read the code itself to gain a better understanding of its methods.","lastModifiedDate":"2024-04-12"},{"lineNumber":123,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":126,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":127,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"\u003c!-- @@author rouvinerh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"### Workouts Package","lastModifiedDate":"2024-04-12"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"The `Workout` package is responsible for tracking run and gym workouts from the user.","lastModifiedDate":"2024-04-07"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"#### Workouts List","lastModifiedDate":"2024-04-12"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"`WorkoutLists` is a class that contains the `ArrayList` objects of `Run`, `Gym` and `Workout`. The class diagram is as follows:","lastModifiedDate":"2024-04-13"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"![WorkoutLists Class Diagram](img/class_diagrams/workoutlist_class_diagram.png)","lastModifiedDate":"2024-04-13"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"The class contains methods to retrieve the different objects. Additionally, it contains the methods for **deleting** an object from PulsePilot, which is used for the `delete` command implementation.","lastModifiedDate":"2024-04-12"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"The `clearWorkoutsRunGym()` method is used to clear all the data stored within each `ArrayList`, which is mainly used for unit testing.","lastModifiedDate":"2024-04-07"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"\u003c!-- @@author JustinSoh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"#### Gym","lastModifiedDate":"2024-04-02"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"`Gym` is a class that represents a gym session that the user has recorded. It contains the following attributes:","lastModifiedDate":"2024-04-12"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"- `date`: An **optional** `LocalDate` attribute representing the date of the workout. Implemented via an overloaded `Gym()` constructor.","lastModifiedDate":"2024-04-12"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"**A `Gym` object contains 1 or more `GymStation` objects.**","lastModifiedDate":"2024-04-07"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"The class diagram for gym is as follows:","lastModifiedDate":"2024-04-07"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"![Gym Class Diagram](img/class_diagrams/gym_class_diagram.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"##### Gym Station","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"`GymStation` is a class that represents one gym station the user has done in a particular gym session. It contains the following attributes:","lastModifiedDate":"2024-04-12"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"- `stationName`: Name of the gym station as a `String`.","lastModifiedDate":"2024-04-07"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"-  `ArrayList\u003cGymSet\u003e`: An `ArrayList` of `GymSet` object, representing the varying number of sets done at one station.","lastModifiedDate":"2024-04-07"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"- `numberOfSets`: The number of sets done as an `int`.","lastModifiedDate":"2024-04-07"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"**A `GymStation` object contains 1 or more `GymSet` objects.**","lastModifiedDate":"2024-04-07"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"##### Gym Set","lastModifiedDate":"2024-04-02"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"`GymSet` is a class that represents one gym set the user has done in one gym station. It contains the following attributes:","lastModifiedDate":"2024-04-12"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"- `weight`: The weight done for a gym set represented as a `double`.","lastModifiedDate":"2024-04-07"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"- `numberOfRepetitions`: The number of repetitions for a gym set represented as an `int`.","lastModifiedDate":"2024-04-07"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"\u003c!-- @@author rouvinerh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"#### Run","lastModifiedDate":"2024-04-02"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"`Run` is a class that represents a run workout the user has recorded. It contains the following attributes:","lastModifiedDate":"2024-04-12"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"- `times`: An `Integer[]` variable representing the hours, minutes and seconds taken for a run.","lastModifiedDate":"2024-04-12"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"- `distance`: The distance ran in **kilometers** represented as a `double`.","lastModifiedDate":"2024-04-13"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"- `date`: An **optional** `LocalDate` parameter representing the date of the workout. Implemented via an overloaded `Run()` constructor.","lastModifiedDate":"2024-04-12"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"- `pace`: The pace of the run in minutes/km represented as a `String`.","lastModifiedDate":"2024-04-07"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"- `isHourPresent`: A `boolean` variable to indicate if an hour has been indicated, since PulsePilot accepts both `HH:MM:SS` and `MM:SS` formats.","lastModifiedDate":"2024-04-12"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":207,"author":{"gitId":"syj02"},"content":"\u003c!-- @@author syj02 --\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":208,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":209,"author":{"gitId":"syj02"},"content":"### Health Package","lastModifiedDate":"2024-04-03"},{"lineNumber":210,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":211,"author":{"gitId":"syj02"},"content":"The `Health` package is responsible for tracking user\u0027s BMI, period cycle, and medical appointments.","lastModifiedDate":"2024-04-10"},{"lineNumber":212,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":213,"author":{"gitId":"syj02"},"content":"#### Health List","lastModifiedDate":"2024-04-02"},{"lineNumber":214,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":215,"author":{"gitId":"syj02"},"content":"`HealthList` is a class that contains the `ArrayList` objects of `Bmi`, `Period`, and `Appointment`. The class diagram is as follows:","lastModifiedDate":"2024-04-10"},{"lineNumber":216,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":217,"author":{"gitId":"syj02"},"content":"![HealthList Class Diagram](img/class_diagrams/healthlist_class_diagram.png)","lastModifiedDate":"2024-04-11"},{"lineNumber":218,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":219,"author":{"gitId":"syj02"},"content":"The class contains methods to retrieve the different objects. Additionally, it contains the methods for:","lastModifiedDate":"2024-04-10"},{"lineNumber":220,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":221,"author":{"gitId":"syj02"},"content":"- **Deleting** an object from PulsePilot, which is used for the `delete` command implementation.","lastModifiedDate":"2024-04-12"},{"lineNumber":222,"author":{"gitId":"syj02"},"content":"- Showing the **latest** object added to PulsePilot, which is used for the `latest` command implementation.","lastModifiedDate":"2024-04-12"},{"lineNumber":223,"author":{"gitId":"syj02"},"content":"- Showing the **history or list** of objects added to PulsePilot, which is used for the `history` command implementation.","lastModifiedDate":"2024-04-13"},{"lineNumber":224,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":225,"author":{"gitId":"syj02"},"content":"The `clearHealthLists()` method is used to clear all the data stored within each `ArrayList`, which is mainly used for unit testing.","lastModifiedDate":"2024-04-10"},{"lineNumber":226,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":227,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":228,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":229,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":230,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":231,"author":{"gitId":"syj02"},"content":"#### BMI","lastModifiedDate":"2024-04-02"},{"lineNumber":232,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":233,"author":{"gitId":"syj02"},"content":"`Bmi` is a class that represents the Body Mass Index (BMI) calculated using the height and weight specified. It contains the following attributes:","lastModifiedDate":"2024-04-13"},{"lineNumber":234,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":235,"author":{"gitId":"syj02"},"content":"- `height`: The height of the user in metres represented as a `double`.","lastModifiedDate":"2024-04-10"},{"lineNumber":236,"author":{"gitId":"syj02"},"content":"- `weight`: The weight of the user in kilograms represented as a `double`.","lastModifiedDate":"2024-04-10"},{"lineNumber":237,"author":{"gitId":"syj02"},"content":"- `bmiValue`: The calculate BMI value of the user derived from the height and weight given, also represented as a `double`.","lastModifiedDate":"2024-04-10"},{"lineNumber":238,"author":{"gitId":"syj02"},"content":"- `bmiCategory`: The category that the BMI value of the user falls in (i.e. Underweight, Normal, Overweight, etc), represented as a `String`.","lastModifiedDate":"2024-04-10"},{"lineNumber":239,"author":{"gitId":"syj02"},"content":"- `date`: A `LocalDate` parameter representing the date of the recorded/added BMI value.","lastModifiedDate":"2024-04-10"},{"lineNumber":240,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":241,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":242,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":243,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":244,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":245,"author":{"gitId":"syj02"},"content":"#### Period","lastModifiedDate":"2024-04-02"},{"lineNumber":246,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":247,"author":{"gitId":"syj02"},"content":"`Period` is a class that represents the menstrual cycle of the user. It contains the following attributes:","lastModifiedDate":"2024-04-12"},{"lineNumber":248,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":249,"author":{"gitId":"syj02"},"content":"- `startDate`: The date of the first day of menstrual flow (aka period flow), which is also the first day of menstrual cycle, represented using a `LocalDate`.","lastModifiedDate":"2024-04-13"},{"lineNumber":250,"author":{"gitId":"syj02"},"content":"- `endDate`: The date of the last day of menstrual flow, represented using a `LocalDate`.","lastModifiedDate":"2024-04-13"},{"lineNumber":251,"author":{"gitId":"syj02"},"content":"- `periodLength`: The number of days of menstrual flow (i.e. between the first and last day of flow, inclusive of the first day), represented as `long`.","lastModifiedDate":"2024-04-10"},{"lineNumber":252,"author":{"gitId":"syj02"},"content":"- `cycleLength`: The number of days in a menstrual cycle (i.e. between the first and last day of the cycle, inclusive of the first day), represented as a `long`. The cycle ends on the day before the first day of the next menstrual flow/cycle.","lastModifiedDate":"2024-04-10"},{"lineNumber":253,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":254,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":255,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":256,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":257,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":258,"author":{"gitId":"syj02"},"content":"#### Appointment","lastModifiedDate":"2024-04-02"},{"lineNumber":259,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":260,"author":{"gitId":"syj02"},"content":"`Appointment` is a class that represents the past and upcoming medical appointments of the user. It contains the following attributes:","lastModifiedDate":"2024-04-12"},{"lineNumber":261,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":262,"author":{"gitId":"syj02"},"content":"- `date`: The date of the medical appointment, represented using a `LocalDate`.","lastModifiedDate":"2024-04-10"},{"lineNumber":263,"author":{"gitId":"syj02"},"content":"- `time`: The time of the medical appointment in 24-hour format, represented using a `LocalTime`.","lastModifiedDate":"2024-04-13"},{"lineNumber":264,"author":{"gitId":"syj02"},"content":"- `description`: The details of the appointment, which can include things like the healthcare professional to consult, the type of appointment such as consultation, checkup, rehabilitation, therapy etc. This parameter is represented as a `String`.","lastModifiedDate":"2024-04-12"},{"lineNumber":265,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":266,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":267,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":268,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":269,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"\u003c!-- @@author rouvinerh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"### Utility Package","lastModifiedDate":"2024-04-03"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"The `Utility` package includes classes and methods that handle exceptions, user input parsing, user input validation, and the various filter strings using enumerations.","lastModifiedDate":"2024-04-03"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"It consists of `CustomExceptions`, `Filters`, `Parser` and `Validation` classes, which are covered below.","lastModifiedDate":"2024-04-12"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"#### Parser","lastModifiedDate":"2024-04-02"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"The `Parser` class is responsible for splitting the user\u0027s input into lists of parameters.","lastModifiedDate":"2024-04-12"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"The input **must contain the flags required for each command**, else an exception will be thrown. The number of `/` characters is checked as well, as it can trigger errors. Afterwards, the split input is validated using methods within the `Validated` class as `String[]` variables.","lastModifiedDate":"2024-04-12"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"#### Validation","lastModifiedDate":"2024-04-02"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"The `Validation` class is responsible for validating the user\u0027s split input. The split input comes from the `Parser` class in `String[]` variables.","lastModifiedDate":"2024-04-12"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"Each variable is then checked to ensure that it follows the format needed. This is done by ensuring there are no empty strings, whether it matches regex, etc. If not, the methods in this class throws exceptions.","lastModifiedDate":"2024-04-12"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"#### Custom Exceptions","lastModifiedDate":"2024-04-02"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"The `CustomExceptions` class inherits from the `Exception` class from Java. This class is in charge of printing formatted errors.","lastModifiedDate":"2024-04-12"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"The exceptions are further broken down into the following:","lastModifiedDate":"2024-04-07"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"- `OutOfBounds`: When an access with an illegal index is made.","lastModifiedDate":"2024-04-07"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"- `InvalidInput`: When user enters input that does not conform with required format or is malformed.","lastModifiedDate":"2024-04-07"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"- `FileReadError`: Unable to read the files for `Storage`.","lastModifiedDate":"2024-04-07"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"- `FileWriteError`: Unable to write files for `Storage`.","lastModifiedDate":"2024-04-07"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"- `FileCreateError`: Unable to create files for `Storage`.","lastModifiedDate":"2024-04-07"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"- `InsufficientInput`: When not enough parameters or blank parameters for a command are detected.","lastModifiedDate":"2024-04-12"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"#### Filters","lastModifiedDate":"2024-04-02"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"The `Filters` class contains all the filter strings for different use cases, such as when adding a workout or viewing the history.","lastModifiedDate":"2024-04-07"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"This is represented as enumerations. Attempts to use an invalid filter results in `IllegalArgumentException` being thrown.","lastModifiedDate":"2024-04-07"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":329,"author":{"gitId":"L5-Z"},"content":"\u003c!-- @@author L5-Z --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":330,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":331,"author":{"gitId":"L5-Z"},"content":"### Storage Package","lastModifiedDate":"2024-04-03"},{"lineNumber":332,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":333,"author":{"gitId":"L5-Z"},"content":"`Storage` contains `DataFile` and `LogFile`. This component handles all logging of commands used and writing of data stored within PulsePilot to an external data file. The reading of the data file is also done here, allowing PulsePilot to resume a previous saved state.","lastModifiedDate":"2024-04-12"},{"lineNumber":334,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":335,"author":{"gitId":"L5-Z"},"content":"- `DataFile` is responsible for the writing of data to `pulsepilot_data.txt`, and generating the hash for it in `pulsepilot_hash.txt`. It also checks whether the data has been tampered with or files are missing, and creates or deletes files if needed.","lastModifiedDate":"2024-04-09"},{"lineNumber":336,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":337,"author":{"gitId":"L5-Z"},"content":"- `LogFile` writes the logs to `pulsepilot_log.txt`, tracking each command and error thrown.","lastModifiedDate":"2024-04-09"},{"lineNumber":338,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":339,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":340,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":341,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":342,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":343,"author":{"gitId":"L5-Z"},"content":"### Constants Package","lastModifiedDate":"2024-04-03"},{"lineNumber":344,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":345,"author":{"gitId":"L5-Z"},"content":"This package contains all the different constants used throughout PulsePilot to prevent the usage of magic strings and numbers.","lastModifiedDate":"2024-04-14"},{"lineNumber":346,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":347,"author":{"gitId":"L5-Z"},"content":"The constants are broken down into the following 4 classes:","lastModifiedDate":"2024-04-07"},{"lineNumber":348,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":349,"author":{"gitId":"L5-Z"},"content":"- `HealthConstant`: All constant strings and numbers related to all `Health` commands and methods.","lastModifiedDate":"2024-04-07"},{"lineNumber":350,"author":{"gitId":"L5-Z"},"content":"- `WorkoutConstant`: All constant strings and numbers related to all `Workout` commands and methods.","lastModifiedDate":"2024-04-07"},{"lineNumber":351,"author":{"gitId":"L5-Z"},"content":"- `ErrorConstant`: All strings used when exceptions are thrown.","lastModifiedDate":"2024-04-07"},{"lineNumber":352,"author":{"gitId":"L5-Z"},"content":"- `UiConstant`: All other constants and numbers that are not within the above three classes, such as file names, flags, and other general purpose constants.","lastModifiedDate":"2024-04-07"},{"lineNumber":353,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":354,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":355,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":356,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":357,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"\u003c!-- @@author rouvinerh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"## Commands and Implementation","lastModifiedDate":"2024-04-03"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"**NOTE**: Not every single line of code is explained here, as any developer can read the source code to find out all the specifics. This helps to keep the guide shorter and easier to read.","lastModifiedDate":"2024-04-12"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"* [Workout](#workout)","lastModifiedDate":"2024-04-02"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"    * [Add Run](#add-run)","lastModifiedDate":"2024-04-02"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"    * [Add Gym](#add-gym)","lastModifiedDate":"2024-04-02"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"* [Health](#health)","lastModifiedDate":"2024-04-02"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"    * [Add BMI](#add-bmi)","lastModifiedDate":"2024-04-02"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"    * [Add Period](#add-period)","lastModifiedDate":"2024-04-10"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"    * [Make Period Prediction](#make-period-prediction)","lastModifiedDate":"2024-04-03"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"    * [Add Appointment](#add-appointment)","lastModifiedDate":"2024-04-10"},{"lineNumber":372,"author":{"gitId":"rouvinerh"},"content":"* [View History](#view-history)","lastModifiedDate":"2024-04-02"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"* [View Latest](#view-latest)","lastModifiedDate":"2024-04-02"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"* [Delete Item](#delete-item)","lastModifiedDate":"2024-04-02"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"* [Storage of Data](#storage-of-data)","lastModifiedDate":"2024-04-02"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"### Workout","lastModifiedDate":"2024-04-02"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"User input is passed to `Handler.processInput()`, which determines the command used is `workout`. The input is then passed to `Handler.handleWorkout()` as shown in the `Handler` architecture above. Either a `Run` or `Gym` object is then added.","lastModifiedDate":"2024-04-12"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"#### Add Run","lastModifiedDate":"2024-04-02"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"The user\u0027s input is processed to add a run as follows:","lastModifiedDate":"2024-04-09"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"1. `handler.handleWorkout()` determines the type of workout to add is `run`, and calls the `parser.parseRunInput()` method to process the user\u0027s run input.","lastModifiedDate":"2024-04-12"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"2. `parser.parseRunInput()` splits the input using `parser.splitRunInput()` using the flags, returning a `String[]` variable.","lastModifiedDate":"2024-04-12"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"    - Method also extracts the optional `date` parameter if present.","lastModifiedDate":"2024-04-12"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"3. `validation.validateRunInput()` is called to validate each parameter. If no exceptions caused by invalid parameters are thrown, the validated parameters are used to create the new `Run` object.","lastModifiedDate":"2024-04-12"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"4. The `Run` constructor checks whether the distance given and pace calculated is within the valid range. If not, it throws an exception.","lastModifiedDate":"2024-04-13"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"5. Afterwards, the `Workout` constructor is implicitly called since `Run` inherits from `Workout`. `workout.addIntoWorkoutList()` is called, which calls `workoutLists.addRun()` to add the `Run`.  ","lastModifiedDate":"2024-04-13"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"5. The new `Run` object is then passed to `output.printAddRun()` and a message acknowledging the successful adding is printed to the screen.","lastModifiedDate":"2024-04-13"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"An overloaded `Run` and `Workout` constructor is used to allow for `date` to be optional. ","lastModifiedDate":"2024-04-13"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"This is the sequence diagram for adding a run:","lastModifiedDate":"2024-04-12"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"[Run Sequence Diagram](img/sequence_diagrams/run_sequence_diagram.png)","lastModifiedDate":"2024-04-13"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":406,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":407,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":408,"author":{"gitId":"JustinSoh"},"content":"\u003c!-- @@author JustinSoh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":409,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":410,"author":{"gitId":"JustinSoh"},"content":"#### Add Gym","lastModifiedDate":"2024-04-02"},{"lineNumber":411,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":412,"author":{"gitId":"JustinSoh"},"content":"The user\u0027s input is processed to add a gym is as follows:","lastModifiedDate":"2024-04-09"},{"lineNumber":413,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":414,"author":{"gitId":"JustinSoh"},"content":"1. `handler.handleWorkout()` determines the type of workout which is `gym`, and calls the `parser.parseGymInput()` method to process the user\u0027s gym input.","lastModifiedDate":"2024-04-12"},{"lineNumber":415,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":416,"author":{"gitId":"JustinSoh"},"content":"2. `parser.parseGymInput()` splits the input using `parser.splitGymInput()` using the flags, returning a `String[]` variable.","lastModifiedDate":"2024-04-12"},{"lineNumber":417,"author":{"gitId":"JustinSoh"},"content":"    - Method also extracts the optional `date` parameter if present.","lastModifiedDate":"2024-04-12"},{"lineNumber":418,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":419,"author":{"gitId":"JustinSoh"},"content":"3. `validation.validateGymInput()` is called to validate each parameter. If no exceptions caused by invalid parameters are thrown, the validated parameters are used to create the new `Gym` object.","lastModifiedDate":"2024-04-12"},{"lineNumber":420,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":421,"author":{"gitId":"JustinSoh"},"content":"4. The `Gym` constructor adds the newly created object into `workoutList.WORKOUTS` and `workoutList.GYMS` via `addWorkout()` and `addGym()`.  ","lastModifiedDate":"2024-04-12"},{"lineNumber":422,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":423,"author":{"gitId":"JustinSoh"},"content":"5. Afterwards, `parseGymStationInput()` is called to retrieve input for each gym station.","lastModifiedDate":"2024-04-09"},{"lineNumber":424,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":425,"author":{"gitId":"JustinSoh"},"content":"This is the sequence diagram for adding a `Gym` thus far:","lastModifiedDate":"2024-04-09"},{"lineNumber":426,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":427,"author":{"gitId":"JustinSoh"},"content":"![Gym Sequence Diagram](img/sequence_diagrams/gym_overall_sequence_diagram.png)","lastModifiedDate":"2024-04-09"},{"lineNumber":428,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":429,"author":{"gitId":"JustinSoh"},"content":"##### Add Gym Station","lastModifiedDate":"2024-04-09"},{"lineNumber":430,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":431,"author":{"gitId":"JustinSoh"},"content":"After adding a `Gym` object, the user is then prompted for input for the gym station. The gym station input is processed as follows:","lastModifiedDate":"2024-04-12"},{"lineNumber":432,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":433,"author":{"gitId":"JustinSoh"},"content":"1. `parser.parseGymStationInput()` is called, which starts a loop that iterates `NUMBER_OF_STATION` times, adding a `GymStation` object each time.","lastModifiedDate":"2024-04-12"},{"lineNumber":434,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":435,"author":{"gitId":"JustinSoh"},"content":"2. `output.printGymStationPrompt()` is used to print the prompt for the user, and user input is retrieved.","lastModifiedDate":"2024-04-12"},{"lineNumber":436,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":437,"author":{"gitId":"JustinSoh"},"content":"3. User input is split using `Parser.splitGymStationInput()` which as the name suggests, splits the parameters from the user, returning a `String[]` variable.","lastModifiedDate":"2024-04-13"},{"lineNumber":438,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":439,"author":{"gitId":"JustinSoh"},"content":"4. After splitting the input, the parameters are passed to  to `newGym.addStation()`. ","lastModifiedDate":"2024-04-13"},{"lineNumber":440,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":441,"author":{"gitId":"JustinSoh"},"content":"5. `newGym.addStation()` will then create a `GymStation` object during which the input is checked within the `GymStation` object. ","lastModifiedDate":"2024-04-13"},{"lineNumber":442,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":443,"author":{"gitId":"JustinSoh"},"content":"6. If the values are valid, the `GymStation` object is appended to an `ArrayList\u003cGymStation\u003e` stored in the `newGym` object. ","lastModifiedDate":"2024-04-13"},{"lineNumber":444,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":445,"author":{"gitId":"JustinSoh"},"content":"7. Steps 2 to 6 repeats until all stations have been added.","lastModifiedDate":"2024-04-13"},{"lineNumber":446,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":447,"author":{"gitId":"JustinSoh"},"content":"8. The final `Gym` object is passed to `output.printAddGym()` and a message acknowledging the successful adding is printed to the screen.","lastModifiedDate":"2024-04-13"},{"lineNumber":448,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":449,"author":{"gitId":"JustinSoh"},"content":"This is the sequence diagram for adding a `GymStation` object:","lastModifiedDate":"2024-04-09"},{"lineNumber":450,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":451,"author":{"gitId":"JustinSoh"},"content":"![Gym Station Sequence](img/sequence_diagrams/gym_station_sequence_diagram.png)","lastModifiedDate":"2024-04-09"},{"lineNumber":452,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":453,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":454,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":455,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-04"},{"lineNumber":456,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":457,"author":{"gitId":"j013n3"},"content":"\u003c!-- @@author j013n3 --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":458,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":459,"author":{"gitId":"j013n3"},"content":"### Health","lastModifiedDate":"2024-04-02"},{"lineNumber":460,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":461,"author":{"gitId":"j013n3"},"content":"User input is passed to `handler.processInput()`, which determines the command used is `health`. The input is then passed to `handler.handleHealth()` as shown in the Handler architecture above. Either `Bmi`, `Period` or `Appointment` object is added, or a menstrual cycle prediction is made.","lastModifiedDate":"2024-04-12"},{"lineNumber":462,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":463,"author":{"gitId":"j013n3"},"content":"#### Add BMI","lastModifiedDate":"2024-04-10"},{"lineNumber":464,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":465,"author":{"gitId":"j013n3"},"content":"The user\u0027s input is processed to add a `Bmi` as follows:","lastModifiedDate":"2024-04-12"},{"lineNumber":466,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":467,"author":{"gitId":"j013n3"},"content":"1. `handler.handleHealth()` determines the type of health to add is `bmi`, and calls the `parser.parseBmiInput()` method to process the user\u0027s BMI input.","lastModifiedDate":"2024-04-13"},{"lineNumber":468,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":469,"author":{"gitId":"j013n3"},"content":"2. `parser.parseBmiInput()` splits the input using `parser.splitBmiInput()` using the flags, returning a `String[]` variable.","lastModifiedDate":"2024-04-12"},{"lineNumber":470,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":471,"author":{"gitId":"j013n3"},"content":"3. `validation.validateBmiInput()` is called to validate each parameter. If no exceptions caused by invalid parameters are thrown, the validated parameters are used to create the new `Bmi` object.","lastModifiedDate":"2024-04-12"},{"lineNumber":472,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":473,"author":{"gitId":"j013n3"},"content":"4. The `Bmi` constructor adds the newly created object into `HealthList.BMIS` via `healthlist.addBMI()`. The BMI value and BMI category are determined from `Bmi.calculateBmiValue()` and `Bmi.getBmiCategory()` methods respectively and then stored.","lastModifiedDate":"2024-04-13"},{"lineNumber":474,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":475,"author":{"gitId":"j013n3"},"content":"5. The `Bmi` object is passed to `Output.printAddBmi()` and a message acknowledging the successful adding is printed to the screen.","lastModifiedDate":"2024-04-10"},{"lineNumber":476,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":477,"author":{"gitId":"j013n3"},"content":"This is the sequence diagram for adding a BMI entry:","lastModifiedDate":"2024-04-12"},{"lineNumber":478,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":479,"author":{"gitId":"j013n3"},"content":"![Bmi Sequence Diagram](img/sequence_diagrams/bmi_sequence.png)","lastModifiedDate":"2024-04-10"},{"lineNumber":480,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":481,"author":{"gitId":"j013n3"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":482,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":483,"author":{"gitId":"j013n3"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":484,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":485,"author":{"gitId":"j013n3"},"content":"#### Add Period","lastModifiedDate":"2024-04-10"},{"lineNumber":486,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":487,"author":{"gitId":"j013n3"},"content":"The user\u0027s input is processed to add a `Period` as follows:","lastModifiedDate":"2024-04-12"},{"lineNumber":488,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":489,"author":{"gitId":"j013n3"},"content":"1. `handler.handleHealth()` determines the type of health add is `period`, and calls the `parser.parsePeriodInput()` method to process the user\u0027s period input.","lastModifiedDate":"2024-04-13"},{"lineNumber":490,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":491,"author":{"gitId":"j013n3"},"content":"2. `parser.parsePeriodInput()` splits the input using `parser.splitPeriodInput()` using the flags, returning a `String[]` variable.","lastModifiedDate":"2024-04-12"},{"lineNumber":492,"author":{"gitId":"j013n3"},"content":"    - Method also extracts the optional end date parameter if present.","lastModifiedDate":"2024-04-12"},{"lineNumber":493,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":494,"author":{"gitId":"j013n3"},"content":"3. `validation.validatePeriodInput()` is called to validate each parameter. If no exceptions caused by invalid parameters are thrown, the validated parameters are used to create the new `Period` object.","lastModifiedDate":"2024-04-12"},{"lineNumber":495,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":496,"author":{"gitId":"j013n3"},"content":"4. If end date is absent, the `Period` constructor adds the newly created object into `healthlist.PERIODS`. Else, the static `HealthList.getPeriod()` method is called to retrieve the latest period input and update end date using `period.updateEndDate()` method.","lastModifiedDate":"2024-04-12"},{"lineNumber":497,"author":{"gitId":"j013n3"},"content":"   - If the size of `HealthList.PERIODS` is greater than `1`, `HealthList.PERIODS` will be iterated through to set cycle length using `period.setCycleLength()` method.","lastModifiedDate":"2024-04-12"},{"lineNumber":498,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":499,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":500,"author":{"gitId":"j013n3"},"content":"5. The `Period` object is passed to `output.printAddPeriod()` and a message acknowledging the successful adding is printed to the screen.","lastModifiedDate":"2024-04-12"},{"lineNumber":501,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":502,"author":{"gitId":"j013n3"},"content":"This is the sequence diagram for adding a period from `parser.parsePeriodInput()`:","lastModifiedDate":"2024-04-12"},{"lineNumber":503,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":504,"author":{"gitId":"j013n3"},"content":"![Period Sequence Diagram](img/sequence_diagrams/period_sequence.png)","lastModifiedDate":"2024-04-10"},{"lineNumber":505,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":506,"author":{"gitId":"j013n3"},"content":"![Set Cycle Length Diagram](img/sequence_diagrams/set_Cycle_Length.png)","lastModifiedDate":"2024-04-10"},{"lineNumber":507,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":508,"author":{"gitId":"j013n3"},"content":"##### Make Period Prediction","lastModifiedDate":"2024-04-10"},{"lineNumber":509,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":510,"author":{"gitId":"j013n3"},"content":"The user\u0027s input is processed to make a period prediction if there are **at least 4 `Period` objects recorded** as follows:","lastModifiedDate":"2024-04-12"},{"lineNumber":511,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":512,"author":{"gitId":"j013n3"},"content":"1. `handler.handleHealth()` determines the type of health which is `prediction`, and calls the `parser.parsePredictionInput()` method to process the user\u0027s prediction input.","lastModifiedDate":"2024-04-12"},{"lineNumber":513,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":514,"author":{"gitId":"j013n3"},"content":"2. If the size of `PeriodList` is larger or equals to 4, `printLatestThreeCycles()` is called to print the latest three cycles. Else, an exception is thrown.","lastModifiedDate":"2024-04-12"},{"lineNumber":515,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":516,"author":{"gitId":"j013n3"},"content":"3. `period.predictNextPeriodStartDate()` calls `period.nextCyclePrediction()` which further calls `period.getLastThreeCycleLengths()` to calculate the `sumOfCycleLengths` of latest three cycles. The `sumOfCycleLengths` is divided by `3` to find the average cycle length.","lastModifiedDate":"2024-04-13"},{"lineNumber":517,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":518,"author":{"gitId":"j013n3"},"content":"4. The static `Period.printNextCyclePrediction()` method prints the predicted start date to the screen.","lastModifiedDate":"2024-04-12"},{"lineNumber":519,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":520,"author":{"gitId":"j013n3"},"content":"![Period Prediction Sequence Diagram](img/sequence_diagrams/prediction_sequence_diagram.png)","lastModifiedDate":"2024-04-11"},{"lineNumber":521,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":522,"author":{"gitId":"j013n3"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":523,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":524,"author":{"gitId":"j013n3"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":525,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":526,"author":{"gitId":"j013n3"},"content":"#### Add Appointment","lastModifiedDate":"2024-04-03"},{"lineNumber":527,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":528,"author":{"gitId":"j013n3"},"content":"The user\u0027s input is processed to add an Appointment  as follows:","lastModifiedDate":"2024-04-11"},{"lineNumber":529,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":530,"author":{"gitId":"j013n3"},"content":"1. `handler.handleHealth()` determines the type of health which is `appointment`, and calls the `parser.parseAppointmentInput()` method to process the user\u0027s appointment input.","lastModifiedDate":"2024-04-13"},{"lineNumber":531,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":532,"author":{"gitId":"j013n3"},"content":"2. `parser.parseAppointmentInput()` splits the input using `parser.splitAppointmentDetails()` using the flags, returning a `String[]` variable.","lastModifiedDate":"2024-04-12"},{"lineNumber":533,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":534,"author":{"gitId":"j013n3"},"content":"3. `validation.validateAppointmentDetails()` is called to validate each parameter. If no exceptions caused by invalid parameters are thrown, the validated parameters are used to create the new `Appointment` object.","lastModifiedDate":"2024-04-12"},{"lineNumber":535,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":536,"author":{"gitId":"j013n3"},"content":"4. The `Appointment` constructor adds the newly created object into `HealthList.APPOINTMENTS` via `healthlist.addAppointment()`.","lastModifiedDate":"2024-04-12"},{"lineNumber":537,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":538,"author":{"gitId":"j013n3"},"content":"5. The new `Appointment` object is passed to `Output.printAddAppointment()` and a message acknowledging the successful adding is printed to the screen.","lastModifiedDate":"2024-04-12"},{"lineNumber":539,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":540,"author":{"gitId":"j013n3"},"content":"This is the sequence diagram for adding an Appointment from `parseAppointmentInput()`:","lastModifiedDate":"2024-04-11"},{"lineNumber":541,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":542,"author":{"gitId":"j013n3"},"content":"![Appointment Sequence Diagram](img/sequence_diagrams/appointment_sequence.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":543,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":544,"author":{"gitId":"j013n3"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":545,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":546,"author":{"gitId":"j013n3"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":547,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":548,"author":{"gitId":"JustinSoh"},"content":"\u003c!-- @@author JustinSoh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":549,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":550,"author":{"gitId":"JustinSoh"},"content":"### View History","lastModifiedDate":"2024-04-02"},{"lineNumber":551,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":552,"author":{"gitId":"JustinSoh"},"content":"1. User input is passed to `handler.processInput()`, which determines the command used is `history`, thus passing the user\u0027s input to `handler.handleHistory()`.","lastModifiedDate":"2024-04-12"},{"lineNumber":553,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":554,"author":{"gitId":"JustinSoh"},"content":"2. `handler.handleHistory()` uses `parser.parseHistory()` method to extract and validate the filter string entered via the `item` flag.","lastModifiedDate":"2024-04-12"},{"lineNumber":555,"author":{"gitId":"JustinSoh"},"content":"    - If the user input is valid, it will return the `filter` string.","lastModifiedDate":"2024-04-12"},{"lineNumber":556,"author":{"gitId":"JustinSoh"},"content":"    - Else, returns `null`.","lastModifiedDate":"2024-04-12"},{"lineNumber":557,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":558,"author":{"gitId":"JustinSoh"},"content":"3. `handler.handleHistory()` will then call `output.printHistory(filter)` which uses the `filter` string to determine which method to use, as shown below:","lastModifiedDate":"2024-04-12"},{"lineNumber":559,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":560,"author":{"gitId":"JustinSoh"},"content":"    - `workouts`: `output.printWorkoutHistory()`","lastModifiedDate":"2024-04-12"},{"lineNumber":561,"author":{"gitId":"JustinSoh"},"content":"    - `run`: `output.printRunHistory()`","lastModifiedDate":"2024-04-12"},{"lineNumber":562,"author":{"gitId":"JustinSoh"},"content":"    - `gym`: `output.printGymHistory()`","lastModifiedDate":"2024-04-12"},{"lineNumber":563,"author":{"gitId":"JustinSoh"},"content":"    - `bmi`: `output.printBmiHistory()`","lastModifiedDate":"2024-04-12"},{"lineNumber":564,"author":{"gitId":"JustinSoh"},"content":"    - `period`: `output.printPeriodHistory()`","lastModifiedDate":"2024-04-12"},{"lineNumber":565,"author":{"gitId":"JustinSoh"},"content":"    - `appointment`: `output.printAppointmentHistory()`","lastModifiedDate":"2024-04-12"},{"lineNumber":566,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":567,"author":{"gitId":"JustinSoh"},"content":"This is the sequence diagram for `history`:","lastModifiedDate":"2024-04-12"},{"lineNumber":568,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":569,"author":{"gitId":"JustinSoh"},"content":"![History Sequence Diagram](img/sequence_diagrams/history_sequence.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":570,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":571,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":572,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":573,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":574,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":575,"author":{"gitId":"JustinSoh"},"content":"### View Latest","lastModifiedDate":"2024-04-02"},{"lineNumber":576,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":577,"author":{"gitId":"JustinSoh"},"content":"1. User input is passed to `handler.processInput()`, which determines the command used is `latest`, thus passing the user\u0027s input to `handler.handleLatest()`.","lastModifiedDate":"2024-04-12"},{"lineNumber":578,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":579,"author":{"gitId":"JustinSoh"},"content":"2. `handler.handleLatest()` uses `parser.parseLatest()` method to extract and validate the filter string entered via the `item` flag.","lastModifiedDate":"2024-04-12"},{"lineNumber":580,"author":{"gitId":"JustinSoh"},"content":"    - If the user input is valid, it will return the `filter` string.","lastModifiedDate":"2024-04-12"},{"lineNumber":581,"author":{"gitId":"JustinSoh"},"content":"    - Else, returns `null`.","lastModifiedDate":"2024-04-12"},{"lineNumber":582,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":583,"author":{"gitId":"JustinSoh"},"content":"3. `handler.handleHistory()` will then call `output.printLatest(filter)` which uses the `filter` string to determine which method to use, as shown below:","lastModifiedDate":"2024-04-12"},{"lineNumber":584,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":585,"author":{"gitId":"JustinSoh"},"content":"    - `run`: `output.printLatestRun()`","lastModifiedDate":"2024-04-12"},{"lineNumber":586,"author":{"gitId":"JustinSoh"},"content":"    - `gym`: `output.printLatestGym()`","lastModifiedDate":"2024-04-12"},{"lineNumber":587,"author":{"gitId":"JustinSoh"},"content":"    - `bmi`: `output.printLatestBmi()`","lastModifiedDate":"2024-04-12"},{"lineNumber":588,"author":{"gitId":"JustinSoh"},"content":"    - `period`: `output.printLatestPeriod()`","lastModifiedDate":"2024-04-12"},{"lineNumber":589,"author":{"gitId":"JustinSoh"},"content":"    - `appointment`: `output.printLatestAppointment()`","lastModifiedDate":"2024-04-12"},{"lineNumber":590,"author":{"gitId":"JustinSoh"},"content":"    ","lastModifiedDate":"2024-04-10"},{"lineNumber":591,"author":{"gitId":"JustinSoh"},"content":"This is the sequence diagram for `latest`:","lastModifiedDate":"2024-04-12"},{"lineNumber":592,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":593,"author":{"gitId":"JustinSoh"},"content":"![Latest Sequence Diagram](img/sequence_diagrams/latest_sequence.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":594,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":595,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":596,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":597,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":598,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":599,"author":{"gitId":"rouvinerh"},"content":"\u003c!-- @@author rouvinerh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":600,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":601,"author":{"gitId":"rouvinerh"},"content":"### Delete Item","lastModifiedDate":"2024-04-02"},{"lineNumber":602,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":603,"author":{"gitId":"rouvinerh"},"content":"Deleting an item follows this sequence:","lastModifiedDate":"2024-04-11"},{"lineNumber":604,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":605,"author":{"gitId":"rouvinerh"},"content":"1. User input is passed to `handler.processInput()`, determining that the command used is `delete`, thus passing the user\u0027s input to `handler.handleDelete()`.","lastModifiedDate":"2024-04-12"},{"lineNumber":606,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":607,"author":{"gitId":"rouvinerh"},"content":"2. User input is passed to `parser.parseDeleteInput()`, and the input is split by `Parser.splitDeleteInput()` using the flags, returning a `String[] deleteDetails` variable containing the `filter` string and `index` integer for the item to delete.","lastModifiedDate":"2024-04-12"},{"lineNumber":608,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":609,"author":{"gitId":"rouvinerh"},"content":"3. Split `deleteDetails` are passed to `validation.validateDeleteInput()`. If no exceptions caused by invalid parameters are thrown, `String[] validDeleteDetails` is returned.","lastModifiedDate":"2024-04-12"},{"lineNumber":610,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":611,"author":{"gitId":"rouvinerh"},"content":"4. `validDeleteDetails` is passed back to `Handler`, which calls the respective `deleteItem()` method from either `HealthList` or `WorkoutList` depending on the details passed. ","lastModifiedDate":"2024-04-11"},{"lineNumber":612,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":613,"author":{"gitId":"rouvinerh"},"content":"    - `run`: `WorkoutList.deleteRun()`","lastModifiedDate":"2024-04-12"},{"lineNumber":614,"author":{"gitId":"rouvinerh"},"content":"    - `gym`: `WorkoutList.deleteGym()`","lastModifiedDate":"2024-04-12"},{"lineNumber":615,"author":{"gitId":"rouvinerh"},"content":"    - `bmi`: `HealthList.deleteBmi()`","lastModifiedDate":"2024-04-12"},{"lineNumber":616,"author":{"gitId":"rouvinerh"},"content":"    - `period`: `HealthList.deletePeriod()`","lastModifiedDate":"2024-04-13"},{"lineNumber":617,"author":{"gitId":"rouvinerh"},"content":"    - `appointment`: `Healthlist.deleteAppointment()`","lastModifiedDate":"2024-04-13"},{"lineNumber":618,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":619,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":620,"author":{"gitId":"rouvinerh"},"content":"![Delete Sequence](img/sequence_diagrams/delete_sequence.png)","lastModifiedDate":"2024-04-11"},{"lineNumber":621,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":622,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":623,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":624,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":625,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":626,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":627,"author":{"gitId":"L5-Z"},"content":"\u003c!-- @@author L5-Z --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":628,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":629,"author":{"gitId":"L5-Z"},"content":"### Storage of Data","lastModifiedDate":"2024-04-02"},{"lineNumber":630,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":631,"author":{"gitId":"L5-Z"},"content":"The storage is split into `DataFile` for the reading and saving of user data, and `LogFile` for writing logs. `DataFile` is covered here, since the storing and reading of user data is more important to a developer.","lastModifiedDate":"2024-04-11"},{"lineNumber":632,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":633,"author":{"gitId":"L5-Z"},"content":"#### Saving Data","lastModifiedDate":"2024-04-11"},{"lineNumber":634,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":635,"author":{"gitId":"L5-Z"},"content":"Saving of data happens only when the `exit` command is used:","lastModifiedDate":"2024-04-11"},{"lineNumber":636,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":637,"author":{"gitId":"L5-Z"},"content":"1. Upon `exit`, `handler.terminateBot()` is called, which calls `dataFile.saveDataFile()`.","lastModifiedDate":"2024-04-12"},{"lineNumber":638,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":639,"author":{"gitId":"L5-Z"},"content":"2. The name of the user, health data and workout data are written to `pulsepilot_data.txt` via `dataFile.writeName()`, `dataFile.writeHealthData()` and `dataFile.writeWorkoutData()`.","lastModifiedDate":"2024-04-12"},{"lineNumber":640,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":641,"author":{"gitId":"L5-Z"},"content":"3. To prevent tampering of the file, the SHA-256 hash of the data file is calculated via `dataFile.generateFileHash()` and written to `pulsepilot_hash.txt` via `writeHashToFile()`.","lastModifiedDate":"2024-04-12"},{"lineNumber":642,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":643,"author":{"gitId":"L5-Z"},"content":"![Storage Sequence](img/sequence_diagrams/storage_sequence.png)","lastModifiedDate":"2024-04-11"},{"lineNumber":644,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":645,"author":{"gitId":"L5-Z"},"content":"#### Reading Data","lastModifiedDate":"2024-04-11"},{"lineNumber":646,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":647,"author":{"gitId":"L5-Z"},"content":"The reading of files has been implemented as follows:","lastModifiedDate":"2024-04-11"},{"lineNumber":648,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":649,"author":{"gitId":"L5-Z"},"content":"1. The file hash from `pulsepilot_hash.txt` is read, and the SHA-256 hash of `pulsepilot_data.txt` is calculated.","lastModifiedDate":"2024-04-11"},{"lineNumber":650,"author":{"gitId":"L5-Z"},"content":"    - If the hashes do not match, the files have been tampered with. The data and hash file are deleted (if present), and PulsePilot exits.","lastModifiedDate":"2024-04-12"},{"lineNumber":651,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":652,"author":{"gitId":"L5-Z"},"content":"2. The first line is read and split to get the user\u0027s name.","lastModifiedDate":"2024-04-11"},{"lineNumber":653,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":654,"author":{"gitId":"L5-Z"},"content":"3. Subsequent lines contain the health and workout data stored, which is split and added to `HealthList` and `WorkoutList` respectively.","lastModifiedDate":"2024-04-11"},{"lineNumber":655,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":656,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":657,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":658,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":659,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":660,"author":{"gitId":"JustinSoh"},"content":"\u003c!-- @@author JustinSoh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":661,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":662,"author":{"gitId":"JustinSoh"},"content":"## Appendix: Requirements","lastModifiedDate":"2024-04-02"},{"lineNumber":663,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":664,"author":{"gitId":"JustinSoh"},"content":"* [Product Scope](#product-scope)","lastModifiedDate":"2024-04-02"},{"lineNumber":665,"author":{"gitId":"JustinSoh"},"content":"    * [Target User Profile](#target-user-profile)","lastModifiedDate":"2024-04-02"},{"lineNumber":666,"author":{"gitId":"JustinSoh"},"content":"    * [Value Proposition](#value-proposition)","lastModifiedDate":"2024-04-02"},{"lineNumber":667,"author":{"gitId":"JustinSoh"},"content":"* [User Stores](#user-stories)","lastModifiedDate":"2024-04-02"},{"lineNumber":668,"author":{"gitId":"JustinSoh"},"content":"* [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2024-04-02"},{"lineNumber":669,"author":{"gitId":"JustinSoh"},"content":"* [Glossary](#glossary)","lastModifiedDate":"2024-04-02"},{"lineNumber":670,"author":{"gitId":"JustinSoh"},"content":"* [Manual Testing](#manual-testing)","lastModifiedDate":"2024-04-09"},{"lineNumber":671,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":672,"author":{"gitId":"JustinSoh"},"content":"### Product scope","lastModifiedDate":"2024-04-02"},{"lineNumber":673,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":674,"author":{"gitId":"JustinSoh"},"content":"#### Target user profile","lastModifiedDate":"2024-04-02"},{"lineNumber":675,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":676,"author":{"gitId":"JustinSoh"},"content":"PulsePilot is built for both patients and healthcare professionals.","lastModifiedDate":"2024-04-09"},{"lineNumber":677,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":678,"author":{"gitId":"JustinSoh"},"content":"- Patients can upload data related to their well-being via the health tracker and progress on recovery exercises through the workout tracker.","lastModifiedDate":"2024-04-09"},{"lineNumber":679,"author":{"gitId":"JustinSoh"},"content":"- Healthcare professionals can use PulsePilot to easily monitor their patient\u0027s recovery progress and general well-being outside of the hospital using the storage features the app provides.","lastModifiedDate":"2024-04-12"},{"lineNumber":680,"author":{"gitId":"JustinSoh"},"content":"- For users that are familiar with the CLI and can type fast.","lastModifiedDate":"2024-04-09"},{"lineNumber":681,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":682,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":683,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":684,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":685,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":686,"author":{"gitId":"JustinSoh"},"content":"#### Value proposition","lastModifiedDate":"2024-04-02"},{"lineNumber":687,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":688,"author":{"gitId":"JustinSoh"},"content":"PulsePilot is a health monitoring application designed to bridge the information gap between medical professionals and patients during outpatient recovery.","lastModifiedDate":"2024-04-12"},{"lineNumber":689,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":690,"author":{"gitId":"JustinSoh"},"content":"PulsePilot offers outpatients the capability to input and track a range of workouts for fitness or rehabilitation purposes, alongside crucial health parameters such as BMI and menstrual cycles. There is also a medical appointment tracker to monitor past and upcoming appointments.","lastModifiedDate":"2024-04-12"},{"lineNumber":691,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":692,"author":{"gitId":"JustinSoh"},"content":"Simultaneously, PulsePilot facilitates access to this vital data for various healthcare professionals, ensuring comprehensive and seamless support in guiding outpatient recovery processes.","lastModifiedDate":"2024-04-03"},{"lineNumber":693,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":694,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":695,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":696,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":697,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":698,"author":{"gitId":"JustinSoh"},"content":"### User Stories","lastModifiedDate":"2024-04-02"},{"lineNumber":699,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":700,"author":{"gitId":"JustinSoh"},"content":"| Version | As a ...              | So that I can ...                                     | I want to ...                         |","lastModifiedDate":"2024-04-03"},{"lineNumber":701,"author":{"gitId":"JustinSoh"},"content":"|---------|-----------------------|-------------------------------------------------------|---------------------------------------|","lastModifiedDate":"2024-04-03"},{"lineNumber":702,"author":{"gitId":"JustinSoh"},"content":"| 1.0     | Gym enthusiast        | Track my progress in the gym                                 | Record my gym session details                    |","lastModifiedDate":"2024-04-12"},{"lineNumber":703,"author":{"gitId":"JustinSoh"},"content":"| 1.0     | Runner                | See my relative speed for each run                    | See my running pace                   |","lastModifiedDate":"2024-04-12"},{"lineNumber":704,"author":{"gitId":"JustinSoh"},"content":"| 1.0     | Runner                | Track my running progress over time                   | Record my runs                           |","lastModifiedDate":"2024-04-12"},{"lineNumber":705,"author":{"gitId":"JustinSoh"},"content":"| 1.0     | Health conscious user | Track change in my weight over time                   | Calculate my BMI                      |","lastModifiedDate":"2024-04-12"},{"lineNumber":706,"author":{"gitId":"JustinSoh"},"content":"| 1.0     | Female user           | Monitor any deviations from my normal menstrual cycle | Track my menstrual cycle              |","lastModifiedDate":"2024-04-12"},{"lineNumber":707,"author":{"gitId":"JustinSoh"},"content":"| 2.0     | Runner                | Quickly view my most recent run details               | See my latest run                     |","lastModifiedDate":"2024-04-12"},{"lineNumber":708,"author":{"gitId":"JustinSoh"},"content":"| 2.0     | Gym enthusiast        | Quickly view my most recent gym session               | See my latest gym session             |","lastModifiedDate":"2024-04-12"},{"lineNumber":709,"author":{"gitId":"JustinSoh"},"content":"| 2.0     | Gym enthusiast        | Accurately track my progress and strength gains       | Enter varying weights for sets        |","lastModifiedDate":"2024-04-12"},{"lineNumber":710,"author":{"gitId":"JustinSoh"},"content":"| 2.0     | Female user           | Plan ahead and better manage my health                | Predict my next period start date |","lastModifiedDate":"2024-04-12"},{"lineNumber":711,"author":{"gitId":"JustinSoh"},"content":"| 2.0     | Injured user          | Remember the appointments I have                      | Track my medical appointments         |","lastModifiedDate":"2024-04-12"},{"lineNumber":712,"author":{"gitId":"JustinSoh"},"content":"| 2.0     | Careless user          | Remove erroneous entries caused by typos                      | Be able to delete items tracked         |","lastModifiedDate":"2024-04-12"},{"lineNumber":713,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":714,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":715,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":716,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":717,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":718,"author":{"gitId":"JustinSoh"},"content":"### Non-Functional Requirements","lastModifiedDate":"2024-04-02"},{"lineNumber":719,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":720,"author":{"gitId":"JustinSoh"},"content":"- **Usability**: The application should have a user-friendly command-line interface with clear instructions and prompts for user input.","lastModifiedDate":"2024-04-03"},{"lineNumber":721,"author":{"gitId":"JustinSoh"},"content":"- **Reliability**: The application should handle invalid or incomplete user input gracefully, providing appropriate error messages and prompting the user for correct input.","lastModifiedDate":"2024-04-03"},{"lineNumber":722,"author":{"gitId":"JustinSoh"},"content":"- **Maintainability**: The codebase should follow best practices for Object-Oriented Programming, including proper separation of concerns, modularization, and code documentation.","lastModifiedDate":"2024-04-03"},{"lineNumber":723,"author":{"gitId":"JustinSoh"},"content":"- **Testability**: The application should have comprehensive unit tests and integration tests to ensure correct functionality.","lastModifiedDate":"2024-04-12"},{"lineNumber":724,"author":{"gitId":"JustinSoh"},"content":"- **Data Integrity**: The application checks whether the data file has been tampered with, and deletes or creates files as needed.","lastModifiedDate":"2024-04-12"},{"lineNumber":725,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":726,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":727,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":728,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":729,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":730,"author":{"gitId":"JustinSoh"},"content":"### Glossary","lastModifiedDate":"2024-04-02"},{"lineNumber":731,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":732,"author":{"gitId":"JustinSoh"},"content":"| Term    | Explanation                                                                                                                                              |","lastModifiedDate":"2024-04-12"},{"lineNumber":733,"author":{"gitId":"JustinSoh"},"content":"|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-04-12"},{"lineNumber":734,"author":{"gitId":"JustinSoh"},"content":"| Flags    | The strings used by PulsePilot to differentiate parameters. For example, `/date:` is the date flag, used to specify the date for a given command. |","lastModifiedDate":"2024-04-12"},{"lineNumber":735,"author":{"gitId":"JustinSoh"},"content":"| UI  | The User Interface (UI), which is the point of contact between users and our application. This component handles the user input, and prints messages or errors.                                                  |","lastModifiedDate":"2024-04-12"},{"lineNumber":736,"author":{"gitId":"JustinSoh"},"content":"| Storage | Responsible for saving data, and reading the data file to resume a previous save state. For our application, this also involves checking the integrity of the file and throwing errors if needed.                                                                     |","lastModifiedDate":"2024-04-12"},{"lineNumber":737,"author":{"gitId":"JustinSoh"},"content":"| Lock File | A `.lck` file, created to prevent multiple processes or users from accessing a file.                                                                      |","lastModifiedDate":"2024-04-12"},{"lineNumber":738,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":739,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":740,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":741,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":742,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":743,"author":{"gitId":"rouvinerh"},"content":"\u003c!-- @@author rouvinerh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":744,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":745,"author":{"gitId":"rouvinerh"},"content":"### Manual Testing","lastModifiedDate":"2024-04-09"},{"lineNumber":746,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":747,"author":{"gitId":"rouvinerh"},"content":"* [Launching and Termination](#launching-and-termination)","lastModifiedDate":"2024-04-10"},{"lineNumber":748,"author":{"gitId":"rouvinerh"},"content":"    * [Launching](#launching)","lastModifiedDate":"2024-04-10"},{"lineNumber":749,"author":{"gitId":"rouvinerh"},"content":"* [Run](#run-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":750,"author":{"gitId":"rouvinerh"},"content":"* [Gym](#gym-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":751,"author":{"gitId":"rouvinerh"},"content":"* [Period](#period-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":752,"author":{"gitId":"rouvinerh"},"content":"* [Prediction](#prediction-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":753,"author":{"gitId":"rouvinerh"},"content":"* [BMI](#bmi-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":754,"author":{"gitId":"rouvinerh"},"content":"* [Appointment](#appointment-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":755,"author":{"gitId":"rouvinerh"},"content":"* [History](#history-testing)","lastModifiedDate":"2024-04-10"},{"lineNumber":756,"author":{"gitId":"rouvinerh"},"content":"* [Latest](#latest-testing)","lastModifiedDate":"2024-04-10"},{"lineNumber":757,"author":{"gitId":"rouvinerh"},"content":"* [Delete](#delete-testing)","lastModifiedDate":"2024-04-10"},{"lineNumber":758,"author":{"gitId":"rouvinerh"},"content":"* [Storage](#storage-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":759,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":760,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":761,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":762,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":763,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":764,"author":{"gitId":"rouvinerh"},"content":"#### Launching and Termination","lastModifiedDate":"2024-04-10"},{"lineNumber":765,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":766,"author":{"gitId":"rouvinerh"},"content":"##### Launching","lastModifiedDate":"2024-04-10"},{"lineNumber":767,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":768,"author":{"gitId":"rouvinerh"},"content":"1. Ensure that you have Java 11 installed.","lastModifiedDate":"2024-04-12"},{"lineNumber":769,"author":{"gitId":"rouvinerh"},"content":"2. Download the latest `pulsepilot.jar` from [here](https://github.com/AY2324S2-CS2113T-T09-4/tp/releases/tag/v2.1).","lastModifiedDate":"2024-04-10"},{"lineNumber":770,"author":{"gitId":"rouvinerh"},"content":"3. Copy the file to the folder you want to use as the home folder for PulsePilot.","lastModifiedDate":"2024-04-10"},{"lineNumber":771,"author":{"gitId":"rouvinerh"},"content":"4. Open a command terminal (either `cmd.exe` or `bash`);","lastModifiedDate":"2024-04-10"},{"lineNumber":772,"author":{"gitId":"rouvinerh"},"content":"     - `cd` to the folder with `pulsepilot.jar` in it.","lastModifiedDate":"2024-04-10"},{"lineNumber":773,"author":{"gitId":"rouvinerh"},"content":"     -  Run `java -jar pulsepilot.jar`.","lastModifiedDate":"2024-04-10"},{"lineNumber":774,"author":{"gitId":"rouvinerh"},"content":"5. The application will display a welcome message if started successfully. ","lastModifiedDate":"2024-04-10"},{"lineNumber":775,"author":{"gitId":"rouvinerh"},"content":"6. `pulsepilot_log.txt`, `pulsepilot_data.txt` and `pulsepilot_log.txt.lck` will be created.","lastModifiedDate":"2024-04-10"},{"lineNumber":776,"author":{"gitId":"rouvinerh"},"content":"    - The `.lck` file is known as a Lock File, covered the [glossary](#glossary).","lastModifiedDate":"2024-04-12"},{"lineNumber":777,"author":{"gitId":"rouvinerh"},"content":"7. Bot will begin with user induction to retrieve the username as shown below:","lastModifiedDate":"2024-04-10"},{"lineNumber":778,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":779,"author":{"gitId":"rouvinerh"},"content":"![Opening Prompt from PulsePilot](img/output/start_prompt.png)","lastModifiedDate":"2024-04-10"},{"lineNumber":780,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":781,"author":{"gitId":"rouvinerh"},"content":"##### Termination","lastModifiedDate":"2024-04-10"},{"lineNumber":782,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":783,"author":{"gitId":"rouvinerh"},"content":"1. Exit PulsePilot using the `exit` command.","lastModifiedDate":"2024-04-12"},{"lineNumber":784,"author":{"gitId":"rouvinerh"},"content":"2. A farewell message is printed as follows:","lastModifiedDate":"2024-04-10"},{"lineNumber":785,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":786,"author":{"gitId":"rouvinerh"},"content":"![Shutdown](img/output/shutdown.png)","lastModifiedDate":"2024-04-10"},{"lineNumber":787,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":788,"author":{"gitId":"rouvinerh"},"content":"3. `pulsepilot_hash.txt` is created upon `exit`, and `pulsepilot_data.txt` will be written to. The `.lck` file from start up will be deleted as well.","lastModifiedDate":"2024-04-10"},{"lineNumber":789,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":790,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":791,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":792,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":793,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":794,"author":{"gitId":"rouvinerh"},"content":"#### Run Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":795,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":796,"author":{"gitId":"rouvinerh"},"content":"**Adding a run:**","lastModifiedDate":"2024-04-10"},{"lineNumber":797,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":798,"author":{"gitId":"rouvinerh"},"content":"1. Test Case: `workout /e:run /d:5.15 /t:25:00`","lastModifiedDate":"2024-04-10"},{"lineNumber":799,"author":{"gitId":"rouvinerh"},"content":"    **Expected Result**: Run added. Successful adding message is printed.","lastModifiedDate":"2024-04-10"},{"lineNumber":800,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":801,"author":{"gitId":"rouvinerh"},"content":"2. Test Case: `workout /e:run /d:15.15 /t:01:25:00 /date:25-02-2024`","lastModifiedDate":"2024-04-10"},{"lineNumber":802,"author":{"gitId":"rouvinerh"},"content":"    **Expected Result**: Run added. Successful adding message is printed.","lastModifiedDate":"2024-04-10"},{"lineNumber":803,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":804,"author":{"gitId":"rouvinerh"},"content":"3. Test Case: `workout /e:run /d:25.00 /t:00:25:00`","lastModifiedDate":"2024-04-10"},{"lineNumber":805,"author":{"gitId":"rouvinerh"},"content":"    **Expected Result**: Run not added. Error message asking user to use `MM:SS` as hours cannot be `00` is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":806,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":807,"author":{"gitId":"rouvinerh"},"content":"4. Test Case: `workout /e:run /d:30.00 /t:28:00`","lastModifiedDate":"2024-04-10"},{"lineNumber":808,"author":{"gitId":"rouvinerh"},"content":"    **Expected Result**: Run not added. Error message stating that pace cannot be faster than `1.00/km` is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":809,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":810,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":811,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":812,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":813,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":814,"author":{"gitId":"JustinSoh"},"content":"\u003c!-- @@author JustinSoh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":815,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":816,"author":{"gitId":"JustinSoh"},"content":"#### Gym Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":817,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":818,"author":{"gitId":"JustinSoh"},"content":"**Adding a gym:**","lastModifiedDate":"2024-04-10"},{"lineNumber":819,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":820,"author":{"gitId":"JustinSoh"},"content":"1. Test Case:","lastModifiedDate":"2024-04-10"},{"lineNumber":821,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":822,"author":{"gitId":"JustinSoh"},"content":"This test case for gym has **multiple lines of input**.","lastModifiedDate":"2024-04-10"},{"lineNumber":823,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":824,"author":{"gitId":"JustinSoh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":825,"author":{"gitId":"JustinSoh"},"content":"workout /e:gym /n:1","lastModifiedDate":"2024-04-10"},{"lineNumber":826,"author":{"gitId":"JustinSoh"},"content":"bench press /s:2 /r:4 /w:10,20","lastModifiedDate":"2024-04-10"},{"lineNumber":827,"author":{"gitId":"JustinSoh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":828,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":829,"author":{"gitId":"JustinSoh"},"content":"**Expected Result**: Gym added successfully. Successful adding message is printed.","lastModifiedDate":"2024-04-10"},{"lineNumber":830,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":831,"author":{"gitId":"JustinSoh"},"content":"2. Test Case: `workout /e:gym /n:0`","lastModifiedDate":"2024-04-10"},{"lineNumber":832,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":833,"author":{"gitId":"JustinSoh"},"content":"    **Expected Result**: Gym not added. Error message stating that number of sets cannot be 0 is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":834,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":835,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":836,"author":{"gitId":"JustinSoh"},"content":"3. Test Case:","lastModifiedDate":"2024-04-10"},{"lineNumber":837,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":838,"author":{"gitId":"JustinSoh"},"content":"This test case for gym has **multiple lines of input**.","lastModifiedDate":"2024-04-10"},{"lineNumber":839,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":840,"author":{"gitId":"JustinSoh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":841,"author":{"gitId":"JustinSoh"},"content":"workout /e:gym /n:2","lastModifiedDate":"2024-04-10"},{"lineNumber":842,"author":{"gitId":"JustinSoh"},"content":"bench press /s:1 /r:4 /w:10","lastModifiedDate":"2024-04-10"},{"lineNumber":843,"author":{"gitId":"JustinSoh"},"content":"smith\u0027s press /s:1 /r:4 /w:10","lastModifiedDate":"2024-04-10"},{"lineNumber":844,"author":{"gitId":"JustinSoh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":845,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":846,"author":{"gitId":"JustinSoh"},"content":"**Expected Result**: Gym not added. Error message stating that gym station name can only have letters, and gym station prompt for station 2 is printed again.","lastModifiedDate":"2024-04-10"},{"lineNumber":847,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":848,"author":{"gitId":"JustinSoh"},"content":"4. Test Case:","lastModifiedDate":"2024-04-10"},{"lineNumber":849,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":850,"author":{"gitId":"JustinSoh"},"content":"This test case for gym has **multiple lines of input**.","lastModifiedDate":"2024-04-10"},{"lineNumber":851,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":852,"author":{"gitId":"JustinSoh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":853,"author":{"gitId":"JustinSoh"},"content":"workout /e:gym /n:1","lastModifiedDate":"2024-04-10"},{"lineNumber":854,"author":{"gitId":"JustinSoh"},"content":"bench press /s:2 /r:4 /w:10","lastModifiedDate":"2024-04-10"},{"lineNumber":855,"author":{"gitId":"JustinSoh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":856,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":857,"author":{"gitId":"JustinSoh"},"content":"**Expected Result**: Gym not added. Error message stating that number of weight values must be the same as the number of sets is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":858,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":859,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-10"},{"lineNumber":860,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":861,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-10"},{"lineNumber":862,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":863,"author":{"gitId":"j013n3"},"content":"\u003c!-- @@author j013n3 --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":864,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":865,"author":{"gitId":"j013n3"},"content":"#### BMI Testing","lastModifiedDate":"2024-04-10"},{"lineNumber":866,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":867,"author":{"gitId":"j013n3"},"content":"**Adding a BMI:**","lastModifiedDate":"2024-04-10"},{"lineNumber":868,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":869,"author":{"gitId":"j013n3"},"content":"1. Test Case: `health /h:bmi /height:1.70 /weight:70.00 /date:29-04-2023`","lastModifiedDate":"2024-04-10"},{"lineNumber":870,"author":{"gitId":"j013n3"},"content":"    - **Expected Result**: BMI added successfully. Successful adding message is printed.","lastModifiedDate":"2024-04-10"},{"lineNumber":871,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":872,"author":{"gitId":"j013n3"},"content":"2. Test Case: `health /h:bmi /height:1.70 /weight:0.00 /date:29-04-2023`","lastModifiedDate":"2024-04-10"},{"lineNumber":873,"author":{"gitId":"j013n3"},"content":"    - **Expected Result**: BMI not added. Error message stating height and weight must be more than 0 is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":874,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":875,"author":{"gitId":"j013n3"},"content":"3. Test Case: `health /h:bmi /height:100.00 /weight:50.00 /date:29-04-2023`","lastModifiedDate":"2024-04-10"},{"lineNumber":876,"author":{"gitId":"j013n3"},"content":"    - **Expected Result**: BMI not added. Error message stating that the tallest human being ever was 2.72m and to specify a height less than 2.75m is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":877,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":878,"author":{"gitId":"j013n3"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":879,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":880,"author":{"gitId":"j013n3"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":881,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":882,"author":{"gitId":"j013n3"},"content":"#### Period Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":883,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":884,"author":{"gitId":"j013n3"},"content":"**Adding a Period:**","lastModifiedDate":"2024-04-10"},{"lineNumber":885,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":886,"author":{"gitId":"j013n3"},"content":"Note that PulsePilot\u0027s stored items are cleared after each test case for **period testing only**. This can be done using the `delete` command.","lastModifiedDate":"2024-04-12"},{"lineNumber":887,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":888,"author":{"gitId":"j013n3"},"content":"1. Test Case: `health /h:period /start:10-03-2024 /end:17-03-2024`","lastModifiedDate":"2024-04-10"},{"lineNumber":889,"author":{"gitId":"j013n3"},"content":"    **Expected Result**: Period is added. Successful adding message is printed. Notification that period length is out of healthy range is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":890,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":891,"author":{"gitId":"j013n3"},"content":"2. Test Case: `health /h:period /start:10-03-2024`","lastModifiedDate":"2024-04-10"},{"lineNumber":892,"author":{"gitId":"j013n3"},"content":"    **Expected Result**: Period is added. Successful adding message is printed with end date set to NA.","lastModifiedDate":"2024-04-10"},{"lineNumber":893,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":894,"author":{"gitId":"j013n3"},"content":"3. Test Case:","lastModifiedDate":"2024-04-10"},{"lineNumber":895,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":896,"author":{"gitId":"j013n3"},"content":"This test case for period has **multiple lines of input**.","lastModifiedDate":"2024-04-10"},{"lineNumber":897,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":898,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":899,"author":{"gitId":"j013n3"},"content":"health /h:period /start:10-03-2024","lastModifiedDate":"2024-04-10"},{"lineNumber":900,"author":{"gitId":"j013n3"},"content":"health /h:period /start:10-03-2024 /end:16-03-2024","lastModifiedDate":"2024-04-10"},{"lineNumber":901,"author":{"gitId":"j013n3"},"content":"health /h:period /start:10-04-2024 /end:16-04-2024","lastModifiedDate":"2024-04-10"},{"lineNumber":902,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":903,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":904,"author":{"gitId":"j013n3"},"content":"**Expected Result**: Only 1 Period is added, with successful message printing twice. Error message stating that date specified cannot be later than today\u0027s date is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":905,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":906,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":907,"author":{"gitId":"j013n3"},"content":"4. Test Case:","lastModifiedDate":"2024-04-10"},{"lineNumber":908,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":909,"author":{"gitId":"j013n3"},"content":"This test case for period has **multiple lines of input**.","lastModifiedDate":"2024-04-10"},{"lineNumber":910,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":911,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":912,"author":{"gitId":"j013n3"},"content":"health /h:period /start:10-03-2024","lastModifiedDate":"2024-04-10"},{"lineNumber":913,"author":{"gitId":"j013n3"},"content":"health /h:period /start:10-04-2024 /end:16-04-2024","lastModifiedDate":"2024-04-10"},{"lineNumber":914,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":915,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":916,"author":{"gitId":"j013n3"},"content":"**Expected Result**: 1 period is added, with successful message printing once. Second command causes an error message stating that either end date for previous period is still empty, or start dates of current period do not tally.","lastModifiedDate":"2024-04-10"},{"lineNumber":917,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":918,"author":{"gitId":"j013n3"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":919,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":920,"author":{"gitId":"j013n3"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":921,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":922,"author":{"gitId":"syj02"},"content":"\u003c!-- @@author syj02 --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":923,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":924,"author":{"gitId":"syj02"},"content":"#### Prediction Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":925,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":926,"author":{"gitId":"syj02"},"content":"**Checking prediction with 4 valid periods added:**","lastModifiedDate":"2024-04-10"},{"lineNumber":927,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":928,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":929,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":930,"author":{"gitId":"syj02"},"content":"1. Test Case:","lastModifiedDate":"2024-04-10"},{"lineNumber":931,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":932,"author":{"gitId":"syj02"},"content":"This test case for prediction has **multiple lines of input**.","lastModifiedDate":"2024-04-10"},{"lineNumber":933,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":934,"author":{"gitId":"syj02"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":935,"author":{"gitId":"syj02"},"content":"health /h:period /start:10-12-2023 /end:16-12-2023","lastModifiedDate":"2024-04-10"},{"lineNumber":936,"author":{"gitId":"syj02"},"content":"health /h:period /start:10-01-2024 /end:16-01-2024","lastModifiedDate":"2024-04-10"},{"lineNumber":937,"author":{"gitId":"syj02"},"content":"health /h:period /start:10-02-2024 /end:16-02-2024","lastModifiedDate":"2024-04-10"},{"lineNumber":938,"author":{"gitId":"syj02"},"content":"health /h:period /start:10-03-2024 /end:16-03-2024","lastModifiedDate":"2024-04-10"},{"lineNumber":939,"author":{"gitId":"syj02"},"content":"health /h:prediction","lastModifiedDate":"2024-04-10"},{"lineNumber":940,"author":{"gitId":"syj02"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":941,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":942,"author":{"gitId":"syj02"},"content":"**Expected Result**: Prediction successful. Last 3 periods and predicted start date is printed.","lastModifiedDate":"2024-04-10"},{"lineNumber":943,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":944,"author":{"gitId":"syj02"},"content":"**Checking prediction without 4 valid periods:**","lastModifiedDate":"2024-04-10"},{"lineNumber":945,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":946,"author":{"gitId":"syj02"},"content":"1. Test Case: `health /h:prediction`","lastModifiedDate":"2024-04-10"},{"lineNumber":947,"author":{"gitId":"syj02"},"content":"    **Expected Result**: Prediction not made. Error message stating that there are not enough period cycles recorded is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":948,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":949,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":950,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":951,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":952,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":953,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":954,"author":{"gitId":"syj02"},"content":"#### Appointment Testing","lastModifiedDate":"2024-04-10"},{"lineNumber":955,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":956,"author":{"gitId":"syj02"},"content":"Adding an appointment:","lastModifiedDate":"2024-04-10"},{"lineNumber":957,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":958,"author":{"gitId":"syj02"},"content":"1. Test Case: `health /h:appointment /date:19-03-2023 /description:surgery /time:19:00`","lastModifiedDate":"2024-04-10"},{"lineNumber":959,"author":{"gitId":"syj02"},"content":"    - **Expected Result**: Appointment added. Successful adding message is printed.","lastModifiedDate":"2024-04-10"},{"lineNumber":960,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":961,"author":{"gitId":"syj02"},"content":"2. Test Case `health /h:appointment /date:19-03-2023 /description:;;; /time:19:00`","lastModifiedDate":"2024-04-10"},{"lineNumber":962,"author":{"gitId":"syj02"},"content":"    - **Expected Result**: Appointment not added. Error stating that description can only contain alphanumeric characters, spaces, inverted commas and quotes is printed.","lastModifiedDate":"2024-04-10"},{"lineNumber":963,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":964,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":965,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":966,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":967,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":968,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":969,"author":{"gitId":"rouvinerh"},"content":"\u003c!-- @@author rouvinerh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":970,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":971,"author":{"gitId":"rouvinerh"},"content":"#### History Testing","lastModifiedDate":"2024-04-10"},{"lineNumber":972,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":973,"author":{"gitId":"rouvinerh"},"content":"Viewing History with 1 valid run and 1 valid gym:","lastModifiedDate":"2024-04-10"},{"lineNumber":974,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":975,"author":{"gitId":"rouvinerh"},"content":"1. Test Case: `history /item:workouts`","lastModifiedDate":"2024-04-10"},{"lineNumber":976,"author":{"gitId":"rouvinerh"},"content":"    - **Expected Result**: Run and Gym information is printed.","lastModifiedDate":"2024-04-10"},{"lineNumber":977,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":978,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":979,"author":{"gitId":"rouvinerh"},"content":"Viewing history with no valid objects:","lastModifiedDate":"2024-04-10"},{"lineNumber":980,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":981,"author":{"gitId":"rouvinerh"},"content":"1. Test Case: `history /item:appointment`","lastModifiedDate":"2024-04-10"},{"lineNumber":982,"author":{"gitId":"rouvinerh"},"content":"    - **Expected Result**: Error message stating that no appointments have been found is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":983,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":984,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-10"},{"lineNumber":985,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":986,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-10"},{"lineNumber":987,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":988,"author":{"gitId":"rouvinerh"},"content":"#### Latest Testing","lastModifiedDate":"2024-04-10"},{"lineNumber":989,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":990,"author":{"gitId":"rouvinerh"},"content":"**Viewing Latest with 1 valid BMI entry and 1 valid run:**","lastModifiedDate":"2024-04-10"},{"lineNumber":991,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":992,"author":{"gitId":"rouvinerh"},"content":"1. Test Case:","lastModifiedDate":"2024-04-10"},{"lineNumber":993,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":994,"author":{"gitId":"rouvinerh"},"content":"This test case for latest has **multiple lines of input**.","lastModifiedDate":"2024-04-10"},{"lineNumber":995,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":996,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":997,"author":{"gitId":"rouvinerh"},"content":"latest /item:run","lastModifiedDate":"2024-04-10"},{"lineNumber":998,"author":{"gitId":"rouvinerh"},"content":"latest /item:bmi","lastModifiedDate":"2024-04-10"},{"lineNumber":999,"author":{"gitId":"rouvinerh"},"content":"latest /item:appointment","lastModifiedDate":"2024-04-10"},{"lineNumber":1000,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":1001,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1002,"author":{"gitId":"rouvinerh"},"content":"**Expected Result**: Run and BMI printed normally. Error message stating that no appointments found is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":1003,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1004,"author":{"gitId":"rouvinerh"},"content":"**Viewing Latest with no invalid string:**","lastModifiedDate":"2024-04-10"},{"lineNumber":1005,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1006,"author":{"gitId":"rouvinerh"},"content":"1. Test Case: `latest /item:test`","lastModifiedDate":"2024-04-10"},{"lineNumber":1007,"author":{"gitId":"rouvinerh"},"content":"    - **Expected Result**: Error message stating that invalid item has been specified is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":1008,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1009,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-10"},{"lineNumber":1010,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1011,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-10"},{"lineNumber":1012,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1013,"author":{"gitId":"rouvinerh"},"content":"#### Delete Testing","lastModifiedDate":"2024-04-10"},{"lineNumber":1014,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1015,"author":{"gitId":"rouvinerh"},"content":"**Deleting a run:**","lastModifiedDate":"2024-04-10"},{"lineNumber":1016,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1017,"author":{"gitId":"rouvinerh"},"content":"1. Test Case:","lastModifiedDate":"2024-04-10"},{"lineNumber":1018,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1019,"author":{"gitId":"rouvinerh"},"content":"This test case for delete has **multiple lines of input**.","lastModifiedDate":"2024-04-10"},{"lineNumber":1020,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1021,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":1022,"author":{"gitId":"rouvinerh"},"content":"workout /e:run /d:5.15 /t:25:00","lastModifiedDate":"2024-04-10"},{"lineNumber":1023,"author":{"gitId":"rouvinerh"},"content":"delete /item:run /index:1","lastModifiedDate":"2024-04-10"},{"lineNumber":1024,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-04-10"},{"lineNumber":1025,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1026,"author":{"gitId":"rouvinerh"},"content":"**Expected Result**: Run is deleted and delete message is printed.","lastModifiedDate":"2024-04-10"},{"lineNumber":1027,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1028,"author":{"gitId":"rouvinerh"},"content":"**Deleting gym that does not exist:**","lastModifiedDate":"2024-04-10"},{"lineNumber":1029,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1030,"author":{"gitId":"rouvinerh"},"content":"1. Test Case: `delete /item:gym /index:1`","lastModifiedDate":"2024-04-10"},{"lineNumber":1031,"author":{"gitId":"rouvinerh"},"content":"    **Expected Result**: Error message stating invalid index to delete is printed in red.","lastModifiedDate":"2024-04-10"},{"lineNumber":1032,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1033,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":1034,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":1035,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":1036,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-07"},{"lineNumber":1037,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":1038,"author":{"gitId":"L5-Z"},"content":"\u003c!-- @@author L5-Z --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":1039,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":1040,"author":{"gitId":"L5-Z"},"content":"#### Storage Testing","lastModifiedDate":"2024-04-09"},{"lineNumber":1041,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":1042,"author":{"gitId":"L5-Z"},"content":"**PulsePilot placed in a directory where read and write permissions are given**:","lastModifiedDate":"2024-04-10"},{"lineNumber":1043,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1044,"author":{"gitId":"L5-Z"},"content":"1. Test Case: Launching for first time:","lastModifiedDate":"2024-04-10"},{"lineNumber":1045,"author":{"gitId":"L5-Z"},"content":"    **Expected Result**: Log file, log file lock and data file are created.","lastModifiedDate":"2024-04-10"},{"lineNumber":1046,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1047,"author":{"gitId":"L5-Z"},"content":"2. Test Case: Missing hash file:","lastModifiedDate":"2024-04-10"},{"lineNumber":1048,"author":{"gitId":"L5-Z"},"content":"    **Expected Result**: Error message stating key files for integrity are missing is printed in red, and bot exits.","lastModifiedDate":"2024-04-10"},{"lineNumber":1049,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1050,"author":{"gitId":"L5-Z"},"content":"3. Test Case: Data file not present but hash file present:","lastModifiedDate":"2024-04-10"},{"lineNumber":1051,"author":{"gitId":"L5-Z"},"content":"    **Expected Result**: Error message stating key files for integrity are missing is printed in red, and bot exits.","lastModifiedDate":"2024-04-10"},{"lineNumber":1052,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1053,"author":{"gitId":"L5-Z"},"content":"4. Test Case: Data file hash does not match hash in hash file:","lastModifiedDate":"2024-04-10"},{"lineNumber":1054,"author":{"gitId":"L5-Z"},"content":"    **Expected Result**: Error message stating data file integrity is compromised is printed in red, and bot exits.","lastModifiedDate":"2024-04-10"},{"lineNumber":1055,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1056,"author":{"gitId":"L5-Z"},"content":"**PulsePilot placed in a directory with no read or write permissions**:","lastModifiedDate":"2024-04-10"},{"lineNumber":1057,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1058,"author":{"gitId":"L5-Z"},"content":"1. Test Case: Launching PulsePilot:","lastModifiedDate":"2024-04-10"},{"lineNumber":1059,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1060,"author":{"gitId":"L5-Z"},"content":"    **Expected Result**: Error message stating that the application cannot read or write to the current directory is printed in red, and bot exits.","lastModifiedDate":"2024-04-10"},{"lineNumber":1061,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1062,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":1063,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":1064,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":1065,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-07"}],"authorContributionMap":{"j013n3":150,"JustinSoh":275,"rouvinerh":326,"L5-Z":131,"syj02":181,"-":2}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"# PulsePilot","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"PulsePilot is a **desktop app for tracking health-related information, optimised for users via a Command Line Interface (CLI)**. With the ability to type fast, users will be able to track their gym and run workouts, as well as their Body Mass Index (BMI), medical appointments and menstrual cycles. ","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"rouvinerh":2,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"![Logo](img/logo.jpg)","lastModifiedDate":"2024-04-08"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"\u003c!-- @@author L5-Z --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"## Introduction","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"**PulsePilot** is a desktop application designed for **efficiently tracking health-related information** through a **Command Line Interface (CLI)**. For users who can type quickly, the CLI allows for faster data entry compared to traditional Graphical User Interface (GUI) applications on phones or computers.","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"## Table of Contents","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"* [Quick Start](#quick-start)","lastModifiedDate":"2024-03-16"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"* [Notes About Command Format](#notes-about-command-format)","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"* [User Induction](#user-induction)","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"* [Commands](#commands)","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"  * [Workout: Run](#workout-run)","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"  * [Workout: Gym](#workout-gym)","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"    * [Adding Gym Stations](#adding-gym-stations)","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"  * [Health: BMI](#health-bmi)","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"  * [Health: Period](#health-period)","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"  * [Health: Prediction](#health-prediction)","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"  * [Health: Appointment](#health-appointment)","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"  * [History](#history)","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"  * [Latest](#latest)","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"  * [Delete](#delete)","lastModifiedDate":"2024-04-06"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"  * [Help](#help)","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"  * [Exit](#exit)","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"* [Logging](#logging)","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"* [Saving Data](#saving-data)","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"* [Known Issues](#known-issues)","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"* [Frequently Asked Questions (FAQ)](#faq)","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"* [Command Summary](#command-summary)","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"1. Ensure that you have the Java 11 installed.","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"2. Download the latest `pulsepilot.jar` from [here](https://github.com/AY2324S2-CS2113T-T09-4/tp/releases/tag/v2.1).","lastModifiedDate":"2024-04-09"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"3. Copy the file to the folder you want to use as the home folder for PulsePilot.","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"4. Open a command terminal (either `cmd.exe` or `bash`);","lastModifiedDate":"2024-04-09"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"     - `cd` to the folder with `pulsepilot.jar` in it.","lastModifiedDate":"2024-04-09"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"     -  Run `java -jar pulsepilot.jar`.","lastModifiedDate":"2024-04-09"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"5. The application will display a welcome message if started successfully.","lastModifiedDate":"2024-04-09"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"**The bot will prompt you for your name before starting.**","lastModifiedDate":"2024-04-09"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"![Opening Prompt from PulsePilot](img/output/start_prompt.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-09"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"## Notes About Command Format","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"* Parameters in `UPPER_CASE` are to be **supplied by the user**.","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"* Parameters in square brackets are **optional**.","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"  * `[/date:DATE]` means that the `DATE` parameter is **optional**.","lastModifiedDate":"2024-04-08"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"* If you are using a **PDF version of this document**, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2024-04-09"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"  * This can result in errors despite valid commands being used!","lastModifiedDate":"2024-04-08"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"\u003e ⚠️ PulsePilot commands are **not case-sensitive**. All commands are converted to upper case before being processed.","lastModifiedDate":"2024-04-09"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"\u003e ⚠️ The order of flags can be changed (for example, `/t: /d:` and `/d: /t:`) **unless mentioned otherwise**.","lastModifiedDate":"2024-04-09"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"\u003e ⚠️ Ensure that the syntax is **exactly the same** as provided in the user guide. Avoid using extra characters in the commands, such as blank space, newline, etc.","lastModifiedDate":"2024-04-09"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-09"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"## User Induction","lastModifiedDate":"2024-04-09"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"1. When you first run the PulsePilot application, the bot will prompt you to enter your `name` to create a new user profile.","lastModifiedDate":"2024-04-09"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"   - Your `name` can only contain **alphanumeric characters (letters and numbers) and spaces**.","lastModifiedDate":"2024-04-09"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"   \u003e ❗ **WARNING:** If you enter a name that does not follow this convention, the bot will display an error message and prompt you to try again.","lastModifiedDate":"2024-04-09"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"    ![Non-compliance of naming convention](img/output/wrong_username.png)","lastModifiedDate":"2024-04-09"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"2. After entering a valid `name`, the bot will create a new user profile associated with your `name`. ","lastModifiedDate":"2024-04-09"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"This profile will be used to store all your health and workout data. ","lastModifiedDate":"2024-04-09"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"3. Once your user profile is created, you can start using the various commands in PulsePilot to track your progress and health.","lastModifiedDate":"2024-04-09"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"   - You may enter commands after receiving this message prompt:","lastModifiedDate":"2024-04-09"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"     ","lastModifiedDate":"2024-04-09"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"      ![Accepting commands](img/output/accepting_commands.png)","lastModifiedDate":"2024-04-09"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"4. All your data will be saved and associated with your user profile","lastModifiedDate":"2024-04-09"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"   - You can continue tracking your information across multiple devices. Find out more [here](#faq).","lastModifiedDate":"2024-04-09"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-09"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-09"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"## Commands","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"\u003c!-- @@author rouvinerh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"### Workout: Run","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"Adds a new run session to track.","lastModifiedDate":"2024-04-09"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003eworkout /e:run /d:DISTANCE /t:TIME [/date:DATE]\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"* `DISTANCE` is a **2 decimal point positive number** (i.e. `15.24`) representing the distance ran in **kilometers**.","lastModifiedDate":"2024-04-06"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"* `TIME` is in `[HH]:MM:SS` format (i.e. `25:30`). The `HH` representing hours is **optional**.","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"* `DATE` is in `DD-MM-YYYY` format (i.e. `19-03-2024`). The date is **optional**, and if not specified, defaults to `NA`.","lastModifiedDate":"2024-04-08"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"\u003e ⚠️ If `HH` is set to `00`, the bot will throw an error. Please use `MM:SS` if the `HH` field is not needed!","lastModifiedDate":"2024-04-08"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"\u003e ⚠️ Date specified cannot be later than the current date!","lastModifiedDate":"2024-04-09"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"Examples:","lastModifiedDate":"2024-04-08"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"- \u003ccode style\u003d\"color: #D85D43;\"\u003eworkout /e:run /d:5.15 /t:25:03 /date:25-03-2023 \u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"- \u003ccode style\u003d\"color: #D85D43;\"\u003eworkout /e:run /d:5.15 /t:25:03\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"![Adding Runs](img/output/adding_runs.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"\u003e ⚠️ **Minimum and Maximum inputs:**","lastModifiedDate":"2024-04-09"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"\u003e Maximum Pace Value: 30:00/km, Minimum Pace Value: 1:00/km","lastModifiedDate":"2024-04-09"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"\u003e Maximum Run Time: 99:59:59, Minimum Run Time: 00:01","lastModifiedDate":"2024-04-08"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"\u003e Maximum Distance: 5000.00km, Minimum Distance: 0.01km","lastModifiedDate":"2024-04-09"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"\u003e ","lastModifiedDate":"2024-04-09"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"\u003e **Note that exceeding these bounds will trigger an error!**","lastModifiedDate":"2024-04-08"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-09"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"\u003c!-- @@author JustinSoh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"### Workout: Gym","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"Adds a new gym session to track.","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003eworkout /e:gym /n:NUMBER_OF_STATIONS [/date:DATE]\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"* `NUMBER_OF_STATIONS` is a **positive integer of at least 1** representing the number of stations for one Gym session.","lastModifiedDate":"2024-04-08"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"* `DATE` is in `DD-MM-YYYY` format (i.e. `19-03-2024`). The date is **optional**, and if not specified, defaults to `NA`.","lastModifiedDate":"2024-04-08"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"\u003e ⚠️ Date specified cannot be later than the current date!","lastModifiedDate":"2024-04-09"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"\u003e ⚠️ Please input positive integers for `NUMBER_OF_STATIONS` without leading zeros. Entering a number with a leading zero, such as `01`, will trigger an error.","lastModifiedDate":"2024-04-09"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"Examples: ","lastModifiedDate":"2024-04-08"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"- \u003ccode style\u003d\"color: #D85D43;\"\u003eworkout /e:gym /n:2 /date:25-03-2023\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"- \u003ccode style\u003d\"color: #D85D43;\"\u003eworkout /e:gym /n:4\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"#### Adding Gym Stations","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"Upon entry of the \u003ccode style\u003d\"color: #D85D43;\"\u003eworkout /e:gym\u003c/code\u003e command, the bot will prompt for further details for each station done:","lastModifiedDate":"2024-04-09"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003eSTATION_NAME /s:SET /r:REPS /w:WEIGHT\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"* `STATION_NAME` is a **string**  representing the name of the gym station.","lastModifiedDate":"2024-03-20"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"* `SET` is a **positive integer**  representing the number of sets done for one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"* `REPS` is a **positive integer**  representing the number of repetitions done per set for one station.","lastModifiedDate":"2024-04-13"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"* `WEIGHT` is a **list of positive numbers** separated by commas. It represents the weights used for all the sets in the station.","lastModifiedDate":"2024-04-08"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"\u003e ⚠️ `STATION_NAME` must always be the first parameter. The order of the other parameters can be in any order. `STATION_NAME` can **only contain letters and spaces**, and can be up to **25 characters long**.","lastModifiedDate":"2024-04-09"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"\u003e ⚠️ `WEIGHT` must be in **multiples of 0.125 KG**! This is because the minimum weight increment in a gym is 0.125kg. Example `bench press /s:2 /r:10 /w:10.333,12.5` is not valid as 10.333 is not a multiple of 0.125kg.","lastModifiedDate":"2024-04-09"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"\u003e ⚠️ Note that the **number of weights must equal to the number of sets**! For example, if you have done 2 sets at 10 kg, PulsePilot still expects 2 weights to be specified like this `squats /s:2 /r:5 /w:10,10`.","lastModifiedDate":"2024-04-13"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"\u003e ⚠️ Please input positive integers for `SETS` and `REPS` without leading zeros. Entering a number with a leading zero, such as `01`, will trigger an error.","lastModifiedDate":"2024-04-09"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"Examples:","lastModifiedDate":"2024-04-08"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"- \u003ccode style\u003d\"color: #D85D43;\"\u003ebench press /s:2 /r:4 /w:10,20\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"- \u003ccode style\u003d\"color: #D85D43;\"\u003esquat /r:2 /s:2 /w:10.5,20.5\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"![Adding Gyms](img/output/adding_gym.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"\u003e ⚠️ **Minimum and Maximum inputs:**","lastModifiedDate":"2024-04-12"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"\u003e Minimum number of stations: 1, Maximum number of stations: 50","lastModifiedDate":"2024-04-13"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"\u003e ","lastModifiedDate":"2024-04-13"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"\u003e **Note that exceeding these bounds will trigger an error!**","lastModifiedDate":"2024-04-12"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"If you want to exit the gym station input prompt and go back to the main menu to use other commands, use `back` to do so. PulsePilot will delete the latest gym added and you can then use the other commands.","lastModifiedDate":"2024-04-12"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"Expected Output:","lastModifiedDate":"2024-04-12"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"![Going Back](img/output/gym_station_back.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"\u003e ⚠️ **Minimum and Maximum inputs:**","lastModifiedDate":"2024-04-09"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"\u003e Minimum Weight: 0kg, Maximum Weight: 2850kg","lastModifiedDate":"2024-04-09"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"\u003e ","lastModifiedDate":"2024-04-09"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"\u003e 0kg is meant for **bodyweight exercises!**","lastModifiedDate":"2024-04-09"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"\u003e **Note that exceeding these bounds will trigger an error!**","lastModifiedDate":"2024-04-08"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"___","lastModifiedDate":"2024-04-04"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"\u003c!-- @@author j013n3 --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"### Health: BMI","lastModifiedDate":"2024-03-20"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"Calculates user\u0027s Body Mass Index (BMI) based on height and weight from user\u0027s input, and tracks it.","lastModifiedDate":"2024-04-09"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":206,"author":{"gitId":"j013n3"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":207,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":208,"author":{"gitId":"j013n3"},"content":"* `HEIGHT` is a **2 decimal point number in metres** (i.e. `1.71`) representing the user\u0027s height.","lastModifiedDate":"2024-03-20"},{"lineNumber":209,"author":{"gitId":"j013n3"},"content":"* `WEIGHT` is a **2 decimal point number in kilograms** (i.e. `60.50`) representing the user’s weight.","lastModifiedDate":"2024-03-20"},{"lineNumber":210,"author":{"gitId":"j013n3"},"content":"* `DATE` is in `DD-MM-YYYY` format (i.e. `19-03-2024`).","lastModifiedDate":"2024-03-19"},{"lineNumber":211,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":212,"author":{"gitId":"j013n3"},"content":"\u003e ⚠️ Date specified cannot be later than the current date!","lastModifiedDate":"2024-04-09"},{"lineNumber":213,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":214,"author":{"gitId":"j013n3"},"content":"Examples:","lastModifiedDate":"2024-03-19"},{"lineNumber":215,"author":{"gitId":"j013n3"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /h:bmi /height:1.70 /weight:75.42 /date:19-03-2024\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":216,"author":{"gitId":"j013n3"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /h:bmi /date:19-03-2024 /height:1.70 /weight:75.42\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":217,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":218,"author":{"gitId":"j013n3"},"content":"PulsePilot will categorize your BMI as follows:","lastModifiedDate":"2024-04-09"},{"lineNumber":219,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":220,"author":{"gitId":"j013n3"},"content":"- BMI \u003c 18.5 (less than 18.5): **Underweight**","lastModifiedDate":"2024-04-08"},{"lineNumber":221,"author":{"gitId":"j013n3"},"content":"- 18.5 \u003c\u003d BMI \u003c 25.0 (more than or equal to 18.5 and less than 25.0): **Normal**","lastModifiedDate":"2024-04-08"},{"lineNumber":222,"author":{"gitId":"j013n3"},"content":"- 25.0 \u003c\u003d BMI \u003c 30.0 (more than or equal to 25.0 and less than 30.0): **Overweight**","lastModifiedDate":"2024-04-08"},{"lineNumber":223,"author":{"gitId":"j013n3"},"content":"- 30.0 \u003c\u003d BMI \u003c 40.0 (more than or equal to 30.0 and less than 40.0): **Obese**","lastModifiedDate":"2024-04-08"},{"lineNumber":224,"author":{"gitId":"j013n3"},"content":"- BMI \u003e\u003d 40.0 (more than 40.0): **Severely Obese**","lastModifiedDate":"2024-04-08"},{"lineNumber":225,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":226,"author":{"gitId":"j013n3"},"content":"Expected Output:","lastModifiedDate":"2024-04-09"},{"lineNumber":227,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":228,"author":{"gitId":"j013n3"},"content":"![Adding BMI](img/output/adding_bmi.png)","lastModifiedDate":"2024-04-09"},{"lineNumber":229,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":230,"author":{"gitId":"j013n3"},"content":"\u003e ⚠️ **Minimum and Maximum inputs:**","lastModifiedDate":"2024-04-09"},{"lineNumber":231,"author":{"gitId":"j013n3"},"content":"\u003e Maximum Height: 2.75m, Minimum Height: 0.01m","lastModifiedDate":"2024-04-09"},{"lineNumber":232,"author":{"gitId":"j013n3"},"content":"\u003e Maximum Weight: 640.00kg, Minimum Weight: 0.01kg","lastModifiedDate":"2024-04-09"},{"lineNumber":233,"author":{"gitId":"j013n3"},"content":"\u003e ","lastModifiedDate":"2024-04-09"},{"lineNumber":234,"author":{"gitId":"j013n3"},"content":"\u003e **Note that exceeding these bounds will trigger an error!**","lastModifiedDate":"2024-04-08"},{"lineNumber":235,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":236,"author":{"gitId":"j013n3"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":237,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":238,"author":{"gitId":"j013n3"},"content":"___","lastModifiedDate":"2024-04-04"},{"lineNumber":239,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":240,"author":{"gitId":"j013n3"},"content":"### Health: Period","lastModifiedDate":"2024-03-20"},{"lineNumber":241,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":242,"author":{"gitId":"j013n3"},"content":"Tracks the start and end of user\u0027s menstrual cycle.","lastModifiedDate":"2024-03-19"},{"lineNumber":243,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":244,"author":{"gitId":"j013n3"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /h:period /start:START_DATE [/end:END_DATE]\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":245,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":246,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":247,"author":{"gitId":"j013n3"},"content":"* `START_DATE` is `DD-MM-YYYY` format (i.e. `19-03-2024`) representing the first day of period flow, which is also the first day of the cycle. ","lastModifiedDate":"2024-04-13"},{"lineNumber":248,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":249,"author":{"gitId":"j013n3"},"content":"* `END_DATE` is `DD-MM-YYYY` format (i.e. `19-03-2024`) representing the last day of period flow. This parameter is **optional** and can be added once the period flow ends. To add the end date, use the command with `START_DATE` being the corresponding start date and `END_DATE` being the end date to be added.","lastModifiedDate":"2024-04-13"},{"lineNumber":250,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":251,"author":{"gitId":"j013n3"},"content":"\u003e ⚠️ Both start and end dates specified cannot be later than the current date!","lastModifiedDate":"2024-04-13"},{"lineNumber":252,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":253,"author":{"gitId":"j013n3"},"content":"\u003e ⚠️ The start date of a new period entry must come after the end date of the previous period entry. ","lastModifiedDate":"2024-04-13"},{"lineNumber":254,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":255,"author":{"gitId":"j013n3"},"content":"\u003e ⚠️ An outstanding period entry must have an end date specified before a new entry can be added.","lastModifiedDate":"2024-04-09"},{"lineNumber":256,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":257,"author":{"gitId":"j013n3"},"content":"\u003e ⚠️ PulsePilot **does not** impose minimum or maximum length requirements for menstrual cycles, as underlying medical conditions can cause variations in cycle lengths.","lastModifiedDate":"2024-04-13"},{"lineNumber":258,"author":{"gitId":"j013n3"},"content":"\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":259,"author":{"gitId":"j013n3"},"content":"\u003e PulsePilot will only **notify** you if your cycle length is beyond the healthy range of **2 - 7 days**.","lastModifiedDate":"2024-04-13"},{"lineNumber":260,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":261,"author":{"gitId":"j013n3"},"content":"Examples:","lastModifiedDate":"2024-03-19"},{"lineNumber":262,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":263,"author":{"gitId":"j013n3"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /h:period /start:09-03-2022 /end:16-03-2022\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":264,"author":{"gitId":"j013n3"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /start:09-03-2022 /end:16-03-2022 /h:period\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":265,"author":{"gitId":"j013n3"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /h:period /start:09-03-2022\u003c/code\u003e","lastModifiedDate":"2024-04-09"},{"lineNumber":266,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":267,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":268,"author":{"gitId":"j013n3"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":269,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":270,"author":{"gitId":"j013n3"},"content":"![Adding Periods](img/output/adding_period.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":271,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":272,"author":{"gitId":"j013n3"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-09"},{"lineNumber":273,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":274,"author":{"gitId":"j013n3"},"content":"___","lastModifiedDate":"2024-04-09"},{"lineNumber":275,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":276,"author":{"gitId":"syj02"},"content":"\u003c!-- @@author syj02 --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":277,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":278,"author":{"gitId":"syj02"},"content":"### Health: Prediction","lastModifiedDate":"2024-04-08"},{"lineNumber":279,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":280,"author":{"gitId":"syj02"},"content":"Predicts user\u0027s next period start date.","lastModifiedDate":"2024-04-03"},{"lineNumber":281,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":282,"author":{"gitId":"syj02"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /h:prediction\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":283,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":284,"author":{"gitId":"syj02"},"content":"* There must be at least **4 periods** added before a prediction can be made.","lastModifiedDate":"2024-04-08"},{"lineNumber":285,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":286,"author":{"gitId":"syj02"},"content":"Expected Output:","lastModifiedDate":"2024-04-03"},{"lineNumber":287,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":288,"author":{"gitId":"syj02"},"content":"![Viewing Prediction](img/output/viewing_prediction.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":289,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":290,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-08"},{"lineNumber":291,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":292,"author":{"gitId":"syj02"},"content":"___","lastModifiedDate":"2024-04-04"},{"lineNumber":293,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":294,"author":{"gitId":"syj02"},"content":"### Health: Appointment","lastModifiedDate":"2024-04-03"},{"lineNumber":295,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":296,"author":{"gitId":"syj02"},"content":"Tracks both **previous and upcoming** medical appointments.","lastModifiedDate":"2024-04-09"},{"lineNumber":297,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":298,"author":{"gitId":"syj02"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /h:appointment /date:DATE /time:TIME /description:DESCRIPTION\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":299,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":300,"author":{"gitId":"syj02"},"content":"* `DATE` is a `DD-MM-YYYY` format (i.e. `03-04-2024`) representing the date of the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":301,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":302,"author":{"gitId":"syj02"},"content":"* `TIME` is a `HH:mm` format (i.e. `14:15`) representing the time of the appointment in 24-hour format.","lastModifiedDate":"2024-04-13"},{"lineNumber":303,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":304,"author":{"gitId":"syj02"},"content":"* `DESCRIPTION` is a string (i.e. `review checkup with surgeon`) representing the details of the appointment. The description can **only contain alphanumeric characters, spaces, inverted commas and quotes**.","lastModifiedDate":"2024-04-09"},{"lineNumber":305,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":306,"author":{"gitId":"syj02"},"content":"Examples:","lastModifiedDate":"2024-04-03"},{"lineNumber":307,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":308,"author":{"gitId":"syj02"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /h:appointment /date:03-04-2024 /time:14:15 /description:review checkup with surgeon\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":309,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":310,"author":{"gitId":"syj02"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003ehealth /date:03-04-2024 /description:review checkup with surgeon /time:14:15 /h:appointment\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":311,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":312,"author":{"gitId":"syj02"},"content":"Expected Output:","lastModifiedDate":"2024-04-03"},{"lineNumber":313,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":314,"author":{"gitId":"syj02"},"content":"![Adding Appointment](img/output/adding_appointment.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":315,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":316,"author":{"gitId":"syj02"},"content":"\u003e ⚠️ Any characters that are **NOT** mentioned above used in the description will trigger an error! Please only use the characters allowed.","lastModifiedDate":"2024-04-09"},{"lineNumber":317,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":318,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":319,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":320,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-04"},{"lineNumber":321,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"\u003c!-- @@author rouvinerh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"### History","lastModifiedDate":"2024-03-20"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"Prints all tracked instances of `run`, `gym`, `workouts`,  `bmi`, `period`, `appointment`.","lastModifiedDate":"2024-04-04"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003ehistory /item:TYPE\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"* `TYPE` is either `run`, `gym`, `workouts`, `bmi`, `period`, or `appointment`.","lastModifiedDate":"2024-04-13"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"  - `run` shows all entries of runs.","lastModifiedDate":"2024-04-08"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"  - `gym` shows all entries of gym.","lastModifiedDate":"2024-04-08"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"  - `workouts` shows all entries of gym and runs.","lastModifiedDate":"2024-04-08"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"  - `bmi` shows all BMI entries.","lastModifiedDate":"2024-04-08"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"  - `period` shows all Period entries.","lastModifiedDate":"2024-04-08"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"  - `appointment` shows all Appointment entries.","lastModifiedDate":"2024-04-13"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"\u003e 💡 `workouts` prints a summary of the `run` and `gym` objects. Full details can be viewed using `history /item:run/gym` respectively.","lastModifiedDate":"2024-04-09"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"Examples:","lastModifiedDate":"2024-03-20"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003ehistory /item:workouts\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003ehistory /item:appointment\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"![Viewing History](img/output/viewing_history.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"--- ","lastModifiedDate":"2024-04-04"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"### Latest","lastModifiedDate":"2024-03-20"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"Prints the **most recently added** instance of `run`, `gym`, `bmi`, `period`, `appointment`.","lastModifiedDate":"2024-04-09"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003elatest /item:TYPE\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"* `TYPE` is either `run`, `gym`, `bmi`, `period` or `appointment`.","lastModifiedDate":"2024-04-08"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"  - `run` shows the latest run","lastModifiedDate":"2024-04-04"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"  - `gym` shows the latest gym","lastModifiedDate":"2024-04-04"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"  - `bmi` shows the latest BMI","lastModifiedDate":"2024-04-11"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"  - `period` shows the latest Period","lastModifiedDate":"2024-04-04"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"  - `appointment` shows the latest Appointment, which returns the **largest** date and time sorted by their numerical values.","lastModifiedDate":"2024-04-11"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"Examples:","lastModifiedDate":"2024-03-20"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003elatest /item:appointment\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"![Viewing Latest](img/output/viewing_latest.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":372,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"--- ","lastModifiedDate":"2024-04-04"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"### Delete","lastModifiedDate":"2024-04-06"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"Delete a tracked item.","lastModifiedDate":"2024-04-09"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003edelete /item:TYPE /index:INDEX\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"* `TYPE` is either `run`, `gym`, `bmi`, `period` or `appointment`.","lastModifiedDate":"2024-04-08"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"* `INDEX` represents the index of the item to delete.","lastModifiedDate":"2024-04-06"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"\u003e ⚠️ Please input positive integers for `INDEX` without leading zeros. Entering a number with a leading zero, such as `01`, will trigger an error.","lastModifiedDate":"2024-04-09"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"\u003e ⚠️ The `INDEX` is based on the respective item lists. Use `history` to view the lists.","lastModifiedDate":"2024-04-09"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"Examples:","lastModifiedDate":"2024-04-08"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"* \u003ccode style\u003d\"color: #D85D43;\"\u003edelete /item:run /index:2\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"Expected output:","lastModifiedDate":"2024-04-06"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"![Deleting Object](img/output/deleting.png)","lastModifiedDate":"2024-04-09"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-08"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":401,"author":{"gitId":"L5-Z"},"content":"\u003c!-- @@author L5-Z --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":402,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":403,"author":{"gitId":"L5-Z"},"content":"### Help","lastModifiedDate":"2024-03-20"},{"lineNumber":404,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":405,"author":{"gitId":"L5-Z"},"content":"Prints the help message.","lastModifiedDate":"2024-04-08"},{"lineNumber":406,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":407,"author":{"gitId":"L5-Z"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003ehelp\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":408,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":409,"author":{"gitId":"L5-Z"},"content":"Expected output:","lastModifiedDate":"2024-03-20"},{"lineNumber":410,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":411,"author":{"gitId":"L5-Z"},"content":"![img.png](img/output/viewing_help.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":412,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":413,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":414,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":415,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-08"},{"lineNumber":416,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":417,"author":{"gitId":"L5-Z"},"content":"### Exit","lastModifiedDate":"2024-03-20"},{"lineNumber":418,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":419,"author":{"gitId":"L5-Z"},"content":"Exits the bot **and writes to data file**.","lastModifiedDate":"2024-04-07"},{"lineNumber":420,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":421,"author":{"gitId":"L5-Z"},"content":"Format: \u003ccode style\u003d\"color: #D85D43;\"\u003eexit\u003c/code\u003e","lastModifiedDate":"2024-04-08"},{"lineNumber":422,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":423,"author":{"gitId":"L5-Z"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":424,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":425,"author":{"gitId":"L5-Z"},"content":"![Exiting Bot](img/output/exit_bot.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":426,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":427,"author":{"gitId":"L5-Z"},"content":"\u003e ⚠️ Exiting the bot by closing the terminal or with \u003ckbd\u003eCtrl\u003c/kbd\u003e + \u003ckbd\u003eC\u003c/kbd\u003e  **will result in data being lost!**","lastModifiedDate":"2024-04-08"},{"lineNumber":428,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":429,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":430,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":431,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-08"},{"lineNumber":432,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":433,"author":{"gitId":"L5-Z"},"content":"## Logging","lastModifiedDate":"2024-03-20"},{"lineNumber":434,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":435,"author":{"gitId":"L5-Z"},"content":"When you exit PulsePilot, the latest logs are written to the `pulsepilot_log.txt` file.","lastModifiedDate":"2024-04-09"},{"lineNumber":436,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":437,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":438,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":439,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-09"},{"lineNumber":440,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":441,"author":{"gitId":"L5-Z"},"content":"## Saving Data","lastModifiedDate":"2024-03-20"},{"lineNumber":442,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":443,"author":{"gitId":"L5-Z"},"content":"Your data is saved to the `pulsepilot_data.txt` when you exit PulsePilot. Every time you exit the application via the `exit` command, `pulsepilot_data.txt` file is updated.","lastModifiedDate":"2024-04-09"},{"lineNumber":444,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":445,"author":{"gitId":"L5-Z"},"content":"\u003e ❗ **_WARNING_:** If the `pulsepilot_data.txt` file becomes corrupted, there is a very low chance of recovering the data.","lastModifiedDate":"2024-04-09"},{"lineNumber":446,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":447,"author":{"gitId":"L5-Z"},"content":"\u003e 💡 Ensure that you always have a _backup copy stored safely_ to prevent permanent data loss.","lastModifiedDate":"2024-04-09"},{"lineNumber":448,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":449,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":450,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":451,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-09"},{"lineNumber":452,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":453,"author":{"gitId":"L5-Z"},"content":"## Known Issues","lastModifiedDate":"2024-04-08"},{"lineNumber":454,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":455,"author":{"gitId":"L5-Z"},"content":"### Colours Not Rendering","lastModifiedDate":"2024-04-08"},{"lineNumber":456,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":457,"author":{"gitId":"L5-Z"},"content":"In some instances, the output from an error will result in odd characters being printed on screen:","lastModifiedDate":"2024-04-08"},{"lineNumber":458,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":459,"author":{"gitId":"L5-Z"},"content":"![Colour not rendering](img/output/colour_not_rendered.png)","lastModifiedDate":"2024-04-09"},{"lineNumber":460,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":461,"author":{"gitId":"L5-Z"},"content":"This color rendering issue is specific to Windows machines. The odd characters you see are actually escape sequences used to display color in the terminal. ","lastModifiedDate":"2024-04-09"},{"lineNumber":462,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":463,"author":{"gitId":"L5-Z"},"content":"Windows 10 terminals do not have this color rendering feature enabled by default, whereas Windows 11 terminals do, hence displaying the colors correctly.","lastModifiedDate":"2024-04-09"},{"lineNumber":464,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":465,"author":{"gitId":"L5-Z"},"content":"This is what the output is supposed to look like when the same command is used on a Windows 11 machine:","lastModifiedDate":"2024-04-08"},{"lineNumber":466,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":467,"author":{"gitId":"L5-Z"},"content":"![Colour Rendered](img/output/correct_colour_render.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":468,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":469,"author":{"gitId":"L5-Z"},"content":"This is a visual bug, and it can be safely ignored by the user.","lastModifiedDate":"2024-04-08"},{"lineNumber":470,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":471,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-09"},{"lineNumber":472,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":473,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-09"},{"lineNumber":474,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":475,"author":{"gitId":"L5-Z"},"content":"## FAQ","lastModifiedDate":"2020-05-24"},{"lineNumber":476,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":477,"author":{"gitId":"L5-Z"},"content":"**1.** How do I transfer my data to another computer?","lastModifiedDate":"2024-03-16"},{"lineNumber":478,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":479,"author":{"gitId":"L5-Z"},"content":"To transfer your data to another computer, make sure that `pulsepilot.jar` is placed in the **same folder** as `pulsepilot_data.txt` **and** `pulsepilot_hash.txt`. If done correctly, PulsePilot will recognize and synchronize your data.","lastModifiedDate":"2024-04-09"},{"lineNumber":480,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":481,"author":{"gitId":"L5-Z"},"content":"\u003e ⚠️ Create a _backup copy_ of both `pulsepilot_data.txt` and `pulsepilot_hash.txt` prior to file transfer to avoid data corruption.","lastModifiedDate":"2024-04-09"},{"lineNumber":482,"author":{"gitId":"L5-Z"},"content":"\u003e","lastModifiedDate":"2024-04-09"},{"lineNumber":483,"author":{"gitId":"L5-Z"},"content":"\u003e The _backup copies_ should be stored in a **separate** folder location from where the original `pulsepilot.jar` is saved.","lastModifiedDate":"2024-04-09"},{"lineNumber":484,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":485,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":486,"author":{"gitId":"L5-Z"},"content":"**2.** What happens if my data is corrupted or tampered with?","lastModifiedDate":"2024-04-07"},{"lineNumber":487,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":488,"author":{"gitId":"L5-Z"},"content":"\u003e ❗ **_WARNING_: DO NOT** tamper with either `pulsepilot_data.txt` or `pulsepilot_hash.txt` to prevent **permanent** and **unrecoverable** loss of data.","lastModifiedDate":"2024-04-08"},{"lineNumber":489,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":490,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":491,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":492,"author":{"gitId":"L5-Z"},"content":"You may experience 2 scenarios:","lastModifiedDate":"2024-04-07"},{"lineNumber":493,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":494,"author":{"gitId":"L5-Z"},"content":"- A data file content corruption:","lastModifiedDate":"2024-04-09"},{"lineNumber":495,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":496,"author":{"gitId":"L5-Z"},"content":"![Data Corruption](img/output/data_corruption.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":497,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":498,"author":{"gitId":"L5-Z"},"content":"Corruption of the `pulsepilot_data.txt` or `pulsepilot_hash.txt` files will result in **permanent and complete data loss**.","lastModifiedDate":"2024-04-09"},{"lineNumber":499,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":500,"author":{"gitId":"L5-Z"},"content":"- A missing file error:","lastModifiedDate":"2024-04-09"},{"lineNumber":501,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":502,"author":{"gitId":"L5-Z"},"content":"![Missing Files](img/output/missing_files.png)","lastModifiedDate":"2024-04-09"},{"lineNumber":503,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":504,"author":{"gitId":"L5-Z"},"content":"A missing file error occurs when either `pulsepilot_data.txt` or `pulsepilot_hash.txt` is missing when PulsePilot is run. For safety and security reasons, PulsePilot will automatically delete any remaining data files before exiting the application.","lastModifiedDate":"2024-04-09"},{"lineNumber":505,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":506,"author":{"gitId":"L5-Z"},"content":"**Both cases will inevitably result in permanent and complete data loss.**","lastModifiedDate":"2024-04-07"},{"lineNumber":507,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":508,"author":{"gitId":"L5-Z"},"content":"\u003e ❗ **DATA RECOVERY:** In both cases, you may want to recover data by utilising **both** your _backup_ copies of  `pulsepilot_data.txt` and `pulsepilot_hash.txt` to restore your data.","lastModifiedDate":"2024-04-09"},{"lineNumber":509,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":510,"author":{"gitId":"L5-Z"},"content":"Otherwise, if you have lost your data, you can reinitialize a new save file by running the command `java -jar pulsepilot.jar` again.","lastModifiedDate":"2024-04-09"},{"lineNumber":511,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":512,"author":{"gitId":"L5-Z"},"content":"**3.** Is my tracking data private and confidential?","lastModifiedDate":"2024-04-05"},{"lineNumber":513,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":514,"author":{"gitId":"L5-Z"},"content":"Yes, your data is secure and stored locally on your machine. PulsePilot does not have any features that would allow it to send your data elsewhere.","lastModifiedDate":"2024-04-05"},{"lineNumber":515,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":516,"author":{"gitId":"L5-Z"},"content":"**4.** What happens if I specify extra flags on accident?","lastModifiedDate":"2024-04-09"},{"lineNumber":517,"author":{"gitId":"L5-Z"},"content":"   ","lastModifiedDate":"2024-04-07"},{"lineNumber":518,"author":{"gitId":"L5-Z"},"content":"Note that if you add duplicate or extra flags, the bot **will read the first instance only**.","lastModifiedDate":"2024-04-07"},{"lineNumber":519,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":520,"author":{"gitId":"L5-Z"},"content":"**All other parameters will be ignored.**","lastModifiedDate":"2024-04-07"},{"lineNumber":521,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":522,"author":{"gitId":"L5-Z"},"content":"For example:","lastModifiedDate":"2024-04-07"},{"lineNumber":523,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":524,"author":{"gitId":"L5-Z"},"content":"```","lastModifiedDate":"2024-04-07"},{"lineNumber":525,"author":{"gitId":"L5-Z"},"content":"workout /e:run /d:5.25 /t:59:50 /d:10.55","lastModifiedDate":"2024-04-07"},{"lineNumber":526,"author":{"gitId":"L5-Z"},"content":"```","lastModifiedDate":"2024-04-07"},{"lineNumber":527,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":528,"author":{"gitId":"L5-Z"},"content":"In the above output, the bot will read `5.25` as the distance. The second `/d:10.55` is ignored.","lastModifiedDate":"2024-04-07"},{"lineNumber":529,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":530,"author":{"gitId":"L5-Z"},"content":"**5.** What if I keep receiving an error message even though my input seems to follow the instructions given in the user guide?","lastModifiedDate":"2024-04-09"},{"lineNumber":531,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":532,"author":{"gitId":"L5-Z"},"content":"Please ensure that you follow the command syntax given **exactly** in the user guide. Some examples of mistakes that could be easily overlooked:","lastModifiedDate":"2024-04-08"},{"lineNumber":533,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":534,"author":{"gitId":"L5-Z"},"content":"Example of the correct command:","lastModifiedDate":"2024-04-08"},{"lineNumber":535,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":536,"author":{"gitId":"L5-Z"},"content":"![correct_command.png](img/correct_command.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":537,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":538,"author":{"gitId":"L5-Z"},"content":"- Error of adding extra space(s) in fixed parameters:","lastModifiedDate":"2024-04-08"},{"lineNumber":539,"author":{"gitId":"L5-Z"},"content":"  - In this case, the altered fixed parameter is `/date:`, which was written as `/ date:` instead.","lastModifiedDate":"2024-04-09"},{"lineNumber":540,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":541,"author":{"gitId":"L5-Z"},"content":"![extra_space_error_command.png](img/extra_space_error_command.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":542,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":543,"author":{"gitId":"L5-Z"},"content":"- Error of adding extra newline(s) after command:","lastModifiedDate":"2024-04-08"},{"lineNumber":544,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":545,"author":{"gitId":"L5-Z"},"content":"![extra_newline_error_command.png](img/extra_newline_error_command.png)","lastModifiedDate":"2024-04-08"},{"lineNumber":546,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":547,"author":{"gitId":"L5-Z"},"content":"Avoid using extra characters in the commands, such as blank space, newline, etc.","lastModifiedDate":"2024-04-09"},{"lineNumber":548,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":549,"author":{"gitId":"L5-Z"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":550,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":551,"author":{"gitId":"L5-Z"},"content":"---","lastModifiedDate":"2024-04-09"},{"lineNumber":552,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":553,"author":{"gitId":"JustinSoh"},"content":"\u003c!-- @@author JustinSoh --\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":554,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":555,"author":{"gitId":"JustinSoh"},"content":"## Command Summary","lastModifiedDate":"2020-05-24"},{"lineNumber":556,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":557,"author":{"gitId":"JustinSoh"},"content":"| Action        | Format, Examples                                                                                                              |","lastModifiedDate":"2024-03-16"},{"lineNumber":558,"author":{"gitId":"JustinSoh"},"content":"|---------------|-------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-04-07"},{"lineNumber":559,"author":{"gitId":"JustinSoh"},"content":"| Print help    | `help`                                                                                                                        |","lastModifiedDate":"2024-03-20"},{"lineNumber":560,"author":{"gitId":"JustinSoh"},"content":"| Add Run   | `workout /e:run /d:DISTANCE /t:TIME [/date:DATE]` \u003cbr\u003e Example: `workout /e:run /d:5.24 /t:25:23 /date:19-03-2024`\u003c/br\u003e                 |","lastModifiedDate":"2024-04-09"},{"lineNumber":561,"author":{"gitId":"JustinSoh"},"content":"| Add Gym       | `workout /e:gym /n:NUMBER_OF_STATIONS [/date:DATE]` \u003cbr\u003e Example: `workout /e:gym /n:4`\u003c/br\u003e                                           |","lastModifiedDate":"2024-04-09"},{"lineNumber":562,"author":{"gitId":"JustinSoh"},"content":"| Add BMI     | `health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE` \u003cbr\u003e Example: `health /h:bmi /height:1.70 /weight:75.42 /date:19-03-2024`\u003c/br\u003e |","lastModifiedDate":"2024-04-09"},{"lineNumber":563,"author":{"gitId":"JustinSoh"},"content":"| Add Period  | `health /h:period /start:START_DATE [/end:END_DATE]` \u003cbr\u003e Example: `health /h:period /start:09-03-2024 /end:16-03-2024`\u003c/br\u003e            |","lastModifiedDate":"2024-04-09"},{"lineNumber":564,"author":{"gitId":"JustinSoh"},"content":"| Add Appointment  | `health /h:appointment /date:DATE /time:TIME /description:DESCRIPTION` \u003cbr\u003e Example: `health /h:appointment /date:29-04-2025 /time:12:00 /description:knee surgery` \u003c/br\u003e           |","lastModifiedDate":"2024-04-09"},{"lineNumber":565,"author":{"gitId":"JustinSoh"},"content":"| View history  | `history /item:TYPE` \u003cbr\u003e Example: `history /item:run` \u003c/br\u003e                                                                            |","lastModifiedDate":"2024-04-09"},{"lineNumber":566,"author":{"gitId":"JustinSoh"},"content":"| View latest   | `latest /item:TYPE` \u003cbr\u003e Example: `latest /item:bmi` \u003c/br\u003e                                                                               |","lastModifiedDate":"2024-04-09"},{"lineNumber":567,"author":{"gitId":"JustinSoh"},"content":"| Deleting item | `delete /item:TYPE /index:INDEX` \u003cbr\u003e Example: `delete /item:run /index:1`  \u003c/br\u003e                                                       |","lastModifiedDate":"2024-04-09"},{"lineNumber":568,"author":{"gitId":"JustinSoh"},"content":"| Exit bot      | `exit`                                                                                                                        |","lastModifiedDate":"2024-03-20"},{"lineNumber":569,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":570,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":571,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":572,"author":{"gitId":"JustinSoh"},"content":"---","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"j013n3":76,"JustinSoh":90,"rouvinerh":117,"L5-Z":241,"syj02":46,"-":2}},{"path":"docs/puml/architecture_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"skinparam componentStyle rectangle","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"actor User","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"component {","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"[UI]","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"[Utility]","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"[Health]","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"[Workout]","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"[PulsePilot]","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"[Storage]","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"[Constants]","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"User -d-\u003e [PulsePilot]","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"User -d-\u003e [UI]","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"[PulsePilot] -r-\u003e [UI]","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"[UI] -d-\u003e [Utility]","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"[UI] -d-\u003e [Health]","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"[UI] -d-\u003e [Workout]","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"[Utility] -l-\u003e [Health]","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"[Utility] -r-\u003e [Workout]","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"[Utility] -d-\u003e [Storage]","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"[Storage] .u.\u003e [Health]","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"[Storage] .u.\u003e [Workout]","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"[Storage] .u.\u003e [UI]","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"[Storage] .r.\u003e [Output File]","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"[Constants] -r[hidden]-\u003e [Storage]","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"rouvinerh":1,"syj02":34}},{"path":"docs/puml/class_diagrams/gym_class_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-07"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2024-04-07"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"hide circle ","lastModifiedDate":"2024-04-07"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"class GymStation {","lastModifiedDate":"2024-04-07"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"    # stationName: String","lastModifiedDate":"2024-04-07"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"    # sets: ArrayList\u003cGymSet\u003e","lastModifiedDate":"2024-04-07"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"    # numberOfSets: int","lastModifiedDate":"2024-04-07"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"    # GymStation(name: String, numberOfSet: int, numberOfRepetition: int,","lastModifiedDate":"2024-04-07"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    weightsList: ArrayList\u003cDouble\u003e)","lastModifiedDate":"2024-04-07"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    # getStationName(): String","lastModifiedDate":"2024-04-07"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"    # getSets(): ArrayList\u003cGymSet\u003e","lastModifiedDate":"2024-04-07"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    # getNumberOfSets(): int","lastModifiedDate":"2024-04-07"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-04-07"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"class GymSet {","lastModifiedDate":"2024-04-07"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    - weight: double","lastModifiedDate":"2024-04-07"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    - numberOfRepetitions: int","lastModifiedDate":"2024-04-07"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    + GymSet(weight: Double, numberOfRepetitions: int)","lastModifiedDate":"2024-04-07"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    + getWeight(): double","lastModifiedDate":"2024-04-07"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    + getNumberOfRepetitions(): int","lastModifiedDate":"2024-04-07"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-04-07"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"Gym *-- \"1..*\" GymStation: contains","lastModifiedDate":"2024-04-07"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"GymStation *-- \"1..*\" GymSet: contains","lastModifiedDate":"2024-04-07"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-07"}],"authorContributionMap":{"rouvinerh":28}},{"path":"docs/puml/class_diagrams/healthlist_class_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2024-04-10"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"hide circle ","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"!define ABSTRACT \u0026#123;abstract\u0026#125;","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"class HealthList {","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"    - BMIS: ArrayList\u003cBmi\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"    - PERIODS: ArrayList\u003cPeriod\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"    - APPOINTMENTS: ArrayList\u003cAppointment\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"    # addBmi(bmi: Bmi): void","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"    # addPeriod(period: Period): void","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"    # addAppointment(appointment: Appointment): void","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"    + getBmis(): Bmi","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"    + getPeriods(): Period","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"    + getAppointments(): Appointment","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"    + getPeriod(index: int): Period","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    + getPeriodSize(): int","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    + getBmisSize(): int","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"    + getPeriodsSize(): int","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    + deleteBmi(index: int): void","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    + deletePeriod(index: int): void","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"    + deleteAppointment(index: int): void","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"    + printLatestBmi(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"    + printLatestPeriod(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"    + printLatestAppointment(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"    + printBmiHistory(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    + printPeriodHistory(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"    + printAppointmentHistory(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"    + clearHealthLists(): void","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"    + printLatestThreeCycles(): void","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"    + predictNextPeriodDate(): LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-04-10"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"class Health {","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"    # date: LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"    + Health()","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"    + getDate(): LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-04-10"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"class Bmi extends Health {","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"    # height: double","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"    # weight: double","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"    # bmiValue: double","lastModifiedDate":"2024-04-10"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"    # bmiCategory: String","lastModifiedDate":"2024-04-10"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"    # date: LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"    + Bmi(height: String, weight: String, date: String)","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"    + getHeight(): String","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"    + getWeight(): String","lastModifiedDate":"2024-04-10"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"    + getBmiValue(): String","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"    + getBmiCategory(bmiValue: double): String","lastModifiedDate":"2024-04-10"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"    + getDate(): LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"    + calculateBmiValue(): double","lastModifiedDate":"2024-04-10"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-04-10"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"class Period extends Health {","lastModifiedDate":"2024-04-10"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"    # startDate: LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"    # endDate: LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"    # periodLength: long","lastModifiedDate":"2024-04-10"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"    # cycleLength: long","lastModifiedDate":"2024-04-10"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"    + Period(stringStartDate: String)","lastModifiedDate":"2024-04-10"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"    + Period(stringStartDate: String, stringEndDate: String)","lastModifiedDate":"2024-04-10"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"    + updateEndDate(stringStartDate: String): void","lastModifiedDate":"2024-04-10"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"    + getStartDate(): LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"    + getEndDate(): LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"    + getPeriodLength(): long","lastModifiedDate":"2024-04-10"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"    + getLastThreeCycleLengths(): long","lastModifiedDate":"2024-04-10"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"    + calculatePeriodLength(): long","lastModifiedDate":"2024-04-10"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"    + nextCyclePrediction(): LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"    + setCycleLength(nextStartDate: LocalDate): void","lastModifiedDate":"2024-04-10"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"    + printNextCyclePrediction(nextPeriodStartDate: LocalDate): void","lastModifiedDate":"2024-04-10"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-04-10"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"class Appointment extends Health {","lastModifiedDate":"2024-04-10"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"    # date: LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"    # time: LocalTime","lastModifiedDate":"2024-04-10"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"    # description: String","lastModifiedDate":"2024-04-10"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"    + Appointment(stringDate: String, stringTime: String, description: String)","lastModifiedDate":"2024-04-10"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"    + getDate(): LocalDate","lastModifiedDate":"2024-04-10"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"    + getTime(): LocalTime","lastModifiedDate":"2024-04-10"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"    + getDescription(): String","lastModifiedDate":"2024-04-10"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-04-10"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"HealthList *-- \"*\" Bmi : contains","lastModifiedDate":"2024-04-10"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"HealthList *-- \"*\" Period : contains","lastModifiedDate":"2024-04-10"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"HealthList *-- \"*\" Appointment : contains","lastModifiedDate":"2024-04-10"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"HealthList *-- \"*\" Health: contains","lastModifiedDate":"2024-04-10"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"syj02":93}},{"path":"docs/puml/class_diagrams/workoutlist_class_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-07"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2024-04-07"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"hide circle ","lastModifiedDate":"2024-04-07"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"!define ABSTRACT \u0026#123;abstract\u0026#125;","lastModifiedDate":"2024-04-07"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"class WorkoutLists {","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"    - WORKOUTS: ArrayList\u003cWorkout\u003e","lastModifiedDate":"2024-04-07"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"    - RUNS: ArrayList\u003cRun\u003e","lastModifiedDate":"2024-04-07"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"    - GYMS: ArrayList\u003cGym\u003e","lastModifiedDate":"2024-04-07"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-07"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    + getWorkouts(): ArrayList\u003cWorkout\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"    + getRuns(): ArrayList\u003cRun\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    + getGyms(): ArrayList\u003cGym\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    + getLatestRun(): Run","lastModifiedDate":"2024-04-07"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    + getLatestGym(): Gym","lastModifiedDate":"2024-04-07"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    + getRunSize(): int","lastModifiedDate":"2024-04-07"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    + getGymSize(): int","lastModifiedDate":"2024-04-07"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    + deleteRun(index: int): void","lastModifiedDate":"2024-04-07"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    + deleteGym(index: int): void","lastModifiedDate":"2024-04-07"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    + clearWorkoutsRunGym(): void","lastModifiedDate":"2024-04-07"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    # addRun(run: Run): void","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    # addGym(gym: Gym): void","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    - addWorkout(workout: Workout): void","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-04-07"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"class Workout  {","lastModifiedDate":"2024-04-07"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    - date: LocalDate","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    - workoutLists: WorkoutLists","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    + getDate(): String","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    + getDateForFile(): String","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    - addIntoWorkoutList(workout: Workout)","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-04-07"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"class Run extends Workout {","lastModifiedDate":"2024-04-07"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    # stations: ArrayList\u003cGymStation\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    + Run(stringTime: String, stringDistance: String)","lastModifiedDate":"2024-04-07"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"    + Run(stringTime: String, stringDistance: String, stringDate: String)","lastModifiedDate":"2024-04-07"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"    + getTimes(): String","lastModifiedDate":"2024-04-07"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    + getDistance(): String","lastModifiedDate":"2024-04-07"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    + getPace(): String","lastModifiedDate":"2024-04-07"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    + getFormatForAllHistory(): String","lastModifiedDate":"2024-04-07"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    + setDate(date: LocalDate): void","lastModifiedDate":"2024-04-07"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    # processRunTime(inputTime: String): Integer[]","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    # checkDistance(stringDistance: String): Double","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    # calculatePace(): String","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-04-07"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"class Gym extends Workout {","lastModifiedDate":"2024-04-07"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    # date: LocalDate","lastModifiedDate":"2024-04-07"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    # stations: ArrayList\u003cGymStation\u003e","lastModifiedDate":"2024-04-07"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    + Gym()","lastModifiedDate":"2024-04-07"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    + Gym(stringDate: String)","lastModifiedDate":"2024-04-07"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    + getStations(): ArrayList\u003cGymStation\u003e","lastModifiedDate":"2024-04-07"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    + getStationByIndex(index: int): GymStation","lastModifiedDate":"2024-04-07"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    + getHistoryFormatForSpecificGymStation(index: int): String","lastModifiedDate":"2024-04-07"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"    + addStation(name: String, numberOfSet: String, numberOfRepetitions:String, weights: String)","lastModifiedDate":"2024-04-13"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"    # processWeightsArray(weightString: String): ArrayList\u003cDouble\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    # validateGymStationName(exerciseName: String): String","lastModifiedDate":"2024-04-13"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"    # validateNumberOfSets(numberOfSets: String): int","lastModifiedDate":"2024-04-13"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    # validateNumberOfRepetitions (numberOfRepetitions: String): int","lastModifiedDate":"2024-04-13"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    # validateWeight(weight: string): boolean","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-04-07"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"WorkoutLists *-- \"*\" Run : contains","lastModifiedDate":"2024-04-13"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"WorkoutLists *-- \"*\" Gym : contains","lastModifiedDate":"2024-04-13"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"WorkoutLists *-- \"*\" Workout : contains","lastModifiedDate":"2024-04-13"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-07"}],"authorContributionMap":{"rouvinerh":73}},{"path":"docs/puml/sequence_diagrams/appointment_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"participant \"newAppointment:Appointment\" as Appointment","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"participant \"healthList:HealthList\" as HealthList","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"participant \"output:Output\" as Output","lastModifiedDate":"2024-04-11"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"Handler -\u003e Parser: parseAppointmentInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"activate Parser #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"Parser -\u003e Parser: splitAppointmentDetails()","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"activate Parser #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"Parser --\u003e Parser: appointmentDetails[]","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"deactivate Parser #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Validation: validateAppointmentDetails()","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"deactivate Validation","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Appointment **: new","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"activate Appointment #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"Appointment -\u003e HealthList **: new","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"activate HealthList #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"Appointment -\u003e HealthList: addAppointment(date,time,description)","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e Appointment:","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"deactivate HealthList #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"destroy HealthList","lastModifiedDate":"2024-04-11"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"Appointment --\u003e Parser:","lastModifiedDate":"2024-04-11"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"deactivate Appointment #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"Parser -\u003e Output: printAddAppointment()","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"Output --\u003e Parser:","lastModifiedDate":"2024-04-11"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"destroy Appointment","lastModifiedDate":"2024-04-11"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"deactivate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"j013n3":33,"syj02":12}},{"path":"docs/puml/sequence_diagrams/appointment_validate.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"mainframe **sd** validateAppointmentDetails","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"participant Validation as Validation \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"Parser -\u003e Validation : validateAppointmentDetails()","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : isEmptyParameterPresent()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateDateInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation : ","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateTimeInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation : ","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"deactivate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"syj02":28}},{"path":"docs/puml/sequence_diagrams/bmi_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"participant \"newBmi:Bmi\" as NBmi","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"participant \"healthList:HealthList\" as HealthList","lastModifiedDate":"2024-04-10"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"participant \"Bmi\" as Bmi \u003c\u003c Class\u003e\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"participant \"output:Output\" as Output","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Parser: parseBmiInput()","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"activate Parser #salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Parser: splitBmiInput()","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"activate Parser #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"Parser --\u003e Parser: bmiDetails[]","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"deactivate Parser #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Validation: validateBmiInput()","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"deactivate Validation","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"Parser -\u003e NBmi **: new","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"activate NBmi #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"NBmi -\u003e NBmi: calculateBmiValue","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"activate NBmi #DarkSalmon","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"NBmi --\u003e NBmi: bmiValue","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"deactivate NBmi #DarkSalmon","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"NBmi -\u003e Bmi: getBmiCategory(bmiValue)","lastModifiedDate":"2024-04-10"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"activate Bmi #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"Bmi --\u003e NBmi: bmiCategory","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"deactivate Bmi #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"NBmi -\u003e HealthList **: new","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"activate HealthList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"NBmi -\u003e HealthList: addBmi()","lastModifiedDate":"2024-04-11"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e NBmi:","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"deactivate HealthList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"destroy HealthList","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"NBmi --\u003e Parser:","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"deactivate NBmi #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Output: printAddBmi()","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"Output --\u003e Parser:","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"destroy NBmi","lastModifiedDate":"2024-04-10"},{"lineNumber":54,"author":{"gitId":"j013n3"},"content":"deactivate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"j013n3"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"j013n3":50,"rouvinerh":6}},{"path":"docs/puml/sequence_diagrams/bmi_validation.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"mainframe **sd** validateBmiInput","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"participant Validation as Validation \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Validation : validateBmiInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"Validation -\u003e Validation : isEmptyParameterPresent()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"Validation -\u003e Validation : validateDateInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"Validation -\u003e Validation : validateDateNotAfterToday()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"j013n3":26}},{"path":"docs/puml/sequence_diagrams/delete_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-11"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Handler: handleDelete() ","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Parser:  parseDeleteInput()","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"activate Parser #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Parser: splitDeleteInput()","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"activate Parser #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"Parser --\u003e Parser: deleteDetails","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"deactivate Parser #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Validation: validateDeleteInput()","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"alt if valid filter","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    activate Validation #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Parser: validDeleteDetails","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"else not valid filter","lastModifiedDate":"2024-04-11"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Parser: null","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    deactivate Validation","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"Parser --\u003e Handler: validDeleteDetails","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"deactivate Parser #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"deactivate Handler #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Handler: deleteItem(validDeleteDetails)","lastModifiedDate":"2024-04-11"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"Handler --\u003e Handler:","lastModifiedDate":"2024-04-11"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"deactivate Handler","lastModifiedDate":"2024-04-11"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"deactivate Handler","lastModifiedDate":"2024-04-11"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-11"}],"authorContributionMap":{"rouvinerh":42}},{"path":"docs/puml/sequence_diagrams/gym_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"participant \"newGym:Gym\" as Gym","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"participant \"workout:Workout\" as Workout","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"participant \"workoutList:WorkoutList\" as WorkoutList","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"Handler -\u003e Parser: parseGymInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"activate Parser #salmon","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"Parser -\u003e Parser: splitGymInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"activate Parser #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"Parser --\u003e Parser: gymDetails[]","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"deactivate Parser #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Validation: validateGymInput()","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Parser: ","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"Parser -\u003e Gym **: new","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    activate Gym #FFBBBB   ","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    Gym -\u003e Workout **: new()","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"    activate Workout #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    Workout --\u003e Gym: ","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    deactivate Workout #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    Gym -\u003e Workout: addIntoWorkoutList()","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    activate Workout #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    Workout -\u003e WorkoutList **: new","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    activate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    WorkoutList --\u003e Workout:","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    deactivate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"    Workout -\u003e WorkoutList: addGym()","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"    activate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    WorkoutList --\u003e Workout:","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"    deactivate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    destroy WorkoutList","lastModifiedDate":"2024-04-12"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    ","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"    Workout --\u003e Gym :","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"    deactivate Workout #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"    destroy Workout","lastModifiedDate":"2024-04-13"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"Gym --\u003e Parser:","lastModifiedDate":"2024-04-13"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"deactivate Gym #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Parser: parseGymStationInput()","lastModifiedDate":"2024-04-09"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"activate Parser #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"ref over Parser: parseGymStationInput","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"Parser --\u003e Parser:","lastModifiedDate":"2024-04-09"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"deactivate Parser #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"Parser --\u003e Handler ","lastModifiedDate":"2024-04-13"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"deactivate Parser #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"deactivate Handler #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"JustinSoh":38,"rouvinerh":25}},{"path":"docs/puml/sequence_diagrams/gym_station_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"mainframe sd parseGymStationInput","lastModifiedDate":"2024-04-09"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"actor User","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"participant \"newGym:Gym\" as Gym","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"participant \"output:Output\" as Output","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"participant \"gymStation:GymStation\" as GymStation","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Parser : parseGymStationInput()","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    activate Parser #DarkSalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"        loop until all gym stations recorded","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"            User -\u003e Parser: user input","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"            Parser -\u003e Parser: splitGymStationInput()","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"            activate Parser #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"            Parser --\u003e Parser:","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"            deactivate Parser #DarkSalmon","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"            Parser -\u003e Gym: addStation() ","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"            note right : Using the same gym object that has \\n been created in Parser.","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"            activate Gym #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"            Gym -\u003e Gym : appendIntoStations()","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"            activate Gym #DarkSalmon","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"                Gym -\u003e GymStation **: new","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"                activate GymStation #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"                GymStation -\u003e GymStation: checkInput","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"                note right: Consist of multiple \\n validation checks","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"                activate GymStation #Salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"                GymStation --\u003e GymStation:","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"                deactivate GymStation #Salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"                GymStation -\u003e GymStation : processSets()","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"                activate GymStation #DarkSalmon","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"                    loop until all sets are recorded","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"                        GymStation -\u003e GymSet **: new ","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"                        activate GymSet #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"                        GymSet --\u003e GymStation:","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"                        deactivate GymSet #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"                        destroy GymSet","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"                    end","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"                GymStation --\u003e GymStation","lastModifiedDate":"2024-04-13"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"                deactivate GymStation #DarkSalmon","lastModifiedDate":"2024-04-13"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"                GymStation --\u003e Gym: ","lastModifiedDate":"2024-04-13"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"                deactivate GymStation #FFBBBB","lastModifiedDate":"2024-04-13"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"                destroy GymStation","lastModifiedDate":"2024-04-13"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"            Gym --\u003e Gym : ","lastModifiedDate":"2024-04-09"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"            deactivate Gym #DarkSalmon","lastModifiedDate":"2024-04-13"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"            Gym --\u003e Parser:","lastModifiedDate":"2024-04-09"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"            deactivate Gym #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"        end","lastModifiedDate":"2024-04-09"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    Parser -\u003e Output: printAddGym()","lastModifiedDate":"2024-04-09"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    activate Output #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"    Output --\u003e Parser:","lastModifiedDate":"2024-04-09"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"    destroy Gym","lastModifiedDate":"2024-04-12"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    deactivate Output","lastModifiedDate":"2024-04-09"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"    Parser --\u003e Parser :","lastModifiedDate":"2024-04-09"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    deactivate Parser #DarkSalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"JustinSoh":43,"rouvinerh":28}},{"path":"docs/puml/sequence_diagrams/gym_validation_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"mainframe **sd** validateGymInput","lastModifiedDate":"2024-04-09"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Validation : validateGymInput()","lastModifiedDate":"2024-04-09"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation : isEmptyParameterPresent()","lastModifiedDate":"2024-04-09"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"alt number of stations is not positive integer","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Parser: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation: validateDateNotEmpty()","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Validation : isDatePresent","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation #DarkSalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"alt date is present","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    Validation -\u003e Validation : validateDateInput()","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    activate Validation  #Red","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Validation :","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    deactivate Validation  #Red","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    Validation -\u003e Validation : validateDateNotAfterToday()","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    activate Validation  #Red","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Validation :","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    deactivate Validation  #Red","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Parser:","lastModifiedDate":"2024-04-09"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"else date is not present","lastModifiedDate":"2024-04-09"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Parser:","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    deactivate Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"rouvinerh":40}},{"path":"docs/puml/sequence_diagrams/handler_class_creation.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"participant \"logFile:LogFile\" as LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-08"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"dataFile:DataFile\" as DataFile","lastModifiedDate":"2024-04-08"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"participant \"output:Output\" as Output","lastModifiedDate":"2024-04-08"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-08"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"participant \"in:Scanner\" as Scanner","lastModifiedDate":"2024-04-08"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"activate Handler #Salmon","lastModifiedDate":"2024-04-08"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e LogFile **: new","lastModifiedDate":"2024-04-08"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate LogFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"LogFile --\u003e Handler: logFile","lastModifiedDate":"2024-04-08"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"deactivate LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Parser **: new","lastModifiedDate":"2024-04-08"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"activate Parser #FFBBBB ","lastModifiedDate":"2024-04-08"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"Parser --\u003e Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"deactivate Parser","lastModifiedDate":"2024-04-08"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e DataFile **: new","lastModifiedDate":"2024-04-08"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"activate DataFile #FFBBBB ","lastModifiedDate":"2024-04-08"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"DataFile --\u003e Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"deactivate DataFile","lastModifiedDate":"2024-04-08"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Output **: new","lastModifiedDate":"2024-04-08"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"activate Output #FFBBBB ","lastModifiedDate":"2024-04-08"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"Output --\u003e Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"deactivate Output","lastModifiedDate":"2024-04-08"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Validation **: new","lastModifiedDate":"2024-04-08"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"activate Validation #FFBBBB ","lastModifiedDate":"2024-04-08"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation","lastModifiedDate":"2024-04-08"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Scanner **: new","lastModifiedDate":"2024-04-08"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"activate Scanner #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"Scanner --\u003e Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"deactivate Scanner","lastModifiedDate":"2024-04-08"}],"authorContributionMap":{"rouvinerh":35}},{"path":"docs/puml/sequence_diagrams/handler_sequence_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-08"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"actor User","lastModifiedDate":"2024-04-07"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-07"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant PulsePilot as PulsePilot \u003c\u003cClass\u003e\u003e","lastModifiedDate":"2024-04-07"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"User -\u003e PulsePilot: start bot","lastModifiedDate":"2024-04-08"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"activate PulsePilot #Salmon","lastModifiedDate":"2024-04-08"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"PulsePilot -\u003e \"handler:Handler\" **: new","lastModifiedDate":"2024-04-08"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"activate \"handler:Handler\" #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"\"handler:Handler\" -\u003e \"handler:Handler\": initialiseBot()","lastModifiedDate":"2024-04-08"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate \"handler:Handler\" #DarkSalmon","lastModifiedDate":"2024-04-08"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"ref over \"handler:Handler\": initialiseBot","lastModifiedDate":"2024-04-08"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"\"handler:Handler\" --\u003e \"handler:Handler\": bot started","lastModifiedDate":"2024-04-08"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"deactivate \"handler:Handler\" #DarkSalmon","lastModifiedDate":"2024-04-08"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"\"handler:Handler\" --\u003e PulsePilot ","lastModifiedDate":"2024-04-08"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"PulsePilot --\u003e User: bot ready","lastModifiedDate":"2024-04-08"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"loop infinitely","lastModifiedDate":"2024-04-08"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    User -\u003e PulsePilot: user input","lastModifiedDate":"2024-04-07"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    PulsePilot -\u003e \"handler:Handler\": user input","lastModifiedDate":"2024-04-08"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    \"handler:Handler\" -\u003e \"handler:Handler\": processInput()","lastModifiedDate":"2024-04-08"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    ref over \"handler:Handler\": processInput","lastModifiedDate":"2024-04-08"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    activate \"handler:Handler\" #DarkSalmon","lastModifiedDate":"2024-04-08"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    alt input has no error","lastModifiedDate":"2024-04-08"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"        \"handler:Handler\" --\u003e \"handler:Handler\": processed command","lastModifiedDate":"2024-04-08"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        \"handler:Handler\" --\u003e PulsePilot:","lastModifiedDate":"2024-04-08"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"        PulsePilot --\u003e User: success message","lastModifiedDate":"2024-04-08"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"        ","lastModifiedDate":"2024-04-08"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    else input has error","lastModifiedDate":"2024-04-08"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        \"handler:Handler\" --\u003e \"handler:Handler\": error message","lastModifiedDate":"2024-04-08"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        \"handler:Handler\" --\u003e PulsePilot:","lastModifiedDate":"2024-04-08"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        PulsePilot --\u003e User: error message","lastModifiedDate":"2024-04-08"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"        ","lastModifiedDate":"2024-04-08"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    else exit command used","lastModifiedDate":"2024-04-08"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"        \"handler:Handler\" --\u003e \"handler:Handler\":  ","lastModifiedDate":"2024-04-08"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"        \"handler:Handler\" --\u003e PulsePilot:","lastModifiedDate":"2024-04-08"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        break loop","lastModifiedDate":"2024-04-08"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"        ","lastModifiedDate":"2024-04-08"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        deactivate \"handler:Handler\" #DarkSalmon","lastModifiedDate":"2024-04-08"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"        ","lastModifiedDate":"2024-04-07"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"        end","lastModifiedDate":"2024-04-07"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    end","lastModifiedDate":"2024-04-07"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-08"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    PulsePilot -\u003e \"handler:Handler\": terminateBot()","lastModifiedDate":"2024-04-08"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    ref over \"handler:Handler\": terminateBot","lastModifiedDate":"2024-04-08"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    \"handler:Handler\" --\u003e PulsePilot:","lastModifiedDate":"2024-04-08"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    destroy \"handler:Handler\"","lastModifiedDate":"2024-04-08"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    PulsePilot --\u003e User: exit message","lastModifiedDate":"2024-04-08"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    deactivate PulsePilot","lastModifiedDate":"2024-04-07"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"    destroy PulsePilot","lastModifiedDate":"2024-04-08"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-08"}],"authorContributionMap":{"rouvinerh":51}},{"path":"docs/puml/sequence_diagrams/history_printHistory.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"@startuml","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"mainframe sd printHistory","lastModifiedDate":"2024-04-10"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"    Handler -\u003e Output: printHistory(filter)","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"    activate Handler #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"    activate Output #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"        alt filter \u003d\u003d WORKOUT","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"            Output -\u003e Output: printWorkoutHistory()","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"            activate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"            Output --\u003e Output","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"            deactivate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"        else filter \u003d\u003d RUN","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"            Output -\u003e Output: printRunHistory()","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"            activate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"            Output --\u003e Output","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"            deactivate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"        else filter \u003d\u003d GYM","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"            Output -\u003e Output: printGymHistory()","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"            activate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"            Output --\u003e Output","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"            deactivate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"        else filter \u003d\u003d BMI","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"            Output -\u003e Output: printBmiHistory()","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"            activate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"            Output --\u003e Output","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"            deactivate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"        else filter \u003d\u003d PERIOD","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"            Output -\u003e Output: printPeriodHistory()","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"            activate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"            Output --\u003e Output","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"            deactivate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"        else filter \u003d\u003d APPOINTMENT","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"            Output -\u003e Output: printAppointmentHistory()","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"            activate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"            Output --\u003e Output","lastModifiedDate":"2024-04-10"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"            deactivate Output #Salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"        end","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    Output --\u003e Handler #FFBBBB ","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    deactivate Output","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    deactivate Handler #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"@enduml","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"JustinSoh":40}},{"path":"docs/puml/sequence_diagrams/history_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"@startuml","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-10"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Parser: parseHistory(userInput)","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"activate Parser #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    Parser -\u003e Validation: validateHistoryFilter(filter) ","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"    activate Validation #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"    Validation --\u003e Parser: ","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"    deactivate Validation #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    Parser --\u003e Handler: filter","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"deactivate Parser","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"Handler -\u003e Output : printHistory(filter)","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"Output --\u003e Handler","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"deactivate Output","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"@enduml","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"JustinSoh":19,"rouvinerh":3}},{"path":"docs/puml/sequence_diagrams/latest_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"@startuml","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-10"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Parser: parseLatest(userInput)","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"activate Parser #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"    Parser -\u003e Validation: validateLatestFilter(filter) ","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"    activate Validation #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"    Validation --\u003e Parser: ","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    deactivate Validation #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    Parser --\u003e Handler: filter","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"deactivate Parser","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"Handler -\u003e Output : printLatest(filter)","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"Output --\u003e Handler","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"deactivate Output","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"@enduml","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"JustinSoh":20,"rouvinerh":3}},{"path":"docs/puml/sequence_diagrams/period_prediction.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"participant \"HealthList\" as HealthList \u003c\u003cClass\u003e\u003e","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"participant \"period:Period\" as Period","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"participant \"Period\" as Period1 \u003c\u003cClass\u003e\u003e","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Parser: parsePredictionInput()","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"activate Parser #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"Parser -\u003e HealthList: printLatestThreeCycles()","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"activate HealthList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e Parser:","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"deactivate HealthList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"Parser -\u003e HealthList: predictNextPeriodStartDate()","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"activate HealthList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"HealthList -\u003e Period: nextCyclePrediction()","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"activate Period #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"Period -\u003e Period: getLastThreeCycleLengths()","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"activate Period #DarkSalmon","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"Period --\u003e Period:","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"deactivate Period #DarkSalmon","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"Period --\u003e HealthList:","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"deactivate Period #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"destroy Period","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e Parser: nextPeriodStartDate","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Period1: printNextCyclePrediction()","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"activate Period1 #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"Period1 --\u003e Parser:","lastModifiedDate":"2024-04-11"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"deactivate Period1 #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"j013n3":36}},{"path":"docs/puml/sequence_diagrams/period_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"participant \"newPeriod:Period\" as Period","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"participant \"healthList:HealthList\" as HealthList","lastModifiedDate":"2024-04-10"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"participant HealthList as HealthList1 \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"Handler -\u003e Parser: parsePeriodInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"activate Parser #salmon","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"Parser -\u003e Parser: splitPeriodInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"activate Parser #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"Parser --\u003e Parser: periodDetails[]","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"deactivate Parser #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Validation: validatePeriodInput()","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"deactivate Validation","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"alt endFlag is present","lastModifiedDate":"2024-04-10"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"    alt list is empty || end date present in latest period","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"    Parser -\u003e Period **: new","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"    activate Period #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"    Period -\u003e HealthList: addPeriod(startDate, endDate)","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"    activate HealthList #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"ref over HealthList: setCycleLength()","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"    HealthList --\u003e Period:","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"    deactivate HealthList #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"    else end date not present in latest period","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"    Parser -\u003e HealthList1: getPeriod(latestPeriodIndex)","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"    activate HealthList1 #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"    HealthList1 --\u003e Parser:","lastModifiedDate":"2024-04-10"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"    deactivate HealthList1 #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"    Parser -\u003e \"period:Period\": updateEndDate(endDate)","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"    activate \"period:Period\" #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"    \"period:Period\" --\u003e Parser:","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"    deactivate HealthList1 #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"    deactivate \"period:Period\" #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    destroy \"period:Period\"","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"    end","lastModifiedDate":"2024-04-10"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"else endFlag is not present","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"    activate Period #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"j013n3"},"content":"    Period -\u003e HealthList: addPeriod(startDate)","lastModifiedDate":"2024-04-10"},{"lineNumber":54,"author":{"gitId":"j013n3"},"content":"ref over HealthList: setCycleLength()","lastModifiedDate":"2024-04-10"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"    activate HealthList #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":56,"author":{"gitId":"j013n3"},"content":"    HealthList --\u003e Period:","lastModifiedDate":"2024-04-10"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"    deactivate HealthList #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"    deactivate Period #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    destroy HealthList","lastModifiedDate":"2024-04-10"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":61,"author":{"gitId":"j013n3"},"content":"end","lastModifiedDate":"2024-04-10"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e \"output:Output\": printAddPeriod()","lastModifiedDate":"2024-04-10"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"activate \"output:Output\" #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"\"output:Output\" --\u003e Parser:","lastModifiedDate":"2024-04-10"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"deactivate  \"output:Output\"","lastModifiedDate":"2024-04-10"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"destroy Period","lastModifiedDate":"2024-04-10"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"@enduml","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"j013n3":51,"rouvinerh":11,"syj02":6}},{"path":"docs/puml/sequence_diagrams/period_validate.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"mainframe **sd** validatePeriodInput","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"participant Validation as Validation \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"Parser -\u003e Validation : validatePeriodInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : isEmptyParameterPresent()","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateDateInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateDateNotAfterToday()","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateDateNotAfterToday()","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"deactivate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"syj02":32}},{"path":"docs/puml/sequence_diagrams/process_input.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-08"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-08"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"mainframe **sd** processInput","lastModifiedDate":"2024-04-08"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"participant \"logFile:LogFile\" as LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"participant \"output:Output\" as Output","lastModifiedDate":"2024-04-08"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-08"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e LogFile: writeLog()","lastModifiedDate":"2024-04-08"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"activate LogFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"LogFile --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"deactivate LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"alt WORKOUT Command","lastModifiedDate":"2024-04-08"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Handler: handleWorkout()","lastModifiedDate":"2024-04-08"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    activate Handler #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    ref over Handler: handleWorkout","lastModifiedDate":"2024-04-08"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"else HEALTH Command","lastModifiedDate":"2024-04-08"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Handler: handleHealth()","lastModifiedDate":"2024-04-08"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    ref over Handler: handleHealth","lastModifiedDate":"2024-04-08"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"else HISTORY Command","lastModifiedDate":"2024-04-08"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Handler: handleHistory()","lastModifiedDate":"2024-04-08"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    ref over Handler: handleHistory","lastModifiedDate":"2024-04-08"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"else LATEST Command","lastModifiedDate":"2024-04-08"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Handler: handleLatest()","lastModifiedDate":"2024-04-08"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    ref over Handler: handleLatest","lastModifiedDate":"2024-04-08"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"else DELETE Command","lastModifiedDate":"2024-04-08"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Handler: handleDelete()","lastModifiedDate":"2024-04-08"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    ref over Handler: handleDelete","lastModifiedDate":"2024-04-08"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"else HELP Command","lastModifiedDate":"2024-04-08"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Output: printHelp()","lastModifiedDate":"2024-04-08"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    activate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"    Output --\u003e Handler: ","lastModifiedDate":"2024-04-08"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"    deactivate Output","lastModifiedDate":"2024-04-08"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"else Invalid Command","lastModifiedDate":"2024-04-08"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Output: printException()","lastModifiedDate":"2024-04-08"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    activate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    Output --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    deactivate Output","lastModifiedDate":"2024-04-08"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"else EXIT Command","lastModifiedDate":"2024-04-08"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e LogFile: writeLog()","lastModifiedDate":"2024-04-08"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    activate LogFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    LogFile --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    deactivate LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    Handler --\u003e Handler: return","lastModifiedDate":"2024-04-08"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    ref over Handler: terminateBot","lastModifiedDate":"2024-04-08"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    deactivate Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-08"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"deactivate Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-08"}],"authorContributionMap":{"rouvinerh":61}},{"path":"docs/puml/sequence_diagrams/run_sequence_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"participant \"newRun:Run\" as Run","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"participant \"workout:Workout\" as Workout","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"participant \"workoutLists:WorkoutLists\" as WorkoutLists","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"participant \"output:Output\" as Output","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Parser: parseRunInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"activate Parser #salmon","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Parser: splitRunInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"activate Parser #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"Parser --\u003e Parser: runDetails[]","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"deactivate Parser #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Validation: validateRunInput(runDetails)","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Parser: ","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Run **: new","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"activate Run #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"Run -\u003e Workout **: new","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"activate Workout #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"Workout --\u003e Run","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"deactivate Workout #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"Run -\u003e Workout: addIntoWorkoutList(Run)","lastModifiedDate":"2024-04-13"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"activate Workout #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"Workout -\u003e WorkoutLists **: new","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"activate WorkoutLists #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"WorkoutLists --\u003e Workout: ","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"deactivate WorkoutLists #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"Workout -\u003e WorkoutLists: addRun()","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"activate WorkoutLists #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"WorkoutLists --\u003e Workout: ","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"destroy WorkoutLists","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"Workout --\u003e Run:","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"destroy Workout","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"Run --\u003e Parser:","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"deactivate Run #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Output: printAddRun()","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"activate Output #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"Output --\u003e Parser:","lastModifiedDate":"2024-04-09"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"deactivate Output #salmon","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"destroy Run","lastModifiedDate":"2024-04-09"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"rouvinerh":46}},{"path":"docs/puml/sequence_diagrams/run_validation_sequence_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"mainframe **sd** validateRunInput","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"participant \"parser:Parser\" as Parser","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Validation : validateRunInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation : isEmptyParameterPresent()","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Validation : isEmptyParameterPresent","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"alt isEmptyParameterPresent \u003d\u003d true","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"  Validation --\u003e Parser: InsufficientInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation : validateRunTimeInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"alt distance is invalid 2dp number","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"  Validation --\u003e Parser: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"alt distance \u003e 5000km","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Parser: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"alt distance \u003c\u003d 0km","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Parser: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation: validateDateNotEmpty()","lastModifiedDate":"2024-04-09"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Validation : isDatePresent","lastModifiedDate":"2024-04-09"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation #DarkSalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"alt date is present","lastModifiedDate":"2024-04-09"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-09"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    Validation -\u003e Validation : validateDateInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    activate Validation  #Red","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    deactivate Validation  #Red","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    Validation -\u003e Validation : validateDateNotAfterToday()","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    activate Validation  #Red","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"    deactivate Validation  #Red","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"else date is not present","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    deactivate Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"rouvinerh":57}},{"path":"docs/puml/sequence_diagrams/set_Cycle_Length.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"@startuml","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"mainframe sd setCycleLength","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"participant \"healthList:HealthList\" as HealthList","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"participant \"period:Period\" as Period","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"activate HealthList #FFBBBB","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"HealthList -\u003e HealthList: PERIODS.add(period)","lastModifiedDate":"2024-04-12"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"activate HealthList #DarkSalmon","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e HealthList:","lastModifiedDate":"2024-04-12"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"deactivate HealthList #DarkSalmon","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"HealthList -\u003e HealthList: PERIODS.sort()","lastModifiedDate":"2024-04-12"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"activate HealthList #DarkSalmon","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e HealthList:","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"deactivate HealthList #DarkSalmon","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"loop while (i \u003e 0)","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"HealthList -\u003e HealthList: PERIODS.get(i-1)","lastModifiedDate":"2024-04-12"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"activate HealthList #DarkSalmon","lastModifiedDate":"2024-04-12"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e HealthList:","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"deactivate HealthList #DarkSalmon","lastModifiedDate":"2024-04-12"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"HealthList -\u003e HealthList: PERIODS.get(i)","lastModifiedDate":"2024-04-12"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"activate HealthList #DarkSalmon","lastModifiedDate":"2024-04-12"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e HealthList:","lastModifiedDate":"2024-04-12"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"deactivate HealthList #DarkSalmon","lastModifiedDate":"2024-04-12"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"HealthList -\u003e Period: setCycleLength()","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"activate Period #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"Period --\u003e HealthList:","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"deactivate Period #FFBBBB","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"deactivate HealthList #FFBBBB","lastModifiedDate":"2024-04-12"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"end","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"j013n3"},"content":"@enduml","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"j013n3":39}},{"path":"docs/puml/sequence_diagrams/split_and_validate_station.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"mainframe **sd** splitAndValidateGymStationInput","lastModifiedDate":"2024-04-09"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"activate Handler #Salmon","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Validation: splitAndValidateGymStationInput()","lastModifiedDate":"2024-04-09"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"activate Validation #salmon","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation: validateExerciseName()","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"activate Validation #darksalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"alt Name is invalid or too long","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Handler: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"else Name is empty","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Handler: InsufficientInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation #darksalmon","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"alt sets is not integer or less than 1","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Handler: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"alt reps is not integer or less than 1","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Handler: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"alt invalid weights array","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Handler: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"alt weights array length !\u003d number of sets","lastModifiedDate":"2024-04-09"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    Validation --\u003e Handler: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Handler: validatedGymStationInputs[]","lastModifiedDate":"2024-04-09"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"rouvinerh":42}},{"path":"docs/puml/sequence_diagrams/storage_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"dataFile:DataFile\" as DataFile","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e DataFile: saveDataFile()","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"activate DataFile #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"DataFile -\u003e DataFile: writeName()","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate DataFile #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"DataFile --\u003e DataFile: name written","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"deactivate DataFile #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"DataFile -\u003e DataFile: writeHealthData()","lastModifiedDate":"2024-04-11"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"activate DataFile #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"DataFile --\u003e DataFile: health data written","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"deactivate DataFile #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"DataFile -\u003e DataFile: writeWorkoutData()","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"activate DataFile #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"DataFile --\u003e DataFile: workout data written","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"deactivate DataFile #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"DataFile -\u003e DataFile: writeHashToFile()","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"activate DataFile #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"DataFile --\u003e DataFile: file hash written","lastModifiedDate":"2024-04-11"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"deactivate DataFile #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"DataFile --\u003e Handler: both hash and data\\nfile written","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"deactivate DataFile #salmon","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"deactivate DataFile #FFBBBB","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-11"}],"authorContributionMap":{"rouvinerh":34}},{"path":"docs/puml/sequence_diagrams/terminate_bot.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-08"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-08"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"mainframe **sd** terminateBot","lastModifiedDate":"2024-04-08"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"participant \"logFile:LogFile\" as LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"participant \"dataFile:DataFile\" as DataFile","lastModifiedDate":"2024-04-08"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"participant \"output:Output\" as Output","lastModifiedDate":"2024-04-08"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-08"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e LogFile: writeLog()","lastModifiedDate":"2024-04-08"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"activate LogFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"LogFile --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"deactivate LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"alt no file write error","lastModifiedDate":"2024-04-08"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e LogFile: writeLog()","lastModifiedDate":"2024-04-08"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    activate LogFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    LogFile --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    deactivate LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e DataFile: saveDateFile()","lastModifiedDate":"2024-04-08"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    activate DataFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    DataFile --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    deactivate DataFile","lastModifiedDate":"2024-04-08"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e LogFile: writeLog()","lastModifiedDate":"2024-04-08"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    activate LogFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    LogFile --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    deactivate LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"else file write error","lastModifiedDate":"2024-04-08"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Output: printException()","lastModifiedDate":"2024-04-08"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    activate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    Output --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    deactivate Output","lastModifiedDate":"2024-04-08"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-08"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Output: printGoodbyeMessage()","lastModifiedDate":"2024-04-08"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"Output --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"deactivate Output","lastModifiedDate":"2024-04-08"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e LogFile: writeLog()","lastModifiedDate":"2024-04-08"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"activate LogFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"LogFile --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"deactivate LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"destroy Output","lastModifiedDate":"2024-04-08"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"destroy DataFile","lastModifiedDate":"2024-04-08"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"destroy LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"destroy Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"deactivate Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-08"}],"authorContributionMap":{"rouvinerh":56}},{"path":"docs/puml/sequence_diagrams/user_induction.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-08"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-08"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"mainframe **sd** initialiseBot","lastModifiedDate":"2024-04-08"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"participant \"logFile:LogFile\" as LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"participant \"dataFile:DataFile\" as DataFile","lastModifiedDate":"2024-04-08"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"participant \"output:Output\" as Output","lastModifiedDate":"2024-04-08"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-08"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"activate Handler #salmon","lastModifiedDate":"2024-04-08"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Output: printWelcomeBanner()","lastModifiedDate":"2024-04-08"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"Output --\u003e Handler: ","lastModifiedDate":"2024-04-08"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"deactivate Output","lastModifiedDate":"2024-04-08"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e LogFile: writeLog()","lastModifiedDate":"2024-04-08"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"activate LogFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"LogFile --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"deactivate LogFile","lastModifiedDate":"2024-04-08"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e DataFile: loadDataFile()","lastModifiedDate":"2024-04-08"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"activate DataFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"DataFile --\u003e Handler: status","lastModifiedDate":"2024-04-08"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"deactivate DataFile","lastModifiedDate":"2024-04-08"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"alt data file present","lastModifiedDate":"2024-04-08"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e DataFile: readDataFile()","lastModifiedDate":"2024-04-08"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    activate DataFile #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    DataFile --\u003e Handler:","lastModifiedDate":"2024-04-08"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-08"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    alt no file read error","lastModifiedDate":"2024-04-08"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-08"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        deactivate DataFile #DarkSalmon","lastModifiedDate":"2024-04-08"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"        Handler -\u003e Output: printGreeting()","lastModifiedDate":"2024-04-08"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        activate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"        Output --\u003e Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"        deactivate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"        ","lastModifiedDate":"2024-04-08"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    else file read error","lastModifiedDate":"2024-04-08"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"        Handler -\u003e Output: printException()","lastModifiedDate":"2024-04-08"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        activate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        Output --\u003e Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        deactivate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    end","lastModifiedDate":"2024-04-08"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"else datafile not present","lastModifiedDate":"2024-04-08"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Output: printGreeting()","lastModifiedDate":"2024-04-08"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    activate Output #FFBBBB","lastModifiedDate":"2024-04-08"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    Output --\u003e Handler","lastModifiedDate":"2024-04-08"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    deactivate Output","lastModifiedDate":"2024-04-08"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    Handler -\u003e Handler: userInduction()","lastModifiedDate":"2024-04-08"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    activate Handler #darksalmon","lastModifiedDate":"2024-04-08"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    ref over Handler: userInduction","lastModifiedDate":"2024-04-08"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    note right ","lastModifiedDate":"2024-04-08"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        The implementation of userInduction() has been omitted to keep the diagram","lastModifiedDate":"2024-04-08"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        simple.","lastModifiedDate":"2024-04-08"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    end note","lastModifiedDate":"2024-04-08"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-08"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-08"}],"authorContributionMap":{"rouvinerh":64}},{"path":"docs/puml/sequence_diagrams/validate_weights.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"mainframe **sd** validateWeightsArray","lastModifiedDate":"2024-04-09"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"participant \"handler:Handler\" as Handler","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant \"validation:Validation\" as Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"activate Handler #Salmon","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Validation: validateWeightsArray()","lastModifiedDate":"2024-04-09"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"activate Validation #salmon","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"loop string in weightsArray","lastModifiedDate":"2024-04-09"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    alt weight is invalid number","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"        Validation --\u003e Handler: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    end","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    alt weight \u003c 0","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"        Validation --\u003e Handler: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    end","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    alt weight \u003e 2850","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"        Validation --\u003e Handler: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    end","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    alt weight % 0.125 !\u003d 0","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"        Validation --\u003e Handler: InvalidInput exception","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    end","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    Validation -\u003e Validation: validatedWeightsArray.add()","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Handler: validatedWeightsArray","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"rouvinerh":32}},{"path":"docs/team/j013n3.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"# j013n3 - Project Portfolio Page","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"## Overview","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"**PulsePilot** is a desktop application designed for **efficiently tracking health-related information** through a **Command Line Interface (CLI)**. For users who can type quickly, the CLI allows for faster data entry compared to traditional Graphical User Interface (GUI) applications on phones or computers.","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"### Summary of Contributions","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"The code I have written is documented [here](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003dj013n3\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2024-02-23\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2024-04-11"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"#### Features Implemented","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"- Implemented the Bmi class with the help of [@syj02](https://github.com/syj02).","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"  - Users can obtain their BMI value and the corresponding BMI category based on the height and weight inputted. ","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"  - Added validation to prevent users from adding BMI inputs of the same date. ","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"- Implemented the second stage of the Period class.","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"  - Allow user to have the flexibility of input the start and end dates of their period flow either at once or at different times. ","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"  - Users can use the predictive feature to predict their next period\u0027s start date. ","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"  - Added validation to prevent users from starting a new Period entry before completing the outstanding one. ","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"  - Added validation to restrict users from inputting period entries dated before the end date of the latest Period input in PulsePilot. ","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"#### Contributions to the UG","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"- Wrote UG portion for Bmi and Period functionalities.  ","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"#### Contributions to the DG","lastModifiedDate":"2024-04-11"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"- Crafted sequence diagrams for Bmi, Period, Appointment and Prediction. ","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"- Wrote the DG portion for add Bmi, add Period and make prediction.","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"#### Contributions beyond the project team","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"- Reported an above-average number of bugs in PE_D (11 bugs in total).","lastModifiedDate":"2024-04-13"}],"authorContributionMap":{"j013n3":34}},{"path":"docs/team/justinsoh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"# JustinSoh - Project Portfolio Page","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"## Overview","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"**PulsePilot** is a desktop application designed for **efficiently tracking health-related information** through a **Command Line Interface (CLI)**. For users who can type quickly, the CLI allows for faster data entry compared to traditional Graphical User Interface (GUI) applications on phones or computers.","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"### Summary of Contributions","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"The code I have written is documented [here](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003dJustinSoh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2024-02-23).","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"Below is the breakdown of what I have done.","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"#### Features Added","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"- Implemented the `WorkoutList` class, to help track and manage newly created `Run` and `Gym` objects.","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"- Implemented the `toString()` method for both `run` and `gym` objects, allowing for easy integration with the `Output` class for clear display. ","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"- Implemented all outputs method relating to `gym`, `run`, and `workouts` within the `Output` class. ","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"- Designed the `GymSet` and `GymStation` classes with [@rouvinerh](https://github.com/rouvinerh) to enable multiple instances of `GymStation` within a particular `Gym` instance. ","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"#### Enhancements Implemented","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"- Implemented the `Parser.parseGymStationInput` method, which interactively prompts users for their gym station details. This enhancement simplifies the process of adding new gym workouts by reducing the length of the required command.","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"- Implemented the `Gym.toFileString()` and `Parser.parseGymFileInput()` allowing [@L5-Z](https://github.com/L5-Z) to easily integrate the saving/loading of Gym classes.","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"- Refactored Static Methods into Non-Static Methods where Instances are used instead to adopt a more Object-Oriented approach. ","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"#### Documentation Written","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"##### User Guide","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"- Wrote UG portion for `Gym` and `Show Latest`","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"##### Developer Guide","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"- Wrote DG portion for `Gym` and `Latest` portion ","lastModifiedDate":"2024-04-10"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"- Worked with [@rouvinerh](https://github.com/rouvinerh) to create sequence diagrams for Run, Gym, Latest, History, and Handler.","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"#### Other Contributions","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"##### Project Management","lastModifiedDate":"2024-04-10"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"- Interfaced between [@L5_Z](https://github.com/L5-Z) and [@rouvinerh](https://github.com/rouvinerh) to integrate the `Handler` and `Storage` class with the `Run` and `Gym` classes. ","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"JustinSoh":48}},{"path":"docs/team/l5-z.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"# L5-Z - Project Portfolio Page","lastModifiedDate":"2024-04-12"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"## Overview","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"**PulsePilot** is a desktop application designed for **efficiently tracking health-related information** through a **Command Line Interface (CLI)**. For users who can type quickly, the CLI allows for faster data entry compared to traditional Graphical User Interface (GUI) applications on phones or computers.","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"### Summary of Contributions","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"The code I have written is documented [here](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003dl5-z\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2024-02-23\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other).","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"Below is the breakdown of what I have done.","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"#### Features Added","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"- Implemented the main points of the `Handler` class, to help direct user inputs to all other classes and support creation of all objects.","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"  - Performs substring extraction to pass as parameters to the relevant classes and successfully execute commands","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"- Implemented the `DataFile` class, to help allow for persistence through a stored and loaded `.txt` file.","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"  - File is highly resistant to tampering through a hashing function and hash comparison.","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"- Implemented all outputs methods relating to UI such as ASCII Art within the `Output` class.","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"#### Enhancements Implemented","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"- Implemented the `Parser.extractSubstringFromSpecificIndex` method, which allows for flexible use case and implementation across all classes that require substring attached to relevant flags in order to function. Allows for flags and substrings to not be declared in order.  ","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"- Implemented the `LogFile.getInstance()` allowing the team to instantiate a singular instance of LogFile to be used across all classes.","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"- Refactored Constants into smaller, specific classes to unify all similar constant usages.","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"  - Supports readability and searching of constants specific to a class","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"  - Common constants used across all classes in `ErrorConstant` and `UiConstant`.","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"- Worked with [@JustinSoh](https://github.com/JustinSoh) to easily integrate the saving/loading of Gym classes.","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"- Wrote the skeletal structure of various classes for other team members to fill, including `Appointment`.","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"- Refactored long methods where applicable, and moved author tags around.","lastModifiedDate":"2024-04-11"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"#### Documentation Written","lastModifiedDate":"2024-04-11"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"##### User Guide","lastModifiedDate":"2024-04-11"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"- Reviewed and improved clarity of the language used in UG and ensured consistency throughout the document.","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"- Replaced expected output with images.","lastModifiedDate":"2024-04-14"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"- Wrote UG portion for `Help`, `Exit`, Storage, Logging and FAQ.","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"##### Developer Guide","lastModifiedDate":"2024-04-11"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"- Wrote DG portion for Storage and Handler.","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"- Worked with [@rouvinerh](https://github.com/rouvinerh) to create sequence diagrams for Handler and DataFile.","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"#### Other Contributions","lastModifiedDate":"2024-04-11"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"##### Project Management","lastModifiedDate":"2024-04-11"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"- Helped to ensure that the dashboard icons for our team members and our team is green.","lastModifiedDate":"2024-04-11"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"  - Worked with our TA and [@JustinSoh](https://github.com/JustinSoh) to resolve an issue with the dashboard\u0027s weekly requirement.","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"- Interfaced between [@JustinSoh](https://github.com/JustinSoh) and [@rouvinerh](https://github.com/rouvinerh) to integrate the `Handler` and `DataFile` class with the `Run` and `Gym` classes.","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"- Interfaced between [@syj02](https://github.com/syj02) and [@j013n3](https://github.com/j013n3) to integrate the `Handler` and `DataFile` class with the `Bmi`, `Period` and `Appointment` classes. ","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"rouvinerh":2,"L5-Z":63}},{"path":"docs/team/raajamani.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"raajamani"},"content":"# raajamani - Project Portfolio Page","lastModifiedDate":"2024-04-13"},{"lineNumber":2,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":3,"author":{"gitId":"raajamani"},"content":"## Overview","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":5,"author":{"gitId":"raajamani"},"content":"**PulsePilot** is a desktop application designed for **efficiently tracking health-related information** through a **Command Line Interface (CLI)**. For users who can type quickly, the CLI allows for faster data entry compared to traditional Graphical User Interface (GUI) applications on phones or computers.","lastModifiedDate":"2024-04-13"},{"lineNumber":6,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"raajamani"},"content":"### Summary of Contributions","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"raajamani"},"content":"The code I have written is documented [here](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003draajamani\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2024-02-23\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other).","lastModifiedDate":"2024-04-13"},{"lineNumber":10,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"raajamani"},"content":"#### Features Implemented","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":13,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"raajamani"},"content":"#### Contributions to the UG","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"raajamani"},"content":"#### Contributions to the DG","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"raajamani"},"content":"##### Review/mentoring contributions","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"raajamani"},"content":"#### Contributions beyond the project team","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-13"}],"authorContributionMap":{"raajamani":25}},{"path":"docs/team/rouvinerh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"# rouvinerh - Project Portfolio Page","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"## Overview","lastModifiedDate":"2024-04-09"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"**PulsePilot** is a desktop application designed for **efficiently tracking health-related information** through a **Command Line Interface (CLI)**. For users who can type quickly, the CLI allows for faster data entry compared to traditional Graphical User Interface (GUI) applications on phones or computers.","lastModifiedDate":"2024-04-09"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"### Summary of Contributions","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"The code I have written is documented [here](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003drouvinerh\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2024-02-23\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other).","lastModifiedDate":"2024-04-09"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"Below is the breakdown of what I have done.","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"#### Features Added","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"- Implemented the first iteration of the Run, Gym and Workout classes, along with helper methods to calculate pace of the run.","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    - This allows PulsePilot to track the user\u0027s workout information.","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"- Implemented the Latest and History commands","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    - Allows user to view either their latest or all objects added to PulsePilot based on a filter string.","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"#### Enhancements Implemented","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"- Added `Validation` and `ValidationTest` classes to handle all input validation from both user and data file. This involved refactoring my teammates\u0027 code into one central class for data validation.","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    - This allows our team to easily handle all input validation, since methods are abstracted in a separate class.","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    - The `Validation` class prevents users from entering malformed input and makes our code more defensive against bugs or unintended use.","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"- Refactored long methods where applicable, and moved author tags around.","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"#### Documentation Written","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"##### User Guide","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"- Wrote the skeletal structure of the UG for other team members to fill.","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"- Replaced all expected output with images.","lastModifiedDate":"2024-04-09"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"- Wrote UG portion for Run, History and Delete.","lastModifiedDate":"2024-04-09"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"##### Developer Guide","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"- Wrote the skeletal structure of the DG for other team members to fill.","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"- Worked with [@JustinSoh](https://github.com/JustinSoh) to create sequence diagrams for Run, Gym, Latest, History, and Handler.","lastModifiedDate":"2024-04-09"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"- Wrote DG portion for Run, History and Delete.","lastModifiedDate":"2024-04-09"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"#### Other Contributions","lastModifiedDate":"2024-04-09"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"##### Project Management","lastModifiedDate":"2024-04-09"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"- Helped to ensure that the dashboard icons for our team members and our team is green.","lastModifiedDate":"2024-04-09"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"- Worked with our TA and [@JustinSoh](https://github.com/JustinSoh) to make sure our sequence diagrams were implemented properly and were not too complicated.","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"rouvinerh":48}},{"path":"docs/team/syj02.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"# syj02 - Project Portfolio Page","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"## Overview","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"**PulsePilot** is a desktop application designed for **efficiently tracking health-related information** through a **Command Line Interface (CLI)**. For users who can type quickly, the CLI allows for faster data entry compared to traditional Graphical User Interface (GUI) applications on phones or computers.","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"### Summary of Contributions","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"The code I have contributed is [here](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003dsyj02\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2024-02-23\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other).","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"#### Features Implemented","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"- Implemented Bmi class with the help of [@j013n3](https://github.com/j013n3)","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"- Implemented the Appointment class and the first stage of the Period class, which includes the calculation of the period length.","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"  - This allows users to track their medical appointments and period flow.","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"#### Contributions to the UG","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"I wrote the UG portion of Appointment and Period. ","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"#### Contributions to the DG","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"- Overview of components and the Architecture diagram.","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"- Design of Health package and HealthList class diagram.","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"- Add descriptions of add Appointment command.","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"#### Contributions beyond the project team","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"- Reported a high number of bugs in PE-D (Top 10%).","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-13"}],"authorContributionMap":{"j013n3":4,"syj02":27}},{"path":"src/main/java/constants/ErrorConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package constants;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":" * ErrorConstant class contains constants for various types of errors that may occur in the application.","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":" * The constants are used to provide descriptive error messages to the user when errors occur.","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"public class ErrorConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"    // Format for Exception Class","lastModifiedDate":"2024-04-11"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"    public static final String COLOR_HEADING \u003d \"\\u001b[31m\";","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"    public static final String COLOR_ENDING \u003d \"\\u001b[0m\";","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"    // Invalid Input Header for Exception Class","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_INPUT_HEADER \u003d \"Invalid Input Exception: \";","lastModifiedDate":"2024-04-11"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    public static final String INSUFFICIENT_INPUT_HEADER \u003d \"Invalid Input Exception: \";","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    public static final String OUT_OF_BOUND_HEADER \u003d \"Out of Bounds Error: \";","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"    // General Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"    public static final String NEGATIVE_VALUE_ERROR \u003d \"Requires a positive integer!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"    public static final String INVALID_INDEX_DELETE_ERROR \u003d \"Invalid index to delete!\";","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_INDEX_SEARCH_ERROR \u003d \"Given index is invalid.\";","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_INDEX_ERROR \u003d \"Index must be a valid positive integer.\";","lastModifiedDate":"2024-04-12"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"    // Storage Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"    public static final String SAVE_ERROR \u003d \"File save failed. Write error occurred:\";","lastModifiedDate":"2024-03-25"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"    public static final String LOAD_ERROR \u003d \"File read error:\" + \"Error at \";","lastModifiedDate":"2024-03-25"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    public static final String CREATE_FILE_ERROR \u003d \"Unable to create file.\";","lastModifiedDate":"2024-03-25"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    public static final String CORRUPT_ERROR \u003d \"File is corrupted!\" +","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"            System.lineSeparator() + \"Deleting \u0027pulsepilot_data.txt\u0027 and \u0027pulsepilot_hash.txt\u0027. Try running again!\" +","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"            System.lineSeparator() + UiConstant.PARTITION_LINE;","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"    public static final String DATA_INTEGRITY_ERROR \u003d \"Data file integrity compromised. Exiting.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    public static final String MISSING_INTEGRITY_ERROR \u003d \"Key files for integrity missing. Exiting.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"    public static final String HASH_ERROR \u003d \"Error occurred while processing file hash.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"    // Storage Error for Gym","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"    public static final String LOAD_GYM_FORMAT_ERROR \u003d LOAD_ERROR + \"Format of gym entry is incorrect/corrupted\";","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    public static final String LOAD_GYM_TYPE_ERROR \u003d LOAD_ERROR + \"Format of gym type is incorrect/corrupted\";","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"    public static final String LOAD_NUMBER_OF_STATION_ERROR \u003d LOAD_ERROR + \"Number of stations is corrupted\";","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    public static final String LOAD_NUMBER_OF_SETS_ERROR \u003d LOAD_ERROR","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"            + \"Number of weights doesn\u0027t match number of sets\";","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    // Input Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_COMMAND_ERROR \u003d \"Invalid command. Enter \u0027help\u0027 to view \" +","lastModifiedDate":"2024-04-09"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"            \"available commands.\";","lastModifiedDate":"2024-04-09"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"    public static final String NO_DATE_SPECIFIED_ERROR \u003d \"NA\";","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"j013n3"},"content":"    // Date errors","lastModifiedDate":"2024-03-28"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_DATE_ERROR \u003d \"Invalid date format. Format is DD-MM-YYYY in integers. \" +","lastModifiedDate":"2024-04-06"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"            \"Make sure a valid date is entered (take note of leap years)!\";","lastModifiedDate":"2024-04-08"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_YEAR_ERROR \u003d \"Year has to be after 1967!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_LEAP_YEAR_ERROR \u003d \"29 Feb does not exist in this year!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"    public static final String PARSING_DATE_ERROR \u003d\"Error parsing date!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"    // Time errors","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_ACTUAL_TIME_ERROR \u003d \"Invalid time format. Format is HH:MM in 24 hours format!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_ACTUAL_TIME_MINUTE_ERROR \u003d \"Minutes must be a positive integer \" +","lastModifiedDate":"2024-04-07"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"            \" 00 and 59.\";","lastModifiedDate":"2024-04-07"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_ACTUAL_TIME_HOUR_ERROR \u003d \"Hours must be a positive integer between 00 and 23\";","lastModifiedDate":"2024-04-07"},{"lineNumber":65,"author":{"gitId":"j013n3"},"content":"    public static final String PARSING_TIME_ERROR \u003d \"Error parsing time!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"    //Delete Errors","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    public static final String INSUFFICIENT_DELETE_PARAMETERS_ERROR \u003d \"Insufficient parameters for delete! \" +","lastModifiedDate":"2024-03-29"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"            \"Example input: /item:item /index:index\"","lastModifiedDate":"2024-04-06"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"    // EXERCISE ERRORS","lastModifiedDate":"2024-03-25"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"    // HISTORY ERRORS","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"    public static final String RUN_EMPTY_ERROR \u003d \"No runs found! You need to add a run entry first!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    public static final String GYM_EMPTY_ERROR \u003d \"No gyms found! You need to add a gym entry first!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"    public static final String WORKOUTS_EMPTY_ERROR \u003d \"No workouts found! You need to add \" +","lastModifiedDate":"2024-04-10"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"            \"either a run or a gym entry first!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"    public static final String APPOINTMENT_EMPTY_ERROR \u003d \"No appointments found! You need to add an \" +","lastModifiedDate":"2024-04-10"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"            \"appointment first!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"    public static final String BMI_EMPTY_ERROR \u003d \"No BMI entries found! You need to add a BMI entry first!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"    public static final String PERIOD_EMPTY_ERROR \u003d \"No periods found! You need to add a period entry first!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"    // RUN ERRORS","lastModifiedDate":"2024-03-25"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"    public static final String INSUFFICIENT_RUN_PARAMETERS_ERROR \u003d \"Insufficient parameters for run! \"","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"            + \"Example input: /e:run /d:5.25 /t:25:23 [/date:DATE]\"","lastModifiedDate":"2024-04-06"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_RUN_DISTANCE_ERROR \u003d \"Distance is a 2 decimal point positive number!\";","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_RUN_TIME_ERROR \u003d \"Invalid time format. Format is either HH:MM:SS or \" +","lastModifiedDate":"2024-04-01"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"            \"MM:SS with integers!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_SECOND_ERROR \u003d \"Seconds must be a positive integer between 00 and 59!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_HOUR_ERROR \u003d \"Hours is excluded if set to 00. Use MM:SS instead!\";","lastModifiedDate":"2024-04-07"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_MINUTE_ERROR \u003d \"Minutes must be a positive integer between 01 and 59!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"    // GYM ERRORS","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_GYM_STATION_FORMAT_ERROR \u003d \"Remember that you are now adding gym station input!\"","lastModifiedDate":"2024-04-13"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-13"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"            + \"Expected format: [Station Name] /s:[SETS] /r:[REPS] /w:[WEIGHTS]\";","lastModifiedDate":"2024-04-13"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"    public static final String INSUFFICIENT_GYM_PARAMETERS_ERROR \u003d \"Insufficient parameters for gym! \"","lastModifiedDate":"2024-03-31"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"            + \"Example input: /e:gym /n:2 [/date:DATE]\"","lastModifiedDate":"2024-04-06"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_NUMBER_OF_STATIONS_ERROR \u003d \"Number of stations is a positive number!\"","lastModifiedDate":"2024-04-13"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"            + \"For instance, \u0027/n:a\u0027 is invalid as it is not a number\"","lastModifiedDate":"2024-04-13"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"            + INVALID_GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_GYM_STATION_EMPTY_NAME_ERROR \u003d \"Gym station name cannot be blank!\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"            System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"            \"Please input an station name\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"            System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"            INVALID_GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_GYM_STATION_NAME_ERROR \u003d \"Gym station name can only have letters and cannot\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"            \"be more than 25 characters!\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"            System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"            \"Please input a shorter name.\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"            System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"            INVALID_GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_SETS_POSITIVE_DIGIT_ERROR \u003d \"Number of sets must be a positive integer!\"","lastModifiedDate":"2024-04-13"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-13"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"            + INVALID_GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_REPS_POSITIVE_DIGIT_ERROR \u003d \"Number of reps must be a positive integer!\"","lastModifiedDate":"2024-04-13"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"            + INVALID_GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_WEIGHTS_VALUE_ERROR \u003d \"The weight done for each set must \"","lastModifiedDate":"2024-04-13"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"            + \"be a multiple of 0.125.\" ","lastModifiedDate":"2024-04-06"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator() ","lastModifiedDate":"2024-04-06"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"            + \"This is because the smallest weight increment in most gyms is 0.125kg.\"","lastModifiedDate":"2024-04-06"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator() ","lastModifiedDate":"2024-04-06"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"            + INVALID_GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"    public static final String MAX_STATIONS_ERROR \u003d \"Number of stations done cannot be more than 50!\";","lastModifiedDate":"2024-04-12"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_WEIGHTS_ARRAY_FORMAT_ERROR \u003d \"Weights array format is incorrect!\"","lastModifiedDate":"2024-04-06"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"            + \"Weights must be separated by commas (with no whitespaces) \" +","lastModifiedDate":"2024-04-07"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"            \"and be a positive decimal (up to 3 decimal places)\"","lastModifiedDate":"2024-04-07"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"            + INVALID_GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_WEIGHTS_EMPTY_ERROR \u003d \"Weights array cannot be empty\"","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"            + INVALID_GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"         ","lastModifiedDate":"2024-04-13"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_WEIGHTS_NUMBER_ERROR \u003d \"Number of weight values must be the same as\"","lastModifiedDate":"2024-04-13"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"            + \" the number of sets!\"","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"            + \"Please check the number of sets (/s:[value]) and the number of weight values (/w:value1,value2,...)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"            + INVALID_GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":154,"author":{"gitId":"syj02"},"content":"    // HEALTH ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":155,"author":{"gitId":"syj02"},"content":"    public static final String INVALID_HEALTH_INPUT_ERROR \u003d \"Invalid input for health type! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":156,"author":{"gitId":"j013n3"},"content":"            \"Please input either /h:bmi, /h:period, /h:prediction or /h:appointment\";","lastModifiedDate":"2024-03-28"},{"lineNumber":157,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":158,"author":{"gitId":"syj02"},"content":"    // BMI ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":159,"author":{"gitId":"syj02"},"content":"    public static final String INSUFFICIENT_BMI_PARAMETERS_ERROR \u003d \"Insufficient parameters for bmi! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"            \"Example input: /h:bmi /height:height /weight:weight /date:date\"","lastModifiedDate":"2024-04-06"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":163,"author":{"gitId":"syj02"},"content":"    public static final String NEGATIVE_BMI_ERROR \u003d \"Bmi must be a positive value\";","lastModifiedDate":"2024-03-26"},{"lineNumber":164,"author":{"gitId":"syj02"},"content":"    public static final String NULL_BMI_ERROR \u003d \"Bmi object cannot be null.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":165,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_BMI_LIST_ERROR \u003d \"BMI List is empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":166,"author":{"gitId":"syj02"},"content":"    public static final String BMI_LIST_UNCLEARED_ERROR \u003d \"Bmi list is not cleared.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_HEIGHT_WEIGHT_INPUT_ERROR \u003d","lastModifiedDate":"2024-04-11"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"            \"Height and weight should be 2 decimal place positive numbers!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"    public static final String DATE_ALREADY_EXISTS_ERROR \u003d \"A Bmi input with the same date already exists.\";","lastModifiedDate":"2024-04-12"},{"lineNumber":170,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":171,"author":{"gitId":"syj02"},"content":"    // PERIOD ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"    public static final String INSUFFICIENT_PERIOD_PARAMETERS_ERROR \u003d \"Insufficient parameters for period! \"","lastModifiedDate":"2024-04-08"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-08"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"            + \"Example inputs: \u0027/h:period /start:startDate\u0027 or \u0027/h:period /start:startDate /end:endDate\u0027\"","lastModifiedDate":"2024-04-08"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"    public static final String END_DATE_NOT_FOUND_ERROR \u003d \"Start date already exists! \" +","lastModifiedDate":"2024-04-08"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"            \"Please add an end date to the latest period input in order to input a new period.\";","lastModifiedDate":"2024-04-08"},{"lineNumber":179,"author":{"gitId":"syj02"},"content":"    public static final String NULL_PERIOD_ERROR \u003d \"Period object cannot be null.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":180,"author":{"gitId":"syj02"},"content":"    public static final String NULL_START_DATE_ERROR \u003d \"Start date of period cannot be empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_START_DATE_ERROR \u003d \"Invalid start date!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_END_DATE_ERROR \u003d \"Invalid end date!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":183,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_PERIOD_LIST_ERROR \u003d \"Period List is empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":184,"author":{"gitId":"syj02"},"content":"    public static final String PERIOD_LIST_UNCLEARED_ERROR \u003d \"Period list is not cleared.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATE_IN_FUTURE_ERROR \u003d \"Date specified cannot be later than today\u0027s date.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":186,"author":{"gitId":"syj02"},"content":"    public static final String PERIOD_END_BEFORE_START_ERROR \u003d \"Start date of period must be before end date.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":187,"author":{"gitId":"j013n3"},"content":"    public static final String UNABLE_TO_MAKE_PREDICTIONS_ERROR \u003d \"Insufficient period cycles to make prediction.\"","lastModifiedDate":"2024-04-08"},{"lineNumber":188,"author":{"gitId":"j013n3"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-08"},{"lineNumber":189,"author":{"gitId":"j013n3"},"content":"            + \"Enter at least four period inputs for prediction of the next period\u0027s start date.\";","lastModifiedDate":"2024-04-08"},{"lineNumber":190,"author":{"gitId":"j013n3"},"content":"    public static final String CURRENT_START_BEFORE_PREVIOUS_END \u003d","lastModifiedDate":"2024-04-08"},{"lineNumber":191,"author":{"gitId":"j013n3"},"content":"            \"The start date of your current period input needs to be after the end date of your previous period input.\"","lastModifiedDate":"2024-04-08"},{"lineNumber":192,"author":{"gitId":"j013n3"},"content":"                    + System.lineSeparator()","lastModifiedDate":"2024-04-08"},{"lineNumber":193,"author":{"gitId":"j013n3"},"content":"                    + \"You may enter \u0027history /item:period\u0027 to check your period history.\";","lastModifiedDate":"2024-04-08"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_START_DATE_INPUT_ERROR \u003d \"Error is resulted by two possible reasons. \"","lastModifiedDate":"2024-04-08"},{"lineNumber":195,"author":{"gitId":"j013n3"},"content":"            +System.lineSeparator()","lastModifiedDate":"2024-04-08"},{"lineNumber":196,"author":{"gitId":"j013n3"},"content":"            + \"1. End date for previous period is still empty. \" +","lastModifiedDate":"2024-04-08"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"            \"Add an end date before starting a new period input!\"","lastModifiedDate":"2024-04-08"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-08"},{"lineNumber":199,"author":{"gitId":"j013n3"},"content":"            + \"2. If you\u0027re adding an end date to the latest period input, the start dates do not match! \" +","lastModifiedDate":"2024-04-12"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"            \"Enter \u0027history /item:period\u0027 to view existing period inputs.\";","lastModifiedDate":"2024-04-08"},{"lineNumber":201,"author":{"gitId":"syj02"},"content":"    public static final String LENGTH_MUST_BE_POSITIVE_ERROR \u003d \"Length cannot be less than 1 day.\";","lastModifiedDate":"2024-04-11"},{"lineNumber":202,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":203,"author":{"gitId":"syj02"},"content":"    // APPOINTMENT ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":204,"author":{"gitId":"syj02"},"content":"    public static final String INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR \u003d \"Insufficient parameters for appointment! \" +","lastModifiedDate":"2024-04-09"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"            \"Example input: /h:appointment /date:date /time:time /description:description /place:place\"","lastModifiedDate":"2024-04-06"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":208,"author":{"gitId":"syj02"},"content":"    public static final String NULL_APPOINTMENT_ERROR \u003d \"Appointment object cannot be null.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":209,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_APPOINTMENT_LIST_ERROR \u003d \"Appointment list is empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":210,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_LIST_UNCLEARED_ERROR \u003d \"Appointment list is not cleared.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":211,"author":{"gitId":"j013n3"},"content":"    public static final String START_INDEX_NEGATIVE_ERROR \u003d \"Start index for prediction must be positive\";","lastModifiedDate":"2024-03-28"},{"lineNumber":212,"author":{"gitId":"syj02"},"content":"    public static final String END_INDEX_SMALLER_THAN_START_ERROR \u003d","lastModifiedDate":"2024-04-09"},{"lineNumber":213,"author":{"gitId":"syj02"},"content":"            \"End index must be smaller than start index\";","lastModifiedDate":"2024-04-09"},{"lineNumber":214,"author":{"gitId":"j013n3"},"content":"    public static final String NULL_DATE_ERROR \u003d \"Date of appointment cannot be empty.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":215,"author":{"gitId":"j013n3"},"content":"    public static final String NULL_TIME_ERROR \u003d \"Time of appointment cannot be empty.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":216,"author":{"gitId":"j013n3"},"content":"    public static final String DESCRIPTION_LENGTH_ERROR \u003d \"Description cannot be more than 100 characters\";","lastModifiedDate":"2024-03-28"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_DESCRIPTION_ERROR \u003d \"Appointment description can only \" +","lastModifiedDate":"2024-03-31"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"            \"contain alphanumeric characters, spaces, inverted commas and quotes!\";","lastModifiedDate":"2024-04-08"},{"lineNumber":219,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":220,"author":{"gitId":"JustinSoh"},"content":"    public static final String INSUFFICIENT_HISTORY_FILTER_ERROR \u003d \"Missing filter used!\"","lastModifiedDate":"2024-04-11"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"            + \"Please use the \u0027latest\u0027 command followed by the \u0027/item:\u0027 flag and one of the following options:\"","lastModifiedDate":"2024-04-11"},{"lineNumber":223,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"            + \"- run\"","lastModifiedDate":"2024-04-11"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"            + \"- gym\"","lastModifiedDate":"2024-04-11"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"            + \"- workouts\"","lastModifiedDate":"2024-04-11"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"            + \"- period\"","lastModifiedDate":"2024-04-11"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"            + \"- bmi\"","lastModifiedDate":"2024-04-11"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"            + \"- appointment\";","lastModifiedDate":"2024-04-13"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":236,"author":{"gitId":"JustinSoh"},"content":"    public static final String INSUFFICIENT_LATEST_FILTER_ERROR \u003d \"Filter is missing!\"","lastModifiedDate":"2024-04-11"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"            + \"Please use the \u0027latest\u0027 command followed by the \u0027/item:\u0027 flag and one of the following options:\"","lastModifiedDate":"2024-04-11"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"            + \"- run\"","lastModifiedDate":"2024-04-11"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"            + \"- gym\"","lastModifiedDate":"2024-04-11"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"            + \"- period\"","lastModifiedDate":"2024-04-11"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"            + \"- bmi\"","lastModifiedDate":"2024-04-11"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"            + \"- appointment\";","lastModifiedDate":"2024-04-13"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":250,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_HISTORY_FILTER_ERROR \u003d \"Filter is invalid!\"","lastModifiedDate":"2024-04-11"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"            + \"Please only use the following flags\"","lastModifiedDate":"2024-04-11"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"            + \"- run\"","lastModifiedDate":"2024-04-11"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"            + \"- gym\"","lastModifiedDate":"2024-04-11"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"            + \"- workouts\"","lastModifiedDate":"2024-04-11"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"            + \"- period\"","lastModifiedDate":"2024-04-11"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":262,"author":{"gitId":"JustinSoh"},"content":"            + \"- bmi\"","lastModifiedDate":"2024-04-11"},{"lineNumber":263,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"            + \"- appointment\";","lastModifiedDate":"2024-04-13"},{"lineNumber":265,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_LATEST_OR_DELETE_FILTER \u003d \"Filter is invalid!\"","lastModifiedDate":"2024-04-13"},{"lineNumber":267,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":268,"author":{"gitId":"JustinSoh"},"content":"            + \"Please only use the following flags\"","lastModifiedDate":"2024-04-11"},{"lineNumber":269,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"            + \"- run\"","lastModifiedDate":"2024-04-11"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"            + \"- gym\"","lastModifiedDate":"2024-04-11"},{"lineNumber":273,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":274,"author":{"gitId":"JustinSoh"},"content":"            + \"- period\"","lastModifiedDate":"2024-04-11"},{"lineNumber":275,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":276,"author":{"gitId":"JustinSoh"},"content":"            + \"- bmi\"","lastModifiedDate":"2024-04-11"},{"lineNumber":277,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"            + \"- appointment\";","lastModifiedDate":"2024-04-13"},{"lineNumber":279,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"    public static final String TOO_MANY_SLASHES_ERROR \u003d \"Too many \u0027/\u0027 characters specified within input. \" +","lastModifiedDate":"2024-04-06"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"            \"Parameters cannot contain any \u0027/\u0027 characters!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"    public static final String DISTANCE_TOO_LONG_ERROR \u003d \"The world\u0027s longest foot race is the Self-Transcendence \"","lastModifiedDate":"2024-04-06"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"            + \"3100 Mile Race.\"","lastModifiedDate":"2024-04-06"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"            + \"Please enter a more realistic distance less than 5000km!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"    public static final String ZERO_HEIGHT_AND_WEIGHT_ERROR \u003d \"Height and weight must be more than 0.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"    public static final String MAX_HEIGHT_ERROR \u003d \"The tallest man, Robert Wadlow was 2.72m.\"","lastModifiedDate":"2024-04-06"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"            + \"Please enter a more realistic height less than 2.75m!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"    public static final String MAX_WEIGHT_ERROR \u003d \"The heaviest human being, Jon Brower Minnnoch weighed in at 635kg.\"","lastModifiedDate":"2024-04-06"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"            + \"Please enter a more realistic weight less than 640kg!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":296,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_WEIGHT_MAX_ERROR \u003d \"The heaviest object ever lifted by a human (Paul Anderson) \"","lastModifiedDate":"2024-04-13"},{"lineNumber":297,"author":{"gitId":"JustinSoh"},"content":"            + \"was 2840kg.\"","lastModifiedDate":"2024-04-13"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"            + \"Please enter a more realistic gym weight less than 2850kg!\";","lastModifiedDate":"2024-04-09"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"    public static final String ZERO_DISTANCE_ERROR \u003d \"Distance run cannot be 0!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"    public static final String ZERO_TIME_ERROR \u003d \"Time cannot be set to 00:00!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"    public static final String MAX_PACE_ERROR \u003d \"The calculated pace is too slow!\"","lastModifiedDate":"2024-04-06"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"            + \"Pace calculated cannot be slower than 30:00/km!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"    public static final String MIN_PACE_ERROR \u003d \"The calculated pace is too fast!\"","lastModifiedDate":"2024-04-06"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"            + \"Pace calculated cannot be faster than 1:00/km!\";","lastModifiedDate":"2024-04-09"},{"lineNumber":308,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_USERNAME_ERROR \u003d \"\\u001b[31mUsername can only contain alphanumeric characters \" +","lastModifiedDate":"2024-04-09"},{"lineNumber":309,"author":{"gitId":"L5-Z"},"content":"            \"and spaces!\\u001b[0m\";","lastModifiedDate":"2024-04-09"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"    public static final String NO_PERMISSIONS_ERROR \u003d \"Cannot read or write to current directory. Exiting.\";","lastModifiedDate":"2024-04-10"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_WORKOUT_TYPE_ERROR \u003d \"Invalid workout type! Please input\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"            \" either /e:run or /e:gym!\";","lastModifiedDate":"2024-04-11"},{"lineNumber":313,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"j013n3":37,"JustinSoh":136,"rouvinerh":87,"L5-Z":22,"syj02":31}},{"path":"src/main/java/constants/HealthConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package constants;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":" * HealthConstant class contains constants related to health-related functionalities in the application.","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":" * It includes headers, flags, parameters, thresholds, formatted strings/messages, and split indices.","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"public class HealthConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"    // Headers","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"    public static final String BMI \u003d \"bmi\";","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"    public static final String PERIOD \u003d \"period\";","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT \u003d \"appointment\";","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"    // Flags","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    public static final String HEALTH_FLAG \u003d \"/h:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    public static final String HEIGHT_FLAG \u003d \"/height:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    public static final String WEIGHT_FLAG \u003d \"/weight:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATE_FLAG \u003d \"/date:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    public static final String START_FLAG \u003d \"/start:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    public static final String END_FLAG \u003d \"/end:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    public static final String TIME_FLAG \u003d \"/time:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    public static final String DESCRIPTION_FLAG \u003d \"/description:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"    // Parameters","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer NUM_BMI_PARAMETERS \u003d 3;","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer NUM_PERIOD_PARAMETERS \u003d 2;","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer NUM_APPOINTMENT_PARAMETERS \u003d 3;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"    // Threshold","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"    public static final double UNDERWEIGHT_BMI_THRESHOLD \u003d 18.5;","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"    public static final double NORMAL_BMI_THRESHOLD \u003d 25.0;","lastModifiedDate":"2024-04-08"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"    public static final double OVERWEIGHT_BMI_THRESHOLD \u003d 30.0;","lastModifiedDate":"2024-04-08"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"    public static final double OBESE_BMI_THRESHOLD \u003d 40.0;","lastModifiedDate":"2024-04-08"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    public static final double MIN_WEIGHT \u003d 0;","lastModifiedDate":"2024-04-06"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    public static final double MIN_HEIGHT \u003d 0;","lastModifiedDate":"2024-04-06"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    public static final double MAX_HEIGHT \u003d 2.75;","lastModifiedDate":"2024-04-06"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    public static final double MAX_WEIGHT \u003d 640;","lastModifiedDate":"2024-04-06"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"    public static final double MIN_BMI \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    // Formatted Strings/Messages","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"    // BMI","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"    public static final String LOG_DELETE_BMI_FORMAT \u003d \"Removed BMI entry of %.2f from %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"    public static final String TWO_DECIMAL_PLACE_FORMAT \u003d \"%.2f\";","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"    public static final String BMI_ADDED_MESSAGE_PREFIX \u003d \"Added: bmi | \";","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"    public static final String BMI_REMOVED_MESSAGE_PREFIX \u003d \"Removed BMI with index: \";","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"    public static final String UNDERWEIGHT_MESSAGE \u003d \"You\u0027re underweight.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"    public static final String NORMAL_WEIGHT_MESSAGE \u003d \"Great! You\u0027re within normal range.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    public static final String OVERWEIGHT_MESSAGE \u003d \"You\u0027re overweight.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"    public static final String OBESE_MESSAGE \u003d \"You\u0027re obese.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"    public static final String SEVERELY_OBESE_MESSAGE \u003d \"You\u0027re severely obese.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"    public static final String BMI_HISTORY_HEADER \u003d \"Your BMI history:\";","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"    // PERIOD","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"j013n3"},"content":"    public static final int MIN_SIZE_FOR_COMPARISON \u003d 1;","lastModifiedDate":"2024-04-13"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"    public static final String PRINT_PERIOD_FORMAT \u003d \"Period Start: %s Period End: %s\"","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"            + \"Period Length: %d %s\";","lastModifiedDate":"2024-04-08"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"    public static final String PRINT_BMI_FORMAT \u003d \"%s\"","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"            + \"Your BMI is %.2f\"","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"j013n3"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"j013n3"},"content":"            + \"%s\";","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"    public static final String LOG_DELETE_PERIOD_FORMAT \u003d \"Removed period entry with start date: %s and end date: %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"    public static final String PERIOD_ADDED_MESSAGE_PREFIX \u003d \"Added: period | \";","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"    public static final String PERIOD_REMOVED_MESSAGE_PREFIX \u003d \"Removed period with index: \";","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"    public static final String PERIOD_HISTORY_HEADER \u003d \"Your Period history:\";","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"    public static final String PERIOD_TOO_LONG_MESSAGE \u003d \"Your period length is out of the healthy range. \" +","lastModifiedDate":"2024-04-08"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"            \"Please consult a gynaecologist if this persists.\";","lastModifiedDate":"2024-04-08"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"    // PREDICTION","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"    public static final String PRINT_CYCLE_FORMAT \u003d \"Cycle Length: %d day(s)\";","lastModifiedDate":"2024-04-13"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"    public static final Integer LATEST_THREE_CYCLE_LENGTHS \u003d 3;","lastModifiedDate":"2024-03-25"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"    public static final Integer FIRST_CYCLE_INDEX \u003d 3;","lastModifiedDate":"2024-04-09"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"    public static final Integer LAST_CYCLE_INDEX \u003d 1;","lastModifiedDate":"2024-04-09"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer MIN_SIZE_FOR_PREDICTION \u003d 4;","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"    public static final Integer MIN_LENGTH \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":77,"author":{"gitId":"j013n3"},"content":"    public static final String PREDICTED_START_DATE_MESSAGE \u003d \"Your next cycle\u0027s predicted start date is \";","lastModifiedDate":"2024-03-25"},{"lineNumber":78,"author":{"gitId":"j013n3"},"content":"    public static final String COUNT_DAYS_MESSAGE \u003d \", in \";","lastModifiedDate":"2024-03-25"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"    public static final String PERIOD_IS_LATE \u003d \". Your period is late by \";","lastModifiedDate":"2024-03-25"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"    public static final String PREDICTED_DATE_IS_TODAY_MESSAGE \u003d \", which is today! \";","lastModifiedDate":"2024-04-08"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"    public static final String DAYS_MESSAGE \u003d \"day(s)\";","lastModifiedDate":"2024-04-13"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"    // APPOINTMENT","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"    public static final String PRINT_APPOINTMENT_FORMAT \u003d \"On %s at %s: %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"    public static final String LOG_DELETE_APPOINTMENT_FORMAT \u003d \"Removed appointment on %s at %s: %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_ADDED_MESSAGE_PREFIX \u003d \"Added: appointment | \";","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_REMOVED_MESSAGE_PREFIX \u003d \"Removed appointment with index: \";","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_DESCRIPTION_LENGTH \u003d 100;","lastModifiedDate":"2024-03-28"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_HISTORY_HEADER \u003d \"Your Appointment history:\";","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    // SPLIT INDEX","lastModifiedDate":"2024-04-01"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"    public static final int BMI_HEIGHT_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"    public static final int BMI_WEIGHT_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"    public static final int BMI_DATE_INDEX \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"    public static final int PERIOD_START_DATE_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"    public static final int PERIOD_END_DATE_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"    public static final int APPOINTMENT_DATE_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"    public static final int APPOINTMENT_TIME_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"    public static final int APPOINTMENT_DESCRIPTION_INDEX \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_PERIOD \u003d 3;","lastModifiedDate":"2024-04-06"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_BMI \u003d 4;","lastModifiedDate":"2024-04-06"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_APPOINTMENT \u003d 4;","lastModifiedDate":"2024-04-06"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"    //Latest object","lastModifiedDate":"2024-04-10"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"    public static final int FIRST_ITEM \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"j013n3":25,"JustinSoh":3,"rouvinerh":31,"L5-Z":20,"syj02":28}},{"path":"src/main/java/constants/UiConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package constants;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import java.io.File;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" * UiConstants class contains constants related to user-interaction-related functionalities in the application.","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":" * It includes constants for special characters, regular expressions, UI replies, storage paths,","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":" * numerical values, history management, delete operations, and split indices.","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"public class UiConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"    // Special Characters","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_SLASH \u003d \"/\";","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"    public static final String SPLIT_BY_COLON \u003d \":\";","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"    public static final String SPLIT_BY_WHITESPACE \u003d \" \";","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_COMMAS \u003d \",\";","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    public static final String DASH \u003d \"-\";","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"    public static final String LINE \u003d \" | \";","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"    public static final String PARTITION_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"    public static final String FULL_STOP \u003d \".\";","lastModifiedDate":"2024-04-08"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    // Regex","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_DATE_REGEX \u003d \"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_TWO_DP_NUMBER_REGEX \u003d \"^\\\\d+\\\\.\\\\d{2}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_TIME_REGEX \u003d \"^\\\\d{2}:\\\\d{2}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_TIME_WITH_HOURS_REGEX \u003d \"^\\\\d{2}:\\\\d{2}:\\\\d{2}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    public static final String VALID_POSITIVE_INTEGER_REGEX \u003d \"^[1-9]\\\\d*$\";","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_APPOINTMENT_DESCRIPTION_REGEX \u003d \"^[0-9a-zA-Z\\\\s\u0027\\\"]+$\";","lastModifiedDate":"2024-04-08"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_GYM_STATION_NAME_REGEX \u003d \"^[A-Za-z\\\\s]+$\";","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_USERNAME_REGEX \u003d \"^[0-9A-Za-z\\\\s]+$\";","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    public static final String VALID_WEIGHTS_ARRAY_REGEX \u003d \"^\\\\d+(\\\\.\\\\d{1,3})?(,\\\\d+(\\\\.\\\\d{1,3})?)*$\";","lastModifiedDate":"2024-04-06"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    // PulsePilot UI replies","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"    public static final String EXIT_MESSAGE \u003d \"Initiating PulsePilot landing sequence...\";","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    // Storage","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"    public static final int DATA_TYPE_INDEX \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    public static final int NAME_INDEX \u003d 1;","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"    public static final String NAME_LABEL \u003d \"NAME\";","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"    public static final String LOG_FILE_PATH \u003d \"./pulsepilot_log.txt\";","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    public static String dataFilePath \u003d \"./pulsepilot_data.txt\";","lastModifiedDate":"2024-04-08"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    public static String hashFilePath \u003d \"./pulsepilot_hash.txt\";","lastModifiedDate":"2024-04-08"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    public static File saveFile \u003d new File(UiConstant.dataFilePath);","lastModifiedDate":"2024-04-08"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"    public static final int FILE_FOUND \u003d 0;","lastModifiedDate":"2024-03-25"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"    public static final int FILE_NOT_FOUND \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"    public static final String FILE_FOUND_MESSAGE \u003d \"Welcome back, Captain \";","lastModifiedDate":"2024-04-11"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"    public static final String FILE_MISSING_MESSAGE \u003d \"What is your name, voyager?\";","lastModifiedDate":"2024-04-11"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"    public static final String SUCCESSFUL_LOAD \u003d \"Prior data found. Orbit has been synchronised.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"    // History","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"    public static final String ITEM_FLAG \u003d \"/item:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    // Delete","lastModifiedDate":"2024-03-29"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    public static final String INDEX_FLAG \u003d \"/index:\";","lastModifiedDate":"2024-03-29"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"    // Numerical values","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_SECONDS_IN_MINUTE \u003d 60;","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_SECONDS_IN_HOUR \u003d 3600;","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"    public static final int MIN_MINUTES \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    public static final int MAX_MINUTES \u003d 59;","lastModifiedDate":"2024-04-13"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    public static final int MAX_SECONDS \u003d 59;","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"    public static final int MIN_HOURS \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"    public static final int MAX_HOURS \u003d 23;","lastModifiedDate":"2024-04-13"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"    public static final double POWER_OF_TWO \u003d 2.0;","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"    public static final double ROUNDING_FACTOR \u003d 100.0;","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_DELETE_PARAMETERS \u003d 2;","lastModifiedDate":"2024-03-29"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"    public static final int MINIMUM_PERIOD_COUNT \u003d 1;","lastModifiedDate":"2024-04-08"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"    public static final int MIN_SECONDS \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_DELETE \u003d 2;","lastModifiedDate":"2024-04-13"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_LATEST_AND_HISTORY \u003d 1;","lastModifiedDate":"2024-04-13"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"    // SPLIT INDEX","lastModifiedDate":"2024-04-01"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    public static final int DELETE_ITEM_STRING_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"    public static final int DELETE_ITEM_NUMBER_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"    public static final int SPLIT_TIME_HOUR_INDEX \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"    public static final int SPLIT_TIME_MINUTES_INDEX \u003d 1;","lastModifiedDate":"2024-04-13"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"j013n3":6,"JustinSoh":16,"rouvinerh":34,"L5-Z":22,"syj02":4}},{"path":"src/main/java/constants/WorkoutConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package constants;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":" * WorkoutConstants class contains constants related to workout-related functionalities in the application.","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":" * It includes constants for workout types, flags, parameters, indices, file loading, history display,","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" * and formatted strings.","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"public class WorkoutConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"    // Workout Delimiter","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    public static final String NUMBER_OF_STATIONS_FLAG \u003d \"/n:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    public static final String EXERCISE_FLAG \u003d \"/e:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"    public static final String DISTANCE_FLAG \u003d \"/d:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    public static final String RUN_TIME_FLAG \u003d \"/t:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATE_FLAG \u003d \"/date:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    public static final String SETS_FLAG \u003d \"/s:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    public static final String REPS_FLAG \u003d \"/r:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    public static final String WEIGHTS_FLAG \u003d \"/w:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    public static final String COLON \u003d \":\";","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    // Integers","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_RUN_PARAMETERS \u003d 3;","lastModifiedDate":"2024-04-01"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_GYM_PARAMETERS \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_GYM_STATION_PARAMETERS \u003d 4;","lastModifiedDate":"2024-04-01"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_PARTS_FOR_RUN_TIME \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_PARTS_FOR_RUN_TIME_WITH_HOURS \u003d 3;","lastModifiedDate":"2024-04-01"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"    public static final int MAX_GYM_STATION_NAME_LENGTH \u003d 25;","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    public static final double MIN_GYM_WEIGHT \u003d 0.000;","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    public static final double MAX_RUN_DISTANCE \u003d 5000.00;","lastModifiedDate":"2024-04-06"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    public static final double MIN_RUN_DISTANCE \u003d 0;","lastModifiedDate":"2024-04-06"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    public static final double MAX_PACE \u003d 30;","lastModifiedDate":"2024-04-06"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    public static final double MIN_PACE \u003d 1;","lastModifiedDate":"2024-04-06"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    public static final double MAX_GYM_WEIGHT \u003d 2850.000;","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    public static final double WEIGHT_MULTIPLE \u003d 0.125;","lastModifiedDate":"2024-04-06"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    public static final int MAX_GYM_STATION_NUMBER \u003d 50;","lastModifiedDate":"2024-04-12"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_TIME_HOUR_INDEX \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_TIME_MINUTE_INDEX \u003d 1;","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_TIME_SECOND_INDEX \u003d 2;","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_TIME_NO_HOURS_MINUTE_INDEX \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_TIME_NO_HOURS_SECOND_INDEX \u003d 1;","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"    // INDEX","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    public static final Integer STATION_NAME_INDEX \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    public static final int NO_HOURS_PRESENT \u003d -1;","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_NUMBER_OF_STATIONS_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_DATE_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_STATION_NAME_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_STATION_SET_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_STATION_REPS_INDEX \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_STATION_WEIGHTS_INDEX \u003d 3;","lastModifiedDate":"2024-04-01"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    public static final int MIN_GYM_STATION_WEIGHTS_ARRAY_LENGTH \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_TIME_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_DISTANCE_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_DATE_INDEX \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"    // KEYWORDS","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"    public static final String BACK \u003d \"back\";","lastModifiedDate":"2024-04-12"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"    public static final String RUN \u003d \"run\";","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"    public static final String GYM \u003d \"gym\";","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"    public static final String ALL \u003d \"workouts\";","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    public static final String TWO_DECIMAL_PLACE_FORMAT \u003d \"%.2f\";","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    public static final String TWO_DIGIT_PLACE_FORMAT \u003d \"%02d\";","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"    // GYM FILE LOADING CONSTANTS","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"    public static final int GYM_FILE_INDEX \u003d 0;","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    public static final int NUM_OF_STATIONS_FILE_INDEX \u003d 1;","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"    public static final int DATE_FILE_INDEX \u003d 2;","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"    public static final int GYM_FILE_BASE_COUNTER \u003d 3;","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"    public static final int SETS_OFFSET \u003d 1;","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"    public static final int REPS_OFFSET \u003d 2;","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"    public static final int WEIGHTS_OFFSET \u003d 3;","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"    public static final int INCREMENT_OFFSET \u003d 4;","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"    // HISTORY (ALL WORKOUTS) CONSTANTS","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_HEADER \u003d \"Showing all workouts (runs and gyms):\";","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_DATA_FORMAT \u003d \"%-5s\\t%-12s\\t%-25s\\t%-20s\\t%-8s\";","lastModifiedDate":"2024-04-12"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_HEADER_FORMAT \u003d String.format(","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"            \"%-6s\\t%-5s\\t%-12s\\t%-25s\\t%-20s\\t%-8s\", \"Index\",","lastModifiedDate":"2024-04-12"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"            \"Type\", \"Date\", \"[Distance (km) / Station]\", \"[Duration / Sets]\", \"Pace (min/km)\");","lastModifiedDate":"2024-04-12"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_DATA_HEADER_FORMAT \u003d \"%-6s\\t%s\";","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    // Formatted Strings/Messages","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"    public static final String RUN_DATA_FORMAT \u003d \"%-6s\\t%-10s\\t%-10s\\t%-10s\\t%-12s\";","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"    public static final String RUN_DATA_INDEX_FORMAT \u003d \"%-6d\\t%-6s\";","lastModifiedDate":"2024-04-04"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"    public static final String RUN_HEADER_INDEX_FORMAT \u003d String.format(\"%-6s\\t%-6s\\t%-10s\\t%-10s\\t%-10s\\t%-12s\",","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"            \"Index\", \"Type\", \"Time\", \"Distance\", \"Pace\", \"Date\");","lastModifiedDate":"2024-04-04"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_DELETE_MESSAGE_FORMAT \u003d \"Removed Run entry with %s km at %s.\";","lastModifiedDate":"2024-04-12"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"    public static final String GYM_STATION_FORMAT \u003d \"%s: \";","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_SET_FORMAT \u003d \"%d reps at %.3f KG\";","lastModifiedDate":"2024-04-06"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_SET_INDEX_FORMAT \u003d \"\\t- Set %d. %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"    public static final String GYM_DELETE_MESSAGE_FORMAT \u003d \"Removed Gym entry with %d station(s).\";","lastModifiedDate":"2024-04-12"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"    public static final String INDIVIDUAL_GYM_STATION_FORMAT \u003d \"%d sets\";","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"    public static final String RUN_HEADER \u003d \"Type\\tTime\\t\\tDistance\\tPace\\t\\tDate\";","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"    public static final String ADD_RUN \u003d \"Successfully added a new run session\";","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"    public static final String ADD_GYM \u003d \"Successfully added a new gym session\";","lastModifiedDate":"2024-03-21"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"    public static final String STATION_GYM_FORMAT \u003d \"e.g. Bench Press /s:2 /r:4 \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"            \"/w:10,20\";","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"    public static final String TIME_WITH_HOURS_FORMAT \u003d TWO_DIGIT_PLACE_FORMAT","lastModifiedDate":"2024-04-12"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"            + COLON + TWO_DIGIT_PLACE_FORMAT","lastModifiedDate":"2024-04-12"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"            + COLON + TWO_DIGIT_PLACE_FORMAT;","lastModifiedDate":"2024-04-12"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"    public static final String TIME_WITHOUT_HOURS_FORMAT \u003d TWO_DIGIT_PLACE_FORMAT","lastModifiedDate":"2024-04-12"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"            + COLON + TWO_DIGIT_PLACE_FORMAT;","lastModifiedDate":"2024-04-12"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_PACE_FORMAT \u003d \"%d:%02d/km\";","lastModifiedDate":"2024-04-12"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_GYM_INPUT \u003d \"Invalid gym parameters!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_GYM_WITH_DATE \u003d 3;","lastModifiedDate":"2024-04-06"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_GYM_WITHOUT_DATE \u003d 2;","lastModifiedDate":"2024-04-06"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_GYM_STATION \u003d 3;","lastModifiedDate":"2024-04-06"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_RUN_WITH_DATE \u003d 4;","lastModifiedDate":"2024-04-06"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_RUN_WITHOUT_DATE \u003d 3;","lastModifiedDate":"2024-04-06"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"JustinSoh":47,"rouvinerh":58,"L5-Z":10,"syj02":5}},{"path":"src/main/java/health/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":" * The {@code Appointment} class inherits from the {@code Health} class.","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":" * It contains information about the date, time, and description of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"public class Appointment extends Health {","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"     * The date of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    protected LocalDate date;","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"     * The time of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"    protected LocalTime time;","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"     * The description of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    protected String description;","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"     * A parser object to access Parser Class.","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    private final Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"     * A healthlist object to access HealthList Class which manages and stores health data.","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    private final HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-07"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-10"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"     * Constructor for {@code Appointment} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"     * @param stringDate A string representing the date of the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"     * @param stringTime A string representing the time of the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"     * @param description A string describing the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"    public Appointment(String stringDate, String stringTime, String description) {","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"        this.date \u003d parser.parseDate(stringDate);","lastModifiedDate":"2024-04-07"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"        this.time \u003d parser.parseTime(stringTime);","lastModifiedDate":"2024-04-07"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"        healthList.addAppointment(this);","lastModifiedDate":"2024-04-07"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"     * Retrieves the date of the appointment of {@code LocalDate} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"     * @return The date of appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"        assert date !\u003d null : ErrorConstant.NULL_DATE_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"        return this.date;","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"     * Retrieves the time of the appointment of {@code LocalTime} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"     * @return The time of appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"        assert time !\u003d null : ErrorConstant.NULL_TIME_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"        return this.time;","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"     * Retrieves the description of the appointment of {@code String} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"     * @return The description of appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"    public String getDescription() {","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"        return this.description;","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"     * Returns the string representation of an {@code Appointment} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"     * @return A formatted string representing an {@code Appointment} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"    @Override","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"    public String toString() {","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"        return String.format(HealthConstant.PRINT_APPOINTMENT_FORMAT,","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"                getDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"                getTime(),","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"                getDescription());","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"j013n3":7,"JustinSoh":3,"rouvinerh":4,"L5-Z":1,"syj02":83}},{"path":"src/main/java/health/Bmi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"package health;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":" * The {@code Bmi} class inherits from the {@code Health} class.","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":" * It contains information about the height, weight, and bmi value of the user, and provides functionalities","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":" * to calculate and categories the BMI values.","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":" */","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"public class Bmi extends Health {","lastModifiedDate":"2024-03-15"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"     * The height of the user in meters.","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    protected double height;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"     * The weight of the user in kilograms.","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"    protected double weight;","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"     * The Bmi of the user.","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    protected double bmiValue;","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"     * The BMI category.","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"    protected String bmiCategory;","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"     * The date of user input.","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    protected LocalDate date;","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"     * A healthlist object to access HealthList Class which manages and stores health data.","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"    protected HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-07"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"     * A parser object to access Parser Class.","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"    private Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"j013n3"},"content":"     * Constructor for {@code Bmi} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"j013n3"},"content":"     * @param height A string representing the user\u0027s height.","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"     * @param weight A string representing the user\u0027s weight.","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If height or weight values are not positive.","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"    public Bmi(String height, String weight, String date) {","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"j013n3"},"content":"        this.height \u003d Double.parseDouble(height);","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"j013n3"},"content":"        this.weight \u003d Double.parseDouble(weight);","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"j013n3"},"content":"        assert this.height \u003e HealthConstant.MIN_HEIGHT \u0026\u0026 this.weight \u003e HealthConstant.MIN_WEIGHT","lastModifiedDate":"2024-04-13"},{"lineNumber":65,"author":{"gitId":"j013n3"},"content":"                : ErrorConstant.NEGATIVE_VALUE_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"        this.date \u003d parser.parseDate(date);","lastModifiedDate":"2024-04-07"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"        this.bmiValue \u003d calculateBmiValue();","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"j013n3"},"content":"        this.bmiCategory \u003d getBmiCategory(bmiValue);","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"        healthList.addBmi(this);","lastModifiedDate":"2024-04-07"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":73,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"     * Retrieves height recorded in {@code Bmi} object of {@code String} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":77,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"j013n3"},"content":"     * @return The height recorded in the {@code Bmi} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"    public String getHeight() {","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.TWO_DECIMAL_PLACE_FORMAT, height);","lastModifiedDate":"2024-03-28"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"     * Retrieves weight recorded in {@code Bmi} object of {@code String} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":86,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"     * @return The weight recorded in the {@code Bmi} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"    public String getWeight() {","lastModifiedDate":"2024-03-27"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.TWO_DECIMAL_PLACE_FORMAT, weight);","lastModifiedDate":"2024-03-28"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"j013n3"},"content":"     * Retrieves BMI value recorded in {@code Bmi} object of {@code String} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"j013n3"},"content":"     * @return The BMI value recorded in the {@code Bmi} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":97,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"    public String getBmiValue() {","lastModifiedDate":"2024-04-10"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.TWO_DECIMAL_PLACE_FORMAT, bmiValue);","lastModifiedDate":"2024-04-10"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":101,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":102,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"j013n3"},"content":"     * Prints the BMI category based on the calculated {@code bmiValue}.","lastModifiedDate":"2024-04-13"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"     * @param bmiValue The Bmi value to categorize.","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"     * @return A string presenting the Bmi category.","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If calculated value is not positive.","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":109,"author":{"gitId":"j013n3"},"content":"    public static String getBmiCategory(double bmiValue) {","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"j013n3"},"content":"        assert bmiValue \u003e HealthConstant.MIN_BMI: ErrorConstant.NEGATIVE_BMI_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":111,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"j013n3"},"content":"        if (bmiValue \u003c HealthConstant.UNDERWEIGHT_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.UNDERWEIGHT_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"        } else if (bmiValue \u003c HealthConstant.NORMAL_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.NORMAL_WEIGHT_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"        } else if (bmiValue \u003c HealthConstant.OVERWEIGHT_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.OVERWEIGHT_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"        } else if (bmiValue \u003c HealthConstant.OBESE_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.OBESE_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"        } else {","lastModifiedDate":"2024-03-14"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.SEVERELY_OBESE_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"     * Retrieves date recorded in {@code Bmi} object of {@code LocalDate} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"     * @return The date recorded in the {@code Bmi} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-04-10"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"        return date;","lastModifiedDate":"2024-04-10"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"     * Calculates {@code bmiValue} based on the height and weight recorded.","lastModifiedDate":"2024-04-13"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"     * @return The calculated Bmi value.","lastModifiedDate":"2024-04-10"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If calculated value is not positive.","lastModifiedDate":"2024-04-10"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"    private double calculateBmiValue() {","lastModifiedDate":"2024-04-10"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"        double bmi \u003d Math.round((weight / (Math.pow(height, UiConstant.POWER_OF_TWO))) * UiConstant.ROUNDING_FACTOR)","lastModifiedDate":"2024-04-10"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"                / UiConstant.ROUNDING_FACTOR;","lastModifiedDate":"2024-04-10"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"        assert bmi \u003e HealthConstant.MIN_BMI: ErrorConstant.NEGATIVE_BMI_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"j013n3"},"content":"        return bmi;","lastModifiedDate":"2024-04-10"},{"lineNumber":145,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":146,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":147,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":148,"author":{"gitId":"j013n3"},"content":"     * Returns the string presentation of a {@code Bmi} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":150,"author":{"gitId":"j013n3"},"content":"     * @return A formatted string representing a {@code Bmi} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":152,"author":{"gitId":"j013n3"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":153,"author":{"gitId":"j013n3"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":154,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.PRINT_BMI_FORMAT,","lastModifiedDate":"2024-03-28"},{"lineNumber":155,"author":{"gitId":"j013n3"},"content":"                this.getDate(),","lastModifiedDate":"2024-04-03"},{"lineNumber":156,"author":{"gitId":"j013n3"},"content":"                this.calculateBmiValue(),","lastModifiedDate":"2024-03-28"},{"lineNumber":157,"author":{"gitId":"j013n3"},"content":"                getBmiCategory(bmiValue));","lastModifiedDate":"2024-03-28"},{"lineNumber":158,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"j013n3":134,"JustinSoh":3,"rouvinerh":7,"L5-Z":1,"syj02":14}},{"path":"src/main/java/health/Health.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"package health;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" * The Health class represents a Health object to track user\u0027s health information.","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"public class Health {","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"     * The date of Health object.","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"    protected LocalDate date \u003d null;","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"     * Constructor for Health object.","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"    public Health() {","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the date of Health object of {@code LocalDate} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"     * @return The date of the Health object.","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"        return date;","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     * Returns a string containing the date of the {@code Health} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing a {@code Health} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"    @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"    public String toString(){","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"        return getDate().toString();","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"j013n3":15,"rouvinerh":5,"syj02":18}},{"path":"src/main/java/health/HealthList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-25"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import ui.Output;","lastModifiedDate":"2024-04-07"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":" * The HealthList class inherits from {@code ArrayList\u003cHealth\u003e}.","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":" * It contains the individual lists of {@code Bmi}, {@code Appointment}, and {@code Period} objects.","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":" * Methods to get, add and print {@code Health} objects are listed here.","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"public class HealthList extends ArrayList\u003cHealth\u003e {","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"     * LogFile for logging health-related activities.","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"    static LogFile logFile \u003d LogFile.getInstance();","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     * The list of {@code Bmi} objects stored within an {@code ArrayList}.","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cBmi\u003e BMIS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     * The list of {@code Period} objects stored within an {@code ArrayList}.","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cPeriod\u003e PERIODS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"     * The list of {@code Appointment} objects stored within an {@code ArrayList}.","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"    private static final ArrayList\u003cAppointment\u003e APPOINTMENTS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"    protected HealthList() {","lastModifiedDate":"2024-04-07"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"     * Adds a {@code Bmi} object to {@code BMIS}.","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"     * @param bmi {@code Bmi} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If {@code Bmi} object is null.","lastModifiedDate":"2024-04-13"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"    protected void addBmi(Bmi bmi) {","lastModifiedDate":"2024-04-07"},{"lineNumber":53,"author":{"gitId":"j013n3"},"content":"        assert bmi !\u003d null : ErrorConstant.NULL_BMI_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"j013n3"},"content":"        BMIS.add(bmi);","lastModifiedDate":"2024-03-30"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"        // bmi sorted from latest to earliest date","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"j013n3"},"content":"        BMIS.sort(Comparator.comparing(Bmi::getDate).reversed());","lastModifiedDate":"2024-04-08"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-22"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"     * Adds a {@code Period} object to {@code PERIODS}.","lastModifiedDate":"2024-04-13"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"     * @param period {@code Period} object to be added.","lastModifiedDate":"2024-04-13"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If {@code Period} object is null.","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"    protected void addPeriod(Period period) {","lastModifiedDate":"2024-04-07"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"        assert period !\u003d null : ErrorConstant.NULL_PERIOD_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"        PERIODS.add(period);","lastModifiedDate":"2024-03-30"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"        PERIODS.sort(Comparator.comparing(Period::getStartDate).reversed());","lastModifiedDate":"2024-04-09"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"        int size \u003d PERIODS.size();","lastModifiedDate":"2024-04-12"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"        if (size \u003e HealthConstant.MIN_SIZE_FOR_COMPARISON) {","lastModifiedDate":"2024-04-13"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"            for (int i \u003d size - 1; i \u003e HealthConstant.FIRST_ITEM; i--) {","lastModifiedDate":"2024-04-13"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"                Period newerPeriod \u003d PERIODS.get(i -  1);","lastModifiedDate":"2024-04-12"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"                Period olderPeriod \u003d PERIODS.get(i);","lastModifiedDate":"2024-04-12"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"                olderPeriod.setCycleLength(newerPeriod.getStartDate());","lastModifiedDate":"2024-04-12"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"            }","lastModifiedDate":"2024-04-12"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"     * Adds an {@code Appointment} to {@code APPOINTMENTS}.","lastModifiedDate":"2024-04-13"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"     * Sorts all {@code Appointment} objects in {@code APPOINTMENTS} by date and time of the appointments with","lastModifiedDate":"2024-04-13"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"     * the earliest appointment at the top.","lastModifiedDate":"2024-04-10"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"     * @param appointment {@code Appointment} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If {@code Appointment} object is null.","lastModifiedDate":"2024-04-13"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"    protected void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-04-10"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"        assert appointment !\u003d null : ErrorConstant.NULL_APPOINTMENT_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"        APPOINTMENTS.add(appointment);","lastModifiedDate":"2024-04-10"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"        APPOINTMENTS.sort(Comparator.comparing(Appointment::getDate).thenComparing(Appointment::getTime));","lastModifiedDate":"2024-04-10"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"j013n3"},"content":"     * Retrieves all {@code Bmi} objects within {@code BMIS}.","lastModifiedDate":"2024-04-13"},{"lineNumber":102,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":103,"author":{"gitId":"j013n3"},"content":"     * @return The {@code BMIS} array list.","lastModifiedDate":"2024-04-13"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"    public static ArrayList\u003cBmi\u003e getBmis() {","lastModifiedDate":"2024-04-10"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"        return BMIS;","lastModifiedDate":"2024-04-10"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":109,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"j013n3"},"content":"     * Retrieves all {@code Period} objects within {@code PERIODS}.","lastModifiedDate":"2024-04-13"},{"lineNumber":111,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"j013n3"},"content":"     * @return The {@code PERIODS} array list.","lastModifiedDate":"2024-04-13"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"    public static ArrayList\u003cPeriod\u003e getPeriods() {","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"        return PERIODS;","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"     * Retrieves all {@code Appointment} objects within {@code APPOINTMENTS}.","lastModifiedDate":"2024-04-13"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"     * @return The {@code APPOINTMENTS} array list.","lastModifiedDate":"2024-04-13"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"    public static ArrayList\u003cAppointment\u003e getAppointments() {","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"        return APPOINTMENTS;","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"     * Retrieves the {@code Period} object at a specified index.","lastModifiedDate":"2024-04-13"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"     * @param index The index of the {@code Period} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"     * @return The {@code Period} object at the specified index, or null if the index is out of bounds.","lastModifiedDate":"2024-04-13"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"    public static Period getPeriod(int index) {","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"        if (index \u003c HealthConstant.FIRST_ITEM || index \u003e\u003d PERIODS.size()) {","lastModifiedDate":"2024-04-13"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"            return null;","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"        return PERIODS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"     * Retrieves the number of {@code Period} objects recorded.","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"     * @return The number of {@code Period} objects recorded.","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"j013n3"},"content":"    public static int getPeriodSize() {","lastModifiedDate":"2024-04-10"},{"lineNumber":146,"author":{"gitId":"j013n3"},"content":"        return PERIODS.size();","lastModifiedDate":"2024-04-10"},{"lineNumber":147,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"L5-Z"},"content":"    //@@author l5_z","lastModifiedDate":"2024-04-10"},{"lineNumber":150,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":151,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"L5-Z"},"content":"     * Retrieves size of {@code BMIS} list.","lastModifiedDate":"2024-04-13"},{"lineNumber":153,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":154,"author":{"gitId":"L5-Z"},"content":"     * @return Size of {@code BMIS} list.","lastModifiedDate":"2024-04-13"},{"lineNumber":155,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":156,"author":{"gitId":"L5-Z"},"content":"    public static int getBmisSize() {","lastModifiedDate":"2024-04-10"},{"lineNumber":157,"author":{"gitId":"L5-Z"},"content":"        return BMIS.size();","lastModifiedDate":"2024-04-10"},{"lineNumber":158,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":159,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"L5-Z"},"content":"     * Retrieves size of {@code PERIODS} list.","lastModifiedDate":"2024-04-13"},{"lineNumber":162,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"L5-Z"},"content":"     * @return Size of {@code PERIODS} list.","lastModifiedDate":"2024-04-13"},{"lineNumber":164,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"L5-Z"},"content":"    public static int getPeriodsSize() {","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"L5-Z"},"content":"        return PERIODS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":167,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"L5-Z"},"content":"    //@@l5_z","lastModifiedDate":"2024-04-10"},{"lineNumber":170,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"L5-Z"},"content":"     * Deletes {@code Bmi} object based on a specified index and prints delete message if successful.","lastModifiedDate":"2024-04-13"},{"lineNumber":173,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":174,"author":{"gitId":"L5-Z"},"content":"     * @param index Index of the {@code Bmi} object to be deleted.","lastModifiedDate":"2024-04-13"},{"lineNumber":175,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.OutOfBounds If the index of the {@code Bmi} object given does not exist.","lastModifiedDate":"2024-04-13"},{"lineNumber":176,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"L5-Z"},"content":"    public static void deleteBmi(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"L5-Z"},"content":"        if (index \u003c HealthConstant.FIRST_ITEM) {","lastModifiedDate":"2024-04-13"},{"lineNumber":179,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.BMI_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":180,"author":{"gitId":"L5-Z"},"content":"        } else if (index \u003e\u003d BMIS.size()) {","lastModifiedDate":"2024-04-09"},{"lineNumber":181,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":182,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"L5-Z"},"content":"        assert !BMIS.isEmpty() : ErrorConstant.EMPTY_BMI_LIST_ERROR;","lastModifiedDate":"2024-04-11"},{"lineNumber":184,"author":{"gitId":"L5-Z"},"content":"        Bmi deletedBmi \u003d BMIS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":185,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-09"},{"lineNumber":186,"author":{"gitId":"L5-Z"},"content":"        System.out.printf((HealthConstant.LOG_DELETE_BMI_FORMAT) + System.lineSeparator(),","lastModifiedDate":"2024-04-13"},{"lineNumber":187,"author":{"gitId":"L5-Z"},"content":"                deletedBmi.bmiValue,","lastModifiedDate":"2024-03-26"},{"lineNumber":188,"author":{"gitId":"L5-Z"},"content":"                deletedBmi.date);","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-09"},{"lineNumber":190,"author":{"gitId":"L5-Z"},"content":"        BMIS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":191,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(HealthConstant.BMI_REMOVED_MESSAGE_PREFIX + index, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":192,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":193,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":194,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":195,"author":{"gitId":"L5-Z"},"content":"     * Deletes {@code Period} object based on a specified index and prints delete message if successful.","lastModifiedDate":"2024-04-13"},{"lineNumber":196,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":197,"author":{"gitId":"L5-Z"},"content":"     * @param index Index of the {@code Period} object to be deleted.","lastModifiedDate":"2024-04-13"},{"lineNumber":198,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.OutOfBounds If the index of the {@code Period} object given does not exist.","lastModifiedDate":"2024-04-13"},{"lineNumber":199,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":200,"author":{"gitId":"L5-Z"},"content":"    public static void deletePeriod(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"L5-Z"},"content":"        if (index \u003c HealthConstant.FIRST_ITEM) {","lastModifiedDate":"2024-04-13"},{"lineNumber":202,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.PERIOD_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":203,"author":{"gitId":"L5-Z"},"content":"        } else if(index \u003e\u003d PERIODS.size()) {","lastModifiedDate":"2024-04-09"},{"lineNumber":204,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":205,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"L5-Z"},"content":"        assert !PERIODS.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-04-11"},{"lineNumber":207,"author":{"gitId":"L5-Z"},"content":"        Period deletedPeriod \u003d PERIODS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":208,"author":{"gitId":"L5-Z"},"content":"        String endDateUnit \u003d (deletedPeriod.getEndDate() \u003d\u003d null) ?","lastModifiedDate":"2024-04-14"},{"lineNumber":209,"author":{"gitId":"L5-Z"},"content":"                ErrorConstant.NO_DATE_SPECIFIED_ERROR : deletedPeriod.getEndDate().toString();","lastModifiedDate":"2024-04-14"},{"lineNumber":210,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-09"},{"lineNumber":211,"author":{"gitId":"L5-Z"},"content":"        System.out.printf((HealthConstant.LOG_DELETE_PERIOD_FORMAT) + System.lineSeparator(),","lastModifiedDate":"2024-04-13"},{"lineNumber":212,"author":{"gitId":"L5-Z"},"content":"                deletedPeriod.getStartDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":213,"author":{"gitId":"L5-Z"},"content":"                endDateUnit);","lastModifiedDate":"2024-04-14"},{"lineNumber":214,"author":{"gitId":"L5-Z"},"content":"        PERIODS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":215,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-09"},{"lineNumber":216,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(HealthConstant.PERIOD_REMOVED_MESSAGE_PREFIX + index, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":217,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":218,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":219,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-10"},{"lineNumber":220,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":221,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"syj02"},"content":"     * Deletes {@code Appointment} object based on a specified index and prints delete message if successful.","lastModifiedDate":"2024-04-13"},{"lineNumber":223,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":224,"author":{"gitId":"syj02"},"content":"     * @param index Index of the {@code Appointment} object to be deleted.","lastModifiedDate":"2024-04-13"},{"lineNumber":225,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.OutOfBounds If the index of the {@code Appointment} object given does not exist.","lastModifiedDate":"2024-04-13"},{"lineNumber":226,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":227,"author":{"gitId":"syj02"},"content":"    public static void deleteAppointment(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-26"},{"lineNumber":228,"author":{"gitId":"syj02"},"content":"        if (index \u003c HealthConstant.FIRST_ITEM) {","lastModifiedDate":"2024-04-13"},{"lineNumber":229,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.APPOINTMENT_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":230,"author":{"gitId":"syj02"},"content":"        } else if (index \u003e\u003d APPOINTMENTS.size()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":231,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":232,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":233,"author":{"gitId":"syj02"},"content":"        assert !APPOINTMENTS.isEmpty() : ErrorConstant.EMPTY_APPOINTMENT_LIST_ERROR;","lastModifiedDate":"2024-04-11"},{"lineNumber":234,"author":{"gitId":"syj02"},"content":"        Appointment deletedAppointment \u003d APPOINTMENTS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":235,"author":{"gitId":"syj02"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-09"},{"lineNumber":236,"author":{"gitId":"syj02"},"content":"        System.out.printf((HealthConstant.LOG_DELETE_APPOINTMENT_FORMAT) + System.lineSeparator(),","lastModifiedDate":"2024-04-13"},{"lineNumber":237,"author":{"gitId":"syj02"},"content":"                deletedAppointment.date,","lastModifiedDate":"2024-03-26"},{"lineNumber":238,"author":{"gitId":"syj02"},"content":"                deletedAppointment.time,","lastModifiedDate":"2024-03-26"},{"lineNumber":239,"author":{"gitId":"syj02"},"content":"                deletedAppointment.description);","lastModifiedDate":"2024-03-27"},{"lineNumber":240,"author":{"gitId":"syj02"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-09"},{"lineNumber":241,"author":{"gitId":"syj02"},"content":"        APPOINTMENTS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":242,"author":{"gitId":"syj02"},"content":"        LogFile.writeLog(HealthConstant.APPOINTMENT_REMOVED_MESSAGE_PREFIX + index, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":243,"author":{"gitId":"syj02"},"content":"        if (!APPOINTMENTS.isEmpty()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":244,"author":{"gitId":"syj02"},"content":"            printAppointmentHistory();","lastModifiedDate":"2024-04-11"},{"lineNumber":245,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":246,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":247,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":248,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":249,"author":{"gitId":"syj02"},"content":"     * Prints the latest {@code Bmi} object added.","lastModifiedDate":"2024-04-13"},{"lineNumber":250,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":251,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If {@code BMIS} is empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":252,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":253,"author":{"gitId":"syj02"},"content":"    public static void printLatestBmi() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":254,"author":{"gitId":"syj02"},"content":"        if (BMIS.isEmpty()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":255,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.BMI_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":256,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":257,"author":{"gitId":"syj02"},"content":"        assert !BMIS.isEmpty() : ErrorConstant.EMPTY_BMI_LIST_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":258,"author":{"gitId":"syj02"},"content":"        System.out.println(BMIS.get(HealthConstant.FIRST_ITEM));","lastModifiedDate":"2024-04-13"},{"lineNumber":259,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":260,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":261,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":262,"author":{"gitId":"syj02"},"content":"     * Prints the latest {@code Period} object added.","lastModifiedDate":"2024-04-13"},{"lineNumber":263,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":264,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If {@code PERIODS} is empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":265,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":266,"author":{"gitId":"syj02"},"content":"    public static void printLatestPeriod() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":267,"author":{"gitId":"syj02"},"content":"        if (PERIODS.isEmpty()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":268,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.PERIOD_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":269,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":270,"author":{"gitId":"syj02"},"content":"        assert !PERIODS.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":271,"author":{"gitId":"syj02"},"content":"        System.out.println(PERIODS.get(HealthConstant.FIRST_ITEM));","lastModifiedDate":"2024-04-13"},{"lineNumber":272,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":273,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":274,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":275,"author":{"gitId":"syj02"},"content":"     * Prints the latest {@code Appointment} object added.","lastModifiedDate":"2024-04-13"},{"lineNumber":276,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":277,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If {@code APPOINTMENTS} is empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":278,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":279,"author":{"gitId":"syj02"},"content":"    public static void printLatestAppointment() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":280,"author":{"gitId":"syj02"},"content":"        if (APPOINTMENTS.isEmpty()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":281,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.APPOINTMENT_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":282,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":283,"author":{"gitId":"syj02"},"content":"        assert !APPOINTMENTS.isEmpty() : ErrorConstant.EMPTY_APPOINTMENT_LIST_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":284,"author":{"gitId":"syj02"},"content":"        int index \u003d APPOINTMENTS.size() - 1;","lastModifiedDate":"2024-04-11"},{"lineNumber":285,"author":{"gitId":"syj02"},"content":"        System.out.println(APPOINTMENTS.get(index));","lastModifiedDate":"2024-04-10"},{"lineNumber":286,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":287,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":288,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":289,"author":{"gitId":"syj02"},"content":"     * Prints all the {@code Bmi} objects recorded.","lastModifiedDate":"2024-04-13"},{"lineNumber":290,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":291,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If {@code BMIS} list is empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":292,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":293,"author":{"gitId":"syj02"},"content":"    public static void printBmiHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":294,"author":{"gitId":"syj02"},"content":"        if (BMIS.isEmpty()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":295,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.BMI_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":296,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":297,"author":{"gitId":"syj02"},"content":"        assert !BMIS.isEmpty() : ErrorConstant.EMPTY_BMI_LIST_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":298,"author":{"gitId":"syj02"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-04-10"},{"lineNumber":299,"author":{"gitId":"syj02"},"content":"        System.out.println(HealthConstant.BMI_HISTORY_HEADER);","lastModifiedDate":"2024-04-10"},{"lineNumber":300,"author":{"gitId":"syj02"},"content":"        for (Bmi bmi : BMIS) {","lastModifiedDate":"2024-04-10"},{"lineNumber":301,"author":{"gitId":"syj02"},"content":"            System.out.print(index + UiConstant.FULL_STOP + UiConstant.SPLIT_BY_WHITESPACE);","lastModifiedDate":"2024-04-13"},{"lineNumber":302,"author":{"gitId":"syj02"},"content":"            System.out.println(bmi);","lastModifiedDate":"2024-04-10"},{"lineNumber":303,"author":{"gitId":"syj02"},"content":"            index +\u003d 1;","lastModifiedDate":"2024-04-10"},{"lineNumber":304,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":305,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":306,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":307,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":308,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-04-10"},{"lineNumber":309,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":310,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":311,"author":{"gitId":"j013n3"},"content":"     * Prints all the {@code Period} objects recorded.","lastModifiedDate":"2024-04-13"},{"lineNumber":312,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":313,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If {@code PERIODS} list is empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":314,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":315,"author":{"gitId":"j013n3"},"content":"    public static void printPeriodHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":316,"author":{"gitId":"j013n3"},"content":"        if (PERIODS.isEmpty()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":317,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.PERIOD_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":318,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":319,"author":{"gitId":"j013n3"},"content":"        assert !PERIODS.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":320,"author":{"gitId":"j013n3"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-04-10"},{"lineNumber":321,"author":{"gitId":"j013n3"},"content":"        System.out.println(HealthConstant.PERIOD_HISTORY_HEADER);","lastModifiedDate":"2024-04-10"},{"lineNumber":322,"author":{"gitId":"j013n3"},"content":"        for (Period period : PERIODS) {","lastModifiedDate":"2024-04-10"},{"lineNumber":323,"author":{"gitId":"j013n3"},"content":"            System.out.print(index + UiConstant.FULL_STOP + UiConstant.SPLIT_BY_WHITESPACE);","lastModifiedDate":"2024-04-13"},{"lineNumber":324,"author":{"gitId":"j013n3"},"content":"            System.out.println(period);","lastModifiedDate":"2024-04-10"},{"lineNumber":325,"author":{"gitId":"j013n3"},"content":"            index +\u003d 1;","lastModifiedDate":"2024-04-10"},{"lineNumber":326,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":327,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":328,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":329,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-10"},{"lineNumber":330,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":331,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":332,"author":{"gitId":"syj02"},"content":"     * Prints all the {@code Appointment} objects recorded.","lastModifiedDate":"2024-04-13"},{"lineNumber":333,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":334,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If {@code APPOINTMENTS} list is empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":335,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":336,"author":{"gitId":"syj02"},"content":"    public static void printAppointmentHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":337,"author":{"gitId":"syj02"},"content":"        if (APPOINTMENTS.isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":338,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.APPOINTMENT_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":339,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":340,"author":{"gitId":"syj02"},"content":"        assert !APPOINTMENTS.isEmpty() : ErrorConstant.EMPTY_APPOINTMENT_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":341,"author":{"gitId":"syj02"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-26"},{"lineNumber":342,"author":{"gitId":"syj02"},"content":"        System.out.println(HealthConstant.APPOINTMENT_HISTORY_HEADER);","lastModifiedDate":"2024-04-04"},{"lineNumber":343,"author":{"gitId":"syj02"},"content":"        for (Appointment appointment : APPOINTMENTS) {","lastModifiedDate":"2024-03-30"},{"lineNumber":344,"author":{"gitId":"syj02"},"content":"            System.out.print(index + UiConstant.FULL_STOP + UiConstant.SPLIT_BY_WHITESPACE);","lastModifiedDate":"2024-04-13"},{"lineNumber":345,"author":{"gitId":"syj02"},"content":"            System.out.println(appointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":346,"author":{"gitId":"syj02"},"content":"            index +\u003d 1;","lastModifiedDate":"2024-03-26"},{"lineNumber":347,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":348,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":349,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":350,"author":{"gitId":"syj02"},"content":"    //@@l5_z","lastModifiedDate":"2024-04-10"},{"lineNumber":351,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":352,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":353,"author":{"gitId":"syj02"},"content":"     * Clears {@code PERIODS}, {@code BMIS} and {@code APPOINTMENTS} lists.","lastModifiedDate":"2024-04-13"},{"lineNumber":354,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":355,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If {@code PERIODS}, {@code BMIS} and {@code APPOINTMENTS} lists are not empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":356,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":357,"author":{"gitId":"syj02"},"content":"    public static void clearHealthLists() {","lastModifiedDate":"2024-04-10"},{"lineNumber":358,"author":{"gitId":"syj02"},"content":"        PERIODS.clear();","lastModifiedDate":"2024-04-10"},{"lineNumber":359,"author":{"gitId":"syj02"},"content":"        BMIS.clear();","lastModifiedDate":"2024-04-10"},{"lineNumber":360,"author":{"gitId":"syj02"},"content":"        APPOINTMENTS.clear();","lastModifiedDate":"2024-04-10"},{"lineNumber":361,"author":{"gitId":"syj02"},"content":"        assert BMIS.isEmpty() : ErrorConstant.BMI_LIST_UNCLEARED_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":362,"author":{"gitId":"syj02"},"content":"        assert PERIODS.isEmpty() : ErrorConstant.PERIOD_LIST_UNCLEARED_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":363,"author":{"gitId":"syj02"},"content":"        assert APPOINTMENTS.isEmpty() : ErrorConstant.APPOINTMENT_LIST_UNCLEARED_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":364,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":365,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":366,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-04-10"},{"lineNumber":367,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":368,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":369,"author":{"gitId":"j013n3"},"content":"     * Prints the last three {@code Period} objects added to {@code PERIODS}.","lastModifiedDate":"2024-04-13"},{"lineNumber":370,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":371,"author":{"gitId":"j013n3"},"content":"    public static void printLatestThreeCycles() {","lastModifiedDate":"2024-04-10"},{"lineNumber":372,"author":{"gitId":"j013n3"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":373,"author":{"gitId":"j013n3"},"content":"        int startIndex \u003d HealthConstant.FIRST_ITEM;","lastModifiedDate":"2024-04-13"},{"lineNumber":374,"author":{"gitId":"j013n3"},"content":"        int endIndex \u003d HealthConstant.LATEST_THREE_CYCLE_LENGTHS;","lastModifiedDate":"2024-04-10"},{"lineNumber":375,"author":{"gitId":"j013n3"},"content":"        assert startIndex \u003e\u003d HealthConstant.FIRST_ITEM : ErrorConstant.START_INDEX_NEGATIVE_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":376,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":377,"author":{"gitId":"j013n3"},"content":"        for (int i \u003d startIndex; i \u003c endIndex; i++) {","lastModifiedDate":"2024-04-10"},{"lineNumber":378,"author":{"gitId":"j013n3"},"content":"            System.out.println(PERIODS.get(i));","lastModifiedDate":"2024-04-10"},{"lineNumber":379,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":380,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":381,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":382,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":383,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":384,"author":{"gitId":"j013n3"},"content":"     * Predicts the start date of the next period based on the average cycle length of the last three cycles.","lastModifiedDate":"2024-04-10"},{"lineNumber":385,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":386,"author":{"gitId":"j013n3"},"content":"     * @return The predicted start date of the next period.","lastModifiedDate":"2024-04-10"},{"lineNumber":387,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If {@code PERIODS} is empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":388,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.OutOfBounds If {@code PERIODS} is empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":389,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":390,"author":{"gitId":"j013n3"},"content":"    public static LocalDate predictNextPeriodStartDate() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":391,"author":{"gitId":"j013n3"},"content":"        if (PERIODS.isEmpty()) {","lastModifiedDate":"2024-04-11"},{"lineNumber":392,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.PERIOD_EMPTY_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":393,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-11"},{"lineNumber":394,"author":{"gitId":"j013n3"},"content":"        assert !PERIODS.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-04-10"},{"lineNumber":395,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":396,"author":{"gitId":"j013n3"},"content":"        Period latestPeriod \u003d PERIODS.get(HealthConstant.FIRST_ITEM);","lastModifiedDate":"2024-04-13"},{"lineNumber":397,"author":{"gitId":"j013n3"},"content":"        return latestPeriod.nextCyclePrediction();","lastModifiedDate":"2024-04-10"},{"lineNumber":398,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":399,"author":{"gitId":"j013n3"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"j013n3":127,"JustinSoh":5,"rouvinerh":12,"L5-Z":72,"syj02":183}},{"path":"src/main/java/health/Period.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import ui.Output;","lastModifiedDate":"2024-04-07"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"import java.util.Objects;","lastModifiedDate":"2024-03-30"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":" * The {@code Period} class inherits from {@code Health} class.","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":" * It contains information about the start date, end date, time, period length, and cycle length of the period,","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":" * and the methods to calculate period and cycle length and predict the next period.","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"public class Period extends Health {","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"     * The start date of period i.e. the first day of period flow which is also the first day of cycle.","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    protected LocalDate startDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"     * The end date of period i.e. the last day of period flow.","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"    protected LocalDate endDate;","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"     * The number of days between the first day and last day of period flow.","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"    protected long periodLength;","lastModifiedDate":"2024-03-25"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"     * The number of days between the first day and last day of the period cycle.","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"    protected long cycleLength;","lastModifiedDate":"2024-03-25"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"     * A parser object to access Parser Class.","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"    private final Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"     * A healthlist object to access HealthList Class which manages and stores health data.","lastModifiedDate":"2024-04-13"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"    private final HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-07"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-22"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"     * Constructs a new {@code Period} object with only the start date provided.","lastModifiedDate":"2024-04-13"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"     * @param stringStartDate A string representing the start date of the period.","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"    public Period(String stringStartDate) {","lastModifiedDate":"2024-04-10"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"        this.startDate \u003d parser.parseDate(stringStartDate);","lastModifiedDate":"2024-04-07"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"        this.endDate \u003d null;","lastModifiedDate":"2024-04-10"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"        this.periodLength \u003d 1;","lastModifiedDate":"2024-04-10"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"        this.cycleLength \u003d 0;","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"        healthList.addPeriod(this);","lastModifiedDate":"2024-04-07"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-08"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"     * Constructor for {@code Period} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-08"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"     * @param stringStartDate A string representing the start date of the period.","lastModifiedDate":"2024-04-08"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"     * @param stringEndDate   A string representing the end date of the period.","lastModifiedDate":"2024-04-10"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-08"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"    public Period(String stringStartDate, String stringEndDate) {","lastModifiedDate":"2024-04-10"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"        this.startDate \u003d parser.parseDate(stringStartDate);","lastModifiedDate":"2024-04-08"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"        this.endDate \u003d parser.parseDate(stringEndDate);","lastModifiedDate":"2024-04-10"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"        this.periodLength \u003d calculatePeriodLength();","lastModifiedDate":"2024-04-10"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"        this.cycleLength \u003d 0;","lastModifiedDate":"2024-04-08"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"        healthList.addPeriod(this);","lastModifiedDate":"2024-04-08"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-08"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"     * Updates the end date of the period and calculates the period length.","lastModifiedDate":"2024-04-08"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-08"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"     * @param stringEndDate A {@code String} representing the new end date of the period.","lastModifiedDate":"2024-04-13"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-08"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"    public void updateEndDate(String stringEndDate) {","lastModifiedDate":"2024-04-08"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"        this.endDate \u003d parser.parseDate(stringEndDate);","lastModifiedDate":"2024-04-08"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"        this.periodLength \u003d calculatePeriodLength();","lastModifiedDate":"2024-04-08"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"     * Retrieves the start date of the period of {@code LocalDate} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"     * @return The start date of period.","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError if the start date is null.","lastModifiedDate":"2024-04-03"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"    public LocalDate getStartDate() {","lastModifiedDate":"2024-03-19"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"        assert startDate !\u003d null : ErrorConstant.NULL_START_DATE_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"        return startDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"     * Retrieves the end date of the period of {@code LocalDate} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"     * @return The end date of period.","lastModifiedDate":"2024-04-03"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError if the end date is null.","lastModifiedDate":"2024-04-03"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"syj02"},"content":"    public LocalDate getEndDate() {","lastModifiedDate":"2024-03-21"},{"lineNumber":106,"author":{"gitId":"syj02"},"content":"        return endDate;","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-30"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"     * Retrieves the length of the period of {@code long} type.","lastModifiedDate":"2024-04-13"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-30"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"     * @return The period length.","lastModifiedDate":"2024-03-30"},{"lineNumber":113,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-30"},{"lineNumber":114,"author":{"gitId":"syj02"},"content":"    public long getPeriodLength() {","lastModifiedDate":"2024-03-30"},{"lineNumber":115,"author":{"gitId":"syj02"},"content":"        assert periodLength \u003e HealthConstant.MIN_LENGTH : ErrorConstant.LENGTH_MUST_BE_POSITIVE_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":116,"author":{"gitId":"syj02"},"content":"        return periodLength;","lastModifiedDate":"2024-03-30"},{"lineNumber":117,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":118,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-04-10"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"     * Calculates the sum of the cycle lengths of the latest three menstrual cycles.","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"     * @return The sum of the cycle lengths of the latest three menstrual cycles.","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"    public long getLastThreeCycleLengths() {","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"        long sumOfCycleLengths \u003d 0;","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"        int startIndexForPrediction \u003d HealthConstant.LAST_CYCLE_INDEX;","lastModifiedDate":"2024-04-13"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"        assert startIndexForPrediction \u003e\u003d HealthConstant.FIRST_ITEM : ErrorConstant.START_INDEX_NEGATIVE_ERROR;","lastModifiedDate":"2024-04-13"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"        int endIndexForPrediction \u003d HealthConstant.FIRST_CYCLE_INDEX;","lastModifiedDate":"2024-04-13"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"        assert endIndexForPrediction \u003e\u003d startIndexForPrediction : ErrorConstant.END_INDEX_SMALLER_THAN_START_ERROR;","lastModifiedDate":"2024-04-09"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"        for (int i \u003d startIndexForPrediction; i \u003c\u003d endIndexForPrediction; i++) {","lastModifiedDate":"2024-03-28"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"            sumOfCycleLengths +\u003d Objects.requireNonNull(HealthList.getPeriod(i)).cycleLength;","lastModifiedDate":"2024-03-30"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"        return sumOfCycleLengths;","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"     * Calculates the length of the period in days.","lastModifiedDate":"2024-04-10"},{"lineNumber":144,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":145,"author":{"gitId":"j013n3"},"content":"     * @return The length of the period.","lastModifiedDate":"2024-04-10"},{"lineNumber":146,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":147,"author":{"gitId":"j013n3"},"content":"    public long calculatePeriodLength() {","lastModifiedDate":"2024-04-10"},{"lineNumber":148,"author":{"gitId":"j013n3"},"content":"        if (endDate \u003d\u003d null || startDate \u003d\u003d null) {","lastModifiedDate":"2024-04-10"},{"lineNumber":149,"author":{"gitId":"j013n3"},"content":"            return 0;","lastModifiedDate":"2024-04-10"},{"lineNumber":150,"author":{"gitId":"j013n3"},"content":"        } else {","lastModifiedDate":"2024-04-10"},{"lineNumber":151,"author":{"gitId":"j013n3"},"content":"            // Add 1 to include both start and end dates","lastModifiedDate":"2024-04-10"},{"lineNumber":152,"author":{"gitId":"j013n3"},"content":"            return ChronoUnit.DAYS.between(getStartDate(), getEndDate()) + 1;","lastModifiedDate":"2024-04-10"},{"lineNumber":153,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":154,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":155,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"j013n3"},"content":"     * Predicts the start date of the next period based on the average cycle length.","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"     * @return The predicted start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"    public LocalDate nextCyclePrediction() {","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"        long averageCycleLength \u003d getLastThreeCycleLengths() / HealthConstant.LATEST_THREE_CYCLE_LENGTHS;","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"        return getStartDate().plusDays(averageCycleLength);","lastModifiedDate":"2024-04-03"},{"lineNumber":164,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":167,"author":{"gitId":"j013n3"},"content":"     * Sets the cycle length of the current period based on the start date of the next period.","lastModifiedDate":"2024-04-10"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"     * @param nextStartDate The start date of the next period.","lastModifiedDate":"2024-04-10"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"    public void setCycleLength(LocalDate nextStartDate) {","lastModifiedDate":"2024-04-10"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"        this.cycleLength \u003d ChronoUnit.DAYS.between(getStartDate(), nextStartDate);","lastModifiedDate":"2024-04-10"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"j013n3"},"content":"     * Prints a message indicating the number of days until the predicted start date of the next period,","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"     * or how many days late the period is if the current date is after the predicted start date.","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"     * @param nextPeriodStartDate The predicted start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"    public static void printNextCyclePrediction(LocalDate nextPeriodStartDate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"        long daysUntilNextPeriod \u003d today.until(nextPeriodStartDate, ChronoUnit.DAYS);","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"j013n3"},"content":"        if (today.isBefore(nextPeriodStartDate)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"j013n3"},"content":"            System.out.println(HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"j013n3"},"content":"                    + nextPeriodStartDate","lastModifiedDate":"2024-04-08"},{"lineNumber":187,"author":{"gitId":"j013n3"},"content":"                    + HealthConstant.COUNT_DAYS_MESSAGE","lastModifiedDate":"2024-04-08"},{"lineNumber":188,"author":{"gitId":"j013n3"},"content":"                    + daysUntilNextPeriod","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"j013n3"},"content":"                    + UiConstant.SPLIT_BY_WHITESPACE","lastModifiedDate":"2024-04-13"},{"lineNumber":190,"author":{"gitId":"j013n3"},"content":"                    + HealthConstant.DAYS_MESSAGE","lastModifiedDate":"2024-04-13"},{"lineNumber":191,"author":{"gitId":"j013n3"},"content":"                    + UiConstant.FULL_STOP);","lastModifiedDate":"2024-04-13"},{"lineNumber":192,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-08"},{"lineNumber":193,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"        if (today.isEqual(nextPeriodStartDate)) {","lastModifiedDate":"2024-04-08"},{"lineNumber":195,"author":{"gitId":"j013n3"},"content":"            System.out.println(HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-04-08"},{"lineNumber":196,"author":{"gitId":"j013n3"},"content":"                    + nextPeriodStartDate","lastModifiedDate":"2024-04-08"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"                    + HealthConstant.PREDICTED_DATE_IS_TODAY_MESSAGE);","lastModifiedDate":"2024-04-08"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"        if (today.isAfter(nextPeriodStartDate)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"            System.out.println(HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"                    + nextPeriodStartDate","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"                    + HealthConstant.PERIOD_IS_LATE","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"                    + -daysUntilNextPeriod","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"                    + UiConstant.SPLIT_BY_WHITESPACE","lastModifiedDate":"2024-04-13"},{"lineNumber":206,"author":{"gitId":"j013n3"},"content":"                    + HealthConstant.DAYS_MESSAGE","lastModifiedDate":"2024-04-13"},{"lineNumber":207,"author":{"gitId":"j013n3"},"content":"                    + UiConstant.FULL_STOP);","lastModifiedDate":"2024-04-13"},{"lineNumber":208,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":209,"author":{"gitId":"j013n3"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-07"},{"lineNumber":210,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":211,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":212,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":213,"author":{"gitId":"j013n3"},"content":"     * Returns the string representation of a {@code Period} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":214,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":215,"author":{"gitId":"j013n3"},"content":"     * @return A formatted string representing a {@code Period} object.","lastModifiedDate":"2024-04-13"},{"lineNumber":216,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":217,"author":{"gitId":"j013n3"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":218,"author":{"gitId":"j013n3"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":219,"author":{"gitId":"j013n3"},"content":"        String endDateUnit \u003d (getEndDate() \u003d\u003d null) ? ErrorConstant.NO_DATE_SPECIFIED_ERROR : getEndDate().toString();","lastModifiedDate":"2024-04-08"},{"lineNumber":220,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.PRINT_PERIOD_FORMAT,","lastModifiedDate":"2024-03-26"},{"lineNumber":221,"author":{"gitId":"j013n3"},"content":"                getStartDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":222,"author":{"gitId":"j013n3"},"content":"                endDateUnit,","lastModifiedDate":"2024-04-08"},{"lineNumber":223,"author":{"gitId":"j013n3"},"content":"                getPeriodLength(),","lastModifiedDate":"2024-04-08"},{"lineNumber":224,"author":{"gitId":"j013n3"},"content":"                HealthConstant.DAYS_MESSAGE)","lastModifiedDate":"2024-04-13"},{"lineNumber":225,"author":{"gitId":"j013n3"},"content":"                + (this.cycleLength \u003e HealthConstant.MIN_LENGTH ? System.lineSeparator()","lastModifiedDate":"2024-04-13"},{"lineNumber":226,"author":{"gitId":"j013n3"},"content":"                + String.format(HealthConstant.PRINT_CYCLE_FORMAT, this.cycleLength) : UiConstant.EMPTY_STRING);","lastModifiedDate":"2024-03-26"},{"lineNumber":227,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":228,"author":{"gitId":"j013n3"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"j013n3":118,"JustinSoh":2,"rouvinerh":8,"L5-Z":1,"syj02":99}},{"path":"src/main/java/seedu/pulsepilot/PulsePilot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package seedu.pulsepilot;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import ui.Handler;","lastModifiedDate":"2024-04-07"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":" * Main class representing the entry-point for PulsePilot.","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"public class PulsePilot {","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"     * Main entry-point for PulsePilot.","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"        Handler handler \u003d new Handler();","lastModifiedDate":"2024-04-07"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"        handler.initialiseBot();","lastModifiedDate":"2024-04-07"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"        handler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"        handler.terminateBot();","lastModifiedDate":"2024-04-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"JustinSoh":6,"rouvinerh":4,"L5-Z":2,"syj02":2,"-":5}},{"path":"src/main/java/storage/DataFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"//@@author L5-Z","lastModifiedDate":"2024-03-25"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"package storage;","lastModifiedDate":"2024-03-24"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-03-24"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-24"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import java.io.File;","lastModifiedDate":"2024-03-24"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-24"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"import java.security.MessageDigest;","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import java.security.NoSuchAlgorithmException;","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"import health.Appointment;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import health.Period;","lastModifiedDate":"2024-03-25"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"import ui.Output;","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"import utility.Parser;","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"import utility.Validation;","lastModifiedDate":"2024-04-08"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-25"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"import workouts.Workout;","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"import utility.Filters.DataType;","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":" * Represents a DataFile object used to read and write data stored in PulsePilot to a file.","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":" * Handles the reading and writing of various data related to PulsePilot, including user\u0027s name,","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":" * health data like BMI, appointments, periods, and workout data like runs and gym sessions.","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":" * It provides methods to load, save, and process different types of data as well as prevent tampering via hashing.","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"public class DataFile {","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"    public static String userName \u003d null;","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    private static DataFile instance \u003d null;","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    private final Output output;","lastModifiedDate":"2024-04-07"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"    private final Validation validation;","lastModifiedDate":"2024-04-08"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"     * Private constructor to prevent instantiation from outside the class.","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"     * Initializes the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    public DataFile() {","lastModifiedDate":"2024-04-07"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"        output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"        validation \u003d new Validation();","lastModifiedDate":"2024-04-08"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"     * Generates the SHA-256 hash value of the {@code pulsepilot_data.txt} file.","lastModifiedDate":"2024-04-13"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"     * @param file The file for which to generate the hash.","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"     * @return A String representing the SHA-256 hash value of the {@code pulsepilot_data.txt} file.","lastModifiedDate":"2024-04-13"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"     * @throws NoSuchAlgorithmException If the SHA-256 algorithm is not available.","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException              If an I/O error occurs while reading the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"    protected String generateFileHash(File file) throws NoSuchAlgorithmException, IOException {","lastModifiedDate":"2024-04-07"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"        MessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"        FileInputStream fis \u003d new FileInputStream(file);","lastModifiedDate":"2024-04-04"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"        byte[] dataBytes \u003d new byte[1024];","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"        int bytesRead;","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"        while ((bytesRead \u003d fis.read(dataBytes)) !\u003d -1) {","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"            md.update(dataBytes, 0, bytesRead);","lastModifiedDate":"2024-04-04"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"        byte[] digest \u003d md.digest();","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"        for (byte b : digest) {","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"            sb.append(String.format(\"%02x\", b \u0026 0xff));","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"        fis.close();","lastModifiedDate":"2024-04-04"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"        return sb.toString();","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"     * Verifies the integrity of the data file by checking its existence and hs value.","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"     * If the data file already exists, checks its hash value against the expected hash value.","lastModifiedDate":"2024-04-04"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"     * If the data file does not exist, creates a new file and logs the event.","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"     * @param dataFile The data file to verify integrity.","lastModifiedDate":"2024-04-04"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"     * @return Returns 0 if the file is found. Else, returns 1.","lastModifiedDate":"2024-04-13"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileCreateError If there is an error creating the data file.","lastModifiedDate":"2024-03-24"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"    public int verifyIntegrity(File dataFile) throws CustomExceptions.FileCreateError {","lastModifiedDate":"2024-04-07"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-24"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"            if (dataFile.createNewFile()) {","lastModifiedDate":"2024-03-24"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Created new data file\", false);","lastModifiedDate":"2024-03-24"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"                return UiConstant.FILE_NOT_FOUND;","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"            } else {","lastModifiedDate":"2024-03-24"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Reading from existing data file\", false);","lastModifiedDate":"2024-03-24"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"                return UiConstant.FILE_FOUND;","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileCreateError(ErrorConstant.CREATE_FILE_ERROR);","lastModifiedDate":"2024-03-25"},{"lineNumber":101,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":104,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"     * Initializes the data file to be used. Or loads the existing data file, verifies its integrity, and processes","lastModifiedDate":"2024-04-04"},{"lineNumber":106,"author":{"gitId":"L5-Z"},"content":"     * its content. Exits if the file cannot be created or loaded.","lastModifiedDate":"2024-04-13"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":108,"author":{"gitId":"L5-Z"},"content":"     * @return Returns 0 if the file is found. Else, returns 1.","lastModifiedDate":"2024-04-13"},{"lineNumber":109,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":110,"author":{"gitId":"L5-Z"},"content":"    public int loadDataFile() {","lastModifiedDate":"2024-04-07"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"        int status \u003d UiConstant.FILE_NOT_FOUND;","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"        validation.validateDirectoryPermissions();","lastModifiedDate":"2024-04-10"},{"lineNumber":113,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":114,"author":{"gitId":"L5-Z"},"content":"            File dataFile \u003d UiConstant.saveFile;","lastModifiedDate":"2024-04-08"},{"lineNumber":115,"author":{"gitId":"L5-Z"},"content":"            File hashFile \u003d new File(UiConstant.hashFilePath);","lastModifiedDate":"2024-04-08"},{"lineNumber":116,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":117,"author":{"gitId":"L5-Z"},"content":"            if (dataFile.exists() \u0026\u0026 hashFile.exists()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":118,"author":{"gitId":"L5-Z"},"content":"                String expectedHash \u003d generateFileHash(dataFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":119,"author":{"gitId":"L5-Z"},"content":"                String actualHash \u003d readHashFromFile(hashFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":120,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":121,"author":{"gitId":"L5-Z"},"content":"                if (expectedHash.equals(actualHash)) {","lastModifiedDate":"2024-04-04"},{"lineNumber":122,"author":{"gitId":"L5-Z"},"content":"                    status \u003d verifyIntegrity(dataFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":123,"author":{"gitId":"L5-Z"},"content":"                } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":124,"author":{"gitId":"L5-Z"},"content":"                    processFail(ErrorConstant.DATA_INTEGRITY_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":125,"author":{"gitId":"L5-Z"},"content":"                    System.exit(1);","lastModifiedDate":"2024-04-12"},{"lineNumber":126,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-04-04"},{"lineNumber":127,"author":{"gitId":"L5-Z"},"content":"            } else if (!dataFile.exists() \u0026\u0026 !hashFile.exists()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":128,"author":{"gitId":"L5-Z"},"content":"                status \u003d verifyIntegrity(dataFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":129,"author":{"gitId":"L5-Z"},"content":"            } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":130,"author":{"gitId":"L5-Z"},"content":"                processFail(ErrorConstant.MISSING_INTEGRITY_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":131,"author":{"gitId":"L5-Z"},"content":"                System.exit(1);","lastModifiedDate":"2024-04-12"},{"lineNumber":132,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":133,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.FileCreateError e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"L5-Z"},"content":"            System.err.println(ErrorConstant.CREATE_FILE_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(ErrorConstant.CREATE_FILE_ERROR, true);","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"L5-Z"},"content":"            System.exit(1);","lastModifiedDate":"2024-03-27"},{"lineNumber":137,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException | NoSuchAlgorithmException e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":138,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Error occurred while processing file hash: \" + e.getMessage(), true);","lastModifiedDate":"2024-04-04"},{"lineNumber":139,"author":{"gitId":"L5-Z"},"content":"            output.printException(ErrorConstant.HASH_ERROR);","lastModifiedDate":"2024-04-07"},{"lineNumber":140,"author":{"gitId":"L5-Z"},"content":"            System.exit(1);","lastModifiedDate":"2024-04-04"},{"lineNumber":141,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":143,"author":{"gitId":"L5-Z"},"content":"        Path dataFilePath \u003d Path.of(UiConstant.dataFilePath);","lastModifiedDate":"2024-04-08"},{"lineNumber":144,"author":{"gitId":"L5-Z"},"content":"        assert Files.exists(dataFilePath) : \"Data file does not exist.\";","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"L5-Z"},"content":"        return status;","lastModifiedDate":"2024-03-27"},{"lineNumber":146,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":147,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":148,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-08"},{"lineNumber":149,"author":{"gitId":"L5-Z"},"content":"     * Handles the failure of file hash verification.","lastModifiedDate":"2024-04-08"},{"lineNumber":150,"author":{"gitId":"L5-Z"},"content":"     * This method is called when the hash value of the data file does not match the expected value.","lastModifiedDate":"2024-04-08"},{"lineNumber":151,"author":{"gitId":"L5-Z"},"content":"     * It logs the error, prints the exception and  deletes the data file and hash file.","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-08"},{"lineNumber":153,"author":{"gitId":"L5-Z"},"content":"     * @param errorString The error message to be logged and printed.","lastModifiedDate":"2024-04-08"},{"lineNumber":154,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-08"},{"lineNumber":155,"author":{"gitId":"L5-Z"},"content":"    protected void processFail(String errorString) {","lastModifiedDate":"2024-04-12"},{"lineNumber":156,"author":{"gitId":"L5-Z"},"content":"        File dataFile \u003d UiConstant.saveFile;","lastModifiedDate":"2024-04-12"},{"lineNumber":157,"author":{"gitId":"L5-Z"},"content":"        File hashFile \u003d new File(UiConstant.hashFilePath);","lastModifiedDate":"2024-04-12"},{"lineNumber":158,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":159,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(errorString, true);","lastModifiedDate":"2024-04-08"},{"lineNumber":160,"author":{"gitId":"L5-Z"},"content":"        output.printException(errorString);","lastModifiedDate":"2024-04-08"},{"lineNumber":161,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":162,"author":{"gitId":"L5-Z"},"content":"        hashFile.delete();","lastModifiedDate":"2024-04-08"},{"lineNumber":163,"author":{"gitId":"L5-Z"},"content":"        dataFile.delete();","lastModifiedDate":"2024-04-08"},{"lineNumber":164,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":165,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":166,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":167,"author":{"gitId":"L5-Z"},"content":"     * Reads the hash value from a hash file.","lastModifiedDate":"2024-04-04"},{"lineNumber":168,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":169,"author":{"gitId":"L5-Z"},"content":"     * @param hashFile The hash file to read from.","lastModifiedDate":"2024-04-04"},{"lineNumber":170,"author":{"gitId":"L5-Z"},"content":"     * @return The hash value read from the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":171,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2024-04-04"},{"lineNumber":172,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":173,"author":{"gitId":"L5-Z"},"content":"    protected String readHashFromFile(File hashFile) throws IOException {","lastModifiedDate":"2024-04-12"},{"lineNumber":174,"author":{"gitId":"L5-Z"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-04-04"},{"lineNumber":175,"author":{"gitId":"L5-Z"},"content":"        Scanner scanner \u003d new Scanner(hashFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":176,"author":{"gitId":"L5-Z"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":177,"author":{"gitId":"L5-Z"},"content":"            sb.append(scanner.nextLine());","lastModifiedDate":"2024-04-04"},{"lineNumber":178,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":179,"author":{"gitId":"L5-Z"},"content":"        scanner.close();","lastModifiedDate":"2024-04-04"},{"lineNumber":180,"author":{"gitId":"L5-Z"},"content":"        return sb.toString();","lastModifiedDate":"2024-04-04"},{"lineNumber":181,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":182,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":183,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":184,"author":{"gitId":"L5-Z"},"content":"     * Writes the hash value to the hash file.","lastModifiedDate":"2024-04-13"},{"lineNumber":185,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":186,"author":{"gitId":"L5-Z"},"content":"     * @param hash     The hash value to write.","lastModifiedDate":"2024-04-04"},{"lineNumber":187,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2024-04-04"},{"lineNumber":188,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":189,"author":{"gitId":"L5-Z"},"content":"    private void writeHashToFile(String hash) throws IOException {","lastModifiedDate":"2024-04-12"},{"lineNumber":190,"author":{"gitId":"L5-Z"},"content":"        FileOutputStream fos \u003d new FileOutputStream(UiConstant.hashFilePath);","lastModifiedDate":"2024-04-08"},{"lineNumber":191,"author":{"gitId":"L5-Z"},"content":"        fos.write(hash.getBytes());","lastModifiedDate":"2024-04-04"},{"lineNumber":192,"author":{"gitId":"L5-Z"},"content":"        fos.close();","lastModifiedDate":"2024-04-04"},{"lineNumber":193,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":194,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":195,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":196,"author":{"gitId":"L5-Z"},"content":"     * Reads data from the existing data file and processes it.","lastModifiedDate":"2024-04-04"},{"lineNumber":197,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":198,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError If there is an error reading the data file.","lastModifiedDate":"2024-03-24"},{"lineNumber":199,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":200,"author":{"gitId":"L5-Z"},"content":"    public void readDataFile() throws CustomExceptions.FileReadError {","lastModifiedDate":"2024-04-07"},{"lineNumber":201,"author":{"gitId":"L5-Z"},"content":"        int lineNumberCount \u003d 0; // just for getting lineNumber, no other use","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"L5-Z"},"content":"        try (final Scanner readFile \u003d new Scanner(UiConstant.saveFile)) {","lastModifiedDate":"2024-04-08"},{"lineNumber":203,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Read begins\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":204,"author":{"gitId":"L5-Z"},"content":"            try {","lastModifiedDate":"2024-04-02"},{"lineNumber":205,"author":{"gitId":"L5-Z"},"content":"                String[] input \u003d readFile.nextLine().split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-02"},{"lineNumber":206,"author":{"gitId":"L5-Z"},"content":"                String name \u003d input[UiConstant.NAME_INDEX].trim();","lastModifiedDate":"2024-04-02"},{"lineNumber":207,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Processing Name\", false);","lastModifiedDate":"2024-04-08"},{"lineNumber":208,"author":{"gitId":"L5-Z"},"content":"                processName(name);","lastModifiedDate":"2024-04-02"},{"lineNumber":209,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Name Loaded\", false);","lastModifiedDate":"2024-04-08"},{"lineNumber":210,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":211,"author":{"gitId":"L5-Z"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-04-02"},{"lineNumber":212,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Data file is missing name, exiting.\" + e, true);","lastModifiedDate":"2024-04-11"},{"lineNumber":213,"author":{"gitId":"L5-Z"},"content":"                processFail(ErrorConstant.CORRUPT_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":214,"author":{"gitId":"L5-Z"},"content":"                System.exit(1);","lastModifiedDate":"2024-04-12"},{"lineNumber":215,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":216,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":217,"author":{"gitId":"L5-Z"},"content":"            while (readFile.hasNextLine()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":218,"author":{"gitId":"L5-Z"},"content":"                String rawInput \u003d readFile.nextLine();","lastModifiedDate":"2024-04-03"},{"lineNumber":219,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Read String: \" + rawInput, false);","lastModifiedDate":"2024-04-08"},{"lineNumber":220,"author":{"gitId":"L5-Z"},"content":"                String[] input \u003d rawInput.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-03"},{"lineNumber":221,"author":{"gitId":"L5-Z"},"content":"                String dataType \u003d input[UiConstant.DATA_TYPE_INDEX].trim();","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":223,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Current DataType:\" + dataType, false);","lastModifiedDate":"2024-04-08"},{"lineNumber":224,"author":{"gitId":"L5-Z"},"content":"                DataType filter \u003d DataType.valueOf(dataType);","lastModifiedDate":"2024-03-26"},{"lineNumber":225,"author":{"gitId":"L5-Z"},"content":"                switch (filter) {","lastModifiedDate":"2024-03-26"},{"lineNumber":226,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":227,"author":{"gitId":"L5-Z"},"content":"                case APPOINTMENT:","lastModifiedDate":"2024-03-26"},{"lineNumber":228,"author":{"gitId":"L5-Z"},"content":"                    processAppointment(input);","lastModifiedDate":"2024-03-30"},{"lineNumber":229,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-26"},{"lineNumber":230,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":231,"author":{"gitId":"L5-Z"},"content":"                case PERIOD:","lastModifiedDate":"2024-03-26"},{"lineNumber":232,"author":{"gitId":"L5-Z"},"content":"                    processPeriod(input);","lastModifiedDate":"2024-03-30"},{"lineNumber":233,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":234,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":235,"author":{"gitId":"L5-Z"},"content":"                case BMI:","lastModifiedDate":"2024-03-26"},{"lineNumber":236,"author":{"gitId":"L5-Z"},"content":"                    processBmi(input);","lastModifiedDate":"2024-03-30"},{"lineNumber":237,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":238,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":239,"author":{"gitId":"L5-Z"},"content":"                case GYM:","lastModifiedDate":"2024-03-26"},{"lineNumber":240,"author":{"gitId":"L5-Z"},"content":"                    processGym(rawInput);","lastModifiedDate":"2024-04-03"},{"lineNumber":241,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":242,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":243,"author":{"gitId":"L5-Z"},"content":"                case RUN:","lastModifiedDate":"2024-03-26"},{"lineNumber":244,"author":{"gitId":"L5-Z"},"content":"                    processRun(input);","lastModifiedDate":"2024-03-30"},{"lineNumber":245,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":246,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":247,"author":{"gitId":"L5-Z"},"content":"                default:","lastModifiedDate":"2024-03-27"},{"lineNumber":248,"author":{"gitId":"L5-Z"},"content":"                    break; // valueOf results in immediate exception for non-match with enum DataType","lastModifiedDate":"2024-03-27"},{"lineNumber":249,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-03-24"},{"lineNumber":250,"author":{"gitId":"L5-Z"},"content":"                lineNumberCount +\u003d 1;","lastModifiedDate":"2024-03-27"},{"lineNumber":251,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":252,"author":{"gitId":"L5-Z"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":253,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Data file is missing content at line \" + lineNumberCount + \", exiting.\" + e,","lastModifiedDate":"2024-04-12"},{"lineNumber":254,"author":{"gitId":"L5-Z"},"content":"                    true);","lastModifiedDate":"2024-04-12"},{"lineNumber":255,"author":{"gitId":"L5-Z"},"content":"            processFail(ErrorConstant.CORRUPT_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":256,"author":{"gitId":"L5-Z"},"content":"            System.exit(1);","lastModifiedDate":"2024-04-12"},{"lineNumber":257,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":258,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":259,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":260,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":261,"author":{"gitId":"L5-Z"},"content":"     * Processes the username from the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":262,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":263,"author":{"gitId":"L5-Z"},"content":"     * @param name The username read from the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":264,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":265,"author":{"gitId":"L5-Z"},"content":"    public void processName(String name) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-08"},{"lineNumber":266,"author":{"gitId":"L5-Z"},"content":"        if (validation.validateIfUsernameIsValid(name)) {","lastModifiedDate":"2024-04-09"},{"lineNumber":267,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_USERNAME_ERROR);","lastModifiedDate":"2024-04-08"},{"lineNumber":268,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-08"},{"lineNumber":269,"author":{"gitId":"L5-Z"},"content":"        userName \u003d name.trim();","lastModifiedDate":"2024-03-27"},{"lineNumber":270,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":271,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":272,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":273,"author":{"gitId":"L5-Z"},"content":"     * Processes an appointment entry from the input string array and adds it to the health list.","lastModifiedDate":"2024-04-04"},{"lineNumber":274,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":275,"author":{"gitId":"L5-Z"},"content":"     * @param input The input string array containing appointment data.","lastModifiedDate":"2024-04-04"},{"lineNumber":276,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":277,"author":{"gitId":"L5-Z"},"content":"    public void processAppointment(String[] input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-08"},{"lineNumber":278,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-08"},{"lineNumber":279,"author":{"gitId":"L5-Z"},"content":"        String date \u003d input[1].trim(); // date","lastModifiedDate":"2024-03-30"},{"lineNumber":280,"author":{"gitId":"L5-Z"},"content":"        String time \u003d input[2].trim(); // time","lastModifiedDate":"2024-03-30"},{"lineNumber":281,"author":{"gitId":"L5-Z"},"content":"        String formattedTime \u003d time.replace(\".\", \":\");","lastModifiedDate":"2024-04-02"},{"lineNumber":282,"author":{"gitId":"L5-Z"},"content":"        String description \u003d input[3].trim(); // description","lastModifiedDate":"2024-03-30"},{"lineNumber":283,"author":{"gitId":"L5-Z"},"content":"        String[] checkAppointmentDetails \u003d {date, formattedTime, description};","lastModifiedDate":"2024-04-08"},{"lineNumber":284,"author":{"gitId":"L5-Z"},"content":"        validation.validateAppointmentDetails(checkAppointmentDetails);","lastModifiedDate":"2024-04-08"},{"lineNumber":285,"author":{"gitId":"L5-Z"},"content":"        Appointment appointment \u003d new Appointment(date, formattedTime, description);","lastModifiedDate":"2024-04-02"},{"lineNumber":286,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":287,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":288,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":289,"author":{"gitId":"L5-Z"},"content":"     * Processes a period entry from the input string array and adds it to the health list.","lastModifiedDate":"2024-04-04"},{"lineNumber":290,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":291,"author":{"gitId":"L5-Z"},"content":"     * @param input The input string array containing period data.","lastModifiedDate":"2024-04-04"},{"lineNumber":292,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":293,"author":{"gitId":"L5-Z"},"content":"    public void processPeriod(String[] input) throws CustomExceptions.InsufficientInput, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-08"},{"lineNumber":294,"author":{"gitId":"L5-Z"},"content":"        String startDate \u003d input[1].trim(); // start","lastModifiedDate":"2024-03-30"},{"lineNumber":295,"author":{"gitId":"L5-Z"},"content":"        String endDate \u003d input[2].trim(); // end, skip 3 duration","lastModifiedDate":"2024-03-30"},{"lineNumber":296,"author":{"gitId":"L5-Z"},"content":"        String[] checkPeriodInput \u003d {startDate, endDate};","lastModifiedDate":"2024-04-08"},{"lineNumber":297,"author":{"gitId":"L5-Z"},"content":"        boolean isParser \u003d false;","lastModifiedDate":"2024-04-10"},{"lineNumber":298,"author":{"gitId":"L5-Z"},"content":"        validation.validatePeriodInput(checkPeriodInput, isParser);","lastModifiedDate":"2024-04-10"},{"lineNumber":299,"author":{"gitId":"L5-Z"},"content":"        if (endDate.equals(ErrorConstant.NO_DATE_SPECIFIED_ERROR)) {","lastModifiedDate":"2024-04-08"},{"lineNumber":300,"author":{"gitId":"L5-Z"},"content":"            new Period(startDate);","lastModifiedDate":"2024-04-08"},{"lineNumber":301,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-04-08"},{"lineNumber":302,"author":{"gitId":"L5-Z"},"content":"            new Period(startDate, endDate);","lastModifiedDate":"2024-04-07"},{"lineNumber":303,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":304,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":305,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":306,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":307,"author":{"gitId":"L5-Z"},"content":"     * Processes a BMI entry from the input string array and adds it to the health list.","lastModifiedDate":"2024-04-04"},{"lineNumber":308,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":309,"author":{"gitId":"L5-Z"},"content":"     * @param input The input string array containing BMI data.","lastModifiedDate":"2024-04-04"},{"lineNumber":310,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":311,"author":{"gitId":"L5-Z"},"content":"    public void processBmi(String[] input) throws CustomExceptions.InsufficientInput, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-08"},{"lineNumber":312,"author":{"gitId":"L5-Z"},"content":"        String height \u003d input[1].trim(); // height","lastModifiedDate":"2024-03-30"},{"lineNumber":313,"author":{"gitId":"L5-Z"},"content":"        String weight \u003d input[2].trim(); // weight","lastModifiedDate":"2024-03-30"},{"lineNumber":314,"author":{"gitId":"L5-Z"},"content":"        String date \u003d input[4].trim();// skip 3, bmi score, 4 is date","lastModifiedDate":"2024-03-30"},{"lineNumber":315,"author":{"gitId":"L5-Z"},"content":"        String[] checkBmiInput \u003d {height, weight, date};","lastModifiedDate":"2024-04-08"},{"lineNumber":316,"author":{"gitId":"L5-Z"},"content":"        validation.validateBmiInput(checkBmiInput);","lastModifiedDate":"2024-04-08"},{"lineNumber":317,"author":{"gitId":"L5-Z"},"content":"        new Bmi(height, weight, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":318,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":319,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":320,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":321,"author":{"gitId":"L5-Z"},"content":"     * Processes a run entry from the input string array and adds it to the workout list.","lastModifiedDate":"2024-04-06"},{"lineNumber":322,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":323,"author":{"gitId":"L5-Z"},"content":"     * @param input The input string array containing run data.","lastModifiedDate":"2024-04-04"},{"lineNumber":324,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput If there is an error in the input data format.","lastModifiedDate":"2024-04-04"},{"lineNumber":325,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":326,"author":{"gitId":"L5-Z"},"content":"    public void processRun(String[] input) throws CustomExceptions.InvalidInput, CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-04-08"},{"lineNumber":327,"author":{"gitId":"L5-Z"},"content":"        String distance \u003d input[1].trim(); // distance","lastModifiedDate":"2024-03-30"},{"lineNumber":328,"author":{"gitId":"L5-Z"},"content":"        String time \u003d input[2].trim(); // time","lastModifiedDate":"2024-03-30"},{"lineNumber":329,"author":{"gitId":"L5-Z"},"content":"        String formattedTime \u003d time.replace(\".\", \":\");","lastModifiedDate":"2024-04-02"},{"lineNumber":330,"author":{"gitId":"L5-Z"},"content":"        String date \u003d input[3].trim(); // 3 is date","lastModifiedDate":"2024-04-02"},{"lineNumber":331,"author":{"gitId":"L5-Z"},"content":"        String[] checkRunInput \u003d {formattedTime, distance, date};","lastModifiedDate":"2024-04-08"},{"lineNumber":332,"author":{"gitId":"L5-Z"},"content":"        validation.validateRunInput(checkRunInput);","lastModifiedDate":"2024-04-08"},{"lineNumber":333,"author":{"gitId":"L5-Z"},"content":"        if (date.equals(ErrorConstant.NO_DATE_SPECIFIED_ERROR)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":334,"author":{"gitId":"L5-Z"},"content":"            new Run(formattedTime, distance);","lastModifiedDate":"2024-04-03"},{"lineNumber":335,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":336,"author":{"gitId":"L5-Z"},"content":"            new Run(formattedTime, distance, date);","lastModifiedDate":"2024-04-02"},{"lineNumber":337,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":338,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":339,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":340,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":341,"author":{"gitId":"L5-Z"},"content":"     * Processes a gym entry from the raw input string and delegates parsing to Parser class.","lastModifiedDate":"2024-04-04"},{"lineNumber":342,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":343,"author":{"gitId":"L5-Z"},"content":"     * @param rawInput The raw input string containing gym data.","lastModifiedDate":"2024-04-04"},{"lineNumber":344,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput  If there is an error in the input data format.","lastModifiedDate":"2024-04-04"},{"lineNumber":345,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError If there is an error reading the gym file.","lastModifiedDate":"2024-04-04"},{"lineNumber":346,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":347,"author":{"gitId":"L5-Z"},"content":"    public void processGym(String rawInput) throws CustomExceptions.InvalidInput, CustomExceptions.FileReadError,","lastModifiedDate":"2024-04-08"},{"lineNumber":348,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-04-08"},{"lineNumber":349,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":350,"author":{"gitId":"L5-Z"},"content":"        Parser newParser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":351,"author":{"gitId":"L5-Z"},"content":"        newParser.parseGymFileInput(rawInput);","lastModifiedDate":"2024-04-07"},{"lineNumber":352,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":353,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":354,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":355,"author":{"gitId":"L5-Z"},"content":"     * Saves data to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":356,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":357,"author":{"gitId":"L5-Z"},"content":"     * @param name                 The username to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":358,"author":{"gitId":"L5-Z"},"content":"     * @param bmiArrayList         List of BMI entries to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":359,"author":{"gitId":"L5-Z"},"content":"     * @param appointmentArrayList List of appointment entries to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":360,"author":{"gitId":"L5-Z"},"content":"     * @param periodArrayList      List of period entries to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":361,"author":{"gitId":"L5-Z"},"content":"     * @param workoutArrayList     List of workout entries to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":362,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileWriteError If there is an error writing to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":363,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":364,"author":{"gitId":"L5-Z"},"content":"    public void saveDataFile(String name,","lastModifiedDate":"2024-04-07"},{"lineNumber":365,"author":{"gitId":"L5-Z"},"content":"                             ArrayList\u003cBmi\u003e bmiArrayList,","lastModifiedDate":"2024-03-27"},{"lineNumber":366,"author":{"gitId":"L5-Z"},"content":"                             ArrayList\u003cAppointment\u003e appointmentArrayList,","lastModifiedDate":"2024-03-26"},{"lineNumber":367,"author":{"gitId":"L5-Z"},"content":"                             ArrayList\u003cPeriod\u003e periodArrayList,","lastModifiedDate":"2024-03-25"},{"lineNumber":368,"author":{"gitId":"L5-Z"},"content":"                             ArrayList\u003cWorkout\u003e workoutArrayList","lastModifiedDate":"2024-04-03"},{"lineNumber":369,"author":{"gitId":"L5-Z"},"content":"    ) throws CustomExceptions.FileWriteError {","lastModifiedDate":"2024-03-25"},{"lineNumber":370,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":371,"author":{"gitId":"L5-Z"},"content":"        try (FileWriter dataFile \u003d new FileWriter(UiConstant.dataFilePath)) {","lastModifiedDate":"2024-04-08"},{"lineNumber":372,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Attempting to write name: \" + name, false);","lastModifiedDate":"2024-04-08"},{"lineNumber":373,"author":{"gitId":"L5-Z"},"content":"            writeName(dataFile, name);","lastModifiedDate":"2024-03-27"},{"lineNumber":374,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":375,"author":{"gitId":"L5-Z"},"content":"            writeHealthData(dataFile, bmiArrayList,","lastModifiedDate":"2024-03-30"},{"lineNumber":376,"author":{"gitId":"L5-Z"},"content":"                    appointmentArrayList,","lastModifiedDate":"2024-03-26"},{"lineNumber":377,"author":{"gitId":"L5-Z"},"content":"                    periodArrayList);","lastModifiedDate":"2024-03-25"},{"lineNumber":378,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":379,"author":{"gitId":"L5-Z"},"content":"            writeWorkoutData(dataFile, workoutArrayList);","lastModifiedDate":"2024-04-03"},{"lineNumber":380,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":381,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Write end\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":382,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":383,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-25"},{"lineNumber":384,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileWriteError(ErrorConstant.SAVE_ERROR);","lastModifiedDate":"2024-03-25"},{"lineNumber":385,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":386,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":387,"author":{"gitId":"L5-Z"},"content":"        try (FileWriter hashFile \u003d new FileWriter(UiConstant.hashFilePath)) {","lastModifiedDate":"2024-04-08"},{"lineNumber":388,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Attempting to write hash\", false);","lastModifiedDate":"2024-04-04"},{"lineNumber":389,"author":{"gitId":"L5-Z"},"content":"            File dataFile \u003d UiConstant.saveFile;","lastModifiedDate":"2024-04-08"},{"lineNumber":390,"author":{"gitId":"L5-Z"},"content":"            writeHashToFile(generateFileHash(dataFile));","lastModifiedDate":"2024-04-12"},{"lineNumber":391,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":392,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Write end\", false);","lastModifiedDate":"2024-04-04"},{"lineNumber":393,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":394,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException | NoSuchAlgorithmException e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":395,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileWriteError(ErrorConstant.SAVE_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":396,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":397,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":398,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":399,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":400,"author":{"gitId":"L5-Z"},"content":"     * Writes the user\u0027s name to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":401,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":402,"author":{"gitId":"L5-Z"},"content":"     * @param dataFile The FileWriter object for writing to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":403,"author":{"gitId":"L5-Z"},"content":"     * @param name     The user\u0027s name to be written to the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":404,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":405,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":406,"author":{"gitId":"L5-Z"},"content":"    public void writeName(FileWriter dataFile, String name) throws IOException {","lastModifiedDate":"2024-04-07"},{"lineNumber":407,"author":{"gitId":"L5-Z"},"content":"        dataFile.write(UiConstant.NAME_LABEL + UiConstant.SPLIT_BY_COLON + name.trim() + System.lineSeparator());","lastModifiedDate":"2024-04-02"},{"lineNumber":408,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Wrote name to file\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":409,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":410,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":411,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":412,"author":{"gitId":"L5-Z"},"content":"     * Writes health-related data (BMI, appointments, periods) to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":413,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":414,"author":{"gitId":"L5-Z"},"content":"     * @param dataFile             The FileWriter object for writing to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":415,"author":{"gitId":"L5-Z"},"content":"     * @param bmiArrayList         The list of BMI entries to be written.","lastModifiedDate":"2024-04-04"},{"lineNumber":416,"author":{"gitId":"L5-Z"},"content":"     * @param appointmentArrayList The list of appointment entries to be written.","lastModifiedDate":"2024-04-04"},{"lineNumber":417,"author":{"gitId":"L5-Z"},"content":"     * @param periodArrayList      The list of period entries to be written.","lastModifiedDate":"2024-04-04"},{"lineNumber":418,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":419,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":420,"author":{"gitId":"L5-Z"},"content":"    public void writeHealthData(FileWriter dataFile, ArrayList\u003cBmi\u003e bmiArrayList,","lastModifiedDate":"2024-04-07"},{"lineNumber":421,"author":{"gitId":"L5-Z"},"content":"                                ArrayList\u003cAppointment\u003e appointmentArrayList,","lastModifiedDate":"2024-03-27"},{"lineNumber":422,"author":{"gitId":"L5-Z"},"content":"                                ArrayList\u003cPeriod\u003e periodArrayList) throws IOException {","lastModifiedDate":"2024-03-30"},{"lineNumber":423,"author":{"gitId":"L5-Z"},"content":"        Parser newParser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":424,"author":{"gitId":"L5-Z"},"content":"        // Write each bmi entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":425,"author":{"gitId":"L5-Z"},"content":"        // bmi format: bmi:HEIGHT:WEIGHT:BMI_SCORE:DATE (NA if no date)","lastModifiedDate":"2024-03-30"},{"lineNumber":426,"author":{"gitId":"L5-Z"},"content":"        if (!bmiArrayList.isEmpty()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":427,"author":{"gitId":"L5-Z"},"content":"            for (Bmi bmiEntry : bmiArrayList) {","lastModifiedDate":"2024-03-30"},{"lineNumber":428,"author":{"gitId":"L5-Z"},"content":"                String formattedDate \u003d newParser.parseFormattedDate(bmiEntry.getDate());","lastModifiedDate":"2024-04-07"},{"lineNumber":429,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":430,"author":{"gitId":"L5-Z"},"content":"                dataFile.write(DataType.BMI + UiConstant.SPLIT_BY_COLON + bmiEntry.getHeight() +","lastModifiedDate":"2024-03-30"},{"lineNumber":431,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + bmiEntry.getWeight() +","lastModifiedDate":"2024-03-30"},{"lineNumber":432,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + bmiEntry.getBmiValue() +","lastModifiedDate":"2024-03-30"},{"lineNumber":433,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + formattedDate + System.lineSeparator());","lastModifiedDate":"2024-04-02"},{"lineNumber":434,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":435,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":436,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":437,"author":{"gitId":"L5-Z"},"content":"        // Write each appointment entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":438,"author":{"gitId":"L5-Z"},"content":"        // appointment format: appointment:DATE:TIME:DESCRIPTION","lastModifiedDate":"2024-03-30"},{"lineNumber":439,"author":{"gitId":"L5-Z"},"content":"        if (!appointmentArrayList.isEmpty()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":440,"author":{"gitId":"L5-Z"},"content":"            for (Appointment appointmentEntry : appointmentArrayList) {","lastModifiedDate":"2024-03-30"},{"lineNumber":441,"author":{"gitId":"L5-Z"},"content":"                String formattedDate \u003d newParser.parseFormattedDate(appointmentEntry.getDate());","lastModifiedDate":"2024-04-07"},{"lineNumber":442,"author":{"gitId":"L5-Z"},"content":"                String formattedTime \u003d String.valueOf(appointmentEntry.getTime());","lastModifiedDate":"2024-04-02"},{"lineNumber":443,"author":{"gitId":"L5-Z"},"content":"                formattedTime \u003d formattedTime.replace(\":\", \".\");","lastModifiedDate":"2024-04-02"},{"lineNumber":444,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":445,"author":{"gitId":"L5-Z"},"content":"                dataFile.write(DataType.APPOINTMENT + UiConstant.SPLIT_BY_COLON + formattedDate +","lastModifiedDate":"2024-04-02"},{"lineNumber":446,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + formattedTime +","lastModifiedDate":"2024-04-02"},{"lineNumber":447,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + appointmentEntry.getDescription() + System.lineSeparator());","lastModifiedDate":"2024-03-30"},{"lineNumber":448,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":449,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":450,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":451,"author":{"gitId":"L5-Z"},"content":"        // Write each period entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":452,"author":{"gitId":"L5-Z"},"content":"        // period format: period:START:END:DURATION","lastModifiedDate":"2024-03-30"},{"lineNumber":453,"author":{"gitId":"L5-Z"},"content":"        if (!periodArrayList.isEmpty()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":454,"author":{"gitId":"L5-Z"},"content":"            for (Period periodEntry : periodArrayList) {","lastModifiedDate":"2024-03-30"},{"lineNumber":455,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Writing period to file\", false);","lastModifiedDate":"2024-03-30"},{"lineNumber":456,"author":{"gitId":"L5-Z"},"content":"                String formattedStartDate \u003d newParser.parseFormattedDate(periodEntry.getStartDate());","lastModifiedDate":"2024-04-07"},{"lineNumber":457,"author":{"gitId":"L5-Z"},"content":"                String formattedEndDate \u003d newParser.parseFormattedDate(periodEntry.getEndDate());","lastModifiedDate":"2024-04-07"},{"lineNumber":458,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":459,"author":{"gitId":"L5-Z"},"content":"                dataFile.write(DataType.PERIOD + UiConstant.SPLIT_BY_COLON + formattedStartDate +","lastModifiedDate":"2024-04-02"},{"lineNumber":460,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + formattedEndDate +","lastModifiedDate":"2024-04-02"},{"lineNumber":461,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + periodEntry.getPeriodLength() + System.lineSeparator());","lastModifiedDate":"2024-03-30"},{"lineNumber":462,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Wrote period to file\", false);","lastModifiedDate":"2024-03-30"},{"lineNumber":463,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":464,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":465,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":466,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":467,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":468,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":469,"author":{"gitId":"L5-Z"},"content":"     * Writes workout-related data (runs and gym sessions) to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":470,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":471,"author":{"gitId":"L5-Z"},"content":"     * @param dataFile         The FileWriter object for writing to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":472,"author":{"gitId":"L5-Z"},"content":"     * @param workoutArrayList The list of workout entries to be written.","lastModifiedDate":"2024-04-04"},{"lineNumber":473,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":474,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":475,"author":{"gitId":"L5-Z"},"content":"    public void writeWorkoutData(FileWriter dataFile,","lastModifiedDate":"2024-04-07"},{"lineNumber":476,"author":{"gitId":"L5-Z"},"content":"                                 ArrayList\u003cWorkout\u003e workoutArrayList) throws IOException {","lastModifiedDate":"2024-04-03"},{"lineNumber":477,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":478,"author":{"gitId":"L5-Z"},"content":"        // Write each run entry in a specific format","lastModifiedDate":"2024-03-30"},{"lineNumber":479,"author":{"gitId":"L5-Z"},"content":"        // run format: run:DISTANCE:TIME:DATE","lastModifiedDate":"2024-04-02"},{"lineNumber":480,"author":{"gitId":"L5-Z"},"content":"        if (!workoutArrayList.isEmpty()) {","lastModifiedDate":"2024-04-03"},{"lineNumber":481,"author":{"gitId":"L5-Z"},"content":"            for (Workout workoutEntry : workoutArrayList) {","lastModifiedDate":"2024-04-03"},{"lineNumber":482,"author":{"gitId":"L5-Z"},"content":"                if (workoutEntry instanceof Run) {","lastModifiedDate":"2024-04-03"},{"lineNumber":483,"author":{"gitId":"L5-Z"},"content":"                    Run runEntry \u003d (Run) workoutEntry;","lastModifiedDate":"2024-04-03"},{"lineNumber":484,"author":{"gitId":"L5-Z"},"content":"                    String formattedDate \u003d runEntry.getDateForFile();","lastModifiedDate":"2024-04-12"},{"lineNumber":485,"author":{"gitId":"L5-Z"},"content":"                    String formattedTime \u003d runEntry.getTimes().replace(\":\", \".\");","lastModifiedDate":"2024-04-02"},{"lineNumber":486,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":487,"author":{"gitId":"L5-Z"},"content":"                    dataFile.write(DataType.RUN + UiConstant.SPLIT_BY_COLON + runEntry.getDistance() +","lastModifiedDate":"2024-04-02"},{"lineNumber":488,"author":{"gitId":"L5-Z"},"content":"                            UiConstant.SPLIT_BY_COLON + formattedTime +","lastModifiedDate":"2024-04-02"},{"lineNumber":489,"author":{"gitId":"L5-Z"},"content":"                            UiConstant.SPLIT_BY_COLON + formattedDate + System.lineSeparator());","lastModifiedDate":"2024-04-02"},{"lineNumber":490,"author":{"gitId":"L5-Z"},"content":"                } else if (workoutEntry instanceof Gym) {","lastModifiedDate":"2024-04-03"},{"lineNumber":491,"author":{"gitId":"L5-Z"},"content":"                    Gym gymEntry \u003d (Gym) workoutEntry;","lastModifiedDate":"2024-04-03"},{"lineNumber":492,"author":{"gitId":"L5-Z"},"content":"                    String gymString \u003d gymEntry.toFileString();","lastModifiedDate":"2024-04-03"},{"lineNumber":493,"author":{"gitId":"L5-Z"},"content":"                    dataFile.write(gymString + System.lineSeparator());","lastModifiedDate":"2024-04-04"},{"lineNumber":494,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-04-03"},{"lineNumber":495,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":496,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":497,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":498,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-24"},{"lineNumber":499,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"}],"authorContributionMap":{"L5-Z":499}},{"path":"src/main/java/storage/LogFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package storage;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import java.util.List;","lastModifiedDate":"2024-04-12"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import utility.Validation;","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"//@@ author L5-Z","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":" * Represents a Logfile object used to write information and error logs for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"public class LogFile {","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"    protected static FileHandler logFileHandler \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"    private static LogFile instance \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"    private static final Logger logger \u003d Logger.getLogger(LogFile.class.getName());","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"     * Private constructor to prevent instantiation from outside the class.","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"    private LogFile() {","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"        initializeLogFile();","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"     * Returns a singular instance of the LogFile class.","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"     * If the instance is null, it creates a new instance.","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"     * @return An instance of the LogFile class.","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    public static LogFile getInstance() {","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"            instance \u003d new LogFile();","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"        return instance;","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"     * Initialises the log file to be used. Creates the log file if needed, then sets formatters.","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"     * Parent handlers are set to false to prevent printing of logs to terminal.","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    public static void initializeLogFile() {","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        Validation validation \u003d new Validation();","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"        validation.validateDirectoryPermissions();","lastModifiedDate":"2024-04-10"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"            if (logFileHandler \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"                logFileHandler \u003d new FileHandler(UiConstant.LOG_FILE_PATH);","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"                logFileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"                logger.addHandler(logFileHandler);","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"                logger.setUseParentHandlers(false);","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"            throw new RuntimeException(\"Error setting up log file\", e);","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"        assert(logFileHandler !\u003d null);","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"     * Writes information or warning logs to the log file.","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"     * @param input   String representing the user\u0027s input.","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"     * @param isError Boolean variable to determine if log is an error.","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"    public static void writeLog(String input, boolean isError) {","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        if (isError) {","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"            logger.log(Level.WARNING, input);","lastModifiedDate":"2024-04-09"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"            logger.log(Level.INFO, input);","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"    public static String readLogContent() {","lastModifiedDate":"2024-04-12"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"        StringBuilder logContent \u003d new StringBuilder();","lastModifiedDate":"2024-04-12"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-04-12"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(Path.of(UiConstant.LOG_FILE_PATH));","lastModifiedDate":"2024-04-12"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"            for (String line : lines) {","lastModifiedDate":"2024-04-12"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"                logContent.append(line).append(System.lineSeparator());","lastModifiedDate":"2024-04-12"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-12"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-04-12"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"            System.err.println(\"Error reading log file: \" + e.getMessage());","lastModifiedDate":"2024-04-12"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"        return logContent.toString();","lastModifiedDate":"2024-04-12"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"JustinSoh":1,"rouvinerh":57,"L5-Z":33}},{"path":"src/main/java/ui/Handler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"//@@author L5-Z","lastModifiedDate":"2024-04-06"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"package ui;","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import health.Appointment;","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import health.Bmi;","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import health.Period;","lastModifiedDate":"2024-04-12"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"import storage.DataFile;","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import utility.Filters.Command;","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"import utility.Filters.DeleteFilters;","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"import utility.Filters.HealthFilters;","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"import utility.Filters.WorkoutFilters;","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"import utility.Validation;","lastModifiedDate":"2024-04-08"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"import workouts.Workout;","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"import workouts.WorkoutLists;","lastModifiedDate":"2024-04-12"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":" * Represents user input parsing and handling before providing feedback to the user.","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"public class Handler {","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    static LogFile logFile \u003d LogFile.getInstance();","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    private final Scanner in;","lastModifiedDate":"2024-04-07"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    private final Parser parser;","lastModifiedDate":"2024-04-07"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    private final DataFile dataFile;","lastModifiedDate":"2024-04-07"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    private final Output output;","lastModifiedDate":"2024-04-07"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    private final Validation validation;","lastModifiedDate":"2024-04-08"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"    public Handler(){","lastModifiedDate":"2024-04-07"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2024-04-07"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"        parser \u003d new Parser(in);","lastModifiedDate":"2024-04-07"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"        dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        validation \u003d new Validation();","lastModifiedDate":"2024-04-08"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"    public Handler(String input){","lastModifiedDate":"2024-04-07"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"        in \u003d new Scanner(input); // use for JUnit Testing","lastModifiedDate":"2024-04-07"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"        parser \u003d new Parser(in);","lastModifiedDate":"2024-04-07"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"        dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"        output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"        validation \u003d new Validation();","lastModifiedDate":"2024-04-08"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"     * Processes user input and filters for valid command words from enum {@code Command},","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"     * then creates the relevant object based on details entered.","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"     * @throws IllegalArgumentException If an error occurs during command processing.","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"    public void processInput() {","lastModifiedDate":"2024-04-07"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"        while (in.hasNextLine()) {","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"            String userInput \u003d in.nextLine().trim();","lastModifiedDate":"2024-04-12"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"            String instruction \u003d userInput.toUpperCase().split(UiConstant.SPLIT_BY_WHITESPACE)[0];","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"User Input: \" + userInput, false);","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"            assert userInput !\u003d null : \"Object cannot be null\";","lastModifiedDate":"2024-03-22"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"            try {","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"                Command command \u003d Command.valueOf(instruction);","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"                switch (command) {","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"                case EXIT:","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"                    LogFile.writeLog(\"User ran command: exit\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"                    System.out.println(UiConstant.EXIT_MESSAGE);","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"                    return;","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"                case WORKOUT:","lastModifiedDate":"2024-03-25"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"                    handleWorkout(userInput);","lastModifiedDate":"2024-03-25"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"                case HEALTH:","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"                    handleHealth(userInput);","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"                case HISTORY:","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"                    handleHistory(userInput);","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"                case LATEST:","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"                    handleLatest(userInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"                case DELETE:","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"                    handleDelete(userInput);","lastModifiedDate":"2024-03-25"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-25"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"                case HELP:","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"                    output.printHelp();","lastModifiedDate":"2024-04-07"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":101,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"                default:","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"                    break; // valueOf results in immediate exception for non-match with enum Command","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-03-11"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"            } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"L5-Z"},"content":"                output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Invalid Command Error: \" + userInput, true);","lastModifiedDate":"2024-04-09"},{"lineNumber":109,"author":{"gitId":"L5-Z"},"content":"                output.printException(ErrorConstant.INVALID_COMMAND_ERROR);","lastModifiedDate":"2024-04-07"},{"lineNumber":110,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-11"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":113,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-04"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"     * Handles workout command.","lastModifiedDate":"2024-04-01"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"     * Adds a Run or Gym object to PulsePilot.","lastModifiedDate":"2024-04-01"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-04-01"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"    public void handleWorkout(String userInput) {","lastModifiedDate":"2024-04-07"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"            String typeOfWorkout \u003d parser.extractSubstringFromSpecificIndex(userInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.EXERCISE_FLAG);","lastModifiedDate":"2024-04-01"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"            WorkoutFilters filter \u003d WorkoutFilters.valueOf(typeOfWorkout.toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"            switch(filter) {","lastModifiedDate":"2024-03-31"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"            case RUN:","lastModifiedDate":"2024-03-31"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"                parser.parseRunInput(userInput);","lastModifiedDate":"2024-04-07"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-31"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"            case GYM:","lastModifiedDate":"2024-03-31"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"                parser.parseGymInput(userInput);","lastModifiedDate":"2024-04-07"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-31"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"            default:","lastModifiedDate":"2024-03-31"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-31"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-18"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"            output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"            output.printException(ErrorConstant.INVALID_WORKOUT_TYPE_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     * Handles history command.","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"     * Show history of all exercises, run or gym.","lastModifiedDate":"2024-03-19"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"    public void handleHistory(String userInput) {","lastModifiedDate":"2024-04-07"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        String filter \u003d parser.parseHistory(userInput);","lastModifiedDate":"2024-04-11"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"        if (filter !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"            output.printHistory(filter);","lastModifiedDate":"2024-04-07"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(\"Viewed history for \" + filter, false);","lastModifiedDate":"2024-04-09"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"     * Handles the delete command.","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"     * Deletes an item stored within PulsePilot.","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the user input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"    public void handleDelete(String userInput) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-07"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"        String[] parsedInputs \u003d parser.parseDeleteInput(userInput);","lastModifiedDate":"2024-04-07"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"        if (parsedInputs \u003d\u003d null) {","lastModifiedDate":"2024-03-26"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"            return;","lastModifiedDate":"2024-03-26"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"            DeleteFilters filter \u003d DeleteFilters.valueOf(parsedInputs[0].toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"            int index \u003d Integer.parseInt(parsedInputs[1]) - 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"            switch (filter) {","lastModifiedDate":"2024-03-31"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"            case BMI:","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deleteBmi(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deletePeriod(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"            case GYM:","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"                WorkoutLists.deleteGym(index);","lastModifiedDate":"2024-04-12"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"            case RUN:","lastModifiedDate":"2024-03-25"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"                WorkoutLists.deleteRun(index);","lastModifiedDate":"2024-04-12"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"            case APPOINTMENT:","lastModifiedDate":"2024-04-01"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deleteAppointment(index);","lastModifiedDate":"2024-04-01"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-04-01"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"            default:","lastModifiedDate":"2024-03-25"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-25"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"            output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":205,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-31"},{"lineNumber":206,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":207,"author":{"gitId":"syj02"},"content":"     * Handles user input related to health data. Parses the user input to determine","lastModifiedDate":"2024-03-19"},{"lineNumber":208,"author":{"gitId":"syj02"},"content":"     * the type of health data and processes it accordingly.","lastModifiedDate":"2024-03-19"},{"lineNumber":209,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":210,"author":{"gitId":"syj02"},"content":"     * @param userInput A string containing health data information of user.","lastModifiedDate":"2024-03-19"},{"lineNumber":211,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":212,"author":{"gitId":"syj02"},"content":"    public void handleHealth(String userInput) {","lastModifiedDate":"2024-04-07"},{"lineNumber":213,"author":{"gitId":"syj02"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":214,"author":{"gitId":"syj02"},"content":"            String typeOfHealth \u003d parser.extractSubstringFromSpecificIndex(userInput, HealthConstant.HEALTH_FLAG);","lastModifiedDate":"2024-04-07"},{"lineNumber":215,"author":{"gitId":"syj02"},"content":"            HealthFilters filter \u003d HealthFilters.valueOf(typeOfHealth.toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":216,"author":{"gitId":"syj02"},"content":"            switch(filter) {","lastModifiedDate":"2024-03-31"},{"lineNumber":217,"author":{"gitId":"syj02"},"content":"            case BMI:","lastModifiedDate":"2024-03-27"},{"lineNumber":218,"author":{"gitId":"syj02"},"content":"                parser.parseBmiInput(userInput);","lastModifiedDate":"2024-04-07"},{"lineNumber":219,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":220,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":221,"author":{"gitId":"syj02"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"syj02"},"content":"                parser.parsePeriodInput(userInput);","lastModifiedDate":"2024-04-07"},{"lineNumber":223,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":224,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":225,"author":{"gitId":"syj02"},"content":"            case PREDICTION:","lastModifiedDate":"2024-03-27"},{"lineNumber":226,"author":{"gitId":"syj02"},"content":"                parser.parsePredictionInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":227,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":228,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":229,"author":{"gitId":"syj02"},"content":"            case APPOINTMENT:","lastModifiedDate":"2024-03-27"},{"lineNumber":230,"author":{"gitId":"syj02"},"content":"                parser.parseAppointmentInput(userInput);","lastModifiedDate":"2024-04-07"},{"lineNumber":231,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":232,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":233,"author":{"gitId":"syj02"},"content":"            default:","lastModifiedDate":"2024-03-27"},{"lineNumber":234,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":235,"author":{"gitId":"syj02"},"content":"            }","lastModifiedDate":"2024-03-14"},{"lineNumber":236,"author":{"gitId":"syj02"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput | CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-11"},{"lineNumber":237,"author":{"gitId":"syj02"},"content":"            output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":238,"author":{"gitId":"syj02"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":239,"author":{"gitId":"syj02"},"content":"            output.printException(ErrorConstant.INVALID_HEALTH_INPUT_ERROR);","lastModifiedDate":"2024-04-07"},{"lineNumber":240,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":241,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":242,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-22"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"     * Prints the latest run, gym, BMI entry or Period tracked.","lastModifiedDate":"2024-03-20"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":248,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput String representing user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":250,"author":{"gitId":"JustinSoh"},"content":"    public void handleLatest(String userInput) {","lastModifiedDate":"2024-04-07"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"        String filter \u003d parser.parseLatest(userInput);","lastModifiedDate":"2024-04-11"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"        if (filter !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"            output.printLatest(filter);","lastModifiedDate":"2024-04-07"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"            LogFile.writeLog(\"Viewed latest for \" + filter, false);","lastModifiedDate":"2024-04-09"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":258,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-04-06"},{"lineNumber":259,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":260,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-22"},{"lineNumber":261,"author":{"gitId":"L5-Z"},"content":"     * Get user\u0027s name, and print profile induction messages.","lastModifiedDate":"2024-03-22"},{"lineNumber":262,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-22"},{"lineNumber":263,"author":{"gitId":"L5-Z"},"content":"    public void userInduction() {","lastModifiedDate":"2024-04-07"},{"lineNumber":264,"author":{"gitId":"L5-Z"},"content":"        String name;","lastModifiedDate":"2024-04-08"},{"lineNumber":265,"author":{"gitId":"L5-Z"},"content":"        while (true) {","lastModifiedDate":"2024-04-08"},{"lineNumber":266,"author":{"gitId":"L5-Z"},"content":"            name \u003d this.in.nextLine().trim();","lastModifiedDate":"2024-04-12"},{"lineNumber":267,"author":{"gitId":"L5-Z"},"content":"            if (validation.validateIfUsernameIsValid(name)) {","lastModifiedDate":"2024-04-09"},{"lineNumber":268,"author":{"gitId":"L5-Z"},"content":"                System.err.println(ErrorConstant.INVALID_USERNAME_ERROR);","lastModifiedDate":"2024-04-08"},{"lineNumber":269,"author":{"gitId":"L5-Z"},"content":"            } else {","lastModifiedDate":"2024-04-08"},{"lineNumber":270,"author":{"gitId":"L5-Z"},"content":"                break;","lastModifiedDate":"2024-04-08"},{"lineNumber":271,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-08"},{"lineNumber":272,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-08"},{"lineNumber":273,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":274,"author":{"gitId":"L5-Z"},"content":"        DataFile.userName \u003d name;","lastModifiedDate":"2024-03-27"},{"lineNumber":275,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Welcome aboard, Captain \" + name);","lastModifiedDate":"2024-03-20"},{"lineNumber":276,"author":{"gitId":"L5-Z"},"content":"        output.printLine();","lastModifiedDate":"2024-04-07"},{"lineNumber":277,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":278,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Tips: Enter \u0027help\u0027 to view the pilot manual!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":279,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Initiating FTL jump sequence...\");","lastModifiedDate":"2024-03-20"},{"lineNumber":280,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":281,"author":{"gitId":"L5-Z"},"content":"        // DataFile.saveName(name);","lastModifiedDate":"2024-03-26"},{"lineNumber":282,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Name Entered: \" + name, false);","lastModifiedDate":"2024-03-22"},{"lineNumber":283,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"FTL jump completed.\");","lastModifiedDate":"2024-03-20"},{"lineNumber":284,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":285,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":286,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-04-09"},{"lineNumber":287,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":288,"author":{"gitId":"L5-Z"},"content":"     * Initializes PulsePilot by printing a welcome message, loading tasks from storage,","lastModifiedDate":"2024-03-18"},{"lineNumber":289,"author":{"gitId":"L5-Z"},"content":"     * and returning the tasks list.","lastModifiedDate":"2024-03-11"},{"lineNumber":290,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":291,"author":{"gitId":"L5-Z"},"content":"    public void initialiseBot() {","lastModifiedDate":"2024-04-07"},{"lineNumber":292,"author":{"gitId":"L5-Z"},"content":"        output.printWelcomeBanner();","lastModifiedDate":"2024-04-07"},{"lineNumber":293,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Started bot\", false);","lastModifiedDate":"2024-03-18"},{"lineNumber":294,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":295,"author":{"gitId":"L5-Z"},"content":"        int status \u003d dataFile.loadDataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":296,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":297,"author":{"gitId":"L5-Z"},"content":"        if (status \u003d\u003d 0) {","lastModifiedDate":"2024-03-27"},{"lineNumber":298,"author":{"gitId":"L5-Z"},"content":"            try {","lastModifiedDate":"2024-03-27"},{"lineNumber":299,"author":{"gitId":"L5-Z"},"content":"                dataFile.readDataFile(); // File read","lastModifiedDate":"2024-04-07"},{"lineNumber":300,"author":{"gitId":"L5-Z"},"content":"                output.printGreeting(status, DataFile.userName);","lastModifiedDate":"2024-04-07"},{"lineNumber":301,"author":{"gitId":"L5-Z"},"content":"            } catch (CustomExceptions.FileReadError e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":302,"author":{"gitId":"L5-Z"},"content":"                output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":303,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":304,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":305,"author":{"gitId":"L5-Z"},"content":"            output.printGreeting(status, DataFile.userName);","lastModifiedDate":"2024-04-07"},{"lineNumber":306,"author":{"gitId":"L5-Z"},"content":"            userInduction();","lastModifiedDate":"2024-03-20"},{"lineNumber":307,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":308,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":309,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Terminal primed. Command inputs are now accepted...\");","lastModifiedDate":"2024-03-20"},{"lineNumber":310,"author":{"gitId":"L5-Z"},"content":"        output.printLine();","lastModifiedDate":"2024-04-07"},{"lineNumber":311,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":312,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":313,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":314,"author":{"gitId":"L5-Z"},"content":"     * Terminates PulsePilot by saving tasks to storage, printing a goodbye message,","lastModifiedDate":"2024-03-18"},{"lineNumber":315,"author":{"gitId":"L5-Z"},"content":"     * and indicating the filename where tasks are saved.","lastModifiedDate":"2024-03-11"},{"lineNumber":316,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":317,"author":{"gitId":"L5-Z"},"content":"    public void terminateBot() {","lastModifiedDate":"2024-04-07"},{"lineNumber":318,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"User terminating PulsePilot\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":319,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":320,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":321,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Attempting to save data file\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":322,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":323,"author":{"gitId":"L5-Z"},"content":"            String userName \u003d DataFile.userName; // need to make it non static","lastModifiedDate":"2024-04-12"},{"lineNumber":324,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003cWorkout\u003e workoutList \u003d WorkoutLists.getWorkouts();","lastModifiedDate":"2024-04-12"},{"lineNumber":325,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003cBmi\u003e bmiList \u003d HealthList.getBmis();","lastModifiedDate":"2024-04-12"},{"lineNumber":326,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003cAppointment\u003e appointmentList \u003d HealthList.getAppointments();","lastModifiedDate":"2024-04-12"},{"lineNumber":327,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003cPeriod\u003e periodList \u003d HealthList.getPeriods();","lastModifiedDate":"2024-04-12"},{"lineNumber":328,"author":{"gitId":"L5-Z"},"content":"            dataFile.saveDataFile(userName, bmiList, appointmentList, periodList, workoutList);","lastModifiedDate":"2024-04-12"},{"lineNumber":329,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":330,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.FileWriteError e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":331,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"File write error\", true);","lastModifiedDate":"2024-03-27"},{"lineNumber":332,"author":{"gitId":"L5-Z"},"content":"            output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":333,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":334,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":335,"author":{"gitId":"L5-Z"},"content":"        output.printGoodbyeMessage();","lastModifiedDate":"2024-04-07"},{"lineNumber":336,"author":{"gitId":"L5-Z"},"content":"        // Yet to implement : Reply.printReply(\"Saved tasks as: \" + Constant.FILE_NAME);","lastModifiedDate":"2024-03-11"},{"lineNumber":337,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Bot exited gracefully\", false);","lastModifiedDate":"2024-03-20"},{"lineNumber":338,"author":{"gitId":"L5-Z"},"content":"        System.exit(0);","lastModifiedDate":"2024-03-11"},{"lineNumber":339,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":340,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":341,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"JustinSoh":71,"rouvinerh":59,"L5-Z":173,"syj02":38}},{"path":"src/main/java/ui/Output.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"package ui;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import workouts.GymStation;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import workouts.Workout;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutLists;","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"import health.Appointment;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import utility.Filters.HistoryAndLatestFilters;","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":" * The Output class handles printing various messages, data, and ASCII art for the user interface.","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"public class Output {","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"     * Prints a horizontal line.","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"    public static void printLine() {","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"        System.out.println(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"     * Prints the help message.","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    public void printHelp() {","lastModifiedDate":"2024-04-07"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Commands List:\");","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"        System.out.println();","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"workout /e:run /d:DISTANCE /t:TIME [/date:DATE] - Add a new run\");","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"workout /e:gym /n:NUMBER_OF_STATIONS [/date:DATE] - Add a new gym workout\");","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE - Add new BMI data\");","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"health /h:period /start:START_DATE [/end:END_DATE] - Add new period data\");","lastModifiedDate":"2024-04-08"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"health /h:prediction - Predicts next period\u0027s start date\");","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"health /h:appointment /date:DATE /time:TIME /description:DESCRIPTION\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"                \" - Add new appointment data\");","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"history /item:[run/gym/workouts/bmi/period/appointment] - \" +","lastModifiedDate":"2024-04-09"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"                \"Shows history of run/gym/workouts/bmi/period/appointment records\");","lastModifiedDate":"2024-04-09"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"latest /item:[run/gym/bmi/period/appointment] - \" +","lastModifiedDate":"2024-04-09"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"                \"Shows latest entry of run/gym/bmi/period/appointment records\");","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"delete /item:[run/gym/bmi/period/appointment] /index:INDEX - \" +","lastModifiedDate":"2024-04-09"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"                \"Deletes a run/gym/bmi/period/appointment record\");","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"help - Show this help message\");","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"exit - Exit the program\");","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"     * Prints an ASCII Art depicting the word \u0027PulsePilot\u0027.","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"    private void printArt() {","lastModifiedDate":"2024-04-11"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\" _              _\");","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"|_)    |  _  _ |_) o  |  _ _|_\");","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"|  |_| | _\u003e (/_|   |  | (_) |_\");","lastModifiedDate":"2024-03-14"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"     * Prints the gym station prompt.","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"     * @param stationNumber Integer representing the current gym station index.","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"    public void printGymStationPrompt(int stationNumber) {","lastModifiedDate":"2024-04-07"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(\"Please enter the details of station \"","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"                + stationNumber","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"                + \". (Format: \" + WorkoutConstant.STATION_GYM_FORMAT + \")\");","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(\"Enter \u0027back\u0027 to go back to the main menu!\");","lastModifiedDate":"2024-04-12"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"     * Returns the formatted string for printing runs.","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"     * @param index          The index of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"     * @return A string","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"    private String getFormattedRunWithIndex(int index, Run currentRun) {","lastModifiedDate":"2024-04-12"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.RUN_DATA_INDEX_FORMAT, index, currentRun);","lastModifiedDate":"2024-04-12"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"     * Prints the text header when adding a new Run.","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"     * @param newRun The new Run object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"    public void printAddRun(Run newRun) {","lastModifiedDate":"2024-04-07"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-12"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.ADD_RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.RUN_HEADER);","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(newRun);","lastModifiedDate":"2024-03-12"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-12"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-04-09"},{"lineNumber":110,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":111,"author":{"gitId":"j013n3"},"content":"     * Prints the message when a new Bmi is added.","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"     * @param newBmi The new Bmi object added.","lastModifiedDate":"2024-03-27"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"    public void printAddBmi(Bmi newBmi) {","lastModifiedDate":"2024-04-07"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"        printLine();","lastModifiedDate":"2024-04-07"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"        System.out.println(HealthConstant.BMI_ADDED_MESSAGE_PREFIX","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"                + newBmi.getHeight()","lastModifiedDate":"2024-03-27"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"                + newBmi.getWeight()","lastModifiedDate":"2024-03-27"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"                + newBmi.getDate());","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"        System.out.println(newBmi);","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"        printLine();","lastModifiedDate":"2024-04-07"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"     * Prints the message when a new Period is added.","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"     * @param newPeriod The new Period object added.","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"    public void printAddPeriod(Period newPeriod) {","lastModifiedDate":"2024-04-07"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"        printLine();","lastModifiedDate":"2024-04-07"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"        System.out.println(HealthConstant.PERIOD_ADDED_MESSAGE_PREFIX","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"                + newPeriod.getStartDate()","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"                + (newPeriod.getEndDate() \u003d\u003d null ? ErrorConstant.NO_DATE_SPECIFIED_ERROR : newPeriod.getEndDate()));","lastModifiedDate":"2024-04-08"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"        System.out.println(newPeriod);","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"        if (newPeriod.getEndDate() !\u003d null) {","lastModifiedDate":"2024-04-08"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"            printPeriodWarning(newPeriod);","lastModifiedDate":"2024-04-08"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-08"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"        printLine();","lastModifiedDate":"2024-04-07"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":144,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-08"},{"lineNumber":146,"author":{"gitId":"j013n3"},"content":"     * Prints the message when period length is not within the healthy range.","lastModifiedDate":"2024-04-08"},{"lineNumber":147,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-08"},{"lineNumber":148,"author":{"gitId":"j013n3"},"content":"     * @param newPeriod The new Period object added.","lastModifiedDate":"2024-04-08"},{"lineNumber":149,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-08"},{"lineNumber":150,"author":{"gitId":"j013n3"},"content":"    public void printPeriodWarning(Period newPeriod) {","lastModifiedDate":"2024-04-08"},{"lineNumber":151,"author":{"gitId":"j013n3"},"content":"        if (newPeriod.getPeriodLength() \u003c 2 || newPeriod.getPeriodLength() \u003e 7) {","lastModifiedDate":"2024-04-09"},{"lineNumber":152,"author":{"gitId":"j013n3"},"content":"            System.out.println(\"\\u001b[31m\" + HealthConstant.PERIOD_TOO_LONG_MESSAGE + \"\\u001b[0m\");","lastModifiedDate":"2024-04-08"},{"lineNumber":153,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-08"},{"lineNumber":154,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":155,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":156,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-09"},{"lineNumber":157,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"syj02"},"content":"     * Prints the message when a new Appointment is added.","lastModifiedDate":"2024-04-02"},{"lineNumber":159,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"syj02"},"content":"     * @param newAppointment The new Appointment object added.","lastModifiedDate":"2024-04-02"},{"lineNumber":161,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"syj02"},"content":"    public void printAddAppointment(Appointment newAppointment) {","lastModifiedDate":"2024-04-07"},{"lineNumber":163,"author":{"gitId":"syj02"},"content":"        printLine();","lastModifiedDate":"2024-04-07"},{"lineNumber":164,"author":{"gitId":"syj02"},"content":"        System.out.println(HealthConstant.APPOINTMENT_ADDED_MESSAGE_PREFIX","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"syj02"},"content":"                + newAppointment.getDate()","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"syj02"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"syj02"},"content":"                + newAppointment.getTime()","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"syj02"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":169,"author":{"gitId":"syj02"},"content":"                + newAppointment.getDescription());","lastModifiedDate":"2024-03-27"},{"lineNumber":170,"author":{"gitId":"syj02"},"content":"        System.out.println(newAppointment);","lastModifiedDate":"2024-03-27"},{"lineNumber":171,"author":{"gitId":"syj02"},"content":"        printLine();","lastModifiedDate":"2024-04-07"},{"lineNumber":172,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":173,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"     * Prints the text header when adding a new Gym.","lastModifiedDate":"2024-03-20"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"     * @param gym The new Gym object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"    public void printAddGym(Gym gym) {","lastModifiedDate":"2024-04-07"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.ADD_GYM);","lastModifiedDate":"2024-03-21"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"        printGymStats(gym);","lastModifiedDate":"2024-03-19"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"     * Prints all Workout objects (Run and Gym) based on the time it was added.","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"     * The list is sorted in descending order. (Latest one first)","lastModifiedDate":"2024-03-27"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.OutOfBounds  If index is out of bounds.","lastModifiedDate":"2024-04-04"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If user input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"    protected void printWorkoutHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-07"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.HISTORY_WORKOUTS_HEADER);","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.HISTORY_WORKOUTS_HEADER_FORMAT);","lastModifiedDate":"2024-03-27"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003c? extends Workout\u003e workoutList \u003d WorkoutLists.getWorkouts();","lastModifiedDate":"2024-04-12"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"        if (workoutList.isEmpty()) {","lastModifiedDate":"2024-04-12"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"            printWorkoutEmptyMessage();","lastModifiedDate":"2024-04-12"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-04-12"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"            for (int i \u003d 0; i \u003c workoutList.size(); i++) {","lastModifiedDate":"2024-03-27"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"                Workout workout \u003d workoutList.get(i);","lastModifiedDate":"2024-03-27"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"                if (workout instanceof Run) {","lastModifiedDate":"2024-03-27"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"                    Run run \u003d (Run) workout;","lastModifiedDate":"2024-03-27"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"                    String formattedRunString \u003d run.getFormatForAllHistory();","lastModifiedDate":"2024-04-12"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"                    System.out.printf((WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT) + \"%n\",","lastModifiedDate":"2024-04-01"},{"lineNumber":210,"author":{"gitId":"JustinSoh"},"content":"                            (i + 1), formattedRunString);","lastModifiedDate":"2024-04-12"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"                } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"                    Gym gym \u003d (Gym) workout;","lastModifiedDate":"2024-03-27"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"                    int numberOfStation \u003d gym.getStations().size();","lastModifiedDate":"2024-03-27"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"                    for (int j \u003d 0; j \u003c numberOfStation; j++) {","lastModifiedDate":"2024-03-27"},{"lineNumber":215,"author":{"gitId":"JustinSoh"},"content":"                        String gymString;","lastModifiedDate":"2024-03-27"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"                        if (j \u003d\u003d 0) {","lastModifiedDate":"2024-03-27"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"                            gymString \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"                                    (i + 1), gym.getHistoryFormatForSpecificGymStation(j));","lastModifiedDate":"2024-03-27"},{"lineNumber":219,"author":{"gitId":"JustinSoh"},"content":"                        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":220,"author":{"gitId":"JustinSoh"},"content":"                            gymString \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"                                    \"\", gym.getHistoryFormatForSpecificGymStation(j));","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"                        }","lastModifiedDate":"2024-03-27"},{"lineNumber":223,"author":{"gitId":"JustinSoh"},"content":"                        System.out.println(gymString);","lastModifiedDate":"2024-03-27"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"                    }","lastModifiedDate":"2024-03-27"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-03-27"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-27"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"     * Prints all the Run objects added to the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.OutOfBounds  If index is out of bounds.","lastModifiedDate":"2024-03-20"},{"lineNumber":236,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If user input is invalid.","lastModifiedDate":"2024-03-20"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"    protected void printRunHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-07"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(\"Your run history:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cRun\u003e runList \u003d WorkoutLists.getRuns();","lastModifiedDate":"2024-04-12"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"        if(runList.isEmpty()){","lastModifiedDate":"2024-04-12"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"            printRunEmptyMessage();","lastModifiedDate":"2024-04-12"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-04-12"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"            String runHeader \u003d String.format(WorkoutConstant.RUN_HEADER_INDEX_FORMAT);","lastModifiedDate":"2024-04-04"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(runHeader);","lastModifiedDate":"2024-04-04"},{"lineNumber":248,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"            for (int i \u003d 0; i \u003c runList.size(); i++) {","lastModifiedDate":"2024-04-12"},{"lineNumber":250,"author":{"gitId":"JustinSoh"},"content":"                int index \u003d i + 1;","lastModifiedDate":"2024-03-14"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"                Run currentRun \u003d runList.get(i);","lastModifiedDate":"2024-04-12"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"                String output \u003d getFormattedRunWithIndex(index, currentRun);","lastModifiedDate":"2024-04-12"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"                System.out.println(output);","lastModifiedDate":"2024-03-14"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-12"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"     * Prints all the stations within a specified Gym object.","lastModifiedDate":"2024-03-20"},{"lineNumber":262,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":263,"author":{"gitId":"JustinSoh"},"content":"     * @param gym The Gym object containing the GymStation objects to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":264,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":265,"author":{"gitId":"JustinSoh"},"content":"    protected void printGymStats(Gym gym) {","lastModifiedDate":"2024-04-07"},{"lineNumber":266,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cGymStation\u003e allStations \u003d gym.getStations();","lastModifiedDate":"2024-03-19"},{"lineNumber":267,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c allStations.size(); i++) {","lastModifiedDate":"2024-03-26"},{"lineNumber":268,"author":{"gitId":"JustinSoh"},"content":"            System.out.printf(\"Station %d %s%n\", i + 1, allStations.get(i).toString());","lastModifiedDate":"2024-03-27"},{"lineNumber":269,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":273,"author":{"gitId":"JustinSoh"},"content":"    private void printGymList(ArrayList\u003cGym\u003e gymList){","lastModifiedDate":"2024-04-12"},{"lineNumber":274,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c gymList.size(); i++) {","lastModifiedDate":"2024-04-12"},{"lineNumber":275,"author":{"gitId":"JustinSoh"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2024-04-12"},{"lineNumber":276,"author":{"gitId":"JustinSoh"},"content":"            Gym currentWorkout \u003d gymList.get(i);","lastModifiedDate":"2024-04-12"},{"lineNumber":277,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(\"Gym Session \" + index + currentWorkout);","lastModifiedDate":"2024-04-12"},{"lineNumber":278,"author":{"gitId":"JustinSoh"},"content":"            printGymStats(currentWorkout);","lastModifiedDate":"2024-04-12"},{"lineNumber":279,"author":{"gitId":"JustinSoh"},"content":"            if (i !\u003d gymList.size() - 1) {","lastModifiedDate":"2024-04-12"},{"lineNumber":280,"author":{"gitId":"JustinSoh"},"content":"                printLine();","lastModifiedDate":"2024-04-12"},{"lineNumber":281,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-04-12"},{"lineNumber":282,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":283,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":284,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":286,"author":{"gitId":"JustinSoh"},"content":"     * Prints a message when the Gym list is empty.","lastModifiedDate":"2024-04-12"},{"lineNumber":287,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":288,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":289,"author":{"gitId":"JustinSoh"},"content":"    private void printGymEmptyMessage(){","lastModifiedDate":"2024-04-12"},{"lineNumber":290,"author":{"gitId":"JustinSoh"},"content":"        printException(ErrorConstant.GYM_EMPTY_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":291,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":292,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":293,"author":{"gitId":"JustinSoh"},"content":"    private void printRunEmptyMessage(){","lastModifiedDate":"2024-04-12"},{"lineNumber":294,"author":{"gitId":"JustinSoh"},"content":"        printException(ErrorConstant.RUN_EMPTY_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":295,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":296,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":297,"author":{"gitId":"JustinSoh"},"content":"    private void printWorkoutEmptyMessage(){","lastModifiedDate":"2024-04-12"},{"lineNumber":298,"author":{"gitId":"JustinSoh"},"content":"        printException(ErrorConstant.WORKOUTS_EMPTY_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":299,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":300,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":301,"author":{"gitId":"JustinSoh"},"content":"     * Prints all the information for all Gym objects within the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":302,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":303,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":304,"author":{"gitId":"JustinSoh"},"content":"    protected void printGymHistory() {","lastModifiedDate":"2024-04-12"},{"lineNumber":305,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":306,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(\"Your gym history:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":307,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cGym\u003e gymList \u003d WorkoutLists.getGyms();","lastModifiedDate":"2024-04-12"},{"lineNumber":308,"author":{"gitId":"JustinSoh"},"content":"        if (gymList.isEmpty()) {","lastModifiedDate":"2024-04-12"},{"lineNumber":309,"author":{"gitId":"JustinSoh"},"content":"            printGymEmptyMessage();","lastModifiedDate":"2024-04-12"},{"lineNumber":310,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-04-12"},{"lineNumber":311,"author":{"gitId":"JustinSoh"},"content":"            printGymList(gymList);","lastModifiedDate":"2024-04-12"},{"lineNumber":312,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":313,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":314,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":315,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":316,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":317,"author":{"gitId":"JustinSoh"},"content":"     * Prints the message when user exits from entering gym station input.","lastModifiedDate":"2024-04-12"},{"lineNumber":318,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":319,"author":{"gitId":"JustinSoh"},"content":"    public void printGymStationExit() {","lastModifiedDate":"2024-04-12"},{"lineNumber":320,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-04-12"},{"lineNumber":321,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(\"No longer entering gym input.\");","lastModifiedDate":"2024-04-12"},{"lineNumber":322,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(\"Exiting to main menu!\");","lastModifiedDate":"2024-04-12"},{"lineNumber":323,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-04-12"},{"lineNumber":324,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":325,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":326,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-04-09"},{"lineNumber":327,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":328,"author":{"gitId":"j013n3"},"content":"     * Prints all Bmi objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":329,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":330,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.OutOfBounds  If there is access to a Bmi object that does not exist.","lastModifiedDate":"2024-03-20"},{"lineNumber":331,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":332,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":333,"author":{"gitId":"j013n3"},"content":"    protected void printBmiHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-07"},{"lineNumber":334,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":335,"author":{"gitId":"j013n3"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":336,"author":{"gitId":"j013n3"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":337,"author":{"gitId":"j013n3"},"content":"            HealthList.printBmiHistory();","lastModifiedDate":"2024-04-11"},{"lineNumber":338,"author":{"gitId":"j013n3"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":339,"author":{"gitId":"j013n3"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":340,"author":{"gitId":"j013n3"},"content":"            printException(e.getMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":341,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":342,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":343,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":344,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":345,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":346,"author":{"gitId":"j013n3"},"content":"     * Prints all Period objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":347,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":348,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.OutOfBounds  If there is access to a Period object that does not exist.","lastModifiedDate":"2024-03-20"},{"lineNumber":349,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":350,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":351,"author":{"gitId":"j013n3"},"content":"    protected void printPeriodHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-07"},{"lineNumber":352,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":353,"author":{"gitId":"j013n3"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":354,"author":{"gitId":"j013n3"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":355,"author":{"gitId":"j013n3"},"content":"            HealthList.printPeriodHistory();","lastModifiedDate":"2024-04-11"},{"lineNumber":356,"author":{"gitId":"j013n3"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":357,"author":{"gitId":"j013n3"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":358,"author":{"gitId":"j013n3"},"content":"            printException(e.getMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":359,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":360,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":361,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":362,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":363,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-09"},{"lineNumber":364,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":365,"author":{"gitId":"syj02"},"content":"     * Prints all Appointment objects recorded.","lastModifiedDate":"2024-04-01"},{"lineNumber":366,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":367,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.OutOfBounds  If there is access to an Appointment object that does not exist.","lastModifiedDate":"2024-04-02"},{"lineNumber":368,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-04-01"},{"lineNumber":369,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":370,"author":{"gitId":"syj02"},"content":"    protected void printAppointmentHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-07"},{"lineNumber":371,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":372,"author":{"gitId":"syj02"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":373,"author":{"gitId":"syj02"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":374,"author":{"gitId":"syj02"},"content":"            HealthList.printAppointmentHistory();","lastModifiedDate":"2024-04-11"},{"lineNumber":375,"author":{"gitId":"syj02"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":376,"author":{"gitId":"syj02"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":377,"author":{"gitId":"syj02"},"content":"            printException(e.getMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":378,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":379,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":380,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":381,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Run recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"    protected void printLatestRun() {","lastModifiedDate":"2024-04-07"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"            Run latestRun \u003d WorkoutLists.getLatestRun();","lastModifiedDate":"2024-04-12"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"            String latestRunString \u003d getFormattedRunWithIndex(WorkoutLists.getRunSize(), latestRun);","lastModifiedDate":"2024-04-12"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(\"Your latest run:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(WorkoutConstant.RUN_HEADER_INDEX_FORMAT);","lastModifiedDate":"2024-03-27"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(latestRunString);","lastModifiedDate":"2024-03-20"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"            printException(e.getMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Gym recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"    protected void printLatestGym() {","lastModifiedDate":"2024-04-07"},{"lineNumber":406,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":407,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":408,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":409,"author":{"gitId":"rouvinerh"},"content":"            Gym latestGym \u003d WorkoutLists.getLatestGym();","lastModifiedDate":"2024-04-12"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"            int index \u003d WorkoutLists.getGymSize();","lastModifiedDate":"2024-04-12"},{"lineNumber":411,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(\"Your latest gym:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(\"Gym Session \" + index + latestGym);","lastModifiedDate":"2024-03-20"},{"lineNumber":413,"author":{"gitId":"rouvinerh"},"content":"            printGymStats(latestGym);","lastModifiedDate":"2024-03-20"},{"lineNumber":414,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":416,"author":{"gitId":"rouvinerh"},"content":"            printException((e.getMessage()));","lastModifiedDate":"2024-04-10"},{"lineNumber":417,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":418,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":419,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":421,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest BMI entry recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":423,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":424,"author":{"gitId":"rouvinerh"},"content":"    protected void printLatestBmi() {","lastModifiedDate":"2024-04-07"},{"lineNumber":425,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":426,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":427,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"            HealthList.printLatestBmi();","lastModifiedDate":"2024-04-11"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":431,"author":{"gitId":"rouvinerh"},"content":"            printException(e.getMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":432,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":433,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":434,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":435,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":436,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":437,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Period entry recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":439,"author":{"gitId":"rouvinerh"},"content":"    protected void printLatestPeriod() {","lastModifiedDate":"2024-04-07"},{"lineNumber":440,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":441,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":442,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":443,"author":{"gitId":"rouvinerh"},"content":"            HealthList.printLatestPeriod();","lastModifiedDate":"2024-04-11"},{"lineNumber":444,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":445,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":446,"author":{"gitId":"rouvinerh"},"content":"            printException(e.getMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":447,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":448,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":449,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":450,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":451,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":452,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Appointment entry recorded.","lastModifiedDate":"2024-04-01"},{"lineNumber":453,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":454,"author":{"gitId":"rouvinerh"},"content":"    protected void printLatestAppointment(){","lastModifiedDate":"2024-04-10"},{"lineNumber":455,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":456,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":457,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":458,"author":{"gitId":"rouvinerh"},"content":"            HealthList.printLatestAppointment();","lastModifiedDate":"2024-04-11"},{"lineNumber":459,"author":{"gitId":"rouvinerh"},"content":"            printLine();","lastModifiedDate":"2024-04-10"},{"lineNumber":460,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":461,"author":{"gitId":"rouvinerh"},"content":"            printException(e.getMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":462,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":463,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":464,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":465,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":466,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":467,"author":{"gitId":"rouvinerh"},"content":"     * Handler function to print the latest entry of Run, Gym, Period, or BMI objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":468,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":469,"author":{"gitId":"rouvinerh"},"content":"     * @param filter String used to determine the latest Run, Gym, Period, or BMI objects is to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":470,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":471,"author":{"gitId":"rouvinerh"},"content":"    protected void printLatest(String filter) {","lastModifiedDate":"2024-04-11"},{"lineNumber":472,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":473,"author":{"gitId":"rouvinerh"},"content":"            HistoryAndLatestFilters parsedFilter \u003d HistoryAndLatestFilters.valueOf(filter.toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":474,"author":{"gitId":"rouvinerh"},"content":"            switch (parsedFilter) {","lastModifiedDate":"2024-03-20"},{"lineNumber":475,"author":{"gitId":"rouvinerh"},"content":"            case RUN:","lastModifiedDate":"2024-03-20"},{"lineNumber":476,"author":{"gitId":"rouvinerh"},"content":"                printLatestRun();","lastModifiedDate":"2024-03-20"},{"lineNumber":477,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":478,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":479,"author":{"gitId":"rouvinerh"},"content":"            case GYM:","lastModifiedDate":"2024-03-20"},{"lineNumber":480,"author":{"gitId":"rouvinerh"},"content":"                printLatestGym();","lastModifiedDate":"2024-03-20"},{"lineNumber":481,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":482,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":483,"author":{"gitId":"rouvinerh"},"content":"            case BMI:","lastModifiedDate":"2024-03-20"},{"lineNumber":484,"author":{"gitId":"rouvinerh"},"content":"                printLatestBmi();","lastModifiedDate":"2024-03-20"},{"lineNumber":485,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":486,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":487,"author":{"gitId":"rouvinerh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-20"},{"lineNumber":488,"author":{"gitId":"rouvinerh"},"content":"                printLatestPeriod();","lastModifiedDate":"2024-03-20"},{"lineNumber":489,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":490,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":491,"author":{"gitId":"rouvinerh"},"content":"            case APPOINTMENT:","lastModifiedDate":"2024-04-01"},{"lineNumber":492,"author":{"gitId":"rouvinerh"},"content":"                printLatestAppointment();","lastModifiedDate":"2024-04-10"},{"lineNumber":493,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-04-01"},{"lineNumber":494,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":495,"author":{"gitId":"rouvinerh"},"content":"            default:","lastModifiedDate":"2024-03-20"},{"lineNumber":496,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-04-11"},{"lineNumber":497,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":498,"author":{"gitId":"rouvinerh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-04-11"},{"lineNumber":499,"author":{"gitId":"rouvinerh"},"content":"            printException(ErrorConstant.INVALID_LATEST_OR_DELETE_FILTER);","lastModifiedDate":"2024-04-13"},{"lineNumber":500,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":501,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":502,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":503,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":504,"author":{"gitId":"rouvinerh"},"content":"     * Handler function to print all entries of Run, Gym, Period, or BMI objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":505,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":506,"author":{"gitId":"rouvinerh"},"content":"     * @param filter String used to determine if all Run, Gym, Period, or BMI objects are to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":507,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":508,"author":{"gitId":"rouvinerh"},"content":"    public void printHistory(String filter) {","lastModifiedDate":"2024-04-07"},{"lineNumber":509,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-19"},{"lineNumber":510,"author":{"gitId":"rouvinerh"},"content":"            HistoryAndLatestFilters parsedFilter \u003d HistoryAndLatestFilters.valueOf(filter.toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":511,"author":{"gitId":"rouvinerh"},"content":"            switch (parsedFilter) {","lastModifiedDate":"2024-03-19"},{"lineNumber":512,"author":{"gitId":"rouvinerh"},"content":"            case WORKOUTS:","lastModifiedDate":"2024-03-27"},{"lineNumber":513,"author":{"gitId":"rouvinerh"},"content":"                printWorkoutHistory();","lastModifiedDate":"2024-03-27"},{"lineNumber":514,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":515,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":516,"author":{"gitId":"rouvinerh"},"content":"            case RUN:","lastModifiedDate":"2024-03-19"},{"lineNumber":517,"author":{"gitId":"rouvinerh"},"content":"                printRunHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":518,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-19"},{"lineNumber":519,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":520,"author":{"gitId":"rouvinerh"},"content":"            case GYM:","lastModifiedDate":"2024-03-19"},{"lineNumber":521,"author":{"gitId":"rouvinerh"},"content":"                printGymHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":522,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-19"},{"lineNumber":523,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":524,"author":{"gitId":"rouvinerh"},"content":"            case BMI:","lastModifiedDate":"2024-03-20"},{"lineNumber":525,"author":{"gitId":"rouvinerh"},"content":"                printBmiHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":526,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":527,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":528,"author":{"gitId":"rouvinerh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-20"},{"lineNumber":529,"author":{"gitId":"rouvinerh"},"content":"                printPeriodHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":530,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":531,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":532,"author":{"gitId":"rouvinerh"},"content":"            case APPOINTMENT:","lastModifiedDate":"2024-04-01"},{"lineNumber":533,"author":{"gitId":"rouvinerh"},"content":"                printAppointmentHistory();","lastModifiedDate":"2024-04-01"},{"lineNumber":534,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-04-01"},{"lineNumber":535,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":536,"author":{"gitId":"rouvinerh"},"content":"            default:","lastModifiedDate":"2024-03-19"},{"lineNumber":537,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-26"},{"lineNumber":538,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-19"},{"lineNumber":539,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds | CustomExceptions.InvalidInput e ) {","lastModifiedDate":"2024-03-13"},{"lineNumber":540,"author":{"gitId":"rouvinerh"},"content":"            printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":541,"author":{"gitId":"rouvinerh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-04-11"},{"lineNumber":542,"author":{"gitId":"rouvinerh"},"content":"            printException(ErrorConstant.INVALID_HISTORY_FILTER_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":543,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":544,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":545,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":546,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":547,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":548,"author":{"gitId":"JustinSoh"},"content":"     * Prints a specified message and the exception error message.","lastModifiedDate":"2024-03-20"},{"lineNumber":549,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":550,"author":{"gitId":"JustinSoh"},"content":"     * @param message The custom message to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":551,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":552,"author":{"gitId":"JustinSoh"},"content":"    public void printException(String message) {","lastModifiedDate":"2024-04-07"},{"lineNumber":553,"author":{"gitId":"JustinSoh"},"content":"        System.err.println(\"\\u001b[31mException Caught!\" + System.lineSeparator() + message + \"\\u001b[0m\");","lastModifiedDate":"2024-04-09"},{"lineNumber":554,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":555,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":556,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-04-09"},{"lineNumber":557,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":558,"author":{"gitId":"L5-Z"},"content":"     * Prints the welcome banner for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":559,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":560,"author":{"gitId":"L5-Z"},"content":"    public void printWelcomeBanner() {","lastModifiedDate":"2024-04-07"},{"lineNumber":561,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":562,"author":{"gitId":"L5-Z"},"content":"        printArt();","lastModifiedDate":"2024-03-18"},{"lineNumber":563,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Engaging orbital thrusters...\");","lastModifiedDate":"2024-03-18"},{"lineNumber":564,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"PulsePilot on standby\");","lastModifiedDate":"2024-03-18"},{"lineNumber":565,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":566,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":567,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":568,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":569,"author":{"gitId":"L5-Z"},"content":"     * Checks whether storage file is present, and prints corresponding message.","lastModifiedDate":"2024-03-20"},{"lineNumber":570,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":571,"author":{"gitId":"L5-Z"},"content":"     * @param status Integer representing whether the storage file has been loaded. If set to 0, file is present. Else,","lastModifiedDate":"2024-03-20"},{"lineNumber":572,"author":{"gitId":"L5-Z"},"content":"     *               file is not present.","lastModifiedDate":"2024-03-20"},{"lineNumber":573,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":574,"author":{"gitId":"L5-Z"},"content":"    protected void printGreeting(int status, String name) {","lastModifiedDate":"2024-04-11"},{"lineNumber":575,"author":{"gitId":"L5-Z"},"content":"        if (status \u003d\u003d UiConstant.FILE_FOUND) {","lastModifiedDate":"2024-04-11"},{"lineNumber":576,"author":{"gitId":"L5-Z"},"content":"            System.out.println(UiConstant.FILE_FOUND_MESSAGE + name);","lastModifiedDate":"2024-04-11"},{"lineNumber":577,"author":{"gitId":"L5-Z"},"content":"            System.out.println(UiConstant.SUCCESSFUL_LOAD);","lastModifiedDate":"2024-03-21"},{"lineNumber":578,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-03-18"},{"lineNumber":579,"author":{"gitId":"L5-Z"},"content":"            System.out.println(UiConstant.FILE_MISSING_MESSAGE);","lastModifiedDate":"2024-04-11"},{"lineNumber":580,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":581,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":582,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":583,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":584,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":585,"author":{"gitId":"L5-Z"},"content":"     * Prints the goodbye message for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":586,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":587,"author":{"gitId":"L5-Z"},"content":"    protected void printGoodbyeMessage() {","lastModifiedDate":"2024-04-11"},{"lineNumber":588,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":589,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"PulsePilot successful touchdown\");","lastModifiedDate":"2024-03-20"},{"lineNumber":590,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"See you soon, Captain!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":591,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":592,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":593,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":594,"author":{"gitId":"L5-Z"},"content":"    // Print Delete Message","lastModifiedDate":"2024-04-12"},{"lineNumber":595,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":596,"author":{"gitId":"L5-Z"},"content":"    public static void printDeleteRunMessage(Run run){","lastModifiedDate":"2024-04-12"},{"lineNumber":597,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-04-12"},{"lineNumber":598,"author":{"gitId":"L5-Z"},"content":"        String messageString \u003d String.format(WorkoutConstant.RUN_DELETE_MESSAGE_FORMAT,","lastModifiedDate":"2024-04-12"},{"lineNumber":599,"author":{"gitId":"L5-Z"},"content":"                run.getDistance(),","lastModifiedDate":"2024-04-12"},{"lineNumber":600,"author":{"gitId":"L5-Z"},"content":"                run.getPace());","lastModifiedDate":"2024-04-12"},{"lineNumber":601,"author":{"gitId":"L5-Z"},"content":"        System.out.println(messageString);","lastModifiedDate":"2024-04-12"},{"lineNumber":602,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-04-12"},{"lineNumber":603,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":604,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":605,"author":{"gitId":"L5-Z"},"content":"    public static void printDeleteGymMessage(Gym gym){","lastModifiedDate":"2024-04-12"},{"lineNumber":606,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-12"},{"lineNumber":607,"author":{"gitId":"L5-Z"},"content":"        String messageString \u003d String.format(WorkoutConstant.GYM_DELETE_MESSAGE_FORMAT,","lastModifiedDate":"2024-04-12"},{"lineNumber":608,"author":{"gitId":"L5-Z"},"content":"                gym.getStations().size());","lastModifiedDate":"2024-04-12"},{"lineNumber":609,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":610,"author":{"gitId":"L5-Z"},"content":"        System.out.println(messageString);","lastModifiedDate":"2024-04-12"},{"lineNumber":611,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-04-12"},{"lineNumber":612,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":613,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"j013n3":84,"JustinSoh":209,"rouvinerh":173,"L5-Z":107,"syj02":40}},{"path":"src/main/java/utility/CustomExceptions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package utility;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":" * Represents a custom exception class designed for PulsePilot to handle errors during command processing.","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-14"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"public class CustomExceptions extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"     * Prints the error for an OutOfBounds error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"    public static class OutOfBounds extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"        public OutOfBounds(String message) {","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"            super(ErrorConstant.COLOR_HEADING","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"                    + ErrorConstant.OUT_OF_BOUND_HEADER","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"                    + message","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"                    + ErrorConstant.COLOR_ENDING);","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"            LogFile.writeLog(ErrorConstant.OUT_OF_BOUND_HEADER + message, true);","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"     * Prints the error for an InvalidInput error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    public static class InvalidInput extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"        public InvalidInput(String message) {","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"            super(ErrorConstant.COLOR_HEADING","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"                    + ErrorConstant.INVALID_INPUT_HEADER","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"                    + message","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"                    + ErrorConstant.COLOR_ENDING);","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"            LogFile.writeLog(ErrorConstant.INVALID_INPUT_HEADER + message, true);","lastModifiedDate":"2024-04-11"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"     * Prints the error for an FileReadError error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-24"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"    public static class FileReadError extends Exception{","lastModifiedDate":"2024-03-24"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"        public FileReadError(String message) {","lastModifiedDate":"2024-03-24"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"            super(ErrorConstant.COLOR_HEADING + \"File Read Error: \" + message + ErrorConstant.COLOR_ENDING);","lastModifiedDate":"2024-04-11"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"File Read Error:\" + message, true);","lastModifiedDate":"2024-04-09"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"     * Prints the error for an FileWriteError error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"    public static class FileWriteError extends Exception{","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"        public FileWriteError(String message) {","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"            super( ErrorConstant.COLOR_HEADING + \"File Write Error: \" + message + ErrorConstant.COLOR_ENDING);","lastModifiedDate":"2024-04-11"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"File Write Error:\" + message, true);","lastModifiedDate":"2024-04-09"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"     * Prints the error for an FileCreateError error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"    public static class FileCreateError extends Exception{","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"        public FileCreateError(String message) {","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"            super(ErrorConstant.COLOR_HEADING + \"File Create Error: \" + message + ErrorConstant.COLOR_ENDING);","lastModifiedDate":"2024-04-11"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"File Create Error:\" + message, true);","lastModifiedDate":"2024-04-09"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"     * Prints the error for an InsufficientInput error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"    public static class InsufficientInput extends Exception {","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"        public InsufficientInput(String message) {","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"            super(ErrorConstant.COLOR_HEADING","lastModifiedDate":"2024-04-11"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"                    + ErrorConstant.INSUFFICIENT_INPUT_HEADER","lastModifiedDate":"2024-04-11"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"                    + message","lastModifiedDate":"2024-04-11"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"                    + ErrorConstant.COLOR_ENDING);","lastModifiedDate":"2024-04-11"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"            LogFile.writeLog(ErrorConstant.INSUFFICIENT_INPUT_HEADER + message, true);","lastModifiedDate":"2024-04-11"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"JustinSoh":46,"rouvinerh":1,"L5-Z":34}},{"path":"src/main/java/utility/Filters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"//@@author L5-Z","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"package utility;","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":" * Class representing the filters used for PulsePilot.","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"public class Filters {","lastModifiedDate":"2024-04-09"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"    public enum Command {","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"        WORKOUT,","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"        HISTORY,","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"        LATEST,","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"        HEALTH,","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"        DELETE,","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"        HELP,","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"        EXIT","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"    public enum DeleteFilters {","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"        RUN,","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"        GYM,","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"        PERIOD,","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"        BMI,","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"        APPOINTMENT,","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"    public enum HealthFilters {","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"        PERIOD,","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"        BMI,","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"        APPOINTMENT,","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"        PREDICTION,","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"    public enum WorkoutFilters {","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"        RUN,","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"        GYM,","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    public enum HistoryAndLatestFilters {","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"        RUN,","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"        GYM,","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"        PERIOD,","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"        BMI,","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"        APPOINTMENT,","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"        WORKOUTS","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"    public enum DataType {","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"        BMI,","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"        APPOINTMENT,","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"        PERIOD,","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"        GYM,","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"        RUN","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"L5-Z":57}},{"path":"src/main/java/utility/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import health.Appointment;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import ui.Output;","lastModifiedDate":"2024-04-07"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"import workouts.WorkoutLists;","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"import java.util.Objects;","lastModifiedDate":"2024-04-08"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-04-07"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":" * Represents the parser used to parse and split input for PulsePilot.","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"public class Parser {","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"    private final Scanner in;","lastModifiedDate":"2024-04-07"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    private final Validation validation;","lastModifiedDate":"2024-04-07"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    private final Output output;","lastModifiedDate":"2024-04-07"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    public Parser(Scanner inputScanner) {","lastModifiedDate":"2024-04-07"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"        in \u003d inputScanner;","lastModifiedDate":"2024-04-07"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"        validation \u003d new Validation();","lastModifiedDate":"2024-04-07"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"        output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"    public Parser() {","lastModifiedDate":"2024-04-07"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2024-04-07"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"        validation \u003d new Validation();","lastModifiedDate":"2024-04-07"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"        output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-06"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"     * Counts the number of \u0027/\u0027 characters there are in a given string.","lastModifiedDate":"2024-04-06"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-06"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-04-06"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"     * @return An integer representing the number of \u0027/\u0027 characters there are.","lastModifiedDate":"2024-04-06"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-06"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    public int countForwardSlash(String input) {","lastModifiedDate":"2024-04-07"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"        int count \u003d 0;","lastModifiedDate":"2024-04-06"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"        for (int i \u003d 0; i \u003c input.length(); i++) {","lastModifiedDate":"2024-04-06"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"            if (input.charAt(i) \u003d\u003d \u0027/\u0027) {","lastModifiedDate":"2024-04-06"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"                count++;","lastModifiedDate":"2024-04-06"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-04-06"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        return count;","lastModifiedDate":"2024-04-06"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-06"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"     * Parses and converts String date to a LocalDate variable.","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     * @param date String representing the date.","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"     * @return LocalDate variable representing the date.","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"     * @throws DateTimeParseException If there is an error parsing the date.","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"    public LocalDate parseDate(String date) {","lastModifiedDate":"2024-04-07"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"        LocalDate formattedDate \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"            formattedDate \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2024-03-25"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"            output.printException(ErrorConstant.PARSING_DATE_ERROR);","lastModifiedDate":"2024-04-07"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"        return formattedDate;","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-04-06"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"     * Converts a LocalDate object to a formatted String representation. Returns \"NA\" if date is null.","lastModifiedDate":"2024-04-10"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"     * @param date LocalDate object representing the date.","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"     * @return Formatted String representation of the date in the format \"dd-MM-yyyy\".","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"    public String parseFormattedDate(LocalDate date) {","lastModifiedDate":"2024-04-07"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2024-04-10"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2024-04-10"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"            return \"NA\";","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"        return date.format(formatter);","lastModifiedDate":"2024-04-02"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-09"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"     * Parses and converts String time to a LocalDate variable.","lastModifiedDate":"2024-03-26"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"     * @param stringTime String representing the time.","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"     * @return LocalTime variable representing the time.","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"syj02"},"content":"     * @throws DateTimeParseException If there is an error parsing the time.","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"syj02"},"content":"    public LocalTime parseTime(String stringTime) throws DateTimeParseException {","lastModifiedDate":"2024-04-07"},{"lineNumber":108,"author":{"gitId":"syj02"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"        LocalTime formattedTime \u003d null;","lastModifiedDate":"2024-03-26"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"            formattedTime \u003d LocalTime.parse(stringTime, formatter);","lastModifiedDate":"2024-03-26"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":113,"author":{"gitId":"syj02"},"content":"            output.printException(ErrorConstant.PARSING_TIME_ERROR);","lastModifiedDate":"2024-04-07"},{"lineNumber":114,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":115,"author":{"gitId":"syj02"},"content":"        return formattedTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":116,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":117,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"     * Splits user input for Delete command into item and index.","lastModifiedDate":"2024-03-29"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-29"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     * @return An array of strings containing the extracted delete command parameters.","lastModifiedDate":"2024-03-29"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If not enough parameters are specified.","lastModifiedDate":"2024-03-29"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"    public String[] splitDeleteInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"        if (!input.contains(UiConstant.ITEM_FLAG) || !input.contains(UiConstant.INDEX_FLAG)) {","lastModifiedDate":"2024-03-29"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_DELETE_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-29"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"        if (countForwardSlash(input) \u003e UiConstant.NUM_OF_SLASHES_FOR_DELETE) {","lastModifiedDate":"2024-04-06"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"        String[] results \u003d new String[UiConstant.NUM_DELETE_PARAMETERS];","lastModifiedDate":"2024-03-31"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        results[UiConstant.DELETE_ITEM_STRING_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.ITEM_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"        results[UiConstant.DELETE_ITEM_NUMBER_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.INDEX_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"        return results;","lastModifiedDate":"2024-03-29"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-29"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     * Parses and validates user input for the delete command. Returns a list of parsed user input","lastModifiedDate":"2024-03-29"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * containing the filter string and the index to delete.","lastModifiedDate":"2024-03-29"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-29"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-29"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"     * @return A list of strings containing the filter string and index to delete.","lastModifiedDate":"2024-03-29"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-29"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"    public String[] parseDeleteInput(String userInput) {","lastModifiedDate":"2024-04-07"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-29"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"            String[] deleteDetails \u003d splitDeleteInput(userInput);","lastModifiedDate":"2024-03-29"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"            validation.validateDeleteInput(deleteDetails);","lastModifiedDate":"2024-04-07"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"            return deleteDetails;","lastModifiedDate":"2024-03-29"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"            output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"            return null;","lastModifiedDate":"2024-03-26"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-11"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"     * Function validates and parses the user input for the history","lastModifiedDate":"2024-04-11"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-11"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput String representing the user input.","lastModifiedDate":"2024-04-11"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"     * @return The filter string, set to either \u0027gym\u0027, \u0027run\u0027, \u0027workouts\u0027, \u0027bmi\u0027, \u0027appointment\u0027 or \u0027period\u0027.","lastModifiedDate":"2024-04-11"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"    public String parseHistory(String userInput) {","lastModifiedDate":"2024-04-11"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-04-11"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"            if (countForwardSlash(userInput) \u003e UiConstant.NUM_OF_SLASHES_FOR_LATEST_AND_HISTORY) {","lastModifiedDate":"2024-04-11"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-04-11"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"            String filter \u003d extractSubstringFromSpecificIndex(userInput, UiConstant.ITEM_FLAG);","lastModifiedDate":"2024-04-11"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"            if (filter.isBlank()) {","lastModifiedDate":"2024-04-11"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_HISTORY_FILTER_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-04-11"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"            validation.validateHistoryFilter(filter.toLowerCase());","lastModifiedDate":"2024-04-11"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"            return filter.toLowerCase();","lastModifiedDate":"2024-04-11"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-11"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"            output.printException(e.getMessage());","lastModifiedDate":"2024-04-11"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"            return null;","lastModifiedDate":"2024-04-11"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-11"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-26"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"     * Function validates and parses the user input for the history and latest commands.","lastModifiedDate":"2024-03-26"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput String representing the user input.","lastModifiedDate":"2024-03-26"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"     * @return The filter string, set to either \u0027gym\u0027, \u0027run\u0027, \u0027bmi\u0027 or \u0027period\u0027.","lastModifiedDate":"2024-03-26"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"    public String parseLatest(String userInput) {","lastModifiedDate":"2024-04-11"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"            if (countForwardSlash(userInput) \u003e UiConstant.NUM_OF_SLASHES_FOR_LATEST_AND_HISTORY) {","lastModifiedDate":"2024-04-06"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-04-06"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"            String filter \u003d extractSubstringFromSpecificIndex(userInput, UiConstant.ITEM_FLAG);","lastModifiedDate":"2024-04-10"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"            if (filter.isBlank()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_LATEST_FILTER_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"            validation.validateDeleteAndLatestFilter(filter.toLowerCase());","lastModifiedDate":"2024-04-13"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"            return filter.toLowerCase();","lastModifiedDate":"2024-04-10"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":210,"author":{"gitId":"JustinSoh"},"content":"            output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"            return null;","lastModifiedDate":"2024-03-26"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":215,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-09"},{"lineNumber":216,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":217,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":218,"author":{"gitId":"syj02"},"content":"     * Parses input for Bmi command. Adds Bmi object to HealthList if valid.","lastModifiedDate":"2024-03-27"},{"lineNumber":219,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":220,"author":{"gitId":"syj02"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-27"},{"lineNumber":221,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":222,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InsufficientInput If the height, weight or date parameters are missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":223,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":224,"author":{"gitId":"syj02"},"content":"    public void parseBmiInput(String userInput) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":225,"author":{"gitId":"syj02"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-29"},{"lineNumber":226,"author":{"gitId":"syj02"},"content":"        String[] bmiDetails \u003d splitBmiInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":227,"author":{"gitId":"syj02"},"content":"        validation.validateBmiInput(bmiDetails);","lastModifiedDate":"2024-04-07"},{"lineNumber":228,"author":{"gitId":"syj02"},"content":"        Bmi newBmi \u003d new Bmi(","lastModifiedDate":"2024-04-01"},{"lineNumber":229,"author":{"gitId":"syj02"},"content":"                bmiDetails[HealthConstant.BMI_HEIGHT_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":230,"author":{"gitId":"syj02"},"content":"                bmiDetails[HealthConstant.BMI_WEIGHT_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":231,"author":{"gitId":"syj02"},"content":"                bmiDetails[HealthConstant.BMI_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":232,"author":{"gitId":"syj02"},"content":"        output.printAddBmi(newBmi);","lastModifiedDate":"2024-04-07"},{"lineNumber":233,"author":{"gitId":"syj02"},"content":"        LogFile.writeLog(\"Added BMI\", false);","lastModifiedDate":"2024-04-09"},{"lineNumber":234,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":235,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":236,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":237,"author":{"gitId":"syj02"},"content":"     * Split user input for Bmi command, height, weight and date.","lastModifiedDate":"2024-03-29"},{"lineNumber":238,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":239,"author":{"gitId":"syj02"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-27"},{"lineNumber":240,"author":{"gitId":"syj02"},"content":"     * @return An array of strings containing the extracted Bmi parameters.","lastModifiedDate":"2024-03-27"},{"lineNumber":241,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InsufficientInput If the height, weight or date parameters are missing.","lastModifiedDate":"2024-03-31"},{"lineNumber":242,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":243,"author":{"gitId":"syj02"},"content":"    public String[] splitBmiInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":244,"author":{"gitId":"syj02"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":245,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":246,"author":{"gitId":"syj02"},"content":"        if (!input.contains(HealthConstant.HEIGHT_FLAG)","lastModifiedDate":"2024-03-28"},{"lineNumber":247,"author":{"gitId":"syj02"},"content":"                || !input.contains(HealthConstant.WEIGHT_FLAG)","lastModifiedDate":"2024-03-27"},{"lineNumber":248,"author":{"gitId":"syj02"},"content":"                || !input.contains(HealthConstant.DATE_FLAG)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":249,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-29"},{"lineNumber":250,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":251,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":252,"author":{"gitId":"syj02"},"content":"        if (countForwardSlash(input) \u003e HealthConstant.NUM_OF_SLASHES_FOR_BMI) {","lastModifiedDate":"2024-04-06"},{"lineNumber":253,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":254,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":255,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":256,"author":{"gitId":"syj02"},"content":"        String[] results \u003d new String[HealthConstant.NUM_BMI_PARAMETERS];","lastModifiedDate":"2024-03-31"},{"lineNumber":257,"author":{"gitId":"syj02"},"content":"        results[HealthConstant.BMI_HEIGHT_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":258,"author":{"gitId":"syj02"},"content":"                HealthConstant.HEIGHT_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":259,"author":{"gitId":"syj02"},"content":"        results[HealthConstant.BMI_WEIGHT_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":260,"author":{"gitId":"syj02"},"content":"                HealthConstant.WEIGHT_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":261,"author":{"gitId":"syj02"},"content":"        results[HealthConstant.BMI_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":262,"author":{"gitId":"syj02"},"content":"                HealthConstant.DATE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":263,"author":{"gitId":"syj02"},"content":"        return results;","lastModifiedDate":"2024-03-27"},{"lineNumber":264,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":265,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":266,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-04-09"},{"lineNumber":267,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":268,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":269,"author":{"gitId":"j013n3"},"content":"     * Parses input for Period command. Adds Period object to HealthList if valid.","lastModifiedDate":"2024-03-27"},{"lineNumber":270,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":271,"author":{"gitId":"j013n3"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-27"},{"lineNumber":272,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":273,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InsufficientInput If the start date or end date parameters are missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":274,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":275,"author":{"gitId":"j013n3"},"content":"    public void parsePeriodInput(String userInput) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":276,"author":{"gitId":"j013n3"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-29"},{"lineNumber":277,"author":{"gitId":"j013n3"},"content":"        int size \u003d HealthList.getPeriodSize();","lastModifiedDate":"2024-04-08"},{"lineNumber":278,"author":{"gitId":"j013n3"},"content":"        String[] periodDetails \u003d splitPeriodInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":279,"author":{"gitId":"j013n3"},"content":"        boolean isParser \u003d true;","lastModifiedDate":"2024-04-10"},{"lineNumber":280,"author":{"gitId":"j013n3"},"content":"        validation.validatePeriodInput(periodDetails, isParser);","lastModifiedDate":"2024-04-10"},{"lineNumber":281,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":282,"author":{"gitId":"j013n3"},"content":"        if (userInput.contains(HealthConstant.END_FLAG)) {","lastModifiedDate":"2024-04-08"},{"lineNumber":283,"author":{"gitId":"j013n3"},"content":"            if ((size \u003d\u003d 0) || (size \u003e 0 \u0026\u0026","lastModifiedDate":"2024-04-10"},{"lineNumber":284,"author":{"gitId":"j013n3"},"content":"                    Objects.requireNonNull(HealthList.getPeriod(HealthConstant.FIRST_ITEM).getEndDate() !\u003d null))) {","lastModifiedDate":"2024-04-13"},{"lineNumber":285,"author":{"gitId":"j013n3"},"content":"                Period newPeriod \u003d new Period(","lastModifiedDate":"2024-04-01"},{"lineNumber":286,"author":{"gitId":"j013n3"},"content":"                        periodDetails[HealthConstant.PERIOD_START_DATE_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":287,"author":{"gitId":"j013n3"},"content":"                        periodDetails[HealthConstant.PERIOD_END_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":288,"author":{"gitId":"j013n3"},"content":"                output.printAddPeriod(newPeriod);","lastModifiedDate":"2024-04-07"},{"lineNumber":289,"author":{"gitId":"j013n3"},"content":"                LogFile.writeLog(\"Added Period\", false);","lastModifiedDate":"2024-04-09"},{"lineNumber":290,"author":{"gitId":"j013n3"},"content":"            } else if (size \u003e 0 \u0026\u0026","lastModifiedDate":"2024-04-10"},{"lineNumber":291,"author":{"gitId":"j013n3"},"content":"                    Objects.requireNonNull(HealthList.getPeriod(HealthConstant.FIRST_ITEM)).getEndDate() \u003d\u003d null) {","lastModifiedDate":"2024-04-13"},{"lineNumber":292,"author":{"gitId":"j013n3"},"content":"                Period latestPeriod \u003d Objects.requireNonNull(HealthList.getPeriod(HealthConstant.FIRST_ITEM));","lastModifiedDate":"2024-04-13"},{"lineNumber":293,"author":{"gitId":"j013n3"},"content":"                latestPeriod.updateEndDate(periodDetails[HealthConstant.PERIOD_END_DATE_INDEX]);","lastModifiedDate":"2024-04-10"},{"lineNumber":294,"author":{"gitId":"j013n3"},"content":"                output.printAddPeriod(latestPeriod);","lastModifiedDate":"2024-04-08"},{"lineNumber":295,"author":{"gitId":"j013n3"},"content":"                LogFile.writeLog(\"Added Period\", false);","lastModifiedDate":"2024-04-09"},{"lineNumber":296,"author":{"gitId":"j013n3"},"content":"            }","lastModifiedDate":"2024-04-08"},{"lineNumber":297,"author":{"gitId":"j013n3"},"content":"        } else {","lastModifiedDate":"2024-04-08"},{"lineNumber":298,"author":{"gitId":"j013n3"},"content":"            Period newPeriod \u003d new Period(periodDetails[HealthConstant.PERIOD_START_DATE_INDEX]);","lastModifiedDate":"2024-04-08"},{"lineNumber":299,"author":{"gitId":"j013n3"},"content":"            output.printAddPeriod(newPeriod);","lastModifiedDate":"2024-04-08"},{"lineNumber":300,"author":{"gitId":"j013n3"},"content":"            LogFile.writeLog(\"Added Period\", false);","lastModifiedDate":"2024-04-09"},{"lineNumber":301,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-08"},{"lineNumber":302,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":303,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":304,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":305,"author":{"gitId":"j013n3"},"content":"     * Split user input into Period command, start date and end date.","lastModifiedDate":"2024-03-27"},{"lineNumber":306,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":307,"author":{"gitId":"j013n3"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-27"},{"lineNumber":308,"author":{"gitId":"j013n3"},"content":"     * @return An array of strings containing the extracted Period parameters.","lastModifiedDate":"2024-03-27"},{"lineNumber":309,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InsufficientInput If the user input is invalid or blank.","lastModifiedDate":"2024-03-29"},{"lineNumber":310,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":311,"author":{"gitId":"j013n3"},"content":"    public String[] splitPeriodInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":312,"author":{"gitId":"j013n3"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":313,"author":{"gitId":"j013n3"},"content":"        if (!input.contains(HealthConstant.START_FLAG)","lastModifiedDate":"2024-03-28"},{"lineNumber":314,"author":{"gitId":"j013n3"},"content":"                || (!input.contains(HealthConstant.START_FLAG) \u0026\u0026 !input.contains(HealthConstant.END_FLAG))) {","lastModifiedDate":"2024-04-08"},{"lineNumber":315,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_PERIOD_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-29"},{"lineNumber":316,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":317,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":318,"author":{"gitId":"j013n3"},"content":"        if (countForwardSlash(input) \u003e HealthConstant.NUM_OF_SLASHES_FOR_PERIOD) {","lastModifiedDate":"2024-04-06"},{"lineNumber":319,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":320,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":321,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":322,"author":{"gitId":"j013n3"},"content":"        String[] results \u003d new String[HealthConstant.NUM_PERIOD_PARAMETERS];","lastModifiedDate":"2024-03-31"},{"lineNumber":323,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":324,"author":{"gitId":"j013n3"},"content":"        if (input.contains(HealthConstant.START_FLAG) \u0026\u0026 input.contains(HealthConstant.END_FLAG)) {","lastModifiedDate":"2024-04-08"},{"lineNumber":325,"author":{"gitId":"j013n3"},"content":"            results[HealthConstant.PERIOD_START_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":326,"author":{"gitId":"j013n3"},"content":"                    HealthConstant.START_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":327,"author":{"gitId":"j013n3"},"content":"            results[HealthConstant.PERIOD_END_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":328,"author":{"gitId":"j013n3"},"content":"                    HealthConstant.END_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":329,"author":{"gitId":"j013n3"},"content":"        } else if (input.contains(HealthConstant.START_FLAG) \u0026\u0026 !input.contains(HealthConstant.END_FLAG)) {","lastModifiedDate":"2024-04-08"},{"lineNumber":330,"author":{"gitId":"j013n3"},"content":"            results[HealthConstant.PERIOD_START_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-08"},{"lineNumber":331,"author":{"gitId":"j013n3"},"content":"                    HealthConstant.START_FLAG).trim();","lastModifiedDate":"2024-04-08"},{"lineNumber":332,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-08"},{"lineNumber":333,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":334,"author":{"gitId":"j013n3"},"content":"        return results;","lastModifiedDate":"2024-03-27"},{"lineNumber":335,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":336,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":337,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":338,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":339,"author":{"gitId":"j013n3"},"content":"     * Parses input for Prediction command.","lastModifiedDate":"2024-03-27"},{"lineNumber":340,"author":{"gitId":"j013n3"},"content":"     * Prints period prediction if possible.","lastModifiedDate":"2024-03-27"},{"lineNumber":341,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":342,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InsufficientInput If prediction cannot be made.","lastModifiedDate":"2024-03-27"},{"lineNumber":343,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.OutOfBounds       If period list is empty","lastModifiedDate":"2024-04-11"},{"lineNumber":344,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":345,"author":{"gitId":"j013n3"},"content":"    public void parsePredictionInput() throws CustomExceptions.InsufficientInput, CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":346,"author":{"gitId":"j013n3"},"content":"        if (HealthList.getPeriodSize() \u003e\u003d HealthConstant.MIN_SIZE_FOR_PREDICTION) {","lastModifiedDate":"2024-03-27"},{"lineNumber":347,"author":{"gitId":"j013n3"},"content":"            HealthList.printLatestThreeCycles();","lastModifiedDate":"2024-03-28"},{"lineNumber":348,"author":{"gitId":"j013n3"},"content":"            LocalDate nextPeriodStartDate \u003d HealthList.predictNextPeriodStartDate();","lastModifiedDate":"2024-03-27"},{"lineNumber":349,"author":{"gitId":"j013n3"},"content":"            Period.printNextCyclePrediction(nextPeriodStartDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":350,"author":{"gitId":"j013n3"},"content":"            LogFile.writeLog(\"Used prediction\", false);","lastModifiedDate":"2024-04-09"},{"lineNumber":351,"author":{"gitId":"j013n3"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":352,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.UNABLE_TO_MAKE_PREDICTIONS_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":353,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":354,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":355,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":356,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-09"},{"lineNumber":357,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":358,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":359,"author":{"gitId":"syj02"},"content":"     * Split user input into Appointment command, date, time and description.","lastModifiedDate":"2024-03-27"},{"lineNumber":360,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":361,"author":{"gitId":"syj02"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-27"},{"lineNumber":362,"author":{"gitId":"syj02"},"content":"     * @return An array of strings containing the extracted Appointment parameters.","lastModifiedDate":"2024-03-27"},{"lineNumber":363,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InsufficientInput If the user input is invalid or blank.","lastModifiedDate":"2024-03-29"},{"lineNumber":364,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":365,"author":{"gitId":"syj02"},"content":"    public String[] splitAppointmentDetails(String input)","lastModifiedDate":"2024-04-07"},{"lineNumber":366,"author":{"gitId":"syj02"},"content":"            throws CustomExceptions.InsufficientInput, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":367,"author":{"gitId":"syj02"},"content":"        String[] results \u003d new String[HealthConstant.NUM_APPOINTMENT_PARAMETERS];","lastModifiedDate":"2024-03-27"},{"lineNumber":368,"author":{"gitId":"syj02"},"content":"        if (!input.contains(HealthConstant.DATE_FLAG)","lastModifiedDate":"2024-03-28"},{"lineNumber":369,"author":{"gitId":"syj02"},"content":"                || !input.contains(HealthConstant.TIME_FLAG)","lastModifiedDate":"2024-03-27"},{"lineNumber":370,"author":{"gitId":"syj02"},"content":"                || !input.contains(HealthConstant.DESCRIPTION_FLAG)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":371,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-29"},{"lineNumber":372,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":373,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":374,"author":{"gitId":"syj02"},"content":"        if (countForwardSlash(input) \u003e HealthConstant.NUM_OF_SLASHES_FOR_APPOINTMENT) {","lastModifiedDate":"2024-04-06"},{"lineNumber":375,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":376,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":377,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":378,"author":{"gitId":"syj02"},"content":"        results[HealthConstant.APPOINTMENT_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":379,"author":{"gitId":"syj02"},"content":"                HealthConstant.DATE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":380,"author":{"gitId":"syj02"},"content":"        results[HealthConstant.APPOINTMENT_TIME_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":381,"author":{"gitId":"syj02"},"content":"                HealthConstant.TIME_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":382,"author":{"gitId":"syj02"},"content":"        results[HealthConstant.APPOINTMENT_DESCRIPTION_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":383,"author":{"gitId":"syj02"},"content":"                HealthConstant.DESCRIPTION_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":384,"author":{"gitId":"syj02"},"content":"        return results;","lastModifiedDate":"2024-03-27"},{"lineNumber":385,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":386,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":387,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":388,"author":{"gitId":"syj02"},"content":"     * Parses input for Appointment command. Adds Appointment object to HealthList if valid.","lastModifiedDate":"2024-03-27"},{"lineNumber":389,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":390,"author":{"gitId":"syj02"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-27"},{"lineNumber":391,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":392,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InsufficientInput If the date, time or description parameters are missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":393,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":394,"author":{"gitId":"syj02"},"content":"    public void parseAppointmentInput(String userInput) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":395,"author":{"gitId":"syj02"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-29"},{"lineNumber":396,"author":{"gitId":"syj02"},"content":"        String[] appointmentDetails \u003d splitAppointmentDetails(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":397,"author":{"gitId":"syj02"},"content":"        validation.validateAppointmentDetails(appointmentDetails);","lastModifiedDate":"2024-04-07"},{"lineNumber":398,"author":{"gitId":"syj02"},"content":"        Appointment newAppointment \u003d new Appointment(","lastModifiedDate":"2024-04-01"},{"lineNumber":399,"author":{"gitId":"syj02"},"content":"                appointmentDetails[HealthConstant.APPOINTMENT_DATE_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":400,"author":{"gitId":"syj02"},"content":"                appointmentDetails[HealthConstant.APPOINTMENT_TIME_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":401,"author":{"gitId":"syj02"},"content":"                appointmentDetails[HealthConstant.APPOINTMENT_DESCRIPTION_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":402,"author":{"gitId":"syj02"},"content":"        output.printAddAppointment(newAppointment);","lastModifiedDate":"2024-04-07"},{"lineNumber":403,"author":{"gitId":"syj02"},"content":"        LogFile.writeLog(\"Added appointment\", false);","lastModifiedDate":"2024-04-09"},{"lineNumber":404,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":405,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":406,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-04-06"},{"lineNumber":407,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":408,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":409,"author":{"gitId":"L5-Z"},"content":"     * Extracts a substring from the given input string based on the provided delimiter.","lastModifiedDate":"2024-03-31"},{"lineNumber":410,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":411,"author":{"gitId":"L5-Z"},"content":"     * @param input     The input string from which to extract the substring.","lastModifiedDate":"2024-03-31"},{"lineNumber":412,"author":{"gitId":"L5-Z"},"content":"     * @param delimiter The delimiter to search for in the input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":413,"author":{"gitId":"L5-Z"},"content":"     * @return The extracted substring, or an empty string if the delimiter is not found.","lastModifiedDate":"2024-03-31"},{"lineNumber":414,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":415,"author":{"gitId":"L5-Z"},"content":"    public String extractSubstringFromSpecificIndex(String input, String delimiter) {","lastModifiedDate":"2024-04-07"},{"lineNumber":416,"author":{"gitId":"L5-Z"},"content":"        int index \u003d input.indexOf(delimiter);","lastModifiedDate":"2024-03-31"},{"lineNumber":417,"author":{"gitId":"L5-Z"},"content":"        if (index \u003d\u003d -1 || index \u003d\u003d input.length() - delimiter.length()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":418,"author":{"gitId":"L5-Z"},"content":"            return \"\";","lastModifiedDate":"2024-03-31"},{"lineNumber":419,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":420,"author":{"gitId":"L5-Z"},"content":"        int startIndex \u003d index + delimiter.length();","lastModifiedDate":"2024-03-31"},{"lineNumber":421,"author":{"gitId":"L5-Z"},"content":"        int endIndex \u003d input.indexOf(\"/\", startIndex);","lastModifiedDate":"2024-03-31"},{"lineNumber":422,"author":{"gitId":"L5-Z"},"content":"        if (endIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-31"},{"lineNumber":423,"author":{"gitId":"L5-Z"},"content":"            endIndex \u003d input.length();","lastModifiedDate":"2024-03-31"},{"lineNumber":424,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":425,"author":{"gitId":"L5-Z"},"content":"        return input.substring(startIndex, endIndex).trim();","lastModifiedDate":"2024-03-31"},{"lineNumber":426,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":427,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":428,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-31"},{"lineNumber":429,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":430,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":431,"author":{"gitId":"JustinSoh"},"content":"     * Splits the user input when adding a Gym.","lastModifiedDate":"2024-03-31"},{"lineNumber":432,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":433,"author":{"gitId":"JustinSoh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":434,"author":{"gitId":"JustinSoh"},"content":"     * @return The Gym parameters split from the user input.","lastModifiedDate":"2024-03-31"},{"lineNumber":435,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If the number of stations is missing.","lastModifiedDate":"2024-03-31"},{"lineNumber":436,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":437,"author":{"gitId":"JustinSoh"},"content":"    public String[] splitGymInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":438,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":439,"author":{"gitId":"JustinSoh"},"content":"        if (!input.contains(WorkoutConstant.NUMBER_OF_STATIONS_FLAG)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":440,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_GYM_PARAMETERS_ERROR);","lastModifiedDate":"2024-04-01"},{"lineNumber":441,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":442,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":443,"author":{"gitId":"JustinSoh"},"content":"        if (countForwardSlash(input) !\u003d WorkoutConstant.NUM_OF_SLASHES_FOR_GYM_WITH_DATE \u0026\u0026","lastModifiedDate":"2024-04-06"},{"lineNumber":444,"author":{"gitId":"JustinSoh"},"content":"                countForwardSlash(input) !\u003d WorkoutConstant.NUM_OF_SLASHES_FOR_GYM_WITHOUT_DATE) {","lastModifiedDate":"2024-04-06"},{"lineNumber":445,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":446,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":447,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":448,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":449,"author":{"gitId":"JustinSoh"},"content":"        String[] results \u003d new String[WorkoutConstant.NUMBER_OF_GYM_PARAMETERS];","lastModifiedDate":"2024-04-01"},{"lineNumber":450,"author":{"gitId":"JustinSoh"},"content":"        results[WorkoutConstant.GYM_NUMBER_OF_STATIONS_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":451,"author":{"gitId":"JustinSoh"},"content":"                WorkoutConstant.NUMBER_OF_STATIONS_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":452,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":453,"author":{"gitId":"JustinSoh"},"content":"        if (input.contains(WorkoutConstant.DATE_FLAG)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":454,"author":{"gitId":"JustinSoh"},"content":"            results[WorkoutConstant.GYM_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":455,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.DATE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":456,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":457,"author":{"gitId":"JustinSoh"},"content":"        return results;","lastModifiedDate":"2024-03-31"},{"lineNumber":458,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":459,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":460,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":461,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":462,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":463,"author":{"gitId":"JustinSoh"},"content":"     * Parses input for the Gym command. Adds Gym object if valid.","lastModifiedDate":"2024-03-31"},{"lineNumber":464,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":465,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":466,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":467,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If number of station parameter is missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":468,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":469,"author":{"gitId":"JustinSoh"},"content":"    public void parseGymInput(String userInput) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":470,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":471,"author":{"gitId":"JustinSoh"},"content":"        String[] gymDetails \u003d splitGymInput(userInput);","lastModifiedDate":"2024-03-31"},{"lineNumber":472,"author":{"gitId":"JustinSoh"},"content":"        validation.validateGymInput(gymDetails);","lastModifiedDate":"2024-04-07"},{"lineNumber":473,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym;","lastModifiedDate":"2024-03-31"},{"lineNumber":474,"author":{"gitId":"JustinSoh"},"content":"        if (gymDetails[WorkoutConstant.GYM_DATE_INDEX] \u003d\u003d null) {","lastModifiedDate":"2024-04-01"},{"lineNumber":475,"author":{"gitId":"JustinSoh"},"content":"            newGym \u003d new Gym();","lastModifiedDate":"2024-03-31"},{"lineNumber":476,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-31"},{"lineNumber":477,"author":{"gitId":"JustinSoh"},"content":"            newGym \u003d new Gym(gymDetails[WorkoutConstant.GYM_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":478,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":479,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":480,"author":{"gitId":"JustinSoh"},"content":"        int numberOfStations \u003d Integer.parseInt(gymDetails[WorkoutConstant.GYM_NUMBER_OF_STATIONS_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":481,"author":{"gitId":"JustinSoh"},"content":"        parseGymStationInput(numberOfStations, newGym);","lastModifiedDate":"2024-03-31"},{"lineNumber":482,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":483,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":484,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":485,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":486,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":487,"author":{"gitId":"rouvinerh"},"content":"     * Splits the user input for adding a run.","lastModifiedDate":"2024-03-31"},{"lineNumber":488,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":489,"author":{"gitId":"rouvinerh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":490,"author":{"gitId":"rouvinerh"},"content":"     * @return The Run parameters split from the user input.","lastModifiedDate":"2024-03-31"},{"lineNumber":491,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If the distance and time taken for the run are missing.","lastModifiedDate":"2024-03-31"},{"lineNumber":492,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":493,"author":{"gitId":"rouvinerh"},"content":"    public String[] splitRunInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":494,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":495,"author":{"gitId":"rouvinerh"},"content":"        if (!input.contains(WorkoutConstant.DISTANCE_FLAG) ||","lastModifiedDate":"2024-04-01"},{"lineNumber":496,"author":{"gitId":"rouvinerh"},"content":"                !input.contains(WorkoutConstant.RUN_TIME_FLAG)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":497,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_RUN_PARAMETERS_ERROR);","lastModifiedDate":"2024-04-01"},{"lineNumber":498,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":499,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":500,"author":{"gitId":"rouvinerh"},"content":"        if (countForwardSlash(input) !\u003d WorkoutConstant.NUM_OF_SLASHES_FOR_RUN_WITH_DATE \u0026\u0026","lastModifiedDate":"2024-04-06"},{"lineNumber":501,"author":{"gitId":"rouvinerh"},"content":"                countForwardSlash(input) !\u003d WorkoutConstant.NUM_OF_SLASHES_FOR_RUN_WITHOUT_DATE) {","lastModifiedDate":"2024-04-06"},{"lineNumber":502,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":503,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":504,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":505,"author":{"gitId":"rouvinerh"},"content":"        String[] results \u003d new String[WorkoutConstant.NUMBER_OF_RUN_PARAMETERS];","lastModifiedDate":"2024-04-01"},{"lineNumber":506,"author":{"gitId":"rouvinerh"},"content":"        results[WorkoutConstant.RUN_TIME_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":507,"author":{"gitId":"rouvinerh"},"content":"                WorkoutConstant.RUN_TIME_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":508,"author":{"gitId":"rouvinerh"},"content":"        results[WorkoutConstant.RUN_DISTANCE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":509,"author":{"gitId":"rouvinerh"},"content":"                WorkoutConstant.DISTANCE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":510,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":511,"author":{"gitId":"rouvinerh"},"content":"        if (input.contains(WorkoutConstant.DATE_FLAG)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":512,"author":{"gitId":"rouvinerh"},"content":"            results[WorkoutConstant.RUN_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":513,"author":{"gitId":"rouvinerh"},"content":"                    WorkoutConstant.DATE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":514,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":515,"author":{"gitId":"rouvinerh"},"content":"        return results;","lastModifiedDate":"2024-03-31"},{"lineNumber":516,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":517,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":518,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":519,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":520,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":521,"author":{"gitId":"JustinSoh"},"content":"     * Parses input for the Run command. Adds a Run object if valid.","lastModifiedDate":"2024-03-31"},{"lineNumber":522,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":523,"author":{"gitId":"JustinSoh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":524,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":525,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If the run time or run distance parameters are missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":526,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":527,"author":{"gitId":"JustinSoh"},"content":"    public void parseRunInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":528,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":529,"author":{"gitId":"JustinSoh"},"content":"        String[] runDetails \u003d splitRunInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":530,"author":{"gitId":"JustinSoh"},"content":"        validation.validateRunInput(runDetails);","lastModifiedDate":"2024-04-07"},{"lineNumber":531,"author":{"gitId":"JustinSoh"},"content":"        Run newRun;","lastModifiedDate":"2024-03-31"},{"lineNumber":532,"author":{"gitId":"JustinSoh"},"content":"        if (runDetails[WorkoutConstant.RUN_DATE_INDEX] \u003d\u003d null) {","lastModifiedDate":"2024-04-01"},{"lineNumber":533,"author":{"gitId":"JustinSoh"},"content":"            newRun \u003d new Run(","lastModifiedDate":"2024-04-01"},{"lineNumber":534,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_TIME_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":535,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_DISTANCE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":536,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-31"},{"lineNumber":537,"author":{"gitId":"JustinSoh"},"content":"            newRun \u003d new Run(","lastModifiedDate":"2024-04-01"},{"lineNumber":538,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_TIME_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":539,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_DISTANCE_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":540,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":541,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":542,"author":{"gitId":"JustinSoh"},"content":"        output.printAddRun(newRun);","lastModifiedDate":"2024-04-07"},{"lineNumber":543,"author":{"gitId":"JustinSoh"},"content":"        LogFile.writeLog(\"Added Run\", false);","lastModifiedDate":"2024-04-09"},{"lineNumber":544,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":545,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":546,"author":{"gitId":"JustinSoh"},"content":"    protected String[] splitGymStationInput(String input) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":547,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":548,"author":{"gitId":"JustinSoh"},"content":"        if (countForwardSlash(input) \u003e WorkoutConstant.NUM_OF_SLASHES_FOR_GYM_STATION) {","lastModifiedDate":"2024-04-13"},{"lineNumber":549,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":550,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":551,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":552,"author":{"gitId":"JustinSoh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-13"},{"lineNumber":553,"author":{"gitId":"JustinSoh"},"content":"        String exerciseName \u003d input.split(UiConstant.SPLIT_BY_SLASH)[WorkoutConstant.STATION_NAME_INDEX].trim();","lastModifiedDate":"2024-04-13"},{"lineNumber":554,"author":{"gitId":"JustinSoh"},"content":"        String sets \u003d parser.extractSubstringFromSpecificIndex(input, WorkoutConstant.SETS_FLAG).trim();","lastModifiedDate":"2024-04-13"},{"lineNumber":555,"author":{"gitId":"JustinSoh"},"content":"        String reps \u003d parser.extractSubstringFromSpecificIndex(input, WorkoutConstant.REPS_FLAG).trim();","lastModifiedDate":"2024-04-13"},{"lineNumber":556,"author":{"gitId":"JustinSoh"},"content":"        String weights \u003d parser.extractSubstringFromSpecificIndex(input, WorkoutConstant.WEIGHTS_FLAG).trim();","lastModifiedDate":"2024-04-13"},{"lineNumber":557,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":558,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":559,"author":{"gitId":"JustinSoh"},"content":"        String[] validatedGymStationInputs \u003d new String[WorkoutConstant.NUMBER_OF_GYM_STATION_PARAMETERS];","lastModifiedDate":"2024-04-13"},{"lineNumber":560,"author":{"gitId":"JustinSoh"},"content":"        validatedGymStationInputs[WorkoutConstant.GYM_STATION_NAME_INDEX] \u003d exerciseName;","lastModifiedDate":"2024-04-13"},{"lineNumber":561,"author":{"gitId":"JustinSoh"},"content":"        validatedGymStationInputs[WorkoutConstant.GYM_STATION_SET_INDEX] \u003d sets;","lastModifiedDate":"2024-04-13"},{"lineNumber":562,"author":{"gitId":"JustinSoh"},"content":"        validatedGymStationInputs[WorkoutConstant.GYM_STATION_REPS_INDEX] \u003d reps;","lastModifiedDate":"2024-04-13"},{"lineNumber":563,"author":{"gitId":"JustinSoh"},"content":"        validatedGymStationInputs[WorkoutConstant.GYM_STATION_WEIGHTS_INDEX] \u003d weights;","lastModifiedDate":"2024-04-13"},{"lineNumber":564,"author":{"gitId":"JustinSoh"},"content":"        return validatedGymStationInputs;","lastModifiedDate":"2024-04-13"},{"lineNumber":565,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":566,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":567,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":568,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":569,"author":{"gitId":"JustinSoh"},"content":"     * Parses the gym station input from the user and adds it to the Gym object.","lastModifiedDate":"2024-04-13"},{"lineNumber":570,"author":{"gitId":"JustinSoh"},"content":"     * This method is used in the {@code parseGymInput} method.","lastModifiedDate":"2024-04-13"},{"lineNumber":571,"author":{"gitId":"JustinSoh"},"content":"     * User can input \u0027back\u0027 to exit the gym station input.","lastModifiedDate":"2024-04-13"},{"lineNumber":572,"author":{"gitId":"JustinSoh"},"content":"     * The gym object will be deleted and control returned to handler.","lastModifiedDate":"2024-04-13"},{"lineNumber":573,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":574,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfStations The number of stations in one gym session.","lastModifiedDate":"2024-03-31"},{"lineNumber":575,"author":{"gitId":"JustinSoh"},"content":"     * @param gym              The Gym object.","lastModifiedDate":"2024-03-31"},{"lineNumber":576,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":577,"author":{"gitId":"JustinSoh"},"content":"    public void parseGymStationInput(int numberOfStations, Gym gym) {","lastModifiedDate":"2024-04-07"},{"lineNumber":578,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c numberOfStations; i++) {","lastModifiedDate":"2024-04-09"},{"lineNumber":579,"author":{"gitId":"JustinSoh"},"content":"            try {","lastModifiedDate":"2024-03-31"},{"lineNumber":580,"author":{"gitId":"JustinSoh"},"content":"                // Prompt user for gym station details","lastModifiedDate":"2024-04-13"},{"lineNumber":581,"author":{"gitId":"JustinSoh"},"content":"                output.printGymStationPrompt(i + 1);","lastModifiedDate":"2024-04-07"},{"lineNumber":582,"author":{"gitId":"JustinSoh"},"content":"                String userInput \u003d this.in.nextLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":583,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":584,"author":{"gitId":"JustinSoh"},"content":"                // If user wants to exit the gym station input","lastModifiedDate":"2024-04-13"},{"lineNumber":585,"author":{"gitId":"JustinSoh"},"content":"                if (userInput.equals(WorkoutConstant.BACK)) {","lastModifiedDate":"2024-04-13"},{"lineNumber":586,"author":{"gitId":"JustinSoh"},"content":"                    output.printGymStationExit();","lastModifiedDate":"2024-04-13"},{"lineNumber":587,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutLists.deleteGym(WorkoutLists.getGymSize() - 1);","lastModifiedDate":"2024-04-13"},{"lineNumber":588,"author":{"gitId":"JustinSoh"},"content":"                    return;","lastModifiedDate":"2024-04-13"},{"lineNumber":589,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-04-13"},{"lineNumber":590,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":591,"author":{"gitId":"JustinSoh"},"content":"                // Split the gym station input","lastModifiedDate":"2024-04-13"},{"lineNumber":592,"author":{"gitId":"JustinSoh"},"content":"                String[] splitGymStationInputs \u003d splitGymStationInput(userInput);","lastModifiedDate":"2024-04-13"},{"lineNumber":593,"author":{"gitId":"JustinSoh"},"content":"                String exerciseName \u003d splitGymStationInputs[WorkoutConstant.GYM_STATION_NAME_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":594,"author":{"gitId":"JustinSoh"},"content":"                String numberOfSets \u003d splitGymStationInputs[WorkoutConstant.GYM_STATION_SET_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":595,"author":{"gitId":"JustinSoh"},"content":"                String numberOfReps \u003d splitGymStationInputs[WorkoutConstant.GYM_STATION_REPS_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":596,"author":{"gitId":"JustinSoh"},"content":"                String weights \u003d splitGymStationInputs[WorkoutConstant.GYM_STATION_WEIGHTS_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":597,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":598,"author":{"gitId":"JustinSoh"},"content":"                // Create a new GymStation object and add it to the Gym","lastModifiedDate":"2024-04-13"},{"lineNumber":599,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(exerciseName, numberOfSets, numberOfReps, weights);","lastModifiedDate":"2024-04-13"},{"lineNumber":600,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":601,"author":{"gitId":"JustinSoh"},"content":"            } catch (CustomExceptions.InsufficientInput | CustomExceptions.InvalidInput","lastModifiedDate":"2024-04-13"},{"lineNumber":602,"author":{"gitId":"JustinSoh"},"content":"                     | CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":603,"author":{"gitId":"JustinSoh"},"content":"                i -\u003d 1;","lastModifiedDate":"2024-04-12"},{"lineNumber":604,"author":{"gitId":"JustinSoh"},"content":"                output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":605,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-31"},{"lineNumber":606,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":607,"author":{"gitId":"JustinSoh"},"content":"        output.printAddGym(gym);","lastModifiedDate":"2024-04-07"},{"lineNumber":608,"author":{"gitId":"JustinSoh"},"content":"        LogFile.writeLog(\"Added Gym\", false);","lastModifiedDate":"2024-04-09"},{"lineNumber":609,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":610,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":611,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-03-31"},{"lineNumber":612,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":613,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":614,"author":{"gitId":"L5-Z"},"content":"     * Splits the Gym File Input that comes from Storage.","lastModifiedDate":"2024-03-31"},{"lineNumber":615,"author":{"gitId":"L5-Z"},"content":"     * Validates the numberOfStation and Date input.","lastModifiedDate":"2024-03-31"},{"lineNumber":616,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":617,"author":{"gitId":"L5-Z"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-04-02"},{"lineNumber":618,"author":{"gitId":"L5-Z"},"content":"     * @return String[] containing the gym details","lastModifiedDate":"2024-03-31"},{"lineNumber":619,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError If the file cannot be read.","lastModifiedDate":"2024-04-02"},{"lineNumber":620,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":621,"author":{"gitId":"L5-Z"},"content":"    private String[] splitGymFileInput(String input) throws CustomExceptions.FileReadError {","lastModifiedDate":"2024-04-07"},{"lineNumber":622,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":623,"author":{"gitId":"L5-Z"},"content":"        String[] gymDetails \u003d input.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-31"},{"lineNumber":624,"author":{"gitId":"L5-Z"},"content":"        String gymType;","lastModifiedDate":"2024-03-31"},{"lineNumber":625,"author":{"gitId":"L5-Z"},"content":"        String numOfStationStr;","lastModifiedDate":"2024-03-31"},{"lineNumber":626,"author":{"gitId":"L5-Z"},"content":"        int numOfStation;","lastModifiedDate":"2024-03-31"},{"lineNumber":627,"author":{"gitId":"L5-Z"},"content":"        String date;","lastModifiedDate":"2024-03-31"},{"lineNumber":628,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":629,"author":{"gitId":"L5-Z"},"content":"        // checks if there are enough parameters in the gym file + if numOfStation is a digit","lastModifiedDate":"2024-03-31"},{"lineNumber":630,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":631,"author":{"gitId":"L5-Z"},"content":"            gymType \u003d gymDetails[WorkoutConstant.GYM_FILE_INDEX].toLowerCase();","lastModifiedDate":"2024-04-03"},{"lineNumber":632,"author":{"gitId":"L5-Z"},"content":"            numOfStationStr \u003d gymDetails[WorkoutConstant.NUM_OF_STATIONS_FILE_INDEX];","lastModifiedDate":"2024-03-31"},{"lineNumber":633,"author":{"gitId":"L5-Z"},"content":"            numOfStation \u003d Integer.parseInt(numOfStationStr);","lastModifiedDate":"2024-03-31"},{"lineNumber":634,"author":{"gitId":"L5-Z"},"content":"            date \u003d gymDetails[WorkoutConstant.DATE_FILE_INDEX];","lastModifiedDate":"2024-03-31"},{"lineNumber":635,"author":{"gitId":"L5-Z"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":636,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_GYM_FORMAT_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":637,"author":{"gitId":"L5-Z"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":638,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_NUMBER_OF_STATION_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":639,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":640,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":641,"author":{"gitId":"L5-Z"},"content":"        // Check if the gym type is correct (e.g. storage starts with gym| ...)","lastModifiedDate":"2024-03-31"},{"lineNumber":642,"author":{"gitId":"L5-Z"},"content":"        if (!gymType.equals(WorkoutConstant.GYM)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":643,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_GYM_TYPE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":644,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":645,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":646,"author":{"gitId":"L5-Z"},"content":"        // Check if the number of station is blank","lastModifiedDate":"2024-03-31"},{"lineNumber":647,"author":{"gitId":"L5-Z"},"content":"        if (numOfStationStr.isBlank()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":648,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_NUMBER_OF_STATION_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":649,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":650,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":651,"author":{"gitId":"L5-Z"},"content":"        // Check if the date is correct","lastModifiedDate":"2024-03-31"},{"lineNumber":652,"author":{"gitId":"L5-Z"},"content":"        if (date.isBlank()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":653,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.INVALID_DATE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":654,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":655,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":656,"author":{"gitId":"L5-Z"},"content":"        // if the date is not NA, then validate and make sure it is correct","lastModifiedDate":"2024-03-31"},{"lineNumber":657,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":658,"author":{"gitId":"L5-Z"},"content":"            if (!date.equals(ErrorConstant.NO_DATE_SPECIFIED_ERROR)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":659,"author":{"gitId":"L5-Z"},"content":"                validation.validateDateInput(date);","lastModifiedDate":"2024-04-07"},{"lineNumber":660,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-31"},{"lineNumber":661,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":662,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.INVALID_DATE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":663,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":664,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":665,"author":{"gitId":"L5-Z"},"content":"        return gymDetails;","lastModifiedDate":"2024-03-31"},{"lineNumber":666,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":667,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":668,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":669,"author":{"gitId":"L5-Z"},"content":"     * Adds a station to the gym object based of the file input.","lastModifiedDate":"2024-03-31"},{"lineNumber":670,"author":{"gitId":"L5-Z"},"content":"     * This method is used in the {@code parseGymFileInput} method.","lastModifiedDate":"2024-03-31"},{"lineNumber":671,"author":{"gitId":"L5-Z"},"content":"     * How the method works is that it will check if the station details are valid","lastModifiedDate":"2024-03-31"},{"lineNumber":672,"author":{"gitId":"L5-Z"},"content":"     * and then add the station to the gym.","lastModifiedDate":"2024-03-31"},{"lineNumber":673,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":674,"author":{"gitId":"L5-Z"},"content":"     * @param gym         the gym object that the station will be added to","lastModifiedDate":"2024-03-31"},{"lineNumber":675,"author":{"gitId":"L5-Z"},"content":"     * @param gymDetails  the array of strings containing the gym details","lastModifiedDate":"2024-03-31"},{"lineNumber":676,"author":{"gitId":"L5-Z"},"content":"     * @param baseCounter the base counter to start adding the station","lastModifiedDate":"2024-03-31"},{"lineNumber":677,"author":{"gitId":"L5-Z"},"content":"     * @return the new base counter after adding the station","lastModifiedDate":"2024-03-31"},{"lineNumber":678,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput if the input is invalid","lastModifiedDate":"2024-03-31"},{"lineNumber":679,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":680,"author":{"gitId":"L5-Z"},"content":"    private int addStationFromFile(Gym gym, String[] gymDetails, int baseCounter)","lastModifiedDate":"2024-04-07"},{"lineNumber":681,"author":{"gitId":"L5-Z"},"content":"            throws CustomExceptions.InvalidInput, CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":682,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":683,"author":{"gitId":"L5-Z"},"content":"        String currentStationName;","lastModifiedDate":"2024-03-31"},{"lineNumber":684,"author":{"gitId":"L5-Z"},"content":"        String numberOfSetsStr;","lastModifiedDate":"2024-03-31"},{"lineNumber":685,"author":{"gitId":"L5-Z"},"content":"        String repsStr;","lastModifiedDate":"2024-03-31"},{"lineNumber":686,"author":{"gitId":"L5-Z"},"content":"        String weightStrings;","lastModifiedDate":"2024-03-31"},{"lineNumber":687,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":688,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":689,"author":{"gitId":"L5-Z"},"content":"            currentStationName \u003d gymDetails[baseCounter];","lastModifiedDate":"2024-03-31"},{"lineNumber":690,"author":{"gitId":"L5-Z"},"content":"            numberOfSetsStr \u003d gymDetails[baseCounter + WorkoutConstant.SETS_OFFSET];","lastModifiedDate":"2024-03-31"},{"lineNumber":691,"author":{"gitId":"L5-Z"},"content":"            repsStr \u003d gymDetails[baseCounter + WorkoutConstant.REPS_OFFSET];","lastModifiedDate":"2024-03-31"},{"lineNumber":692,"author":{"gitId":"L5-Z"},"content":"            weightStrings \u003d gymDetails[baseCounter + WorkoutConstant.WEIGHTS_OFFSET];","lastModifiedDate":"2024-03-31"},{"lineNumber":693,"author":{"gitId":"L5-Z"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":694,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.LOAD_GYM_FORMAT_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":695,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":696,"author":{"gitId":"L5-Z"},"content":"        gym.addStation(currentStationName, numberOfSetsStr, repsStr, weightStrings);","lastModifiedDate":"2024-04-13"},{"lineNumber":697,"author":{"gitId":"L5-Z"},"content":"        baseCounter +\u003d WorkoutConstant.INCREMENT_OFFSET;","lastModifiedDate":"2024-03-31"},{"lineNumber":698,"author":{"gitId":"L5-Z"},"content":"        return baseCounter;","lastModifiedDate":"2024-03-31"},{"lineNumber":699,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":700,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":701,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":702,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":703,"author":{"gitId":"L5-Z"},"content":"     * Parses the gym input from the storage file and returns a Gym object.","lastModifiedDate":"2024-03-31"},{"lineNumber":704,"author":{"gitId":"L5-Z"},"content":"     * The input of the storage file needs to be in the following format","lastModifiedDate":"2024-03-31"},{"lineNumber":705,"author":{"gitId":"L5-Z"},"content":"     * gym:NUM_STATIONS:DATE:STATION1_NAME:NUM_SETS:REPS:WEIGHT1,WEIGHT2,WEIGHT3,WEIGHT4","lastModifiedDate":"2024-03-31"},{"lineNumber":706,"author":{"gitId":"L5-Z"},"content":"     * :STATION2_NAME:NUM_SETS:REPS:WEIGHT1,WEIGHT2,WEIGHT3,WEIGHT4 ....","lastModifiedDate":"2024-03-31"},{"lineNumber":707,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":708,"author":{"gitId":"L5-Z"},"content":"     * @param input in the format specified above","lastModifiedDate":"2024-03-31"},{"lineNumber":709,"author":{"gitId":"L5-Z"},"content":"     * @return gym object created from the input","lastModifiedDate":"2024-03-31"},{"lineNumber":710,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput  If there is invalid input from the file.","lastModifiedDate":"2024-04-02"},{"lineNumber":711,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError If the file cannot be read.","lastModifiedDate":"2024-04-02"},{"lineNumber":712,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":713,"author":{"gitId":"L5-Z"},"content":"    public Gym parseGymFileInput(String input)","lastModifiedDate":"2024-04-07"},{"lineNumber":714,"author":{"gitId":"L5-Z"},"content":"            throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":715,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.FileReadError, CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-04-08"},{"lineNumber":716,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":717,"author":{"gitId":"L5-Z"},"content":"        String[] gymDetails \u003d splitGymFileInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":718,"author":{"gitId":"L5-Z"},"content":"        String[] checkGymDetails \u003d new String[WorkoutConstant.NUMBER_OF_GYM_PARAMETERS];","lastModifiedDate":"2024-04-08"},{"lineNumber":719,"author":{"gitId":"L5-Z"},"content":"        checkGymDetails[0] \u003d gymDetails[1];","lastModifiedDate":"2024-04-08"},{"lineNumber":720,"author":{"gitId":"L5-Z"},"content":"        checkGymDetails[1] \u003d gymDetails[2];","lastModifiedDate":"2024-04-08"},{"lineNumber":721,"author":{"gitId":"L5-Z"},"content":"        validation.validateGymInput(checkGymDetails);","lastModifiedDate":"2024-04-08"},{"lineNumber":722,"author":{"gitId":"L5-Z"},"content":"        Gym gym;","lastModifiedDate":"2024-03-31"},{"lineNumber":723,"author":{"gitId":"L5-Z"},"content":"        String date \u003d gymDetails[WorkoutConstant.DATE_FILE_INDEX];","lastModifiedDate":"2024-03-31"},{"lineNumber":724,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":725,"author":{"gitId":"L5-Z"},"content":"        if (date.equals(ErrorConstant.NO_DATE_SPECIFIED_ERROR)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":726,"author":{"gitId":"L5-Z"},"content":"            gym \u003d new Gym();","lastModifiedDate":"2024-03-31"},{"lineNumber":727,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-03-31"},{"lineNumber":728,"author":{"gitId":"L5-Z"},"content":"            gym \u003d new Gym(date);","lastModifiedDate":"2024-03-31"},{"lineNumber":729,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":730,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":731,"author":{"gitId":"L5-Z"},"content":"        int counter \u003d WorkoutConstant.GYM_FILE_BASE_COUNTER;","lastModifiedDate":"2024-03-31"},{"lineNumber":732,"author":{"gitId":"L5-Z"},"content":"        while (counter \u003c gymDetails.length) {","lastModifiedDate":"2024-03-31"},{"lineNumber":733,"author":{"gitId":"L5-Z"},"content":"            counter \u003d addStationFromFile(gym, gymDetails, counter);","lastModifiedDate":"2024-03-31"},{"lineNumber":734,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":735,"author":{"gitId":"L5-Z"},"content":"        return gym;","lastModifiedDate":"2024-03-31"},{"lineNumber":736,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":737,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":738,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"j013n3":91,"JustinSoh":221,"rouvinerh":138,"L5-Z":166,"syj02":122}},{"path":"src/main/java/utility/Validation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"import health.Bmi;","lastModifiedDate":"2024-04-12"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"import health.HealthList;","lastModifiedDate":"2024-04-08"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import ui.Output;","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-04-06"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"import java.util.Objects;","lastModifiedDate":"2024-04-08"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":" * Represents the validation class used to validate all inputs for PulsePilot.","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"public class Validation {","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"    public Validation(){","lastModifiedDate":"2024-04-07"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    // @@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"     * Validates that the input date string is correctly formatted in DD-MM-YYYY and is a valid date.","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     * @param date The string date from user input.","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the year is before 1967, the","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput(String date) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-07"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"        if (!date.matches(UiConstant.VALID_DATE_REGEX)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_DATE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        String[] parts \u003d date.split(UiConstant.DASH);","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"        int day \u003d Integer.parseInt(parts[0]);","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        int month \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"        int year \u003d Integer.parseInt(parts[2]);","lastModifiedDate":"2024-04-06"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"        boolean isLeapYear \u003d (year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) || (year % 400 \u003d\u003d 0);","lastModifiedDate":"2024-04-06"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        if (month \u003d\u003d 2 \u0026\u0026 day \u003d\u003d 29 \u0026\u0026 !isLeapYear) {","lastModifiedDate":"2024-04-06"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_LEAP_YEAR_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        if (year \u003c 1967) {","lastModifiedDate":"2024-04-06"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_YEAR_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-04-06"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"            LocalDate check \u003d LocalDate.of(year, month, day);","lastModifiedDate":"2024-04-06"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2024-04-06"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_DATE_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     * Validates the delete input details.","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     * @param deleteDetails An array containing the details for the delete command.","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the details specified are invalid.","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If empty strings are found.","lastModifiedDate":"2024-04-13"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    public void validateDeleteInput(String[] deleteDetails) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        if (isEmptyParameterPresent(deleteDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_DELETE_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"        validateDeleteAndLatestFilter(deleteDetails[UiConstant.DELETE_ITEM_STRING_INDEX].toLowerCase());","lastModifiedDate":"2024-04-13"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        if (!deleteDetails[UiConstant.DELETE_ITEM_NUMBER_INDEX].matches(UiConstant.VALID_POSITIVE_INTEGER_REGEX)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_INDEX_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"    // @@author L5-Z","lastModifiedDate":"2024-04-09"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"     * Validates whether the filter string is either \u0027run\u0027, \u0027gym\u0027, \u0027workouts\u0027, \u0027bmi\u0027, \u0027period\u0027 or \u0027appointment\u0027.","lastModifiedDate":"2024-04-11"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"     * @param filter The filter string to be checked.","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput If the filter string is none of them.","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"    public void validateHistoryFilter(String filter) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-11"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"        if (filter.equals(WorkoutConstant.RUN)","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"                || filter.equals(WorkoutConstant.GYM)","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"                || filter.equals(HealthConstant.BMI)","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"                || filter.equals(HealthConstant.PERIOD)","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"                || filter.equals(HealthConstant.APPOINTMENT)","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"                || filter.equals(WorkoutConstant.ALL)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"            return;","lastModifiedDate":"2024-03-31"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"        throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_HISTORY_FILTER_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"    // @@author L5-Z","lastModifiedDate":"2024-04-11"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"     * Validates whether the filter string is either \u0027run\u0027, \u0027gym\u0027, \u0027bmi\u0027, \u0027period\u0027 or \u0027appointment\u0027.","lastModifiedDate":"2024-04-11"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-11"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"     * @param filter The filter string to be checked.","lastModifiedDate":"2024-04-11"},{"lineNumber":101,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput If the filter string is none of them.","lastModifiedDate":"2024-04-11"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"    public void validateDeleteAndLatestFilter(String filter) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":104,"author":{"gitId":"L5-Z"},"content":"        if (filter.equals(WorkoutConstant.RUN)","lastModifiedDate":"2024-04-11"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"                || filter.equals(WorkoutConstant.GYM)","lastModifiedDate":"2024-04-11"},{"lineNumber":106,"author":{"gitId":"L5-Z"},"content":"                || filter.equals(HealthConstant.BMI)","lastModifiedDate":"2024-04-11"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"                || filter.equals(HealthConstant.PERIOD)","lastModifiedDate":"2024-04-11"},{"lineNumber":108,"author":{"gitId":"L5-Z"},"content":"                || filter.equals(HealthConstant.APPOINTMENT)) {","lastModifiedDate":"2024-04-11"},{"lineNumber":109,"author":{"gitId":"L5-Z"},"content":"            return;","lastModifiedDate":"2024-04-11"},{"lineNumber":110,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-11"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"        throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_LATEST_OR_DELETE_FILTER);","lastModifiedDate":"2024-04-13"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":113,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":114,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"    // @@author j013n3","lastModifiedDate":"2024-04-09"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"     * Validates the BMI details entered.","lastModifiedDate":"2024-04-13"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"     * @param bmiDetails An array of strings with split BMI details.","lastModifiedDate":"2024-04-13"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InvalidInput If there are any errors in the details entered.","lastModifiedDate":"2024-03-31"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"    public void validateBmiInput(String[] bmiDetails) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"        if (isEmptyParameterPresent(bmiDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"        if (!bmiDetails[HealthConstant.BMI_HEIGHT_INDEX].matches(UiConstant.VALID_TWO_DP_NUMBER_REGEX)","lastModifiedDate":"2024-04-01"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"                || !bmiDetails[HealthConstant.BMI_WEIGHT_INDEX].matches(UiConstant.VALID_TWO_DP_NUMBER_REGEX)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_HEIGHT_WEIGHT_INPUT_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"        double height \u003d Double.parseDouble(bmiDetails[HealthConstant.BMI_HEIGHT_INDEX]);","lastModifiedDate":"2024-04-06"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"        double weight \u003d Double.parseDouble(bmiDetails[HealthConstant.BMI_WEIGHT_INDEX]);","lastModifiedDate":"2024-04-06"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"        if (height \u003c\u003d HealthConstant.MIN_HEIGHT || weight \u003c\u003d HealthConstant.MIN_WEIGHT) {","lastModifiedDate":"2024-04-06"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.ZERO_HEIGHT_AND_WEIGHT_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"        if (height \u003e HealthConstant.MAX_HEIGHT) {","lastModifiedDate":"2024-04-06"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.MAX_HEIGHT_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"        if (weight \u003e HealthConstant.MAX_WEIGHT) {","lastModifiedDate":"2024-04-06"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.MAX_WEIGHT_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":144,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":145,"author":{"gitId":"j013n3"},"content":"        validateDateInput(bmiDetails[HealthConstant.BMI_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":146,"author":{"gitId":"j013n3"},"content":"        validateDateNotAfterToday(bmiDetails[HealthConstant.BMI_DATE_INDEX]);","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"j013n3"},"content":"        validateDateNotPresent(bmiDetails[HealthConstant.BMI_DATE_INDEX]);","lastModifiedDate":"2024-04-12"},{"lineNumber":148,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":149,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":150,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":151,"author":{"gitId":"j013n3"},"content":"     * Validates the period details entered.","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":153,"author":{"gitId":"j013n3"},"content":"     * @param periodDetails An array of strings with split period details.","lastModifiedDate":"2024-04-13"},{"lineNumber":154,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InvalidInput If there are any errors in the details entered.","lastModifiedDate":"2024-03-31"},{"lineNumber":155,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":156,"author":{"gitId":"j013n3"},"content":"    public void validatePeriodInput(String[] periodDetails, boolean isParser) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-04-10"},{"lineNumber":157,"author":{"gitId":"j013n3"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":158,"author":{"gitId":"j013n3"},"content":"        if (isEmptyParameterPresent(periodDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_PERIOD_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"            validateDateInput(periodDetails[HealthConstant.PERIOD_START_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":164,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_START_DATE_ERROR + e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":165,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":166,"author":{"gitId":"j013n3"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":167,"author":{"gitId":"j013n3"},"content":"            if (validateDateNotEmpty(periodDetails[HealthConstant.PERIOD_END_DATE_INDEX])) {","lastModifiedDate":"2024-04-09"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"                validateDateInput(periodDetails[HealthConstant.PERIOD_END_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"            }","lastModifiedDate":"2024-04-08"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_END_DATE_ERROR + e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"        validateIfOnlyFromParser(isParser, periodDetails);","lastModifiedDate":"2024-04-14"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"        validateDateNotAfterToday(periodDetails[HealthConstant.PERIOD_START_DATE_INDEX]);","lastModifiedDate":"2024-04-02"},{"lineNumber":176,"author":{"gitId":"j013n3"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"        LocalDate startDate \u003d parser.parseDate(periodDetails[HealthConstant.PERIOD_START_DATE_INDEX]);","lastModifiedDate":"2024-04-07"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"        if (validateDateNotEmpty(periodDetails[HealthConstant.PERIOD_END_DATE_INDEX])) {","lastModifiedDate":"2024-04-09"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"            validateDateNotAfterToday(periodDetails[HealthConstant.PERIOD_END_DATE_INDEX]);","lastModifiedDate":"2024-04-08"},{"lineNumber":180,"author":{"gitId":"j013n3"},"content":"            LocalDate endDate \u003d parser.parseDate(periodDetails[HealthConstant.PERIOD_END_DATE_INDEX]);","lastModifiedDate":"2024-04-07"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"            if (startDate.isAfter(endDate)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.PERIOD_END_BEFORE_START_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"            }","lastModifiedDate":"2024-03-31"},{"lineNumber":184,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":185,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":186,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-13"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"     * Validates the run details entered.","lastModifiedDate":"2024-04-13"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"     * @param runDetails An array of strings with split run details.","lastModifiedDate":"2024-04-13"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the details are wrongly formatted, or if date is in future or invalid.","lastModifiedDate":"2024-04-13"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If empty strings are used.","lastModifiedDate":"2024-03-31"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"    public void validateRunInput(String[] runDetails) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"        if (isEmptyParameterPresent(runDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_RUN_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"        if (!runDetails[WorkoutConstant.RUN_TIME_INDEX].matches(UiConstant.VALID_TIME_REGEX) \u0026\u0026","lastModifiedDate":"2024-04-12"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"                !runDetails[WorkoutConstant.RUN_TIME_INDEX].matches(UiConstant.VALID_TIME_WITH_HOURS_REGEX)) {","lastModifiedDate":"2024-04-12"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_RUN_TIME_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"        if (!runDetails[WorkoutConstant.RUN_DISTANCE_INDEX].matches(UiConstant.VALID_TWO_DP_NUMBER_REGEX)) {","lastModifiedDate":"2024-04-12"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_RUN_DISTANCE_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"        if (validateDateNotEmpty(runDetails[WorkoutConstant.RUN_DATE_INDEX])) {","lastModifiedDate":"2024-04-09"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"            validateDateInput(runDetails[WorkoutConstant.RUN_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"            validateDateNotAfterToday(runDetails[WorkoutConstant.RUN_DATE_INDEX]);","lastModifiedDate":"2024-04-02"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-13"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":219,"author":{"gitId":"JustinSoh"},"content":"     * Validates the gym details entered.","lastModifiedDate":"2024-04-13"},{"lineNumber":220,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"     * @param gymDetails An array of strings with split Gym details.","lastModifiedDate":"2024-04-13"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If the details specified are invalid.","lastModifiedDate":"2024-03-31"},{"lineNumber":223,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If empty strings are used.","lastModifiedDate":"2024-03-31"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"    public void validateGymInput(String[] gymDetails) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-04-07"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"        if (isEmptyParameterPresent(gymDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_GYM_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"        if (!gymDetails[WorkoutConstant.GYM_NUMBER_OF_STATIONS_INDEX]","lastModifiedDate":"2024-04-01"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"                .matches(UiConstant.VALID_POSITIVE_INTEGER_REGEX)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_NUMBER_OF_STATIONS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":236,"author":{"gitId":"JustinSoh"},"content":"        int numberOfStations \u003d Integer.parseInt(gymDetails[WorkoutConstant.GYM_NUMBER_OF_STATIONS_INDEX]);","lastModifiedDate":"2024-04-12"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"        if (numberOfStations \u003e WorkoutConstant.MAX_GYM_STATION_NUMBER) {","lastModifiedDate":"2024-04-12"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.MAX_STATIONS_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"        if (validateDateNotEmpty(gymDetails[WorkoutConstant.GYM_DATE_INDEX])) {","lastModifiedDate":"2024-04-09"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"            validateDateInput(gymDetails[WorkoutConstant.GYM_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"            validateDateNotAfterToday(gymDetails[WorkoutConstant.GYM_DATE_INDEX]);","lastModifiedDate":"2024-04-02"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"     * Validates that time is in HH:MM 24 hours format, and if it is a valid time.","lastModifiedDate":"2024-04-13"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"     * @param time The {@code String} time to check.","lastModifiedDate":"2024-04-13"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If time is formatted wrongly or is not valid.","lastModifiedDate":"2024-04-13"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"    public void validateTimeInput(String time) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-07"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"        if (!time.matches(UiConstant.VALID_TIME_REGEX)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_ACTUAL_TIME_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"        String [] parts \u003d time.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-31"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"        int hours \u003d Integer.parseInt(parts[UiConstant.SPLIT_TIME_HOUR_INDEX]);","lastModifiedDate":"2024-04-13"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"        int minutes \u003d Integer.parseInt(parts[UiConstant.SPLIT_TIME_MINUTES_INDEX]);","lastModifiedDate":"2024-04-13"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"        if (hours \u003c UiConstant.MIN_HOURS || hours \u003e UiConstant.MAX_HOURS) {","lastModifiedDate":"2024-03-31"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_ACTUAL_TIME_HOUR_ERROR);","lastModifiedDate":"2024-04-07"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"        if (minutes \u003c UiConstant.MIN_MINUTES || minutes \u003e UiConstant.MAX_MINUTES) {","lastModifiedDate":"2024-03-31"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_ACTUAL_TIME_MINUTE_ERROR);","lastModifiedDate":"2024-04-07"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":271,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-09"},{"lineNumber":272,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":273,"author":{"gitId":"syj02"},"content":"     * Validates the appointment details entered.","lastModifiedDate":"2024-04-13"},{"lineNumber":274,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":275,"author":{"gitId":"syj02"},"content":"     * @param appointmentDetails An array of strings with split appointment details.","lastModifiedDate":"2024-04-13"},{"lineNumber":276,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InvalidInput If there are any errors in the details entered.","lastModifiedDate":"2024-03-31"},{"lineNumber":277,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InsufficientInput If date, time, or description parameters are empty or invalid.","lastModifiedDate":"2024-04-13"},{"lineNumber":278,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":279,"author":{"gitId":"syj02"},"content":"    public void validateAppointmentDetails(String[] appointmentDetails)","lastModifiedDate":"2024-04-07"},{"lineNumber":280,"author":{"gitId":"syj02"},"content":"            throws CustomExceptions.InvalidInput, CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":281,"author":{"gitId":"syj02"},"content":"        if (isEmptyParameterPresent(appointmentDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":282,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant","lastModifiedDate":"2024-03-31"},{"lineNumber":283,"author":{"gitId":"syj02"},"content":"                    .INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":284,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":285,"author":{"gitId":"syj02"},"content":"        validateDateInput(appointmentDetails[HealthConstant.APPOINTMENT_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":286,"author":{"gitId":"syj02"},"content":"        validateTimeInput(appointmentDetails[HealthConstant.APPOINTMENT_TIME_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":287,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":288,"author":{"gitId":"syj02"},"content":"        if (appointmentDetails[HealthConstant.APPOINTMENT_DESCRIPTION_INDEX].length()","lastModifiedDate":"2024-04-01"},{"lineNumber":289,"author":{"gitId":"syj02"},"content":"                \u003e HealthConstant.MAX_DESCRIPTION_LENGTH) {","lastModifiedDate":"2024-04-01"},{"lineNumber":290,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.DESCRIPTION_LENGTH_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":291,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":292,"author":{"gitId":"syj02"},"content":"        if (!appointmentDetails[HealthConstant.APPOINTMENT_DESCRIPTION_INDEX]","lastModifiedDate":"2024-04-01"},{"lineNumber":293,"author":{"gitId":"syj02"},"content":"                .matches(UiConstant.VALID_APPOINTMENT_DESCRIPTION_REGEX)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":294,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_DESCRIPTION_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":295,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":296,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":297,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":298,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-02"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"     * Validates whether the list of input details contains any empty strings. If it does, return false.","lastModifiedDate":"2024-04-02"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"     * Otherwise, return true.","lastModifiedDate":"2024-04-02"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"     * @param input A list of strings representing command inputs.","lastModifiedDate":"2024-04-02"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"     * @return False if it contains empty strings. Otherwise, returns true.","lastModifiedDate":"2024-04-02"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"    protected boolean isEmptyParameterPresent(String[] input) {","lastModifiedDate":"2024-04-14"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"        for (String s : input) {","lastModifiedDate":"2024-04-02"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"            if (s !\u003d null \u0026\u0026 s.isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"                return true;","lastModifiedDate":"2024-04-02"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"        return false;","lastModifiedDate":"2024-04-02"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"     * Validates whether the date specified is after today. Throws an error if it is.","lastModifiedDate":"2024-04-02"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"     * @param dateString A string representing the date.","lastModifiedDate":"2024-04-02"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the date specified is after today.","lastModifiedDate":"2024-04-02"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"    protected void validateDateNotAfterToday(String dateString) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-14"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"        LocalDate date \u003d parser.parseDate(dateString);","lastModifiedDate":"2024-04-07"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"        if (date.isAfter(LocalDate.now())) {","lastModifiedDate":"2024-04-02"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.DATE_IN_FUTURE_ERROR);","lastModifiedDate":"2024-04-02"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-08"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"     * Checks whether the username has only alphanumeric characters and spaces.","lastModifiedDate":"2024-04-08"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-08"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"     * @param name The input name from the user","lastModifiedDate":"2024-04-08"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"     * @return Returns true if it only has alphanumeric characters, otherwise returns false.","lastModifiedDate":"2024-04-08"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-08"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"    public boolean validateIfUsernameIsValid(String name) {","lastModifiedDate":"2024-04-09"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"        return !name.matches(UiConstant.VALID_USERNAME_REGEX);","lastModifiedDate":"2024-04-09"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-09"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"     * Checks whether date is set to {@code null} or \u0027NA\u0027. Both cases mean date is not specified.","lastModifiedDate":"2024-04-09"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-09"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"     * @param date The date string to check","lastModifiedDate":"2024-04-09"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"     * @return Returns true if date is specified, otherwise returns false.","lastModifiedDate":"2024-04-09"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-09"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"    public boolean validateDateNotEmpty (String date) {","lastModifiedDate":"2024-04-09"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"        return date !\u003d null \u0026\u0026 !date.equals(\"NA\");","lastModifiedDate":"2024-04-09"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":349,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-04-09"},{"lineNumber":350,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-08"},{"lineNumber":351,"author":{"gitId":"j013n3"},"content":"     * Validates whether the start date is before or equal to the end date of the latest period in the HealthList.","lastModifiedDate":"2024-04-08"},{"lineNumber":352,"author":{"gitId":"j013n3"},"content":"     * Throws an error if it is.","lastModifiedDate":"2024-04-08"},{"lineNumber":353,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-08"},{"lineNumber":354,"author":{"gitId":"j013n3"},"content":"     * @param dateString The string representation of the date to be validated.","lastModifiedDate":"2024-04-08"},{"lineNumber":355,"author":{"gitId":"j013n3"},"content":"     * @param latestPeriodEndDate The end date of the latest period in the HealthList.","lastModifiedDate":"2024-04-08"},{"lineNumber":356,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InvalidInput If the date specified is not after the end date of the latest period.","lastModifiedDate":"2024-04-08"},{"lineNumber":357,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-08"},{"lineNumber":358,"author":{"gitId":"j013n3"},"content":"    public void validateDateAfterLatestPeriodInput(String dateString, LocalDate latestPeriodEndDate)","lastModifiedDate":"2024-04-08"},{"lineNumber":359,"author":{"gitId":"j013n3"},"content":"            throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-08"},{"lineNumber":360,"author":{"gitId":"j013n3"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-08"},{"lineNumber":361,"author":{"gitId":"j013n3"},"content":"        LocalDate date \u003d parser.parseDate(dateString);","lastModifiedDate":"2024-04-08"},{"lineNumber":362,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":363,"author":{"gitId":"j013n3"},"content":"        if (latestPeriodEndDate !\u003d null \u0026\u0026 (date.isBefore(latestPeriodEndDate) || date.isEqual(latestPeriodEndDate))) {","lastModifiedDate":"2024-04-08"},{"lineNumber":364,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.CURRENT_START_BEFORE_PREVIOUS_END);","lastModifiedDate":"2024-04-08"},{"lineNumber":365,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-08"},{"lineNumber":366,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":367,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":368,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-08"},{"lineNumber":369,"author":{"gitId":"j013n3"},"content":"     * Validates whether the specified start date matches the start date of the latest period in the HealthList","lastModifiedDate":"2024-04-08"},{"lineNumber":370,"author":{"gitId":"j013n3"},"content":"     * and checks if end date exists.","lastModifiedDate":"2024-04-08"},{"lineNumber":371,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-08"},{"lineNumber":372,"author":{"gitId":"j013n3"},"content":"     * @param latestPeriodEndDate The end date of the latest period in the HealthList.","lastModifiedDate":"2024-04-08"},{"lineNumber":373,"author":{"gitId":"j013n3"},"content":"     * @param periodDetails       An array containing details of the current period input.","lastModifiedDate":"2024-04-08"},{"lineNumber":374,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InvalidInput If the start date does not match the start date of the latest period","lastModifiedDate":"2024-04-08"},{"lineNumber":375,"author":{"gitId":"j013n3"},"content":"     *                                        or if insufficient parameters are provided.","lastModifiedDate":"2024-04-08"},{"lineNumber":376,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-08"},{"lineNumber":377,"author":{"gitId":"j013n3"},"content":"    public void validateStartDatesTally(LocalDate latestPeriodEndDate, String[] periodDetails)","lastModifiedDate":"2024-04-10"},{"lineNumber":378,"author":{"gitId":"j013n3"},"content":"            throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-10"},{"lineNumber":379,"author":{"gitId":"j013n3"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-08"},{"lineNumber":380,"author":{"gitId":"j013n3"},"content":"        LocalDate startDate \u003d parser.parseDate(periodDetails[HealthConstant.PERIOD_START_DATE_INDEX]);","lastModifiedDate":"2024-04-10"},{"lineNumber":381,"author":{"gitId":"j013n3"},"content":"        LocalDate latestPeriodStartDate \u003d","lastModifiedDate":"2024-04-08"},{"lineNumber":382,"author":{"gitId":"j013n3"},"content":"                Objects.requireNonNull(HealthList.getPeriod(HealthConstant.FIRST_ITEM)).getStartDate();","lastModifiedDate":"2024-04-14"},{"lineNumber":383,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":384,"author":{"gitId":"j013n3"},"content":"        if (latestPeriodEndDate \u003d\u003d null) {","lastModifiedDate":"2024-04-08"},{"lineNumber":385,"author":{"gitId":"j013n3"},"content":"            if (!startDate.equals(latestPeriodStartDate)) {","lastModifiedDate":"2024-04-10"},{"lineNumber":386,"author":{"gitId":"j013n3"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_START_DATE_INPUT_ERROR);","lastModifiedDate":"2024-04-08"},{"lineNumber":387,"author":{"gitId":"j013n3"},"content":"            }","lastModifiedDate":"2024-04-08"},{"lineNumber":388,"author":{"gitId":"j013n3"},"content":"            if (periodDetails[HealthConstant.PERIOD_END_DATE_INDEX] \u003d\u003d null) {","lastModifiedDate":"2024-04-08"},{"lineNumber":389,"author":{"gitId":"j013n3"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.END_DATE_NOT_FOUND_ERROR );","lastModifiedDate":"2024-04-08"},{"lineNumber":390,"author":{"gitId":"j013n3"},"content":"            }","lastModifiedDate":"2024-04-08"},{"lineNumber":391,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-08"},{"lineNumber":392,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":393,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":394,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":395,"author":{"gitId":"j013n3"},"content":"     * Validates input data if it comes from Parser and validates the input using two other methods from Validation.","lastModifiedDate":"2024-04-14"},{"lineNumber":396,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-14"},{"lineNumber":397,"author":{"gitId":"j013n3"},"content":"     * @param isParser       a boolean indicating whether the input comes from Parser","lastModifiedDate":"2024-04-14"},{"lineNumber":398,"author":{"gitId":"j013n3"},"content":"     * @param periodDetails  an array of strings containing period details","lastModifiedDate":"2024-04-14"},{"lineNumber":399,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InvalidInput if the input data is invalid","lastModifiedDate":"2024-04-14"},{"lineNumber":400,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":401,"author":{"gitId":"j013n3"},"content":"    public void validateIfOnlyFromParser(boolean isParser, String[] periodDetails)","lastModifiedDate":"2024-04-14"},{"lineNumber":402,"author":{"gitId":"j013n3"},"content":"            throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-14"},{"lineNumber":403,"author":{"gitId":"j013n3"},"content":"        int sizeOfPeriodList \u003d HealthList.getPeriodsSize();","lastModifiedDate":"2024-04-14"},{"lineNumber":404,"author":{"gitId":"j013n3"},"content":"        if (isParser \u0026\u0026 sizeOfPeriodList \u003e\u003d UiConstant.MINIMUM_PERIOD_COUNT) {","lastModifiedDate":"2024-04-14"},{"lineNumber":405,"author":{"gitId":"j013n3"},"content":"            LocalDate latestPeriodEndDate \u003d","lastModifiedDate":"2024-04-14"},{"lineNumber":406,"author":{"gitId":"j013n3"},"content":"                    Objects.requireNonNull(HealthList.getPeriod(HealthConstant.FIRST_ITEM)).getEndDate();","lastModifiedDate":"2024-04-14"},{"lineNumber":407,"author":{"gitId":"j013n3"},"content":"            validateStartDatesTally(latestPeriodEndDate, periodDetails);","lastModifiedDate":"2024-04-14"},{"lineNumber":408,"author":{"gitId":"j013n3"},"content":"            validateDateAfterLatestPeriodInput(periodDetails[HealthConstant.PERIOD_START_DATE_INDEX],","lastModifiedDate":"2024-04-14"},{"lineNumber":409,"author":{"gitId":"j013n3"},"content":"                    latestPeriodEndDate);","lastModifiedDate":"2024-04-14"},{"lineNumber":410,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":411,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":412,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":413,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":414,"author":{"gitId":"j013n3"},"content":"     * Checks whether current directory is readable and writable. If no, print exception and exit bot.","lastModifiedDate":"2024-04-10"},{"lineNumber":415,"author":{"gitId":"j013n3"},"content":"     * If yes, do nothing.","lastModifiedDate":"2024-04-10"},{"lineNumber":416,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":417,"author":{"gitId":"j013n3"},"content":"    public void validateDirectoryPermissions() {","lastModifiedDate":"2024-04-10"},{"lineNumber":418,"author":{"gitId":"j013n3"},"content":"        Path currentDirectory \u003d Path.of(\"\");","lastModifiedDate":"2024-04-10"},{"lineNumber":419,"author":{"gitId":"j013n3"},"content":"        boolean isValidPermissions \u003d Files.isReadable(currentDirectory) \u0026\u0026 Files.isWritable(currentDirectory);","lastModifiedDate":"2024-04-10"},{"lineNumber":420,"author":{"gitId":"j013n3"},"content":"        if (!isValidPermissions) {","lastModifiedDate":"2024-04-10"},{"lineNumber":421,"author":{"gitId":"j013n3"},"content":"            Output output \u003d new Output();","lastModifiedDate":"2024-04-10"},{"lineNumber":422,"author":{"gitId":"j013n3"},"content":"            output.printException(ErrorConstant.NO_PERMISSIONS_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":423,"author":{"gitId":"j013n3"},"content":"            System.exit(1);","lastModifiedDate":"2024-04-10"},{"lineNumber":424,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":425,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":426,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":427,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":428,"author":{"gitId":"j013n3"},"content":"     * Validates whether the specified date can be found in HealthList and throws error if it is.","lastModifiedDate":"2024-04-12"},{"lineNumber":429,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":430,"author":{"gitId":"j013n3"},"content":"     * @param dateString The date of the Bmi input to be added.","lastModifiedDate":"2024-04-13"},{"lineNumber":431,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.InvalidInput If the same date is found.","lastModifiedDate":"2024-04-12"},{"lineNumber":432,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":433,"author":{"gitId":"j013n3"},"content":"    public void validateDateNotPresent(String dateString) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-12"},{"lineNumber":434,"author":{"gitId":"j013n3"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-12"},{"lineNumber":435,"author":{"gitId":"j013n3"},"content":"        LocalDate dateToVerify \u003d parser.parseDate(dateString);","lastModifiedDate":"2024-04-12"},{"lineNumber":436,"author":{"gitId":"j013n3"},"content":"        for (Bmi bmi :  HealthList.getBmis()) {","lastModifiedDate":"2024-04-12"},{"lineNumber":437,"author":{"gitId":"j013n3"},"content":"            if (bmi.getDate().isEqual(dateToVerify)) {","lastModifiedDate":"2024-04-12"},{"lineNumber":438,"author":{"gitId":"j013n3"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.DATE_ALREADY_EXISTS_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":439,"author":{"gitId":"j013n3"},"content":"            }","lastModifiedDate":"2024-04-12"},{"lineNumber":440,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":441,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":442,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":443,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":444,"author":{"gitId":"j013n3"},"content":"     * Validates whether the current index provided is within the start and end.","lastModifiedDate":"2024-04-13"},{"lineNumber":445,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":446,"author":{"gitId":"j013n3"},"content":"     * @param index The index to be validated.","lastModifiedDate":"2024-04-13"},{"lineNumber":447,"author":{"gitId":"j013n3"},"content":"     * @param start The starting bound.","lastModifiedDate":"2024-04-13"},{"lineNumber":448,"author":{"gitId":"j013n3"},"content":"     * @param end the ending bound (exclusive - e.g. end \u003d 5 means index must be \u003c 5).","lastModifiedDate":"2024-04-13"},{"lineNumber":449,"author":{"gitId":"j013n3"},"content":"     * @return true if the index is within the bounds, false otherwise.","lastModifiedDate":"2024-04-13"},{"lineNumber":450,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":451,"author":{"gitId":"j013n3"},"content":"    public static boolean validateIndexWithinBounds(int index, int start, int end) {","lastModifiedDate":"2024-04-13"},{"lineNumber":452,"author":{"gitId":"j013n3"},"content":"        return index \u003e\u003d start \u0026\u0026 index \u003c end;","lastModifiedDate":"2024-04-13"},{"lineNumber":453,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":454,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":455,"author":{"gitId":"j013n3"},"content":"    public static boolean validateIntegerIsPositive(String value) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":456,"author":{"gitId":"j013n3"},"content":"        return value.matches(UiConstant.VALID_POSITIVE_INTEGER_REGEX);","lastModifiedDate":"2024-04-13"},{"lineNumber":457,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":458,"author":{"gitId":"j013n3"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"j013n3":186,"JustinSoh":36,"rouvinerh":170,"L5-Z":38,"syj02":28}},{"path":"src/main/java/workouts/Gym.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-04-13"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import utility.Validation;","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":" * Represents a Gym object that extends the Workout class.","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":" * A gym object can have multiple GymStation objects.","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":" *","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"public class Gym extends Workout {","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"    private final ArrayList\u003cGymStation\u003e stations \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"     * Constructs a new Gym Object","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"     * When a new Gym object is created, it is automatically added to a list of workouts.","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"     * This is done through the super() call in the constructor.","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    public Gym() {","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"        super();","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"        super.addIntoWorkoutList(this);","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"     * Overloaded constructor that takes the optional date parameter.","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"     * It also takes in the date parameter specified.","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"     * @param stringDate String representing the date parameter specified.","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    public Gym(String stringDate) {","lastModifiedDate":"2024-03-14"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"        super(stringDate);","lastModifiedDate":"2024-04-12"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"        super.addIntoWorkoutList(this);","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"     * Adds a new GymStation object into the Gym object.","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"     * It also logs the addition of the gym station into the log file.","lastModifiedDate":"2024-04-13"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"     * @param name String containing the name of the gym station.","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfSet String of the number of sets done.","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfRepetitions String of the number of repetitions done.","lastModifiedDate":"2024-04-13"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"     * @param weights String of weights separated by commas. (e.g. \"10,20,30,40\")","lastModifiedDate":"2024-04-13"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"    public void addStation(String name,","lastModifiedDate":"2024-04-13"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"                           String numberOfSet,","lastModifiedDate":"2024-04-13"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"                           String numberOfRepetitions,","lastModifiedDate":"2024-04-13"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"                           String weights)","lastModifiedDate":"2024-04-13"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-13"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"        GymStation newStation \u003d new GymStation(name, numberOfSet, numberOfRepetitions, weights);","lastModifiedDate":"2024-04-13"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"        appendIntoStations(newStation);","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"        LogFile.writeLog(\"Added Gym Station: \" + name, false);","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"     * Gets the list of GymStation objects.","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"     * @return An ArrayList of GymStation objects.","lastModifiedDate":"2024-04-13"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    public ArrayList\u003cGymStation\u003e getStations() {","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"        return stations;","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the GymStation object by index.","lastModifiedDate":"2024-04-13"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"     * @param index Index of the GymStation object.","lastModifiedDate":"2024-04-13"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"     * @return GymStation object.","lastModifiedDate":"2024-04-13"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is out of bounds.","lastModifiedDate":"2024-04-13"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"    public GymStation getStationByIndex(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-14"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"        boolean isIndexValid \u003d Validation.validateIndexWithinBounds(index, 0,  stations.size());","lastModifiedDate":"2024-04-13"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"        if (!isIndexValid) {","lastModifiedDate":"2024-04-13"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_SEARCH_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"        return stations.get(index);","lastModifiedDate":"2024-03-14"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a Gym object.","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing the Gym object, inclusive of the date and gym stations done.","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-14"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-14"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"        return String.format(\" (Date: %s)\", super.getDate());","lastModifiedDate":"2024-04-12"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"     * Converts the Gym object into a string format suitable for writing into a file.","lastModifiedDate":"2024-04-13"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"     * This method serializes the Gym object, including all its GymStation objects, into a string. The resulting string","lastModifiedDate":"2024-04-13"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"     * follows a specific format to ensure that it can be correctly deserialized later.","lastModifiedDate":"2024-04-13"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"     * For more examples, refer to the GymTest method {@code toFileString_correctInput_expectedCorrectString()}.","lastModifiedDate":"2024-04-13"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-30"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"     * @return A string representing the Gym object and its GymStation objects isuitable for writing into a file.","lastModifiedDate":"2024-04-13"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"    public String toFileString(){","lastModifiedDate":"2024-04-01"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder formattedString \u003d new StringBuilder();","lastModifiedDate":"2024-04-13"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"        // Append the type, number of stations, and date (GYM:NUM_STATIONS:DATE:)","lastModifiedDate":"2024-04-13"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        formattedString.append(WorkoutConstant.GYM.toUpperCase())","lastModifiedDate":"2024-04-13"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"                .append(UiConstant.SPLIT_BY_COLON)","lastModifiedDate":"2024-04-13"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"                .append(stations.size())","lastModifiedDate":"2024-04-13"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"                .append(UiConstant.SPLIT_BY_COLON)","lastModifiedDate":"2024-04-13"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"                .append(super.getDateForFile())","lastModifiedDate":"2024-04-13"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"                .append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-13"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"        int lastIndex \u003d stations.size() - 1;","lastModifiedDate":"2024-04-13"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c stations.size(); i++) {","lastModifiedDate":"2024-04-13"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"            formattedString.append(stations.get(i).toFileString());","lastModifiedDate":"2024-04-13"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"            if (i !\u003d lastIndex) {","lastModifiedDate":"2024-04-13"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"                formattedString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-13"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"        return formattedString.toString();","lastModifiedDate":"2024-04-13"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"     * Used when printing all the workouts. This method takes in parameters {@code index}","lastModifiedDate":"2024-04-13"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"     * @param index indicates which particular gymStation is being queried.","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"     * @return A string representing the history format for gym.","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"    public String getHistoryFormatForSpecificGymStation(int index) {","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"        // Get the string format for a specific gym station","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"        GymStation station \u003d getStations().get(index);","lastModifiedDate":"2024-03-27"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        String gymStationString \u003d station.getStationName();","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        String gymSetString \u003d String.valueOf(station.getNumberOfSets());","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"        // If it is first iteration, includes dashes for irrelevant field","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        String prefix \u003d index \u003d\u003d 0 ? WorkoutConstant.GYM : UiConstant.EMPTY_STRING;","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"        String date \u003d index \u003d\u003d 0 ? super.getDate() : UiConstant.EMPTY_STRING;","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"                prefix, date, gymStationString, gymSetString, UiConstant.DASH);","lastModifiedDate":"2024-04-13"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"    private void appendIntoStations(GymStation station) {","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"        stations.add(station);","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":142,"rouvinerh":10}},{"path":"src/main/java/workouts/GymSet.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":" * Represents a GymSet object.","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"public class GymSet {","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"    private double weight;","lastModifiedDate":"2024-04-06"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"    private int numberOfRepetitions;","lastModifiedDate":"2024-04-06"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"     * Constructs a new GymSet object using the weight and reps for 1 set of a gym station.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"     * @param weight The weight done for the set.","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfRepetitions The number of reps done for the set.","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    public GymSet(Double weight, int numberOfRepetitions){","lastModifiedDate":"2024-04-06"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"        this.numberOfRepetitions \u003d numberOfRepetitions;","lastModifiedDate":"2024-04-01"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    public double getWeight() {","lastModifiedDate":"2024-04-06"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"        return weight;","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    public int getNumberOfRepetitions() {","lastModifiedDate":"2024-04-01"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"        return numberOfRepetitions;","lastModifiedDate":"2024-04-01"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves a string representation of a GymSet object.","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a GymSet, inclusive of the number of repetitions and weight done.","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.GYM_SET_FORMAT, this.numberOfRepetitions, this.weight);","lastModifiedDate":"2024-04-01"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":35,"rouvinerh":7}},{"path":"src/main/java/workouts/GymStation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import utility.Validation;","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":" * Represents a GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"public class GymStation {","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    private final String stationName;","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    private final ArrayList\u003cGymSet\u003e sets \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    private final int numberOfSets;","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"     * Constructs a new GymStation object that contains the name, weight, number of repetitions and number of sets done","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"     * in one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"     * @param exerciseName        The name of the gym station.","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"     *                            The name should not be empty and should not exceed the maximum length.","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"     *                            The name should also follow the pattern (UiConstant.VALID_GYM_STATION_NAME_REGEX)","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfSetsStr     The number of sets done.","lastModifiedDate":"2024-04-13"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"     *                            The number of sets should be a positive integer.","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"     *                            The number of sets should not be empty.","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"     *                            The number of sets should match the number of weights provided in the weights string","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfRepetitions The number of repetitions done for each set.","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"     * @param weightsString       The weights done for each set.","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"     *                            The weights should be in the format \"weight1,weight2,weight3...\"","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput if an invalid input is passed in","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput if input is empty","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    protected GymStation(String exerciseName, String numberOfSetsStr, String numberOfRepetitions, String weightsString)","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.InsufficientInput, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"        ","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"        // Check input validity","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"        this.stationName  \u003d validateGymStationName(exerciseName);","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"        this.numberOfSets \u003d validateNumberOfSets(numberOfSetsStr);","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"        int validNumberOfReps \u003d validateNumberOfRepetitions(numberOfRepetitions);","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e validWeights \u003d processWeightsArray(weightsString);","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"        // Verify if the number of weights matches the number of sets","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"        checkIfNumberOfWeightsMatchesSets(validWeights, this.numberOfSets);","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"        // Process the sets and weights and add them into the gym set object","lastModifiedDate":"2024-04-13"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"        processSets(validWeights, validNumberOfReps);","lastModifiedDate":"2024-04-13"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"     * Function which adds a GymSet object to GymStation.","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"     * @param weightsList     The weight done for the particular set.","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfRepetitions The number of repetitions done for the particular set.","lastModifiedDate":"2024-04-01"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"    public void processSets(ArrayList\u003cDouble\u003e weightsList, int numberOfRepetitions) {","lastModifiedDate":"2024-04-06"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c numberOfSets; i++) {","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"            GymSet newSet \u003d new GymSet(weightsList.get(i), numberOfRepetitions);","lastModifiedDate":"2024-04-01"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"            sets.add(newSet);","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the station name for the GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"     * @return String representing the name for the station.","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"    public String getStationName() {","lastModifiedDate":"2024-03-14"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"        return stationName;","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves an ArrayList of gym sets for the GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"     * @return The ArrayList of GymSet objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"    public ArrayList\u003cGymSet\u003e getSets() {","lastModifiedDate":"2024-03-14"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"        return sets;","lastModifiedDate":"2024-03-14"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the number sets within the GymStation.","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"     * @return The number of sets done.","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"    public int getNumberOfSets() {","lastModifiedDate":"2024-03-14"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"        return numberOfSets;","lastModifiedDate":"2024-03-14"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder returnString \u003d new StringBuilder(String.format(WorkoutConstant.GYM_STATION_FORMAT,","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"                this.getStationName()) + String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT,","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"                this.getNumberOfSets()));","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c this.getNumberOfSets(); i++) {","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"            returnString.append(System.lineSeparator());","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"            returnString.append(String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, i+1 ,","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"                    this.getSets().get(i).toString()));","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"        return returnString.toString();","lastModifiedDate":"2024-03-26"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a GymStation object with a specified delimiter","lastModifiedDate":"2024-04-01"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"     * E.g. toRepString(\",\") returns \"1,2,3\"","lastModifiedDate":"2024-04-01"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"     * E.g. toRepString(\":\") returns \"1:2:3\"","lastModifiedDate":"2024-04-01"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"     * @param delimiter The delimiter to separate the repetitions.","lastModifiedDate":"2024-04-01"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a GymStation object with the specified delimiter.","lastModifiedDate":"2024-04-01"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"    public String toRepString(String delimiter) {","lastModifiedDate":"2024-04-01"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder repString \u003d new StringBuilder();","lastModifiedDate":"2024-04-01"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c sets.size(); i++) {","lastModifiedDate":"2024-04-01"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"            String currentRep \u003d String.valueOf(sets.get(i).getNumberOfRepetitions());","lastModifiedDate":"2024-04-01"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"            repString.append(currentRep);","lastModifiedDate":"2024-04-01"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"            if (i !\u003d sets.size() - 1) {","lastModifiedDate":"2024-04-01"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"                repString.append(delimiter);","lastModifiedDate":"2024-04-01"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-04-01"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"        return repString.toString();","lastModifiedDate":"2024-04-01"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a GymStation object with a specified delimiter","lastModifiedDate":"2024-04-01"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"     * E.g. toWeightString(\",\") returns \"10,20,30\"","lastModifiedDate":"2024-04-01"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"     * E.g. toWeightString(\":\") returns \"10:20:30\"","lastModifiedDate":"2024-04-01"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"     * @param delimiter The delimiter to separate the weights.","lastModifiedDate":"2024-04-01"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a GymStation object with the specified delimiter.","lastModifiedDate":"2024-04-01"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"    public String toWeightString(String delimiter){","lastModifiedDate":"2024-04-01"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder weightString \u003d new StringBuilder();","lastModifiedDate":"2024-04-01"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c sets.size(); i++) {","lastModifiedDate":"2024-04-01"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"            String currentRep \u003d String.valueOf(sets.get(i).getWeight());","lastModifiedDate":"2024-04-01"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"            weightString.append(currentRep);","lastModifiedDate":"2024-04-01"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"            if (i !\u003d sets.size() - 1) {","lastModifiedDate":"2024-04-01"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"                weightString.append(delimiter);","lastModifiedDate":"2024-04-01"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"        return weightString.toString();","lastModifiedDate":"2024-04-01"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"    // Protected Functions","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a GymStation object for writing into a file.","lastModifiedDate":"2024-04-01"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"     * Formats the string in the following format","lastModifiedDate":"2024-04-01"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"     * \"[Exercise Name]:[Number of Sets]:[Repetitions]:[Weights1, Weight2,Weight3 ...]\"","lastModifiedDate":"2024-04-01"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a GymStation object with the format above.","lastModifiedDate":"2024-04-01"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"    protected String toFileString(){","lastModifiedDate":"2024-04-13"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder fileString \u003d new StringBuilder();","lastModifiedDate":"2024-04-01"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"        String stationName \u003d getStationName();","lastModifiedDate":"2024-04-01"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"        String numOfSets \u003d String.valueOf(getNumberOfSets());","lastModifiedDate":"2024-04-01"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"        String gymRepString \u003d toRepString(UiConstant.SPLIT_BY_COMMAS).split(UiConstant.SPLIT_BY_COMMAS)[0];","lastModifiedDate":"2024-04-01"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"        String gymWeightString \u003d toWeightString(UiConstant.SPLIT_BY_COMMAS);","lastModifiedDate":"2024-04-01"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(stationName);","lastModifiedDate":"2024-04-01"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-01"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(numOfSets);","lastModifiedDate":"2024-04-01"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-01"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(gymRepString);","lastModifiedDate":"2024-04-01"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-01"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(gymWeightString);","lastModifiedDate":"2024-04-01"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"        return fileString.toString();","lastModifiedDate":"2024-04-01"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"     * Validates the weight string such that it only has numbers.","lastModifiedDate":"2024-04-13"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"     * @param weightsString The string representing the weights in the format \"weight1,weight2,weight3...\"","lastModifiedDate":"2024-04-13"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"     * @return ArrayList of integers representing the weights in the format [weight1, weight2, weight3 ...]","lastModifiedDate":"2024-04-13"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If an invalid weights string is passed in.","lastModifiedDate":"2024-04-13"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"    protected ArrayList\u003cDouble\u003e processWeightsArray(String weightsString)","lastModifiedDate":"2024-04-13"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"        validateWeightString(weightsString);","lastModifiedDate":"2024-04-13"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        String[] weightsArray \u003d weightsString.split(UiConstant.SPLIT_BY_COMMAS);","lastModifiedDate":"2024-04-13"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e validatedWeightsArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-13"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"        for (String weight: weightsArray){","lastModifiedDate":"2024-04-13"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"            boolean isValidWeight \u003d validateWeight(weight);","lastModifiedDate":"2024-04-13"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"            if (isValidWeight){","lastModifiedDate":"2024-04-13"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"                validatedWeightsArray.add(Double.parseDouble(weight));","lastModifiedDate":"2024-04-13"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-04-13"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"        return validatedWeightsArray;","lastModifiedDate":"2024-04-13"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"     * Validates the gym station name ensuring that","lastModifiedDate":"2024-04-13"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"     * - it is not empty","lastModifiedDate":"2024-04-13"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"     * - follows the correct pattern (UiConstant.VALID_GYM_STATION_NAME_REGEX)","lastModifiedDate":"2024-04-13"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"     * - does not exceed the maximum length. (WorkoutConstant.MAX_GYM_STATION_NAME_LENGTH)","lastModifiedDate":"2024-04-13"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"     * @param exerciseName The string representing the gym station name","lastModifiedDate":"2024-04-13"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"     * @return String representing the gym station name","lastModifiedDate":"2024-04-13"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput if an invalid gym station name is passed in","lastModifiedDate":"2024-04-13"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput if an empty gym station name is passed in","lastModifiedDate":"2024-04-13"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"    protected String validateGymStationName(String exerciseName) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-04-13"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":210,"author":{"gitId":"JustinSoh"},"content":"        validateExerciseNameNotEmpty(exerciseName);","lastModifiedDate":"2024-04-13"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"        validateExerciseNamePattern(exerciseName);","lastModifiedDate":"2024-04-13"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"        validateExerciseNameLength(exerciseName);","lastModifiedDate":"2024-04-13"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"        return exerciseName;","lastModifiedDate":"2024-04-13"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":215,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"     * Validates the number of sets ensuring that it is a positive integer.","lastModifiedDate":"2024-04-13"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":219,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfSets The string representing the number of sets","lastModifiedDate":"2024-04-13"},{"lineNumber":220,"author":{"gitId":"JustinSoh"},"content":"     * @return int representing the number of sets","lastModifiedDate":"2024-04-13"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput if an invalid number of sets is passed in","lastModifiedDate":"2024-04-13"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":223,"author":{"gitId":"JustinSoh"},"content":"    protected int validateNumberOfSets(String numberOfSets) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"        boolean isSetsValid \u003d Validation.validateIntegerIsPositive(numberOfSets);","lastModifiedDate":"2024-04-13"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"        if (!isSetsValid) {","lastModifiedDate":"2024-04-13"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_SETS_POSITIVE_DIGIT_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"        return Integer.parseInt(numberOfSets);","lastModifiedDate":"2024-04-13"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"     * Validates the number of repetitions ensuring that it is a positive integer.","lastModifiedDate":"2024-04-13"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfRepetitions The string representing the number of repetitions","lastModifiedDate":"2024-04-13"},{"lineNumber":236,"author":{"gitId":"JustinSoh"},"content":"     * @return int representing the number of repetitions","lastModifiedDate":"2024-04-13"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput if an invalid number of repetitions is passed in","lastModifiedDate":"2024-04-13"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"    private int validateNumberOfRepetitions(String numberOfRepetitions) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"        boolean isRepsValid \u003d Validation.validateIntegerIsPositive(numberOfRepetitions);","lastModifiedDate":"2024-04-13"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"        if (!isRepsValid) {","lastModifiedDate":"2024-04-13"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_REPS_POSITIVE_DIGIT_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"        return Integer.parseInt(numberOfRepetitions);","lastModifiedDate":"2024-04-13"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":248,"author":{"gitId":"JustinSoh"},"content":"     * Validates the weight string ensuring that","lastModifiedDate":"2024-04-13"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"     * - The weight does not exceed the maximum weight (@code WorkoutConstant.MAX_GYM_WEIGHT)","lastModifiedDate":"2024-04-13"},{"lineNumber":250,"author":{"gitId":"JustinSoh"},"content":"     * - The weight is a multiple of 0.125 (as that is the increment of weights in a gym)","lastModifiedDate":"2024-04-13"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"     * @param weight The string representing the weight","lastModifiedDate":"2024-04-13"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"     * @return boolean true if the weight is valid","lastModifiedDate":"2024-04-13"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput if an invalid weight is passed in","lastModifiedDate":"2024-04-13"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"    private boolean validateWeight(String weight) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"        double weightDouble \u003d Double.parseDouble(weight);","lastModifiedDate":"2024-04-13"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"        validateWeightDoesNotExceedMax(weightDouble);","lastModifiedDate":"2024-04-13"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"        validateWeightIsMultiple(weightDouble);","lastModifiedDate":"2024-04-13"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"        return true;","lastModifiedDate":"2024-04-13"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":262,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":263,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":264,"author":{"gitId":"JustinSoh"},"content":"    // Private Methods","lastModifiedDate":"2024-04-13"},{"lineNumber":265,"author":{"gitId":"JustinSoh"},"content":"    private void validateExerciseNameNotEmpty(String exerciseName) throws CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":266,"author":{"gitId":"JustinSoh"},"content":"        if (exerciseName.isEmpty()) {","lastModifiedDate":"2024-04-13"},{"lineNumber":267,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INVALID_GYM_STATION_EMPTY_NAME_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":268,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":269,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"    private void validateExerciseNamePattern(String exerciseName) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"        if (!exerciseName.matches(UiConstant.VALID_GYM_STATION_NAME_REGEX)) {","lastModifiedDate":"2024-04-13"},{"lineNumber":273,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_GYM_STATION_NAME_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":274,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":275,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":276,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":277,"author":{"gitId":"JustinSoh"},"content":"    private void validateExerciseNameLength(String exerciseName) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":278,"author":{"gitId":"JustinSoh"},"content":"        if (exerciseName.length() \u003e WorkoutConstant.MAX_GYM_STATION_NAME_LENGTH) {","lastModifiedDate":"2024-04-13"},{"lineNumber":279,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_GYM_STATION_NAME_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":280,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":281,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":282,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":283,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":284,"author":{"gitId":"JustinSoh"},"content":"    private void validateWeightDoesNotExceedMax(double weight) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"        if (weight \u003e WorkoutConstant.MAX_GYM_WEIGHT) {","lastModifiedDate":"2024-04-13"},{"lineNumber":286,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_WEIGHT_MAX_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":287,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":288,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":289,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":290,"author":{"gitId":"JustinSoh"},"content":"    private void validateWeightIsMultiple(double weight) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":291,"author":{"gitId":"JustinSoh"},"content":"        if (weight % WorkoutConstant.WEIGHT_MULTIPLE !\u003d 0 ){","lastModifiedDate":"2024-04-13"},{"lineNumber":292,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_WEIGHTS_VALUE_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":293,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":294,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":295,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":296,"author":{"gitId":"JustinSoh"},"content":"    private void checkIfNumberOfWeightsMatchesSets(ArrayList\u003cDouble\u003e weights, int numberOfSets)","lastModifiedDate":"2024-04-13"},{"lineNumber":297,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":298,"author":{"gitId":"JustinSoh"},"content":"        if (weights.size() !\u003d numberOfSets){","lastModifiedDate":"2024-04-13"},{"lineNumber":299,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_WEIGHTS_NUMBER_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":300,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":301,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":302,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":303,"author":{"gitId":"JustinSoh"},"content":"    private void validateWeightString(String weightsString) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":304,"author":{"gitId":"JustinSoh"},"content":"        if (weightsString.isBlank()) {","lastModifiedDate":"2024-04-13"},{"lineNumber":305,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_WEIGHTS_EMPTY_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":306,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":307,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":308,"author":{"gitId":"JustinSoh"},"content":"        if (!weightsString.matches(UiConstant.VALID_WEIGHTS_ARRAY_REGEX)) {","lastModifiedDate":"2024-04-13"},{"lineNumber":309,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_WEIGHTS_ARRAY_FORMAT_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":310,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":311,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":312,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":313,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":314,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-26"},{"lineNumber":315,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":316,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"JustinSoh":306,"rouvinerh":10}},{"path":"src/main/java/workouts/Run.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":" * Represents a Run object that extends the Workout class.","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":" * It takes in the {@code time} and {@code distance} of the run as input.","lastModifiedDate":"2024-04-12"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":" * It also calculates the pace of the run based on the time and distance.","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":" * It also formats the time and distance into a readable format.","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"public class Run extends Workout {","lastModifiedDate":"2024-03-10"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    private final Integer[] times;","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    private final double distance;","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    private final String pace;","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"     * Constructs a new Run object with the time and distance from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"     * @param stringTime     The time taken for the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDistance The distance of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    public Run(String stringTime, String stringDistance) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"        times \u003d processRunTime(stringTime);","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        distance \u003d checkDistance(stringDistance);","lastModifiedDate":"2024-04-12"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        pace \u003d calculatePace();","lastModifiedDate":"2024-03-10"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        super.addIntoWorkoutList(this);","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"     * Overloaded constructor that takes in time, distance and the optional date parameter from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"     * @param stringTime     The time taken for the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDistance The distance of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDate     The date of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    public Run(String stringTime, String stringDistance, String stringDate) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"        super(stringDate);","lastModifiedDate":"2024-04-12"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        times \u003d processRunTime(stringTime);","lastModifiedDate":"2024-04-13"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        distance \u003d checkDistance(stringDistance);","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        pace \u003d calculatePace();","lastModifiedDate":"2024-03-10"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"        Workout workout \u003d new Workout();","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"        workout.addIntoWorkoutList(this);","lastModifiedDate":"2024-04-13"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"     * Returns string format of time taken for run depending on {@code isHourPresent}","lastModifiedDate":"2024-04-12"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"     * If there isn\u0027t an hour present, returns only mm:ss","lastModifiedDate":"2024-04-12"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"     * If not returns hh:mm:ss","lastModifiedDate":"2024-04-12"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     * @return Formatted string of the time for the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    public String getTimes() {","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        if (times[WorkoutConstant.RUN_TIME_HOUR_INDEX] \u003e UiConstant.MIN_HOURS) {","lastModifiedDate":"2024-04-13"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"            int hours \u003d times[WorkoutConstant.RUN_TIME_HOUR_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"            int minutes \u003d times[WorkoutConstant.RUN_TIME_MINUTE_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"            int seconds \u003d times[WorkoutConstant.RUN_TIME_SECOND_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"            return String.format(WorkoutConstant.TIME_WITH_HOURS_FORMAT, hours, minutes, seconds);","lastModifiedDate":"2024-04-12"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"            int minutes \u003d times[WorkoutConstant.RUN_TIME_MINUTE_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"            int seconds \u003d times[WorkoutConstant.RUN_TIME_SECOND_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"            return String.format(WorkoutConstant.TIME_WITHOUT_HOURS_FORMAT, minutes, seconds);","lastModifiedDate":"2024-04-12"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-10"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the run distance in two decimal format.","lastModifiedDate":"2024-04-12"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"     * @return Run distance.","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"    public String getDistance() {","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"        return String.format(WorkoutConstant.TWO_DECIMAL_PLACE_FORMAT, distance);","lastModifiedDate":"2024-04-04"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves run pace.","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"     * @return Run pace.","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"    public String getPace() {","lastModifiedDate":"2024-03-10"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"        return pace;","lastModifiedDate":"2024-03-10"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-12"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a Run object.","lastModifiedDate":"2024-04-12"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a Run object.","lastModifiedDate":"2024-04-12"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-04-12"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"        String printedDate \u003d super.getDate();","lastModifiedDate":"2024-04-12"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.RUN_DATA_FORMAT, WorkoutConstant.RUN,","lastModifiedDate":"2024-04-12"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"                getTimes(), getDistance(), getPace(), printedDate);","lastModifiedDate":"2024-04-12"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a Run object when printing all history.","lastModifiedDate":"2024-04-12"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"     * Uses {@code WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT} to format the string.","lastModifiedDate":"2024-04-12"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"     * Ensures that the format of the string is consistent when printing gym and run objects.","lastModifiedDate":"2024-04-12"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"     * @return a formatted string representing a Run object.","lastModifiedDate":"2024-04-12"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"    public String getFormatForAllHistory() {","lastModifiedDate":"2024-04-12"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        String printedDate \u003d super.getDate();","lastModifiedDate":"2024-04-12"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-04-12"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"                WorkoutConstant.RUN,","lastModifiedDate":"2024-04-12"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"                printedDate,","lastModifiedDate":"2024-04-12"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"                getDistance(),","lastModifiedDate":"2024-04-12"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"                getTimes(),","lastModifiedDate":"2024-04-12"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"                getPace()","lastModifiedDate":"2024-04-12"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"        );","lastModifiedDate":"2024-04-12"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-12"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     * Returns the total seconds based on the {@code times} taken for the run.","lastModifiedDate":"2024-04-13"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     * @return The total number of seconds in the run.","lastModifiedDate":"2024-04-13"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"    private int calculateTotalSeconds() {","lastModifiedDate":"2024-04-13"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"        int totalSeconds;","lastModifiedDate":"2024-04-13"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"        if (times[0] \u003e 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"            totalSeconds \u003d this.times[WorkoutConstant.RUN_TIME_HOUR_INDEX] * UiConstant.NUM_SECONDS_IN_HOUR","lastModifiedDate":"2024-04-13"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"                    + this.times[WorkoutConstant.RUN_TIME_MINUTE_INDEX] * UiConstant.NUM_SECONDS_IN_MINUTE","lastModifiedDate":"2024-04-13"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"                    + this.times[WorkoutConstant.RUN_TIME_SECOND_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-04-13"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"            totalSeconds \u003d this.times[WorkoutConstant.RUN_TIME_MINUTE_INDEX] * UiConstant.NUM_SECONDS_IN_MINUTE","lastModifiedDate":"2024-04-13"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"                    + this.times[WorkoutConstant.RUN_TIME_SECOND_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        return totalSeconds;","lastModifiedDate":"2024-04-13"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"     * Checks the hour, minute and second values for run time.","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"     * @param runTimeParts The run time values.","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the run time specified is not allowed.","lastModifiedDate":"2024-04-13"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"    private void checkRunTimeValues(Integer[] runTimeParts) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"        int hours \u003d runTimeParts[WorkoutConstant.RUN_TIME_HOUR_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"        int minutes \u003d runTimeParts[WorkoutConstant.RUN_TIME_MINUTE_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"        int seconds \u003d runTimeParts[WorkoutConstant.RUN_TIME_SECOND_INDEX];","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        if (hours \u003d\u003d UiConstant.MIN_HOURS) {","lastModifiedDate":"2024-04-12"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_HOUR_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"        // minutes can always be 00","lastModifiedDate":"2024-04-12"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"        if (minutes \u003e UiConstant.MAX_MINUTES) {","lastModifiedDate":"2024-04-12"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_MINUTE_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"        // seconds can never be \u003e 59","lastModifiedDate":"2024-04-12"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"        if (seconds \u003e UiConstant.MAX_SECONDS) {","lastModifiedDate":"2024-04-12"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_SECOND_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"        if (hours \u003d\u003d WorkoutConstant.NO_HOURS_PRESENT) {","lastModifiedDate":"2024-04-13"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"            // if hours not present, minutes and seconds cannot be 00","lastModifiedDate":"2024-04-12"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"            if (minutes \u003d\u003d UiConstant.MIN_MINUTES \u0026\u0026 seconds \u003d\u003d UiConstant.MIN_SECONDS) {","lastModifiedDate":"2024-04-13"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.ZERO_TIME_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-04-12"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-10"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"     * Method parses the time format in either hh:mm:ss or mm:ss.","lastModifiedDate":"2024-04-13"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"     * Sets {@code isHourPresent} variable to true if hours have been specified.","lastModifiedDate":"2024-04-13"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"     * Otherwise, set to false.","lastModifiedDate":"2024-04-13"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"     * @param inputTime String variable representing time taken in either hh:mm:ss or mm:ss format","lastModifiedDate":"2024-04-13"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"     * @return A list of integers representing the hours (if present), minutes and seconds.","lastModifiedDate":"2024-04-13"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput if the input time is not in the correct format.","lastModifiedDate":"2024-04-13"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"    protected Integer[] processRunTime(String inputTime) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"        String [] parts \u003d inputTime.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-13"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"        int hours \u003d WorkoutConstant.NO_HOURS_PRESENT;","lastModifiedDate":"2024-04-13"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"        int minutes \u003d UiConstant.MIN_MINUTES;","lastModifiedDate":"2024-04-13"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"        int seconds \u003d UiConstant.MIN_SECONDS;","lastModifiedDate":"2024-04-13"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"        if (parts.length \u003d\u003d WorkoutConstant.NUMBER_OF_PARTS_FOR_RUN_TIME) {","lastModifiedDate":"2024-04-13"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"            minutes \u003d Integer.parseInt(parts[WorkoutConstant.RUN_TIME_NO_HOURS_MINUTE_INDEX]);","lastModifiedDate":"2024-04-13"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"            seconds \u003d Integer.parseInt(parts[WorkoutConstant.RUN_TIME_NO_HOURS_SECOND_INDEX]);","lastModifiedDate":"2024-04-13"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"        } else if (parts.length \u003d\u003d WorkoutConstant.NUMBER_OF_PARTS_FOR_RUN_TIME_WITH_HOURS) {","lastModifiedDate":"2024-04-13"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"            hours \u003d Integer.parseInt(parts[WorkoutConstant.RUN_TIME_HOUR_INDEX]);","lastModifiedDate":"2024-04-13"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"            minutes \u003d Integer.parseInt(parts[WorkoutConstant.RUN_TIME_MINUTE_INDEX]);","lastModifiedDate":"2024-04-13"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"            seconds \u003d Integer.parseInt(parts[WorkoutConstant.RUN_TIME_SECOND_INDEX]);","lastModifiedDate":"2024-04-13"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"        Integer[] runTimeParts \u003d new Integer[]{hours, minutes, seconds};","lastModifiedDate":"2024-04-13"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"        checkRunTimeValues(runTimeParts);","lastModifiedDate":"2024-04-13"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"        return runTimeParts;","lastModifiedDate":"2024-04-13"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"     * Checks the validity of distance value specified for the run. Returns the distance as a double if valid.","lastModifiedDate":"2024-04-13"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDistance The string representation of the distance.","lastModifiedDate":"2024-04-13"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"     * @return The run distance as a {@code Double}.","lastModifiedDate":"2024-04-13"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the distance is outside the valid range.","lastModifiedDate":"2024-04-13"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"    protected Double checkDistance(String stringDistance) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"        double runDistance \u003d Double.parseDouble(stringDistance);","lastModifiedDate":"2024-04-13"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"        if (runDistance \u003e WorkoutConstant.MAX_RUN_DISTANCE) {","lastModifiedDate":"2024-04-13"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.DISTANCE_TOO_LONG_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"        if (runDistance \u003c\u003d WorkoutConstant.MIN_RUN_DISTANCE) {","lastModifiedDate":"2024-04-13"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.ZERO_DISTANCE_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"        return runDistance;","lastModifiedDate":"2024-04-13"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"     * Method calculates the pace of the run, and formats it into minutes per km.","lastModifiedDate":"2024-04-13"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-06"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"     * @return Formatted string the pace of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the total time taken or pace calculated is too large or small.","lastModifiedDate":"2024-04-06"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"    protected String calculatePace() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-12"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"        int totalSeconds \u003d calculateTotalSeconds();","lastModifiedDate":"2024-03-10"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"        double paceInDecimal \u003d ((double) totalSeconds / this.distance) / UiConstant.NUM_SECONDS_IN_MINUTE;","lastModifiedDate":"2024-03-21"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"        if (paceInDecimal \u003e WorkoutConstant.MAX_PACE) {","lastModifiedDate":"2024-04-09"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.MAX_PACE_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"        if (paceInDecimal \u003c WorkoutConstant.MIN_PACE) {","lastModifiedDate":"2024-04-09"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.MIN_PACE_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"        int minutes \u003d (int) paceInDecimal;","lastModifiedDate":"2024-03-10"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"        double remainingSeconds \u003d paceInDecimal - minutes;","lastModifiedDate":"2024-03-10"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"        int seconds \u003d (int) Math.round(remainingSeconds * UiConstant.NUM_SECONDS_IN_MINUTE);","lastModifiedDate":"2024-03-21"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"        return String.format(WorkoutConstant.RUN_PACE_FORMAT, minutes, seconds);","lastModifiedDate":"2024-04-12"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-10"}],"authorContributionMap":{"JustinSoh":37,"rouvinerh":205,"L5-Z":2}},{"path":"src/main/java/workouts/Workout.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":" * Workout class is a parent class that is used in Gym and Run classes.","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":" * It contains the date of the workout and a parser object to parse the date.","lastModifiedDate":"2024-04-12"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"public class Workout {","lastModifiedDate":"2024-04-07"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"    private LocalDate date \u003d null;","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"     * Overloaded constructor that uses the optional date parameter from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"     * @param stringDate String representing the date of the workout.","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"    public Workout(String stringDate) {","lastModifiedDate":"2024-03-10"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"        this.date \u003d parser.parseDate(stringDate);","lastModifiedDate":"2024-04-07"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"     * Constructor that builds a new Workout object.","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    public Workout() {","lastModifiedDate":"2024-03-10"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"     * Returns the date of the workout. If the date is not specified (null)","lastModifiedDate":"2024-04-12"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"     * It will return {@code ErrorConstant.NO_DATE_SPECIFIED_ERROR} as the dateString.","lastModifiedDate":"2024-04-12"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"     * @return validatedDate as a string representing the date of the workout.","lastModifiedDate":"2024-04-12"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    public String getDate() {","lastModifiedDate":"2024-04-12"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"        String validatedDate \u003d \"\";","lastModifiedDate":"2024-04-12"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"        if(this.date \u003d\u003d null){","lastModifiedDate":"2024-04-12"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"            validatedDate \u003d ErrorConstant.NO_DATE_SPECIFIED_ERROR;","lastModifiedDate":"2024-04-12"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-04-12"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"            validatedDate \u003d this.date.toString();","lastModifiedDate":"2024-04-12"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"        return validatedDate;","lastModifiedDate":"2024-04-12"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"    public String getDateForFile(){","lastModifiedDate":"2024-04-12"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-13"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"        return parser.parseFormattedDate(this.date);","lastModifiedDate":"2024-04-12"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"     * Adds the workout object into the workout list.","lastModifiedDate":"2024-04-12"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"     * @param workout The workout object to be added.","lastModifiedDate":"2024-04-12"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    protected void addIntoWorkoutList(Workout workout) {","lastModifiedDate":"2024-04-13"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists workoutLists \u003d new WorkoutLists();","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"        if (workout instanceof Run) {","lastModifiedDate":"2024-04-12"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"            workoutLists.addRun((Run) workout);","lastModifiedDate":"2024-04-12"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"        } else if (workout instanceof Gym) {","lastModifiedDate":"2024-04-12"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"            workoutLists.addGym((Gym) workout);","lastModifiedDate":"2024-04-12"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a Workout object.","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a Workout object.","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"    public String toString(){","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"        return getDate().toString();","lastModifiedDate":"2024-03-11"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-10"}],"authorContributionMap":{"JustinSoh":72,"rouvinerh":6}},{"path":"src/main/java/workouts/WorkoutLists.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import ui.Output;","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import utility.Validation;","lastModifiedDate":"2024-04-12"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-10"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":" * WorkoutLists class contains a static list of workouts, runs and gyms.","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":" * You cannot add a new object to the list directly","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":" * It will automatically be added when you create a new Run/Gym object.","lastModifiedDate":"2024-04-12"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":" * To retrieve the list of workouts/gym/run, you can use the static \u0027get\u0027 methods provided.","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"public class WorkoutLists {","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cWorkout\u003e WORKOUTS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cRun\u003e RUNS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cGym\u003e GYMS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"    protected WorkoutLists() {","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"     * Returns the static list of workouts objects which contains both runs and gyms.","lastModifiedDate":"2024-04-12"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"     * It is important to note that the list is not sorted by date (as it is optional)","lastModifiedDate":"2024-04-12"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"     * Rather, it is ordered by when it has been created.","lastModifiedDate":"2024-04-12"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"     * @return The list of workouts.","lastModifiedDate":"2024-04-12"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    public static ArrayList\u003cWorkout\u003e getWorkouts() {","lastModifiedDate":"2024-04-12"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"        return WORKOUTS;","lastModifiedDate":"2024-04-12"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"     * Returns the static list of runs objects.","lastModifiedDate":"2024-04-12"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"     * @return The list of runs.","lastModifiedDate":"2024-04-12"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    public static ArrayList\u003cRun\u003e getRuns() {","lastModifiedDate":"2024-04-12"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        return RUNS;","lastModifiedDate":"2024-04-12"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"     * Returns the static list of gyms objects.","lastModifiedDate":"2024-04-12"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"     * @return The list of gyms.","lastModifiedDate":"2024-04-12"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"    public static ArrayList\u003cGym\u003e getGyms() {","lastModifiedDate":"2024-04-12"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"        return GYMS;","lastModifiedDate":"2024-03-30"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"     * Returns latest run.","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"     * @return The latest Run object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.OutOfBounds If no runs are found in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"    public static Run getLatestRun() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"        if (RUNS.isEmpty()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.RUN_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"        return RUNS.get(RUNS.size() - 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"     * Returns latest gym.","lastModifiedDate":"2024-04-12"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"     * @return The latest Gym object added.","lastModifiedDate":"2024-04-12"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.OutOfBounds If no gyms are found in the list.","lastModifiedDate":"2024-04-12"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"    public static Gym getLatestGym() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"        if (GYMS.isEmpty()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.GYM_EMPTY_ERROR);","lastModifiedDate":"2024-04-10"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        return GYMS.get(GYMS.size() - 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"     * Returns the number of runs in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"     * @return The number of runs.","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"    public static int getRunSize() {","lastModifiedDate":"2024-03-14"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"        return RUNS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"     * Returns the number of gyms in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"     * @return The number of gyms.","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"    public static int getGymSize() {","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"        return GYMS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"     * Deletes Gym object based on the {@code index} that will be validated.","lastModifiedDate":"2024-04-12"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"     * @param index Index of the Gym object to be deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-04-12"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"    public static void deleteGym(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"        assert !GYMS.isEmpty() : \"Gym list is empty.\";","lastModifiedDate":"2024-03-30"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"        boolean indexIsValid \u003d Validation.validateIndexWithinBounds(index, 0, GYMS.size());","lastModifiedDate":"2024-04-12"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"        if (!indexIsValid) {","lastModifiedDate":"2024-04-13"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"        Gym deletedGym \u003d GYMS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"        Output.printDeleteGymMessage(deletedGym);","lastModifiedDate":"2024-04-12"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"        WORKOUTS.remove(deletedGym);","lastModifiedDate":"2024-03-30"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"        GYMS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"        LogFile.writeLog(\"Removed gym with index: \" + index, false);","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"     * Deletes Run object based on the {@code index} that will be validated","lastModifiedDate":"2024-04-12"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"     * @param index Index of the Run object to be deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-04-12"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"    public static void deleteRun(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"        assert !RUNS.isEmpty() : \"Run list is empty.\";","lastModifiedDate":"2024-03-30"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"        boolean indexIsValid \u003d Validation.validateIndexWithinBounds(index, 0, RUNS.size());","lastModifiedDate":"2024-04-12"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"        if (!indexIsValid) {","lastModifiedDate":"2024-04-13"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-04-13"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"        Run deletedRun \u003d RUNS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"        Output.printDeleteRunMessage(deletedRun);","lastModifiedDate":"2024-04-12"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"        WORKOUTS.remove(deletedRun);","lastModifiedDate":"2024-03-30"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"        RUNS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        LogFile.writeLog(\"Removed run with index: \" + index, false);","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"     * Clears the workouts, runs and gyms ArrayLists.","lastModifiedDate":"2024-03-20"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"     * Used mainly for JUnit testing to clear the list after each test.","lastModifiedDate":"2024-04-12"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"    public static void clearWorkoutsRunGym() {","lastModifiedDate":"2024-03-24"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"        WORKOUTS.clear();","lastModifiedDate":"2024-03-30"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"        RUNS.clear();","lastModifiedDate":"2024-03-30"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"        GYMS.clear();","lastModifiedDate":"2024-03-30"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"    // Protected Methods","lastModifiedDate":"2024-04-12"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"     * Only classes within the workouts package can add a new run to the list of runs.","lastModifiedDate":"2024-04-12"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"     * This is called automatically when a new run object is created in the Run class.","lastModifiedDate":"2024-04-12"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"     * It will also automatically add the run to the workouts list by calling {@code addWorkout}.","lastModifiedDate":"2024-04-12"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"     * @param run the Run object to be added","lastModifiedDate":"2024-04-12"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"    protected void addRun(Run run) {","lastModifiedDate":"2024-04-12"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"        RUNS.add(run);","lastModifiedDate":"2024-04-12"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"        addWorkout(run);","lastModifiedDate":"2024-04-12"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"     * Only classes within the workouts package can add a new gym to the list of gyms.","lastModifiedDate":"2024-04-12"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"     * This is called automatically when a new gym object is created in the Gym class.","lastModifiedDate":"2024-04-12"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"     * It will also automatically add the gym to the workouts list by calling {@code addWorkout}.","lastModifiedDate":"2024-04-12"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"     * @param gym the Gym object to be added.","lastModifiedDate":"2024-04-12"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"    protected void addGym(Gym gym) {","lastModifiedDate":"2024-04-12"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        GYMS.add(gym);","lastModifiedDate":"2024-04-12"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"        addWorkout(gym);","lastModifiedDate":"2024-04-12"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"    // Private Methods","lastModifiedDate":"2024-04-12"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"     * Automatically adds a workout to the list of workouts.","lastModifiedDate":"2024-04-12"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"     * @param workout Workout object to be added to the {@code WORKOUTS} lists.","lastModifiedDate":"2024-04-12"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"    private void addWorkout(Workout workout) {","lastModifiedDate":"2024-04-12"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        WORKOUTS.add(workout);","lastModifiedDate":"2024-04-12"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-10"}],"authorContributionMap":{"JustinSoh":178,"rouvinerh":9}},{"path":"src/test/java/health/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-04-09"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"public class AppointmentTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    void setUpStreams() {","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-04-12"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"    @AfterEach","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"    void printAppointmentHistory_printCorrectAppointmentHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"        Appointment firstAppointment \u003d new Appointment(\"25-03-2024\", \"16:30\", \"Physiotherapy session\");","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"        Appointment secondAppointment \u003d new Appointment(\"22-03-2024\", \"16:00\", \"Wound dressing change\");","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"        Appointment thirdAppointment \u003d new Appointment(\"22-03-2024\", \"11:00\", \"Doctor consultation\");","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Your Appointment history:\"","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"                + \"1. On \"","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"                + \"2. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"                + \"3. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"        HealthList.printAppointmentHistory();","lastModifiedDate":"2024-04-11"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"    void deleteAppointment_deleteCorrectAppointment_printCorrectList() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"        Appointment firstAppointment \u003d new Appointment(\"25-03-2024\", \"16:30\", \"Physiotherapy session\");","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"        Appointment secondAppointment \u003d new Appointment(\"22-03-2024\", \"16:00\", \"Wound dressing change\");","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"        Appointment thirdAppointment \u003d new Appointment(\"22-03-2024\", \"11:00\", \"Doctor consultation\");","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE","lastModifiedDate":"2024-04-09"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"                + \"Removed appointment on \"","lastModifiedDate":"2024-04-09"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDate()","lastModifiedDate":"2024-04-09"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getTime()","lastModifiedDate":"2024-04-09"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDescription()","lastModifiedDate":"2024-04-09"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.PARTITION_LINE","lastModifiedDate":"2024-04-09"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"                + \"Your Appointment history:\"","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-04"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"                + \"1. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"                + \"2. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDate()","lastModifiedDate":"2024-04-09"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getTime()","lastModifiedDate":"2024-04-09"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDescription()","lastModifiedDate":"2024-04-09"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"        HealthList.deleteAppointment(2);","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"     * Test deleting of appointment with negative invalid index.","lastModifiedDate":"2024-04-11"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-04-11"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":113,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":114,"author":{"gitId":"syj02"},"content":"    void deleteAppointment_negativeIndex_throwOutOfBoundsForAppointment() {","lastModifiedDate":"2024-04-11"},{"lineNumber":115,"author":{"gitId":"syj02"},"content":"        int invalidIndex \u003d -1;","lastModifiedDate":"2024-04-11"},{"lineNumber":116,"author":{"gitId":"syj02"},"content":"        CustomExceptions.OutOfBounds exception \u003d assertThrows(","lastModifiedDate":"2024-04-11"},{"lineNumber":117,"author":{"gitId":"syj02"},"content":"                CustomExceptions.OutOfBounds.class,","lastModifiedDate":"2024-04-11"},{"lineNumber":118,"author":{"gitId":"syj02"},"content":"                () -\u003e HealthList.deleteAppointment(invalidIndex)","lastModifiedDate":"2024-04-11"},{"lineNumber":119,"author":{"gitId":"syj02"},"content":"        );","lastModifiedDate":"2024-04-11"},{"lineNumber":120,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"\\u001b[31mOut of Bounds Error: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":121,"author":{"gitId":"syj02"},"content":"                + ErrorConstant.APPOINTMENT_EMPTY_ERROR","lastModifiedDate":"2024-04-11"},{"lineNumber":122,"author":{"gitId":"syj02"},"content":"                + \"\\u001b[0m\";","lastModifiedDate":"2024-04-11"},{"lineNumber":123,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, exception.getMessage());","lastModifiedDate":"2024-04-11"},{"lineNumber":124,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":125,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"rouvinerh":7,"L5-Z":1,"syj02":117}},{"path":"src/test/java/health/BmiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-15"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"class BmiTest {","lastModifiedDate":"2024-03-15"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-25"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    void setUpStreams() {","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-25"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-25"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-25"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of toString in Bmi class.","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"    void toString_heightWeight_printsCorrectBMIAndCategory() {","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"        Bmi bmi \u003d new Bmi(\"1.75\", \"70.0\", \"19-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"2024-03-19\"","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 22.86\"","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"                + \"Great! You\u0027re within normal range.\"","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"        System.out.println(bmi);","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within underweight range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"    void printBMICategory_underweight_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"You\u0027re underweight.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(17.5));","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within normal range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"    void printBMICategory_normal_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Great! You\u0027re within normal range.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(22.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within overweight range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"    void printBMICategory_overweight_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":73,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"You\u0027re overweight.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(27.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":78,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within obese range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"    void printBMICategory_obese_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":83,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"You\u0027re obese.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(32.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":86,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within severely obese range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"    void printBMICategory_severelyObese_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":93,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"You\u0027re severely obese.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(40.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":96,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of showCurrentBmi.","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"    void printLatestBmi_bmiObject_printsCorrectLatestBmi() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":103,"author":{"gitId":"j013n3"},"content":"        Bmi bmi \u003d new Bmi(\"1.75\", \"70.00\", \"19-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"        HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-07"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        healthList.addBmi(bmi);","lastModifiedDate":"2024-04-07"},{"lineNumber":106,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"2024-03-19\"","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 22.86\"","lastModifiedDate":"2024-03-19"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"                + \"Great! You\u0027re within normal range.\"","lastModifiedDate":"2024-03-18"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"syj02"},"content":"        HealthList.printLatestBmi();","lastModifiedDate":"2024-04-11"},{"lineNumber":114,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-18"},{"lineNumber":115,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"     * Test the behaviour of printing Bmi history.","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":122,"author":{"gitId":"syj02"},"content":"    void printBmiHistory_twoBmiObjects_printsCorrectBmiHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"        new Bmi(\"1.75\", \"80.0\", \"20-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"        new Bmi(\"1.80\", \"74.0\", \"21-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":125,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"Your BMI history:\"","lastModifiedDate":"2024-04-04"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-04"},{"lineNumber":129,"author":{"gitId":"syj02"},"content":"                + \"1. \"","lastModifiedDate":"2024-04-09"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"                + \"2024-03-21\"","lastModifiedDate":"2024-03-19"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 22.84\"","lastModifiedDate":"2024-03-19"},{"lineNumber":133,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":134,"author":{"gitId":"syj02"},"content":"                + \"Great! You\u0027re within normal range.\"","lastModifiedDate":"2024-03-19"},{"lineNumber":135,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":136,"author":{"gitId":"syj02"},"content":"                + \"2. \"","lastModifiedDate":"2024-04-09"},{"lineNumber":137,"author":{"gitId":"syj02"},"content":"                + \"2024-03-20\"","lastModifiedDate":"2024-04-09"},{"lineNumber":138,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":139,"author":{"gitId":"syj02"},"content":"                + \"Your BMI is 26.12\"","lastModifiedDate":"2024-04-09"},{"lineNumber":140,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":141,"author":{"gitId":"syj02"},"content":"                + \"You\u0027re overweight.\"","lastModifiedDate":"2024-04-09"},{"lineNumber":142,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":143,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":144,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":145,"author":{"gitId":"syj02"},"content":"        HealthList.printBmiHistory();","lastModifiedDate":"2024-04-11"},{"lineNumber":146,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":147,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of bmi with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one bmi entry left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"    void deleteBmi_properList_listOfSizeOne() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"        new Bmi(\"1.75\", \"80.0\", \"20-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"        new Bmi(\"1.80\", \"74.0\", \"21-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"        HealthList.deleteBmi(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, HealthList.getBmisSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of bmi with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"syj02"},"content":"    void deleteBmi_emptyList_throwsCustomExceptions() {","lastModifiedDate":"2024-04-11"},{"lineNumber":172,"author":{"gitId":"syj02"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-04-11"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deleteBmi(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of bmi with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"    void deleteBmi_properListInvalidIndex_throwOutOfBoundsForBmi() {","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"80.0\", \"20-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"        HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-07"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        healthList.addBmi(firstBmi);","lastModifiedDate":"2024-04-07"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deleteBmi(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":190,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":191,"author":{"gitId":"syj02"},"content":"     * Test deleting of bmi with invalid negative index.","lastModifiedDate":"2024-04-11"},{"lineNumber":192,"author":{"gitId":"syj02"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-04-11"},{"lineNumber":193,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":194,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":195,"author":{"gitId":"syj02"},"content":"    void deleteBmi_negativeIndex_throwOutOfBoundsForBmi() {","lastModifiedDate":"2024-04-11"},{"lineNumber":196,"author":{"gitId":"syj02"},"content":"        int invalidIndex \u003d -1;","lastModifiedDate":"2024-04-11"},{"lineNumber":197,"author":{"gitId":"syj02"},"content":"        CustomExceptions.OutOfBounds exception \u003d assertThrows(","lastModifiedDate":"2024-04-11"},{"lineNumber":198,"author":{"gitId":"syj02"},"content":"                CustomExceptions.OutOfBounds.class,","lastModifiedDate":"2024-04-11"},{"lineNumber":199,"author":{"gitId":"syj02"},"content":"                () -\u003e HealthList.deleteBmi(invalidIndex)","lastModifiedDate":"2024-04-11"},{"lineNumber":200,"author":{"gitId":"syj02"},"content":"        );","lastModifiedDate":"2024-04-11"},{"lineNumber":201,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"\\u001b[31mOut of Bounds Error: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":202,"author":{"gitId":"syj02"},"content":"                + ErrorConstant.BMI_EMPTY_ERROR","lastModifiedDate":"2024-04-11"},{"lineNumber":203,"author":{"gitId":"syj02"},"content":"                + \"\\u001b[0m\";","lastModifiedDate":"2024-04-11"},{"lineNumber":204,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, exception.getMessage());","lastModifiedDate":"2024-04-11"},{"lineNumber":205,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":206,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"j013n3":67,"JustinSoh":9,"rouvinerh":37,"syj02":93}},{"path":"src/test/java/health/PeriodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-04-07"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"import utility.Parser;","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"class PeriodTest {","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-25"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"    void setUpStreams() {","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"    @AfterEach","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-25"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-25"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of toString in Period class.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"    void calculatePeriodLength_printsCorrectPeriod() {","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        Period period \u003d new Period(\"09-03-2022\", \"16-03-2022\");","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"                + period.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"                + period.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"                + period.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"        System.out.println(period);","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the showLatestPeriod method and whether it prints","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     * the last Period object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"    void printLatestPeriod_twoPeriodInputs_printCorrectPeriod() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"09-02-2023\", \"16-02-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"        Period secondPeriod \u003d new Period(\"09-03-2023\", \"16-03-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"        HealthList.printLatestPeriod();","lastModifiedDate":"2024-04-11"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":83,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the showPeriodHistory method and whether it prints","lastModifiedDate":"2024-03-28"},{"lineNumber":84,"author":{"gitId":"j013n3"},"content":"     * the period history correctly.","lastModifiedDate":"2024-03-28"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"    void showPeriodHistory_twoInputs_printCorrectPeriodHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"        Period firstPeriod \u003d new Period(\"10-04-2023\", \"16-04-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"        Period secondPeriod \u003d new Period(\"09-05-2023\", \"16-05-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"Your Period history:\"","lastModifiedDate":"2024-04-04"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"                + \"1. Period Start: \"","lastModifiedDate":"2024-04-09"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getStartDate()","lastModifiedDate":"2024-04-09"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-04-09"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getEndDate()","lastModifiedDate":"2024-04-09"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-04-09"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getPeriodLength()","lastModifiedDate":"2024-04-09"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"                + \"2. Period Start: \"","lastModifiedDate":"2024-04-09"},{"lineNumber":103,"author":{"gitId":"j013n3"},"content":"                + firstPeriod.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":105,"author":{"gitId":"syj02"},"content":"                + firstPeriod.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"syj02"},"content":"                + firstPeriod.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":110,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"j013n3"},"content":"                + \"Cycle Length: \"","lastModifiedDate":"2024-03-25"},{"lineNumber":112,"author":{"gitId":"j013n3"},"content":"                + firstPeriod.cycleLength","lastModifiedDate":"2024-03-25"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"syj02"},"content":"        HealthList.printPeriodHistory();","lastModifiedDate":"2024-04-11"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of periods with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one periods entry left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"    void deletePeriod_properList_listOfSizeOne() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"        new Period(\"10-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"        new Period(\"09-05-2024\", \"16-05-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"        HealthList.deletePeriod(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, HealthList.getPeriodsSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of period with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"syj02"},"content":"    void deletePeriod_emptyList_throwsCustomExceptions() {","lastModifiedDate":"2024-04-11"},{"lineNumber":142,"author":{"gitId":"syj02"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-04-11"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deletePeriod(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of period with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"j013n3"},"content":"    void deletePeriod_properListInvalidIndex_throwOutOfBoundsForBmi() {","lastModifiedDate":"2024-03-28"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"10-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deletePeriod(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the predictNextPeriodStartDate function and whether it prints","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"     * correct predicted start date.","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"syj02"},"content":"    void predictNextPeriodStartDate_sufficientInputs_printCorrectPredictedDate() throws CustomExceptions.OutOfBounds{","lastModifiedDate":"2024-04-09"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"        HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-07"},{"lineNumber":165,"author":{"gitId":"syj02"},"content":"        Period firstPeriod \u003d new Period(\"09-12-2023\", \"16-12-2023\");","lastModifiedDate":"2024-04-09"},{"lineNumber":166,"author":{"gitId":"syj02"},"content":"        Period secondPeriod \u003d new Period(\"09-01-2024\", \"16-01-2024\");","lastModifiedDate":"2024-04-09"},{"lineNumber":167,"author":{"gitId":"syj02"},"content":"        Period thirdPeriod \u003d new Period(\"10-02-2024\", \"16-02-2024\");","lastModifiedDate":"2024-04-09"},{"lineNumber":168,"author":{"gitId":"syj02"},"content":"        Period fourthPeriod \u003d new Period(\"09-03-2024\", \"14-03-2024\");","lastModifiedDate":"2024-04-09"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"syj02"},"content":"        long expectedCycleLength \u003d (31+ 32 + 28) / HealthConstant.LATEST_THREE_CYCLE_LENGTHS;","lastModifiedDate":"2024-04-09"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"        LocalDate expected \u003d fourthPeriod.getStartDate().plusDays(expectedCycleLength);","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"        LocalDate result \u003d HealthList.predictNextPeriodStartDate();","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the printNextCyclePrediction function and whether it prints","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"     * the predicted date with period is late message.","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"    void printNextCyclePrediction_afterToday_printPeriodIsLate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"        LocalDate predictedDate \u003d today.minusDays(5);","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"j013n3"},"content":"        String expected \u003d HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"j013n3"},"content":"                + predictedDate","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"j013n3"},"content":"                + HealthConstant.PERIOD_IS_LATE","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"j013n3"},"content":"                + \"5 \"","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"j013n3"},"content":"                + HealthConstant.DAYS_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":190,"author":{"gitId":"j013n3"},"content":"                + UiConstant.FULL_STOP","lastModifiedDate":"2024-04-08"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-07"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.PARTITION_LINE","lastModifiedDate":"2024-04-07"},{"lineNumber":193,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-25"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":195,"author":{"gitId":"j013n3"},"content":"        Period.printNextCyclePrediction(predictedDate);","lastModifiedDate":"2024-03-25"},{"lineNumber":196,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-25"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the printNextCyclePrediction function and whether it prints","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"     * the predicted date and the number of days to predicted date.","lastModifiedDate":"2024-03-25"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"    void printNextCyclePrediction_beforeToday_printNumberOfDaysToPredictedDate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"j013n3"},"content":"        LocalDate predictedDate \u003d today.plusDays(10);","lastModifiedDate":"2024-03-25"},{"lineNumber":207,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":208,"author":{"gitId":"j013n3"},"content":"        String expected \u003d HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":209,"author":{"gitId":"j013n3"},"content":"                + predictedDate","lastModifiedDate":"2024-03-25"},{"lineNumber":210,"author":{"gitId":"j013n3"},"content":"                + \", in 10 \"","lastModifiedDate":"2024-03-25"},{"lineNumber":211,"author":{"gitId":"j013n3"},"content":"                + HealthConstant.DAYS_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":212,"author":{"gitId":"j013n3"},"content":"                + UiConstant.FULL_STOP","lastModifiedDate":"2024-04-08"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-07"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.PARTITION_LINE","lastModifiedDate":"2024-04-07"},{"lineNumber":215,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-25"},{"lineNumber":216,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":217,"author":{"gitId":"j013n3"},"content":"        Period.printNextCyclePrediction(predictedDate);","lastModifiedDate":"2024-03-25"},{"lineNumber":218,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-25"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":220,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":221,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":222,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the printLatestThreeCycles method and whether it prints","lastModifiedDate":"2024-03-28"},{"lineNumber":223,"author":{"gitId":"j013n3"},"content":"     * the latest three period objects only.","lastModifiedDate":"2024-03-28"},{"lineNumber":224,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":225,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":226,"author":{"gitId":"j013n3"},"content":"    void printLatestThreeCycles_fourInputs_printsThreePeriodObjectsOnly() {","lastModifiedDate":"2024-03-28"},{"lineNumber":227,"author":{"gitId":"syj02"},"content":"        HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-09"},{"lineNumber":228,"author":{"gitId":"j013n3"},"content":"        Period firstPeriod \u003d new Period(\"09-01-2024\", \"16-01-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":229,"author":{"gitId":"j013n3"},"content":"        Period secondPeriod \u003d new Period(\"10-02-2024\", \"16-02-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":230,"author":{"gitId":"j013n3"},"content":"        Period thirdPeriod \u003d new Period(\"09-03-2024\", \"14-03-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":231,"author":{"gitId":"j013n3"},"content":"        Period fourthPeriod \u003d new Period(\"09-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":232,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE","lastModifiedDate":"2024-04-07"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-07"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"                + \"Period Start: \"","lastModifiedDate":"2024-04-07"},{"lineNumber":236,"author":{"gitId":"syj02"},"content":"                + fourthPeriod.getStartDate()","lastModifiedDate":"2024-04-09"},{"lineNumber":237,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":238,"author":{"gitId":"syj02"},"content":"                + fourthPeriod.getEndDate()","lastModifiedDate":"2024-04-09"},{"lineNumber":239,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":240,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":241,"author":{"gitId":"syj02"},"content":"                + fourthPeriod.getPeriodLength()","lastModifiedDate":"2024-04-09"},{"lineNumber":242,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":243,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":244,"author":{"gitId":"j013n3"},"content":"                + \"Period Start: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":245,"author":{"gitId":"j013n3"},"content":"                + thirdPeriod.getStartDate()","lastModifiedDate":"2024-03-28"},{"lineNumber":246,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":247,"author":{"gitId":"syj02"},"content":"                + thirdPeriod.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":248,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":249,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":250,"author":{"gitId":"syj02"},"content":"                + thirdPeriod.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":251,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":252,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":253,"author":{"gitId":"j013n3"},"content":"                + \"Cycle Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":254,"author":{"gitId":"j013n3"},"content":"                + thirdPeriod.cycleLength","lastModifiedDate":"2024-03-28"},{"lineNumber":255,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":256,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":257,"author":{"gitId":"j013n3"},"content":"                + \"Period Start: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":258,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getStartDate()","lastModifiedDate":"2024-04-09"},{"lineNumber":259,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":260,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getEndDate()","lastModifiedDate":"2024-04-09"},{"lineNumber":261,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":262,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":263,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getPeriodLength()","lastModifiedDate":"2024-04-09"},{"lineNumber":264,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":265,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-09"},{"lineNumber":266,"author":{"gitId":"syj02"},"content":"                + \"Cycle Length: \"","lastModifiedDate":"2024-04-09"},{"lineNumber":267,"author":{"gitId":"syj02"},"content":"                + secondPeriod.cycleLength","lastModifiedDate":"2024-04-09"},{"lineNumber":268,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":269,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-28"},{"lineNumber":270,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":271,"author":{"gitId":"j013n3"},"content":"        HealthList.printLatestThreeCycles();","lastModifiedDate":"2024-03-28"},{"lineNumber":272,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":273,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":274,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":275,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":276,"author":{"gitId":"syj02"},"content":"     * Test get period with out of bounds index.","lastModifiedDate":"2024-04-11"},{"lineNumber":277,"author":{"gitId":"syj02"},"content":"     * Expected behaviour is for null return.","lastModifiedDate":"2024-04-11"},{"lineNumber":278,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":279,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":280,"author":{"gitId":"syj02"},"content":"    void getPeriod_emptyPeriodList_expectNull() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":281,"author":{"gitId":"syj02"},"content":"        HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-11"},{"lineNumber":282,"author":{"gitId":"syj02"},"content":"        Period period \u003d new Period(\"09-01-2024\", \"16-01-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":283,"author":{"gitId":"syj02"},"content":"        Period result \u003d healthList.getPeriod(1);","lastModifiedDate":"2024-04-11"},{"lineNumber":284,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":285,"author":{"gitId":"syj02"},"content":"        assertEquals(null, result);","lastModifiedDate":"2024-04-11"},{"lineNumber":286,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":287,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":288,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":289,"author":{"gitId":"syj02"},"content":"     * Test deleting of period with invalid negative index.","lastModifiedDate":"2024-04-11"},{"lineNumber":290,"author":{"gitId":"syj02"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-04-11"},{"lineNumber":291,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":292,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":293,"author":{"gitId":"syj02"},"content":"    void deletePeriod_negativeIndex_throwOutOfBoundsForPeriod() {","lastModifiedDate":"2024-04-11"},{"lineNumber":294,"author":{"gitId":"syj02"},"content":"        int invalidIndex \u003d -1;","lastModifiedDate":"2024-04-11"},{"lineNumber":295,"author":{"gitId":"syj02"},"content":"        CustomExceptions.OutOfBounds exception \u003d assertThrows(","lastModifiedDate":"2024-04-11"},{"lineNumber":296,"author":{"gitId":"syj02"},"content":"                CustomExceptions.OutOfBounds.class,","lastModifiedDate":"2024-04-11"},{"lineNumber":297,"author":{"gitId":"syj02"},"content":"                () -\u003e HealthList.deletePeriod(invalidIndex)","lastModifiedDate":"2024-04-11"},{"lineNumber":298,"author":{"gitId":"syj02"},"content":"        );","lastModifiedDate":"2024-04-11"},{"lineNumber":299,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"\\u001b[31mOut of Bounds Error: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":300,"author":{"gitId":"syj02"},"content":"                + ErrorConstant.PERIOD_EMPTY_ERROR","lastModifiedDate":"2024-04-11"},{"lineNumber":301,"author":{"gitId":"syj02"},"content":"                + \"\\u001b[0m\";","lastModifiedDate":"2024-04-11"},{"lineNumber":302,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, exception.getMessage());","lastModifiedDate":"2024-04-11"},{"lineNumber":303,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":304,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":305,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":306,"author":{"gitId":"syj02"},"content":"     * Test prediction of period with empty period list.","lastModifiedDate":"2024-04-11"},{"lineNumber":307,"author":{"gitId":"syj02"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-04-11"},{"lineNumber":308,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":309,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":310,"author":{"gitId":"syj02"},"content":"    void predictNextPeriodStartDate_emptyPeriodList_throwOutOfBoundsForPeriod() {","lastModifiedDate":"2024-04-11"},{"lineNumber":311,"author":{"gitId":"syj02"},"content":"        int invalidIndex \u003d -1;","lastModifiedDate":"2024-04-11"},{"lineNumber":312,"author":{"gitId":"syj02"},"content":"        CustomExceptions.OutOfBounds exception \u003d assertThrows(","lastModifiedDate":"2024-04-11"},{"lineNumber":313,"author":{"gitId":"syj02"},"content":"                CustomExceptions.OutOfBounds.class,","lastModifiedDate":"2024-04-11"},{"lineNumber":314,"author":{"gitId":"syj02"},"content":"                () -\u003e HealthList.predictNextPeriodStartDate()","lastModifiedDate":"2024-04-11"},{"lineNumber":315,"author":{"gitId":"syj02"},"content":"        );","lastModifiedDate":"2024-04-11"},{"lineNumber":316,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"\\u001b[31mOut of Bounds Error: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":317,"author":{"gitId":"syj02"},"content":"                + ErrorConstant.PERIOD_EMPTY_ERROR","lastModifiedDate":"2024-04-11"},{"lineNumber":318,"author":{"gitId":"syj02"},"content":"                + \"\\u001b[0m\";","lastModifiedDate":"2024-04-11"},{"lineNumber":319,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, exception.getMessage());","lastModifiedDate":"2024-04-11"},{"lineNumber":320,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":321,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":322,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":323,"author":{"gitId":"syj02"},"content":"     * Test Period constructor without end date.","lastModifiedDate":"2024-04-11"},{"lineNumber":324,"author":{"gitId":"syj02"},"content":"     * Expected behaviour is to add a Period object without end date.","lastModifiedDate":"2024-04-11"},{"lineNumber":325,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":326,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":327,"author":{"gitId":"syj02"},"content":"    public void periodConstructor_expectCreatePeriodWithoutEndDate() {","lastModifiedDate":"2024-04-11"},{"lineNumber":328,"author":{"gitId":"syj02"},"content":"        HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-11"},{"lineNumber":329,"author":{"gitId":"syj02"},"content":"        Period period \u003d new Period(\"03-04-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":330,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":331,"author":{"gitId":"syj02"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-11"},{"lineNumber":332,"author":{"gitId":"syj02"},"content":"        assertEquals(parser.parseDate(\"03-04-2024\"), period.getStartDate());","lastModifiedDate":"2024-04-11"},{"lineNumber":333,"author":{"gitId":"syj02"},"content":"        assertNull(period.getEndDate());","lastModifiedDate":"2024-04-11"},{"lineNumber":334,"author":{"gitId":"syj02"},"content":"        assertEquals(1, period.getPeriodLength());","lastModifiedDate":"2024-04-11"},{"lineNumber":335,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":336,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":337,"author":{"gitId":"syj02"},"content":"                + period.getStartDate()","lastModifiedDate":"2024-04-11"},{"lineNumber":338,"author":{"gitId":"syj02"},"content":"                + \" Period End: NA\"","lastModifiedDate":"2024-04-11"},{"lineNumber":339,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":340,"author":{"gitId":"syj02"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":341,"author":{"gitId":"syj02"},"content":"                + period.getPeriodLength()","lastModifiedDate":"2024-04-11"},{"lineNumber":342,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":343,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":344,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":345,"author":{"gitId":"syj02"},"content":"        System.out.println(period);","lastModifiedDate":"2024-04-11"},{"lineNumber":346,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":347,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":348,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":349,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":350,"author":{"gitId":"syj02"},"content":"     * Test update end date of Period object without an end date.","lastModifiedDate":"2024-04-11"},{"lineNumber":351,"author":{"gitId":"syj02"},"content":"     * Expected behaviour is to update the end date of the Period object.","lastModifiedDate":"2024-04-11"},{"lineNumber":352,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":353,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":354,"author":{"gitId":"syj02"},"content":"    public void updateEndDate_expectUpdatePeriodWithEndDate () {","lastModifiedDate":"2024-04-11"},{"lineNumber":355,"author":{"gitId":"syj02"},"content":"        HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-11"},{"lineNumber":356,"author":{"gitId":"syj02"},"content":"        Period period \u003d new Period(\"03-04-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":357,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":358,"author":{"gitId":"syj02"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-11"},{"lineNumber":359,"author":{"gitId":"syj02"},"content":"        assertEquals(parser.parseDate(\"03-04-2024\"), period.getStartDate());","lastModifiedDate":"2024-04-11"},{"lineNumber":360,"author":{"gitId":"syj02"},"content":"        assertNull(period.getEndDate());","lastModifiedDate":"2024-04-11"},{"lineNumber":361,"author":{"gitId":"syj02"},"content":"        assertEquals(1, period.getPeriodLength());","lastModifiedDate":"2024-04-11"},{"lineNumber":362,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":363,"author":{"gitId":"syj02"},"content":"        period.updateEndDate(\"05-04-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":364,"author":{"gitId":"syj02"},"content":"        assertEquals(parser.parseDate(\"05-04-2024\"), period.getEndDate());","lastModifiedDate":"2024-04-11"},{"lineNumber":365,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":366,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":367,"author":{"gitId":"syj02"},"content":"                + period.getStartDate()","lastModifiedDate":"2024-04-11"},{"lineNumber":368,"author":{"gitId":"syj02"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":369,"author":{"gitId":"syj02"},"content":"                + period.getEndDate()","lastModifiedDate":"2024-04-11"},{"lineNumber":370,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-11"},{"lineNumber":371,"author":{"gitId":"syj02"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":372,"author":{"gitId":"syj02"},"content":"                + period.getPeriodLength()","lastModifiedDate":"2024-04-11"},{"lineNumber":373,"author":{"gitId":"j013n3"},"content":"                + \" day(s)\"","lastModifiedDate":"2024-04-13"},{"lineNumber":374,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":375,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":376,"author":{"gitId":"syj02"},"content":"        System.out.println(period);","lastModifiedDate":"2024-04-11"},{"lineNumber":377,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":378,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":379,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":380,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":381,"author":{"gitId":"syj02"},"content":"     * Test calculation of length of the period in days when end date is null.","lastModifiedDate":"2024-04-11"},{"lineNumber":382,"author":{"gitId":"syj02"},"content":"     * Expected behaviour is 0 return.","lastModifiedDate":"2024-04-11"},{"lineNumber":383,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":384,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":385,"author":{"gitId":"syj02"},"content":"    void calculatePeriodLength_nullEndDate_expectZeroReturn() {","lastModifiedDate":"2024-04-11"},{"lineNumber":386,"author":{"gitId":"syj02"},"content":"        HealthList healthList \u003d new HealthList();","lastModifiedDate":"2024-04-11"},{"lineNumber":387,"author":{"gitId":"syj02"},"content":"        Period period \u003d new Period(\"03-04-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":388,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":389,"author":{"gitId":"syj02"},"content":"        assertEquals(0, period.calculatePeriodLength());","lastModifiedDate":"2024-04-11"},{"lineNumber":390,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":391,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":392,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":393,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"j013n3":124,"JustinSoh":5,"rouvinerh":55,"syj02":209}},{"path":"src/test/java/helper/TestHelper.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package helper;","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"/**","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":" * Helper class to help with testing","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":" * Contains methods to help create the output string for testing","lastModifiedDate":"2024-04-11"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":" * Methods that starts with add are used when objects of that type is created","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":" * Methods that starts with latest are used when the latest object is printed","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":" * Methods that starts with error are used when an error are thrown","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":" */","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"public class TestHelper {","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"     * Helper method to help create the output string when BMI is added","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"     * @param weight weight of the user","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"     * @param height height of the user","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"     * @param date date of the user in the format yyyy-mm-dd","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"     * @param bmiValue bmi value of the user in 2 decimal places","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"     * @param bmiCategory the category (use the constants in HealthConstant)","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"     * @return String representing the output","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    public static String addBmiOutputString (String weight,","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"                                             String height,","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"                                             String date,","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"                                             double bmiValue,","lastModifiedDate":"2024-04-11"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"                                             String bmiCategory){","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder outputString \u003d new StringBuilder();","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(HealthConstant.BMI_ADDED_MESSAGE_PREFIX);","lastModifiedDate":"2024-04-11"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(height);","lastModifiedDate":"2024-04-11"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(weight);","lastModifiedDate":"2024-04-11"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(date);","lastModifiedDate":"2024-04-11"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(String.format(HealthConstant.PRINT_BMI_FORMAT,","lastModifiedDate":"2024-04-11"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"                date, bmiValue, bmiCategory));","lastModifiedDate":"2024-04-11"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        return outputString.toString();","lastModifiedDate":"2024-04-11"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"     * Helper method to help create the latestString for Period","lastModifiedDate":"2024-04-11"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"     * @param date date of the bmi in the format yyyy-mm-dd","lastModifiedDate":"2024-04-11"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"     * @param bmiValue bmi value of the user in 2 decimal places","lastModifiedDate":"2024-04-11"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"     * @param bmiMessage the category (use the constants in HealthConstant)","lastModifiedDate":"2024-04-11"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"     * @return String representing the output","lastModifiedDate":"2024-04-11"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"    public static String latestBmiOutputString(String date, double bmiValue, String bmiMessage ) {","lastModifiedDate":"2024-04-11"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"        return UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-11"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"                date +","lastModifiedDate":"2024-04-11"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"                \"Your BMI is \" +","lastModifiedDate":"2024-04-11"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"                String.format(\"%.2f\" , bmiValue) +","lastModifiedDate":"2024-04-11"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"                bmiMessage +","lastModifiedDate":"2024-04-11"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-11"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"     * Helper method to help create the output string when Period is added","lastModifiedDate":"2024-04-11"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-11"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"     * @param startDate    start date of the period in the format yyyy-mm-dd","lastModifiedDate":"2024-04-11"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"     * @param endDate      end date of the period in the format yyyy-mm-dd","lastModifiedDate":"2024-04-11"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"     * @param periodLength length of the period in days","lastModifiedDate":"2024-04-11"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"     * @return String representing the output","lastModifiedDate":"2024-04-11"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"    public static String addPeriodOutputString (String startDate,","lastModifiedDate":"2024-04-11"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"                                          String endDate,","lastModifiedDate":"2024-04-11"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"                                          int periodLength){","lastModifiedDate":"2024-04-11"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder outputString \u003d new StringBuilder();","lastModifiedDate":"2024-04-11"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(HealthConstant.PERIOD_ADDED_MESSAGE_PREFIX);","lastModifiedDate":"2024-04-11"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(startDate);","lastModifiedDate":"2024-04-11"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(endDate);","lastModifiedDate":"2024-04-11"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(String.format(HealthConstant.PRINT_PERIOD_FORMAT,","lastModifiedDate":"2024-04-11"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"                startDate,","lastModifiedDate":"2024-04-11"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"                endDate ,","lastModifiedDate":"2024-04-11"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"                periodLength,","lastModifiedDate":"2024-04-11"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"                HealthConstant.DAYS_MESSAGE));","lastModifiedDate":"2024-04-11"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"        if (!HealthConstant.PERIOD_TOO_LONG_MESSAGE.isBlank()) {","lastModifiedDate":"2024-04-11"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"            outputString.append(ErrorConstant.COLOR_HEADING +","lastModifiedDate":"2024-04-11"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"                    HealthConstant.PERIOD_TOO_LONG_MESSAGE +","lastModifiedDate":"2024-04-11"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"                    ErrorConstant.COLOR_ENDING);","lastModifiedDate":"2024-04-11"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"            outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-11"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        return outputString.toString();","lastModifiedDate":"2024-04-11"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"     * Helper method to help create the latestString for Period","lastModifiedDate":"2024-04-11"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"     * @param startDate start date of the period in the format yyyy-mm-dd","lastModifiedDate":"2024-04-11"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"     * @param endDate end date of the period in the format yyyy-mm-dd","lastModifiedDate":"2024-04-11"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"     * @param periodLength length of the period in days","lastModifiedDate":"2024-04-11"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"     * @param period the \"days\" message (use the constants in HealthConstant)","lastModifiedDate":"2024-04-11"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"     * @return String representing the output","lastModifiedDate":"2024-04-11"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"    public static String latestPeriodOutputString(String startDate, String endDate, int periodLength, String period) {","lastModifiedDate":"2024-04-11"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"        return UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-11"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"                String.format(HealthConstant.PRINT_PERIOD_FORMAT,","lastModifiedDate":"2024-04-11"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"                        startDate,","lastModifiedDate":"2024-04-11"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"                        endDate,","lastModifiedDate":"2024-04-11"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"                        periodLength,","lastModifiedDate":"2024-04-11"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"                        period) +","lastModifiedDate":"2024-04-11"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-11"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"     * Helper method to help create the output string when Appointment is added","lastModifiedDate":"2024-04-11"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"     * @param date date of the appointment in the format yyyy-mm-dd","lastModifiedDate":"2024-04-11"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"     * @param time time of the appointment in the format hh:mm","lastModifiedDate":"2024-04-11"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"     * @param description description of the appointment","lastModifiedDate":"2024-04-11"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"     * @return String representing the output","lastModifiedDate":"2024-04-11"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"    public static String addAppointmentString(String date, String time, String description) {","lastModifiedDate":"2024-04-11"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder outputString \u003d new StringBuilder();","lastModifiedDate":"2024-04-11"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(HealthConstant.APPOINTMENT_ADDED_MESSAGE_PREFIX);","lastModifiedDate":"2024-04-11"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(date);","lastModifiedDate":"2024-04-11"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(time);","lastModifiedDate":"2024-04-11"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(description);","lastModifiedDate":"2024-04-11"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(String.format(HealthConstant.PRINT_APPOINTMENT_FORMAT, date, time, description));","lastModifiedDate":"2024-04-11"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"        outputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"        return outputString.toString();","lastModifiedDate":"2024-04-11"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"     * Helper method to help create the latestString for Appointment","lastModifiedDate":"2024-04-11"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"     * @param date date of the appointment in the format yyyy-mm-dd","lastModifiedDate":"2024-04-11"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"     * @param time time of the appointment in the format hh:mm","lastModifiedDate":"2024-04-11"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"     * @param description description of the appointment","lastModifiedDate":"2024-04-11"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"     * @return String representing the output","lastModifiedDate":"2024-04-11"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"    public static String latestAppointmentOutputString(String date, String time, String description) {","lastModifiedDate":"2024-04-11"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"        return UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-11"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"                String.format(HealthConstant.PRINT_APPOINTMENT_FORMAT, date, time, description) +","lastModifiedDate":"2024-04-11"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-11"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"    public static String errorInvalidInputString(String errorString) {","lastModifiedDate":"2024-04-11"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        return ErrorConstant.COLOR_HEADING +","lastModifiedDate":"2024-04-11"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"                \"Exception Caught!\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_HEADING +","lastModifiedDate":"2024-04-11"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.INVALID_INPUT_HEADER +","lastModifiedDate":"2024-04-11"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"                errorString +","lastModifiedDate":"2024-04-11"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_ENDING +","lastModifiedDate":"2024-04-11"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_ENDING +","lastModifiedDate":"2024-04-11"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"    public static String errorOutOfBoundsString(String errorString) {","lastModifiedDate":"2024-04-11"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        return ErrorConstant.COLOR_HEADING +","lastModifiedDate":"2024-04-11"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"                \"Exception Caught!\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_HEADING +","lastModifiedDate":"2024-04-11"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.OUT_OF_BOUND_HEADER +","lastModifiedDate":"2024-04-11"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"                errorString +","lastModifiedDate":"2024-04-11"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_ENDING +","lastModifiedDate":"2024-04-11"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_ENDING +","lastModifiedDate":"2024-04-11"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"     * Used to get the invalid exception string for invalid command (without the exception header)","lastModifiedDate":"2024-04-11"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"     * @param errorString to be printed","lastModifiedDate":"2024-04-11"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"     * @return String","lastModifiedDate":"2024-04-11"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"    public static String errorInvalidCommandString(String errorString) {","lastModifiedDate":"2024-04-11"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"        return ErrorConstant.COLOR_HEADING +","lastModifiedDate":"2024-04-11"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"                \"Exception Caught!\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"                errorString +","lastModifiedDate":"2024-04-11"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_ENDING +","lastModifiedDate":"2024-04-11"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":210,"author":{"gitId":"JustinSoh"},"content":"    public static String errorInsufficientInput(String errorString){","lastModifiedDate":"2024-04-11"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"        return ErrorConstant.COLOR_HEADING +","lastModifiedDate":"2024-04-11"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"                \"Exception Caught!\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_HEADING +","lastModifiedDate":"2024-04-11"},{"lineNumber":215,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.INSUFFICIENT_INPUT_HEADER +","lastModifiedDate":"2024-04-11"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"                errorString +","lastModifiedDate":"2024-04-11"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_ENDING +","lastModifiedDate":"2024-04-11"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.COLOR_ENDING +","lastModifiedDate":"2024-04-11"},{"lineNumber":219,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":220,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"    public static String printGreetingsFoundString(String name){","lastModifiedDate":"2024-04-11"},{"lineNumber":223,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2024-04-11"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"        output.append(UiConstant.FILE_FOUND_MESSAGE);","lastModifiedDate":"2024-04-11"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"        output.append(name);","lastModifiedDate":"2024-04-11"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"        output.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"        output.append(UiConstant.SUCCESSFUL_LOAD);","lastModifiedDate":"2024-04-11"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"        output.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"        output.append(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"        output.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"        return output.toString();","lastModifiedDate":"2024-04-11"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"    public static String printGreetingNotFoundString(String name){","lastModifiedDate":"2024-04-11"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2024-04-11"},{"lineNumber":236,"author":{"gitId":"JustinSoh"},"content":"        output.append(UiConstant.FILE_MISSING_MESSAGE);","lastModifiedDate":"2024-04-11"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"        output.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"        output.append(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-04-11"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"        output.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"        return output.toString();","lastModifiedDate":"2024-04-11"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-04-11"}],"authorContributionMap":{"JustinSoh":242}},{"path":"src/test/java/seedu/pulsepilot/PulsePilotTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package seedu.pulsepilot;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"class PulsePilotTest {","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"rouvinerh":2,"-":10}},{"path":"src/test/java/storage/DataFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"//@@author L5-Z","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"package storage;","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import health.Appointment;","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import health.Bmi;","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import health.HealthList;","lastModifiedDate":"2024-04-08"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import health.Period;","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-04-07"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-04-07"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"import workouts.Gym;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"import workouts.Run;","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import workouts.Workout;","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"import workouts.WorkoutLists;","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import java.io.File;","lastModifiedDate":"2024-04-07"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"import java.io.IOException;","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"import java.util.List;","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"import java.security.NoSuchAlgorithmException;","lastModifiedDate":"2024-04-07"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-07"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-04-07"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2024-04-07"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"public class DataFileTest {","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"    private final String testDataFilePath \u003d \"./test_data.txt\";","lastModifiedDate":"2024-04-08"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"    private final String testHashFilePath \u003d \"./test_hash.txt\";","lastModifiedDate":"2024-04-08"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    private final String originalDataFilePath \u003d \"./pulsepilot_data.txt\";","lastModifiedDate":"2024-04-08"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"    private final String originalHashFilePath \u003d \"./pulsepilot_hash.txt\";","lastModifiedDate":"2024-04-08"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"     * Sets up the test environment by setting the file paths to the test files.","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"    @BeforeEach","lastModifiedDate":"2024-04-07"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"    void setUp() {","lastModifiedDate":"2024-04-07"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"        // Set the file paths to the test files","lastModifiedDate":"2024-04-07"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"        UiConstant.dataFilePath \u003d testDataFilePath;","lastModifiedDate":"2024-04-08"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"        UiConstant.saveFile \u003d new File(testDataFilePath);","lastModifiedDate":"2024-04-08"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"        UiConstant.hashFilePath \u003d testHashFilePath;","lastModifiedDate":"2024-04-08"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"     * Tears down the test environment by deleting the test files and resetting the file paths.","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"    @AfterEach","lastModifiedDate":"2024-04-07"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"    void tearDown() {","lastModifiedDate":"2024-04-07"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"        // Delete the test files after each test","lastModifiedDate":"2024-04-07"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"        new File(testDataFilePath).delete();","lastModifiedDate":"2024-04-08"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"        new File(testHashFilePath).delete();","lastModifiedDate":"2024-04-08"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"        // Reset the file paths","lastModifiedDate":"2024-04-07"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"        UiConstant.dataFilePath \u003d originalDataFilePath;","lastModifiedDate":"2024-04-08"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"        UiConstant.saveFile \u003d new File(originalDataFilePath);","lastModifiedDate":"2024-04-08"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"        UiConstant.hashFilePath \u003d originalHashFilePath;","lastModifiedDate":"2024-04-08"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"     * Cleans up the WorkoutList and HealthList before each test.","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"    private void cleanup(){","lastModifiedDate":"2024-04-08"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"        WorkoutLists.clearWorkoutsRunGym();","lastModifiedDate":"2024-04-12"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-04-08"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-08"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"     * Asserts that the contents of the data file match the expected values.","lastModifiedDate":"2024-04-14"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-14"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"     * @param name                 the user\u0027s name","lastModifiedDate":"2024-04-14"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"     * @param bmiArrayList         the list of BMI entries","lastModifiedDate":"2024-04-14"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"     * @param appointmentArrayList the list of appointments","lastModifiedDate":"2024-04-14"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"     * @param periodArrayList      the list of periods","lastModifiedDate":"2024-04-14"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"     * @param workoutArrayList     the list of workouts","lastModifiedDate":"2024-04-14"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"    private void assertDataFileContents(String name, ArrayList\u003cBmi\u003e bmiArrayList,","lastModifiedDate":"2024-04-07"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"                                        ArrayList\u003cAppointment\u003e appointmentArrayList,","lastModifiedDate":"2024-04-07"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"                                        ArrayList\u003cPeriod\u003e periodArrayList,","lastModifiedDate":"2024-04-07"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"                                        ArrayList\u003cWorkout\u003e workoutArrayList) {","lastModifiedDate":"2024-04-07"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-04-07"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(Path.of(testDataFilePath));","lastModifiedDate":"2024-04-08"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"NAME:\" + name, lines.get(0));","lastModifiedDate":"2024-04-07"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"            int index \u003d 1;","lastModifiedDate":"2024-04-07"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"            for (Bmi bmi : bmiArrayList) {","lastModifiedDate":"2024-04-07"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"                assertEquals(\"BMI:\" + bmi.getHeight() + \":\" + bmi.getWeight() + \":\" + bmi.getBmiValue() + \":\" +","lastModifiedDate":"2024-04-07"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"                        bmi.getDate(), lines.get(index++));","lastModifiedDate":"2024-04-07"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-07"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"            for (Appointment appointment : appointmentArrayList) {","lastModifiedDate":"2024-04-07"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"                assertEquals(\"APPOINTMENT:\" + appointment.getDate() + \":\" + appointment.getTime() + \":\" +","lastModifiedDate":"2024-04-07"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"                        appointment.getDescription(), lines.get(index++));","lastModifiedDate":"2024-04-07"},{"lineNumber":101,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-07"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"            for (Period period : periodArrayList) {","lastModifiedDate":"2024-04-07"},{"lineNumber":104,"author":{"gitId":"L5-Z"},"content":"                assertEquals(\"PERIOD:\" + period.getStartDate() + \":\" + period.getEndDate() + \":\" +","lastModifiedDate":"2024-04-07"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"                        period.getPeriodLength(), lines.get(index++));","lastModifiedDate":"2024-04-07"},{"lineNumber":106,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-07"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":108,"author":{"gitId":"L5-Z"},"content":"            for (Workout workout : workoutArrayList) {","lastModifiedDate":"2024-04-07"},{"lineNumber":109,"author":{"gitId":"L5-Z"},"content":"                if (workout instanceof Run) {","lastModifiedDate":"2024-04-07"},{"lineNumber":110,"author":{"gitId":"L5-Z"},"content":"                    Run run \u003d (Run) workout;","lastModifiedDate":"2024-04-07"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"                    assertEquals(\"RUN:\" + run.getDistance() + \":\" + run.getTimes() + \":\" + run.getDate(),","lastModifiedDate":"2024-04-07"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"                            lines.get(index++));","lastModifiedDate":"2024-04-07"},{"lineNumber":113,"author":{"gitId":"L5-Z"},"content":"                } else if (workout instanceof Gym) {","lastModifiedDate":"2024-04-07"},{"lineNumber":114,"author":{"gitId":"L5-Z"},"content":"                    Gym gym \u003d (Gym) workout;","lastModifiedDate":"2024-04-07"},{"lineNumber":115,"author":{"gitId":"L5-Z"},"content":"                    assertEquals(gym.toFileString(), lines.get(index++));","lastModifiedDate":"2024-04-07"},{"lineNumber":116,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-04-07"},{"lineNumber":117,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-07"},{"lineNumber":118,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-04-07"},{"lineNumber":119,"author":{"gitId":"L5-Z"},"content":"            fail(\"Error reading data file: \" + e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":120,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-07"},{"lineNumber":121,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":122,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":123,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":124,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":125,"author":{"gitId":"L5-Z"},"content":"     * Tests the saveDataFile method with valid data.","lastModifiedDate":"2024-04-14"},{"lineNumber":126,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the data file is written correctly.","lastModifiedDate":"2024-04-14"},{"lineNumber":127,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":128,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-04"},{"lineNumber":129,"author":{"gitId":"L5-Z"},"content":"    void saveDataFile_validData_writesCorrectly() throws IOException, CustomExceptions.FileWriteError,","lastModifiedDate":"2024-04-04"},{"lineNumber":130,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-04"},{"lineNumber":131,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-04"},{"lineNumber":132,"author":{"gitId":"L5-Z"},"content":"        String name \u003d \"John Doe\";","lastModifiedDate":"2024-04-04"},{"lineNumber":133,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cBmi\u003e bmiArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-04"},{"lineNumber":134,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.70\", \"70.00\", \"01-04-2023\"),","lastModifiedDate":"2024-04-08"},{"lineNumber":135,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.80\", \"80.00\", \"15-04-2023\")","lastModifiedDate":"2024-04-08"},{"lineNumber":136,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-04"},{"lineNumber":137,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-04"},{"lineNumber":138,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"01-05-2023\", \"10:00\", \"Dentist Appointment\"),","lastModifiedDate":"2024-04-04"},{"lineNumber":139,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"15-05-2023\", \"14:30\", \"Doctor\u0027s Checkup\")","lastModifiedDate":"2024-04-04"},{"lineNumber":140,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-04"},{"lineNumber":141,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cPeriod\u003e periodArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-04"},{"lineNumber":142,"author":{"gitId":"L5-Z"},"content":"                new Period(\"01-03-2023\", \"05-03-2023\"),","lastModifiedDate":"2024-04-04"},{"lineNumber":143,"author":{"gitId":"L5-Z"},"content":"                new Period(\"01-04-2023\", \"04-04-2023\")","lastModifiedDate":"2024-04-04"},{"lineNumber":144,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-04"},{"lineNumber":145,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":146,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":147,"author":{"gitId":"L5-Z"},"content":"        Gym newGym \u003d new Gym(\"11-11-1997\");","lastModifiedDate":"2024-04-04"},{"lineNumber":148,"author":{"gitId":"L5-Z"},"content":"        Gym newGym2 \u003d new Gym();","lastModifiedDate":"2024-04-04"},{"lineNumber":149,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"L5-Z"},"content":"            newGym.addStation(\"bench press\", \"4\", \"4\", \"10.0,20.0,30.0,40.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"L5-Z"},"content":"            newGym.addStation(\"squats\", \"4\", \"3\", \"20.0,30.0,40.0,50.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":153,"author":{"gitId":"L5-Z"},"content":"            newGym2.addStation(\"bench press\", \"4\", \"4\", \"10.0,20.0,30.0,40.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":154,"author":{"gitId":"L5-Z"},"content":"            newGym2.addStation(\"squats\", \"4\", \"3\", \"20.0,30.0,40.0,50.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":155,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":156,"author":{"gitId":"L5-Z"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-04-13"},{"lineNumber":157,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":158,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":159,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":160,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cWorkout\u003e workoutArrayList \u003d new ArrayList\u003c\u003e(List.of(","lastModifiedDate":"2024-04-04"},{"lineNumber":161,"author":{"gitId":"L5-Z"},"content":"                new Run(\"30:00\", \"5.00\", \"01-04-2023\"),","lastModifiedDate":"2024-04-12"},{"lineNumber":162,"author":{"gitId":"L5-Z"},"content":"                newGym,","lastModifiedDate":"2024-04-04"},{"lineNumber":163,"author":{"gitId":"L5-Z"},"content":"                newGym2","lastModifiedDate":"2024-04-04"},{"lineNumber":164,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-04"},{"lineNumber":165,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":166,"author":{"gitId":"L5-Z"},"content":"        // Act","lastModifiedDate":"2024-04-04"},{"lineNumber":167,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":168,"author":{"gitId":"L5-Z"},"content":"        int status \u003d dataFile.loadDataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":169,"author":{"gitId":"L5-Z"},"content":"        dataFile.saveDataFile(name, bmiArrayList, appointmentArrayList, periodArrayList, workoutArrayList);","lastModifiedDate":"2024-04-07"},{"lineNumber":170,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":171,"author":{"gitId":"L5-Z"},"content":"        // Assert","lastModifiedDate":"2024-04-04"},{"lineNumber":172,"author":{"gitId":"L5-Z"},"content":"        List\u003cString\u003e lines \u003d Files.readAllLines(Path.of(testDataFilePath));","lastModifiedDate":"2024-04-08"},{"lineNumber":173,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":174,"author":{"gitId":"L5-Z"},"content":"        if (!lines.isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":175,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"NAME:John Doe\", lines.get(0));","lastModifiedDate":"2024-04-04"},{"lineNumber":176,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"BMI:1.70:70.00:24.22:01-04-2023\", lines.get(1));","lastModifiedDate":"2024-04-04"},{"lineNumber":177,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"BMI:1.80:80.00:24.69:15-04-2023\", lines.get(2));","lastModifiedDate":"2024-04-04"},{"lineNumber":178,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"APPOINTMENT:01-05-2023:10.00:Dentist Appointment\", lines.get(3));","lastModifiedDate":"2024-04-04"},{"lineNumber":179,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"APPOINTMENT:15-05-2023:14.30:Doctor\u0027s Checkup\", lines.get(4));","lastModifiedDate":"2024-04-04"},{"lineNumber":180,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"PERIOD:01-03-2023:05-03-2023:5\", lines.get(5));","lastModifiedDate":"2024-04-04"},{"lineNumber":181,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"PERIOD:01-04-2023:04-04-2023:4\", lines.get(6));","lastModifiedDate":"2024-04-04"},{"lineNumber":182,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"RUN:5.00:30.00:01-04-2023\", lines.get(7));","lastModifiedDate":"2024-04-12"},{"lineNumber":183,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"GYM:2:11-11-1997:bench press:4:4:10.0,20.0,30.0,\" +","lastModifiedDate":"2024-04-06"},{"lineNumber":184,"author":{"gitId":"L5-Z"},"content":"                    \"40.0:squats:4:3:20.0,30.0,40.0,50.0\", lines.get(8));","lastModifiedDate":"2024-04-06"},{"lineNumber":185,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"GYM:2:NA:bench press:4:4:10.0,20.0,30.0,40.0:squats:4:3:20.0,30.0,40.0,50.0\",","lastModifiedDate":"2024-04-07"},{"lineNumber":186,"author":{"gitId":"L5-Z"},"content":"                    lines.get(9));","lastModifiedDate":"2024-04-07"},{"lineNumber":187,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":188,"author":{"gitId":"L5-Z"},"content":"            fail(\"Data file is empty\");","lastModifiedDate":"2024-04-04"},{"lineNumber":189,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":190,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":191,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":192,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":193,"author":{"gitId":"L5-Z"},"content":"     * Tests the saveDataFile method with empty data.","lastModifiedDate":"2024-04-14"},{"lineNumber":194,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the data file is written correctly.","lastModifiedDate":"2024-04-14"},{"lineNumber":195,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":196,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-04"},{"lineNumber":197,"author":{"gitId":"L5-Z"},"content":"    void saveDataFile_emptyData_writesCorrectly() throws CustomExceptions.FileWriteError {","lastModifiedDate":"2024-04-12"},{"lineNumber":198,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-04"},{"lineNumber":199,"author":{"gitId":"L5-Z"},"content":"        String name \u003d \"Jane Doe\";","lastModifiedDate":"2024-04-04"},{"lineNumber":200,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cBmi\u003e bmiArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-04"},{"lineNumber":201,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-04"},{"lineNumber":202,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cPeriod\u003e periodArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-04"},{"lineNumber":203,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cWorkout\u003e workoutArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-04"},{"lineNumber":204,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":205,"author":{"gitId":"L5-Z"},"content":"        // Act","lastModifiedDate":"2024-04-07"},{"lineNumber":206,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":207,"author":{"gitId":"L5-Z"},"content":"        int status \u003d dataFile.loadDataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":208,"author":{"gitId":"L5-Z"},"content":"        dataFile.saveDataFile(name, bmiArrayList, appointmentArrayList, periodArrayList, workoutArrayList);","lastModifiedDate":"2024-04-07"},{"lineNumber":209,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":210,"author":{"gitId":"L5-Z"},"content":"        // Assert","lastModifiedDate":"2024-04-07"},{"lineNumber":211,"author":{"gitId":"L5-Z"},"content":"        assertTrue(new File(testDataFilePath).exists());","lastModifiedDate":"2024-04-08"},{"lineNumber":212,"author":{"gitId":"L5-Z"},"content":"        assertTrue(new File(testHashFilePath).exists());","lastModifiedDate":"2024-04-08"},{"lineNumber":213,"author":{"gitId":"L5-Z"},"content":"        assertTrue(new File(testHashFilePath).length() !\u003d 0);","lastModifiedDate":"2024-04-08"},{"lineNumber":214,"author":{"gitId":"L5-Z"},"content":"        assertDataFileContents(name, bmiArrayList, appointmentArrayList, periodArrayList, workoutArrayList);","lastModifiedDate":"2024-04-07"},{"lineNumber":215,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":216,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":217,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":218,"author":{"gitId":"L5-Z"},"content":"     * Tests the loadDataFile method when the data file does not exist.","lastModifiedDate":"2024-04-14"},{"lineNumber":219,"author":{"gitId":"L5-Z"},"content":"     * Verifies that a new file is created.","lastModifiedDate":"2024-04-14"},{"lineNumber":220,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":221,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-07"},{"lineNumber":222,"author":{"gitId":"L5-Z"},"content":"    void loadDataFile_nonExistentFile_createsNew() throws","lastModifiedDate":"2024-04-12"},{"lineNumber":223,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.InvalidInput, CustomExceptions.FileWriteError {","lastModifiedDate":"2024-04-07"},{"lineNumber":224,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-07"},{"lineNumber":225,"author":{"gitId":"L5-Z"},"content":"        String name \u003d \"John Doe\";","lastModifiedDate":"2024-04-07"},{"lineNumber":226,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cBmi\u003e bmiArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":227,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.70\", \"70.00\", \"01-04-2023\"),","lastModifiedDate":"2024-04-08"},{"lineNumber":228,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.80\", \"80.00\", \"15-04-2023\")","lastModifiedDate":"2024-04-08"},{"lineNumber":229,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":230,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":231,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"01-05-2023\", \"10:00\", \"Dentist Appointment\"),","lastModifiedDate":"2024-04-07"},{"lineNumber":232,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"15-05-2023\", \"14:30\", \"Doctor\u0027s Checkup\")","lastModifiedDate":"2024-04-07"},{"lineNumber":233,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":234,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cPeriod\u003e periodArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":235,"author":{"gitId":"L5-Z"},"content":"                new Period(\"01-03-2023\", \"05-03-2023\"),","lastModifiedDate":"2024-04-07"},{"lineNumber":236,"author":{"gitId":"L5-Z"},"content":"                new Period(\"01-04-2023\", \"04-04-2023\")","lastModifiedDate":"2024-04-07"},{"lineNumber":237,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":238,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cWorkout\u003e workoutArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":239,"author":{"gitId":"L5-Z"},"content":"                new Run(\"30:00\", \"5.00\", \"01-04-2023\")","lastModifiedDate":"2024-04-12"},{"lineNumber":240,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":241,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":242,"author":{"gitId":"L5-Z"},"content":"        // Act","lastModifiedDate":"2024-04-07"},{"lineNumber":243,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":244,"author":{"gitId":"L5-Z"},"content":"        int status \u003d dataFile.loadDataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":245,"author":{"gitId":"L5-Z"},"content":"        dataFile.saveDataFile(name, bmiArrayList, appointmentArrayList, periodArrayList, workoutArrayList);","lastModifiedDate":"2024-04-07"},{"lineNumber":246,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":247,"author":{"gitId":"L5-Z"},"content":"        // Assert","lastModifiedDate":"2024-04-07"},{"lineNumber":248,"author":{"gitId":"L5-Z"},"content":"        assertEquals(UiConstant.FILE_NOT_FOUND, status);","lastModifiedDate":"2024-04-07"},{"lineNumber":249,"author":{"gitId":"L5-Z"},"content":"        assertTrue(new File(testDataFilePath).exists());","lastModifiedDate":"2024-04-08"},{"lineNumber":250,"author":{"gitId":"L5-Z"},"content":"        assertTrue(new File(testHashFilePath).exists());","lastModifiedDate":"2024-04-08"},{"lineNumber":251,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":252,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":253,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":254,"author":{"gitId":"L5-Z"},"content":"     * Tests the generateFileHash method with a valid file.","lastModifiedDate":"2024-04-14"},{"lineNumber":255,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the correct hash is generated.","lastModifiedDate":"2024-04-14"},{"lineNumber":256,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":257,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-07"},{"lineNumber":258,"author":{"gitId":"L5-Z"},"content":"    void generateFileHash_validFile_returnsCorrectHash() throws NoSuchAlgorithmException, IOException,","lastModifiedDate":"2024-04-07"},{"lineNumber":259,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.InvalidInput, CustomExceptions.FileWriteError {","lastModifiedDate":"2024-04-07"},{"lineNumber":260,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-07"},{"lineNumber":261,"author":{"gitId":"L5-Z"},"content":"        String name \u003d \"John Doe\";","lastModifiedDate":"2024-04-07"},{"lineNumber":262,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cBmi\u003e bmiArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":263,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.70\", \"70.00\", \"01-04-2023\"),","lastModifiedDate":"2024-04-08"},{"lineNumber":264,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.80\", \"80.00\", \"15-04-2023\")","lastModifiedDate":"2024-04-08"},{"lineNumber":265,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":266,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":267,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"01-05-2023\", \"10:00\", \"Dentist Appointment\"),","lastModifiedDate":"2024-04-07"},{"lineNumber":268,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"15-05-2023\", \"14:30\", \"Doctor\u0027s Checkup\")","lastModifiedDate":"2024-04-07"},{"lineNumber":269,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":270,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cPeriod\u003e periodArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":271,"author":{"gitId":"L5-Z"},"content":"                new Period(\"01-03-2023\", \"05-03-2023\"),","lastModifiedDate":"2024-04-07"},{"lineNumber":272,"author":{"gitId":"L5-Z"},"content":"                new Period(\"01-04-2023\", \"04-04-2023\")","lastModifiedDate":"2024-04-07"},{"lineNumber":273,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":274,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cWorkout\u003e workoutArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":275,"author":{"gitId":"L5-Z"},"content":"                new Run(\"30:00\", \"5.00\", \"01-04-2023\")","lastModifiedDate":"2024-04-12"},{"lineNumber":276,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":277,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":278,"author":{"gitId":"L5-Z"},"content":"        File dataFileName \u003d new File(testDataFilePath);","lastModifiedDate":"2024-04-08"},{"lineNumber":279,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-07"},{"lineNumber":280,"author":{"gitId":"L5-Z"},"content":"        dataFile.saveDataFile(name, bmiArrayList, appointmentArrayList, periodArrayList, workoutArrayList);","lastModifiedDate":"2024-04-07"},{"lineNumber":281,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":282,"author":{"gitId":"L5-Z"},"content":"        // Act","lastModifiedDate":"2024-04-04"},{"lineNumber":283,"author":{"gitId":"L5-Z"},"content":"        String hash \u003d dataFile.generateFileHash(dataFileName);","lastModifiedDate":"2024-04-07"},{"lineNumber":284,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":285,"author":{"gitId":"L5-Z"},"content":"        // Assert","lastModifiedDate":"2024-04-07"},{"lineNumber":286,"author":{"gitId":"L5-Z"},"content":"        assertNotNull(hash);","lastModifiedDate":"2024-04-07"},{"lineNumber":287,"author":{"gitId":"L5-Z"},"content":"        assertFalse(hash.isEmpty());","lastModifiedDate":"2024-04-07"},{"lineNumber":288,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":289,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":290,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":291,"author":{"gitId":"L5-Z"},"content":"     * Tests the loadDataFile method with an existing file.","lastModifiedDate":"2024-04-14"},{"lineNumber":292,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the data is loaded correctly.","lastModifiedDate":"2024-04-14"},{"lineNumber":293,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":294,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-07"},{"lineNumber":295,"author":{"gitId":"L5-Z"},"content":"    void loadDataFile_existingFile_readsCorrectly() throws CustomExceptions.FileReadError,","lastModifiedDate":"2024-04-07"},{"lineNumber":296,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.FileWriteError, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-11"},{"lineNumber":297,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-07"},{"lineNumber":298,"author":{"gitId":"L5-Z"},"content":"        String name \u003d \"John Doe\";","lastModifiedDate":"2024-04-07"},{"lineNumber":299,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cBmi\u003e bmiArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":300,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.80\", \"80.00\", \"15-04-2023\"),","lastModifiedDate":"2024-04-09"},{"lineNumber":301,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.70\", \"70.00\", \"01-04-2023\")","lastModifiedDate":"2024-04-09"},{"lineNumber":302,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":303,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":304,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"01-05-2025\", \"10:00\", \"Dentist Appointment\"),","lastModifiedDate":"2024-04-09"},{"lineNumber":305,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"15-05-2025\", \"14:30\", \"Doctor\u0027s Checkup\")","lastModifiedDate":"2024-04-09"},{"lineNumber":306,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":307,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":308,"author":{"gitId":"L5-Z"},"content":"        // Has additional elements added to ArrayList and will thus be skipped","lastModifiedDate":"2024-04-08"},{"lineNumber":309,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cPeriod\u003e periodArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":310,"author":{"gitId":"L5-Z"},"content":"                new Period (\"08-05-2023\"),","lastModifiedDate":"2024-04-11"},{"lineNumber":311,"author":{"gitId":"L5-Z"},"content":"                new Period(\"01-04-2023\", \"07-04-2023\")","lastModifiedDate":"2024-04-11"},{"lineNumber":312,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":313,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":314,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":315,"author":{"gitId":"L5-Z"},"content":"        Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-04-11"},{"lineNumber":316,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-04-13"},{"lineNumber":317,"author":{"gitId":"L5-Z"},"content":"            gym1.addStation(\"Squat Press\", \"1\", \"50\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":318,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":319,"author":{"gitId":"L5-Z"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-04-13"},{"lineNumber":320,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":321,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cWorkout\u003e workoutArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-07"},{"lineNumber":322,"author":{"gitId":"L5-Z"},"content":"                new Run(\"40:10\", \"10.32\", \"15-03-2024\"),","lastModifiedDate":"2024-04-12"},{"lineNumber":323,"author":{"gitId":"L5-Z"},"content":"                new Run(\"40:10\", \"10.32\"),","lastModifiedDate":"2024-04-12"},{"lineNumber":324,"author":{"gitId":"L5-Z"},"content":"                gym1","lastModifiedDate":"2024-04-11"},{"lineNumber":325,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-07"},{"lineNumber":326,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":327,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-08"},{"lineNumber":328,"author":{"gitId":"L5-Z"},"content":"        int status \u003d dataFile.loadDataFile();","lastModifiedDate":"2024-04-08"},{"lineNumber":329,"author":{"gitId":"L5-Z"},"content":"        dataFile.saveDataFile(name, bmiArrayList, appointmentArrayList, periodArrayList, workoutArrayList);","lastModifiedDate":"2024-04-08"},{"lineNumber":330,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":331,"author":{"gitId":"L5-Z"},"content":"        // Act","lastModifiedDate":"2024-04-07"},{"lineNumber":332,"author":{"gitId":"L5-Z"},"content":"        cleanup();","lastModifiedDate":"2024-04-08"},{"lineNumber":333,"author":{"gitId":"L5-Z"},"content":"        dataFile.readDataFile();","lastModifiedDate":"2024-04-08"},{"lineNumber":334,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":335,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-08"},{"lineNumber":336,"author":{"gitId":"L5-Z"},"content":"        // Assert","lastModifiedDate":"2024-04-04"},{"lineNumber":337,"author":{"gitId":"L5-Z"},"content":"        assertEquals(name, DataFile.userName);","lastModifiedDate":"2024-04-07"},{"lineNumber":338,"author":{"gitId":"L5-Z"},"content":"        assertEquals(Arrays.toString(bmiArrayList.toArray()), Arrays.toString(HealthList.getBmis().toArray()));","lastModifiedDate":"2024-04-08"},{"lineNumber":339,"author":{"gitId":"L5-Z"},"content":"        ","lastModifiedDate":"2024-04-08"},{"lineNumber":340,"author":{"gitId":"L5-Z"},"content":"        assertEquals(Arrays.toString(appointmentArrayList.toArray()),","lastModifiedDate":"2024-04-08"},{"lineNumber":341,"author":{"gitId":"L5-Z"},"content":"                Arrays.toString(HealthList.getAppointments().toArray()));","lastModifiedDate":"2024-04-08"},{"lineNumber":342,"author":{"gitId":"L5-Z"},"content":"        assertEquals(Arrays.toString(periodArrayList.toArray()),","lastModifiedDate":"2024-04-08"},{"lineNumber":343,"author":{"gitId":"L5-Z"},"content":"                Arrays.toString(HealthList.getPeriods().toArray()));","lastModifiedDate":"2024-04-08"},{"lineNumber":344,"author":{"gitId":"L5-Z"},"content":"        assertEquals(Arrays.toString(workoutArrayList.toArray()),","lastModifiedDate":"2024-04-08"},{"lineNumber":345,"author":{"gitId":"L5-Z"},"content":"                Arrays.toString(WorkoutLists.getWorkouts().toArray()));","lastModifiedDate":"2024-04-12"},{"lineNumber":346,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":347,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":348,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":349,"author":{"gitId":"L5-Z"},"content":"     * Tests the verifyIntegrity method with an invalid file.","lastModifiedDate":"2024-04-14"},{"lineNumber":350,"author":{"gitId":"L5-Z"},"content":"     * Expects a FileCreateError exception to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":351,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":352,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":353,"author":{"gitId":"L5-Z"},"content":"    void verifyIntegrity_invalidFileName_expectsFileCreateErrorException() {","lastModifiedDate":"2024-04-11"},{"lineNumber":354,"author":{"gitId":"L5-Z"},"content":"        File testFile \u003d new File(\"\");","lastModifiedDate":"2024-04-11"},{"lineNumber":355,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-11"},{"lineNumber":356,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.FileCreateError.class, () -\u003e dataFile.verifyIntegrity(testFile));","lastModifiedDate":"2024-04-11"},{"lineNumber":357,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":358,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":359,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":360,"author":{"gitId":"L5-Z"},"content":"     * Tests the readHashFromFile method with a valid hash file.","lastModifiedDate":"2024-04-14"},{"lineNumber":361,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the correct hash is read.","lastModifiedDate":"2024-04-14"},{"lineNumber":362,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":363,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":364,"author":{"gitId":"L5-Z"},"content":"    void readHashFromFile_validHashFile_returnsCorrectHash() throws IOException {","lastModifiedDate":"2024-04-12"},{"lineNumber":365,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-12"},{"lineNumber":366,"author":{"gitId":"L5-Z"},"content":"        String expectedHash \u003d \"abc123def456\";","lastModifiedDate":"2024-04-12"},{"lineNumber":367,"author":{"gitId":"L5-Z"},"content":"        File hashFile \u003d new File(testHashFilePath);","lastModifiedDate":"2024-04-12"},{"lineNumber":368,"author":{"gitId":"L5-Z"},"content":"        try (FileWriter writer \u003d new FileWriter(hashFile)) {","lastModifiedDate":"2024-04-12"},{"lineNumber":369,"author":{"gitId":"L5-Z"},"content":"            writer.write(expectedHash);","lastModifiedDate":"2024-04-12"},{"lineNumber":370,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":371,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":372,"author":{"gitId":"L5-Z"},"content":"        // Act","lastModifiedDate":"2024-04-12"},{"lineNumber":373,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-12"},{"lineNumber":374,"author":{"gitId":"L5-Z"},"content":"        String actualHash \u003d dataFile.readHashFromFile(hashFile);","lastModifiedDate":"2024-04-12"},{"lineNumber":375,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":376,"author":{"gitId":"L5-Z"},"content":"        // Assert","lastModifiedDate":"2024-04-12"},{"lineNumber":377,"author":{"gitId":"L5-Z"},"content":"        assertEquals(expectedHash, actualHash);","lastModifiedDate":"2024-04-12"},{"lineNumber":378,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":379,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":380,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":381,"author":{"gitId":"L5-Z"},"content":"     * Tests the processName method with an invalid username.","lastModifiedDate":"2024-04-14"},{"lineNumber":382,"author":{"gitId":"L5-Z"},"content":"     * Expects an InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":383,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":384,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":385,"author":{"gitId":"L5-Z"},"content":"    void processName_invalidUsername_throwsInvalidInputException() {","lastModifiedDate":"2024-04-12"},{"lineNumber":386,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-12"},{"lineNumber":387,"author":{"gitId":"L5-Z"},"content":"        String invalidUsername \u003d \"John~Doe123\";","lastModifiedDate":"2024-04-12"},{"lineNumber":388,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":389,"author":{"gitId":"L5-Z"},"content":"        // Act and Assert","lastModifiedDate":"2024-04-12"},{"lineNumber":390,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-12"},{"lineNumber":391,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e dataFile.processName(invalidUsername));","lastModifiedDate":"2024-04-12"},{"lineNumber":392,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":393,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":394,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":395,"author":{"gitId":"L5-Z"},"content":"     * Tests the processAppointment method with missing appointment details.","lastModifiedDate":"2024-04-14"},{"lineNumber":396,"author":{"gitId":"L5-Z"},"content":"     * Expects an InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":397,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":398,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":399,"author":{"gitId":"L5-Z"},"content":"    void processAppointment_missingAppointmentDetails_throwsInvalidInputException() {","lastModifiedDate":"2024-04-12"},{"lineNumber":400,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-12"},{"lineNumber":401,"author":{"gitId":"L5-Z"},"content":"        String[] input \u003d {\"APPOINTMENT\", \"01-05-2025\", \"10:00\", \"invalid_description~\"};","lastModifiedDate":"2024-04-12"},{"lineNumber":402,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":403,"author":{"gitId":"L5-Z"},"content":"        // Act and Assert","lastModifiedDate":"2024-04-12"},{"lineNumber":404,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-12"},{"lineNumber":405,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e dataFile.processAppointment(input));","lastModifiedDate":"2024-04-12"},{"lineNumber":406,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":407,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":408,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":409,"author":{"gitId":"L5-Z"},"content":"     * Tests the processPeriod method with invalid period input.","lastModifiedDate":"2024-04-14"},{"lineNumber":410,"author":{"gitId":"L5-Z"},"content":"     * Expects an InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":411,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":412,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":413,"author":{"gitId":"L5-Z"},"content":"    void processPeriod_invalidPeriodInput_throwsInvalidInputException() {","lastModifiedDate":"2024-04-12"},{"lineNumber":414,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-12"},{"lineNumber":415,"author":{"gitId":"L5-Z"},"content":"        String[] input \u003d {\"PERIOD\", \"01-04-2023\", \"invalid_date\"};","lastModifiedDate":"2024-04-12"},{"lineNumber":416,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":417,"author":{"gitId":"L5-Z"},"content":"        // Act and Assert","lastModifiedDate":"2024-04-12"},{"lineNumber":418,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-12"},{"lineNumber":419,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e dataFile.processPeriod(input));","lastModifiedDate":"2024-04-12"},{"lineNumber":420,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":421,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":422,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":423,"author":{"gitId":"L5-Z"},"content":"     * Tests the processBmi method with invalid BMI input.","lastModifiedDate":"2024-04-14"},{"lineNumber":424,"author":{"gitId":"L5-Z"},"content":"     * Expects an InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":425,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":426,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":427,"author":{"gitId":"L5-Z"},"content":"    void processBmi_invalidBmiInput_throwsInvalidInputException() {","lastModifiedDate":"2024-04-12"},{"lineNumber":428,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-12"},{"lineNumber":429,"author":{"gitId":"L5-Z"},"content":"        String[] input \u003d {\"BMI\", \"invalid_height\", \"70.00\", \"24.22\", \"01-04-2023\"};","lastModifiedDate":"2024-04-12"},{"lineNumber":430,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":431,"author":{"gitId":"L5-Z"},"content":"        // Act and Assert","lastModifiedDate":"2024-04-12"},{"lineNumber":432,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-12"},{"lineNumber":433,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e dataFile.processBmi(input));","lastModifiedDate":"2024-04-12"},{"lineNumber":434,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":435,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":436,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":437,"author":{"gitId":"L5-Z"},"content":"     * Tests the processRun method with invalid run input.","lastModifiedDate":"2024-04-14"},{"lineNumber":438,"author":{"gitId":"L5-Z"},"content":"     * Expects an InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":439,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":440,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":441,"author":{"gitId":"L5-Z"},"content":"    void processRun_invalidRunInput_throwsInvalidInputException() {","lastModifiedDate":"2024-04-12"},{"lineNumber":442,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-12"},{"lineNumber":443,"author":{"gitId":"L5-Z"},"content":"        String[] input \u003d {\"RUN\", \"invalid_distance\", \"00:30:00\", \"01-04-2023\"};","lastModifiedDate":"2024-04-12"},{"lineNumber":444,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":445,"author":{"gitId":"L5-Z"},"content":"        // Act and Assert","lastModifiedDate":"2024-04-12"},{"lineNumber":446,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-12"},{"lineNumber":447,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e dataFile.processRun(input));","lastModifiedDate":"2024-04-12"},{"lineNumber":448,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":449,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":450,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":451,"author":{"gitId":"L5-Z"},"content":"     * Tests the processGym method with invalid gym input.","lastModifiedDate":"2024-04-14"},{"lineNumber":452,"author":{"gitId":"L5-Z"},"content":"     * Expects an InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":453,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":454,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":455,"author":{"gitId":"L5-Z"},"content":"    void processGym_invalidGymInput_throwsInvalidInputException() {","lastModifiedDate":"2024-04-12"},{"lineNumber":456,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-12"},{"lineNumber":457,"author":{"gitId":"L5-Z"},"content":"        String rawInput \u003d \"GYM:2:11-11-1997:bench press:\" +","lastModifiedDate":"2024-04-12"},{"lineNumber":458,"author":{"gitId":"L5-Z"},"content":"                \"4:4:10.0,20.0,30.0,40.0:invalid_station:4:3:20.0,30.0,40.0,50.0\";","lastModifiedDate":"2024-04-12"},{"lineNumber":459,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":460,"author":{"gitId":"L5-Z"},"content":"        // Act and Assert","lastModifiedDate":"2024-04-12"},{"lineNumber":461,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-12"},{"lineNumber":462,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e dataFile.processGym(rawInput));","lastModifiedDate":"2024-04-12"},{"lineNumber":463,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":464,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":465,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":466,"author":{"gitId":"L5-Z"},"content":"     * Tests the processFail method.","lastModifiedDate":"2024-04-14"},{"lineNumber":467,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the error is logged and the files are deleted.","lastModifiedDate":"2024-04-14"},{"lineNumber":468,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":469,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":470,"author":{"gitId":"L5-Z"},"content":"    void processFail_logsErrorAndDeletesFiles() {","lastModifiedDate":"2024-04-12"},{"lineNumber":471,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-12"},{"lineNumber":472,"author":{"gitId":"L5-Z"},"content":"        DataFile dataFile \u003d new DataFile();","lastModifiedDate":"2024-04-12"},{"lineNumber":473,"author":{"gitId":"L5-Z"},"content":"        String errorString \u003d \"Test error string\";","lastModifiedDate":"2024-04-12"},{"lineNumber":474,"author":{"gitId":"L5-Z"},"content":"        String dataFilePath \u003d testDataFilePath;","lastModifiedDate":"2024-04-12"},{"lineNumber":475,"author":{"gitId":"L5-Z"},"content":"        String hashFilePath \u003d testHashFilePath;","lastModifiedDate":"2024-04-12"},{"lineNumber":476,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":477,"author":{"gitId":"L5-Z"},"content":"        // Act","lastModifiedDate":"2024-04-12"},{"lineNumber":478,"author":{"gitId":"L5-Z"},"content":"        dataFile.processFail(errorString);","lastModifiedDate":"2024-04-12"},{"lineNumber":479,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":480,"author":{"gitId":"L5-Z"},"content":"        // Assert","lastModifiedDate":"2024-04-12"},{"lineNumber":481,"author":{"gitId":"L5-Z"},"content":"        // Check if the error was logged","lastModifiedDate":"2024-04-12"},{"lineNumber":482,"author":{"gitId":"L5-Z"},"content":"        String logContent \u003d LogFile.readLogContent();","lastModifiedDate":"2024-04-12"},{"lineNumber":483,"author":{"gitId":"L5-Z"},"content":"        assertTrue(logContent.contains(errorString));","lastModifiedDate":"2024-04-12"},{"lineNumber":484,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":485,"author":{"gitId":"L5-Z"},"content":"        // Check if the data file was deleted","lastModifiedDate":"2024-04-12"},{"lineNumber":486,"author":{"gitId":"L5-Z"},"content":"        assertFalse(new File(dataFilePath).exists());","lastModifiedDate":"2024-04-12"},{"lineNumber":487,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":488,"author":{"gitId":"L5-Z"},"content":"        // Check if the hash file was deleted","lastModifiedDate":"2024-04-12"},{"lineNumber":489,"author":{"gitId":"L5-Z"},"content":"        assertFalse(new File(hashFilePath).exists());","lastModifiedDate":"2024-04-12"},{"lineNumber":490,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":491,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"L5-Z":491}},{"path":"src/test/java/storage/LogFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package storage;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"class LogFileTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"    static LogFile logTest \u003d LogFile.getInstance();","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the getInstance function in the LogFile class, and whether","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"     * it returns a non-null instance.","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    void initializeLogFile_noInput_logFileHandlerNotNull() {","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"        assertNotNull(LogFile.logFileHandler);","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"rouvinerh":17,"L5-Z":1}},{"path":"src/test/java/ui/HandlerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutLists;","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import java.io.InputStream;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":" * Tests the functionality of the `Handler` class.","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":" * It includes tests for processing various user inputs and verifying the expected output.","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"class HandlerTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"    private final ByteArrayInputStream inContent \u003d new ByteArrayInputStream(\"\".getBytes());","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"    private final InputStream originalIn \u003d System.in;","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"    private final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"     * Sets up the test environment by redirecting the standard input, output, and error streams.","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"    public void setUpStreams() {","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-14"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"        System.setIn(inContent);","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"     * Restores the original standard input, output, and error streams, and cleans up the","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"     * `WorkoutLists` and `HealthList` after each test.","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"    @AfterEach","lastModifiedDate":"2024-03-14"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"    public void restoreStreams() {","lastModifiedDate":"2024-03-14"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-14"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"        System.setIn(originalIn);","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists.clearWorkoutsRunGym();","lastModifiedDate":"2024-04-12"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027EXIT\u0027 command.","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the program terminates.","lastModifiedDate":"2024-04-14"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"    void processInput_exitCommand_terminatesProgram() {","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"EXIT\";","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Initiating PulsePilot landing sequence...\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027WORKOUT\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"     * to add a new run exercise.","lastModifiedDate":"2024-04-14"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the run is added successfully.","lastModifiedDate":"2024-04-14"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"    void processInput_workoutCommand_addRunExercise() {","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"WORKOUT /e:run /d:10.30 /t:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(output);","lastModifiedDate":"2024-03-25"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Successfully added a new run session\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027HEALTH\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"     * to add a new BMI data point.","lastModifiedDate":"2024-04-14"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the BMI data is added successfully.","lastModifiedDate":"2024-04-14"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"    void processInput_healthCommand_addBMIHealthData() {","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"HEALTH /h:bmi /height:1.70 /weight:65.00 /date:15-03-2024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(output.contains(\"Added: bmi | 1.70 | 65.00 | 2024-03-15\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027HEALTH\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"     * to add a new appointment.","lastModifiedDate":"2024-04-14"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the appointment is added successfully.","lastModifiedDate":"2024-04-14"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"    void processInput_healthCommand_addAppointment() {","lastModifiedDate":"2024-04-10"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"health /h:appointment /date:30-03-2024 /time:19:30 /description:test\";","lastModifiedDate":"2024-04-10"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-04-10"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(output.contains(\"Added: appointment | 2024-03-30 | 19:30 | test\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":113,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027HISTORY\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":114,"author":{"gitId":"L5-Z"},"content":"     * to print the history of runs.","lastModifiedDate":"2024-04-14"},{"lineNumber":115,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the run history is printed correctly.","lastModifiedDate":"2024-04-14"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"L5-Z"},"content":"    void processInput_historyCommand_printsHistoryRun() {","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"        String inputRun \u003d \"WORKOUT /e:run /d:10.30 /t:40:10\" +","lastModifiedDate":"2024-04-12"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-10"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"                \"HISTORY /item:run\";","lastModifiedDate":"2024-04-10"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(inputRun);","lastModifiedDate":"2024-04-10"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":124,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(output.contains(\"Your run history\"));","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":129,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027LATEST\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":130,"author":{"gitId":"L5-Z"},"content":"     * to print the latest run.","lastModifiedDate":"2024-04-14"},{"lineNumber":131,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the latest run is printed correctly.","lastModifiedDate":"2024-04-14"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":134,"author":{"gitId":"L5-Z"},"content":"    void processInput_latestCommand_printsLatestRun() {","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"        String inputRun \u003d \"WORKOUT /e:run /d:10.30 /t:40:10 /date:15-03-2024\"","lastModifiedDate":"2024-04-07"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-07"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"                + \"LATEST /item:run\";","lastModifiedDate":"2024-04-07"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        Handler myHandler \u003d new Handler(inputRun);","lastModifiedDate":"2024-04-07"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":140,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Your latest run:\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":142,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":143,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":145,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027HELP\u0027 command.","lastModifiedDate":"2024-04-14"},{"lineNumber":146,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the help message is printed correctly.","lastModifiedDate":"2024-04-14"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":148,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"L5-Z"},"content":"    void processInput_helpCommand_printsHelp() {","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"HELP\";","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":153,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":154,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Commands List\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":155,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":156,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":157,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":159,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters an invalid command.","lastModifiedDate":"2024-04-14"},{"lineNumber":160,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":162,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":163,"author":{"gitId":"L5-Z"},"content":"    void processInput_invalidCommand_printsInvalidCommandException() {","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"INVALID\";","lastModifiedDate":"2024-03-20"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"        Handler handler \u003d new Handler(input);","lastModifiedDate":"2024-04-11"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"        handler.processInput();","lastModifiedDate":"2024-04-11"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"\\u001b[31mException Caught!\" +","lastModifiedDate":"2024-04-09"},{"lineNumber":168,"author":{"gitId":"L5-Z"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":169,"author":{"gitId":"L5-Z"},"content":"                ErrorConstant.INVALID_COMMAND_ERROR +","lastModifiedDate":"2024-03-26"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001b[0m\" +","lastModifiedDate":"2024-04-09"},{"lineNumber":171,"author":{"gitId":"L5-Z"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":172,"author":{"gitId":"L5-Z"},"content":"        assertEquals(expected, errContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":173,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":174,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":176,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters an invalid run command","lastModifiedDate":"2024-04-14"},{"lineNumber":177,"author":{"gitId":"L5-Z"},"content":"     * with an invalid distance.","lastModifiedDate":"2024-04-14"},{"lineNumber":178,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"    void processInput_invalidRunCommand_printsInvalidDistanceError() {","lastModifiedDate":"2024-04-11"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"workout /e:run /t:22:11 /d:5\";","lastModifiedDate":"2024-04-11"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"        Handler handler \u003d new Handler(input);","lastModifiedDate":"2024-04-11"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"        handler.processInput();","lastModifiedDate":"2024-04-11"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"\\u001b[31mException Caught!\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-11"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001b[31m\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"                \"Invalid Input Exception: \" +","lastModifiedDate":"2024-04-11"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"                ErrorConstant.INVALID_RUN_DISTANCE_ERROR +","lastModifiedDate":"2024-04-11"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001b[0m\\u001b[0m\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-11"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, errContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":195,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":196,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027HEALTH\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":197,"author":{"gitId":"L5-Z"},"content":"     * with insufficient parameters.","lastModifiedDate":"2024-04-14"},{"lineNumber":198,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":199,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":200,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":201,"author":{"gitId":"L5-Z"},"content":"    void processInput_healthCommand_insufficientParameters() {","lastModifiedDate":"2024-03-26"},{"lineNumber":202,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"HEALTH /h:bmi /height:1.70\";","lastModifiedDate":"2024-03-26"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":205,"author":{"gitId":"syj02"},"content":"        assertTrue(errContent.toString().contains(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR));","lastModifiedDate":"2024-03-26"},{"lineNumber":206,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":209,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":210,"author":{"gitId":"L5-Z"},"content":"     * with a valid BMI entry.","lastModifiedDate":"2024-04-14"},{"lineNumber":211,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the BMI entry is deleted successfully.","lastModifiedDate":"2024-04-14"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithValidBmi_validDeleteMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"HEALTH /h:bmi /height:1.70 /weight:70.00 /date:09-04-2024\"","lastModifiedDate":"2024-04-10"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:bmi /index:1\"","lastModifiedDate":"2024-04-10"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(outContent.toString().contains(\"Removed BMI entry\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":225,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":226,"author":{"gitId":"L5-Z"},"content":"     * with no BMI objects added.","lastModifiedDate":"2024-04-14"},{"lineNumber":227,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithInvalidBmiIndex_expectErrorMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"HEALTH /h:bmi /height:1.70 /weight:70.00 /date:09-04-2024\"","lastModifiedDate":"2024-04-10"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:bmi /index:99\"","lastModifiedDate":"2024-04-10"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(\"\\u001b[31mException Caught!\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":241,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":242,"author":{"gitId":"L5-Z"},"content":"     * with a valid appointment.","lastModifiedDate":"2024-04-14"},{"lineNumber":243,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the appointment is deleted successfully.","lastModifiedDate":"2024-04-14"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithValidAppointment_validDeleteMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"health /h:appointment /date:03-04-2024 /time:14:15 /description:review checkup with surgeon\"","lastModifiedDate":"2024-04-10"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:appointment /index:1\"","lastModifiedDate":"2024-04-10"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(outContent.toString().contains(\"Removed appointment\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":257,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":258,"author":{"gitId":"L5-Z"},"content":"     * with an invalid appointment index.","lastModifiedDate":"2024-04-14"},{"lineNumber":259,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithInvalidAppointmentIndex_validDeleteMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"health /h:appointment /date:03-04-2024 /time:14:15 /description:review checkup with surgeon\"","lastModifiedDate":"2024-04-10"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:appointment /index:99\"","lastModifiedDate":"2024-04-10"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(\"\\u001b[31mException Caught!\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":273,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":274,"author":{"gitId":"L5-Z"},"content":"     * with a valid run.","lastModifiedDate":"2024-04-14"},{"lineNumber":275,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the run is deleted successfully.","lastModifiedDate":"2024-04-14"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithValidRun_validDeleteMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"workout /e:run /d:5.15 /t:25:03 /date:25-03-2023\"","lastModifiedDate":"2024-04-10"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:run /index:1\"","lastModifiedDate":"2024-04-10"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(outContent.toString().contains(\"Removed Run\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":289,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":290,"author":{"gitId":"L5-Z"},"content":"     * with an invalid run index.","lastModifiedDate":"2024-04-14"},{"lineNumber":291,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithInvalidRunIndex_validDeleteMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"workout /e:run /d:5.15 /t:25:03 /date:25-03-2023\"","lastModifiedDate":"2024-04-10"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:run /index:99\"","lastModifiedDate":"2024-04-10"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(\"\\u001b[31mException Caught!\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":304,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":305,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":306,"author":{"gitId":"L5-Z"},"content":"     * with a valid period.","lastModifiedDate":"2024-04-14"},{"lineNumber":307,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the period is deleted successfully.","lastModifiedDate":"2024-04-14"},{"lineNumber":308,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithValidPeriod_validDeleteMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"health /h:period /start:09-03-2022 /end:16-03-2022\"","lastModifiedDate":"2024-04-10"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:period /index:1\"","lastModifiedDate":"2024-04-10"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(outContent.toString().contains(\"Removed period\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":321,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":322,"author":{"gitId":"L5-Z"},"content":"     * with an invalid period index.","lastModifiedDate":"2024-04-14"},{"lineNumber":323,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithInvalidPeriodIndex_validDeleteMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"workout /e:run /d:5.15 /t:25:03 /date:25-03-2023\"","lastModifiedDate":"2024-04-10"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:run /index:99\"","lastModifiedDate":"2024-04-10"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(\"\\u001b[31mException Caught!\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":336,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":337,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":338,"author":{"gitId":"L5-Z"},"content":"     * with a valid gym.","lastModifiedDate":"2024-04-14"},{"lineNumber":339,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the gym is deleted successfully.","lastModifiedDate":"2024-04-14"},{"lineNumber":340,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithValidGym_validDeleteMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"workout /e:gym /n:1 /date:25-03-2023\"","lastModifiedDate":"2024-04-10"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"                + \"bench press /s:2 /r:4 /w:10,20\"","lastModifiedDate":"2024-04-10"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:gym /index:1\"","lastModifiedDate":"2024-04-10"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(outContent.toString().contains(\"Removed Gym\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":355,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters the \u0027DELETE\u0027 command","lastModifiedDate":"2024-04-14"},{"lineNumber":356,"author":{"gitId":"L5-Z"},"content":"     * with an invalid gym index.","lastModifiedDate":"2024-04-14"},{"lineNumber":357,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"    void processInput_deleteCommandWithInvalidGymIndex_validDeleteMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"workout /e:gym /n:1 /date:25-03-2023\"","lastModifiedDate":"2024-04-10"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"                + \"bench press /s:2 /r:4 /w:10,20\"","lastModifiedDate":"2024-04-10"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"                + \"DELETE /item:gym /index:2\"","lastModifiedDate":"2024-04-10"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-10"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(\"\\u001b[31mException Caught!\"));","lastModifiedDate":"2024-04-10"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":372,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":373,"author":{"gitId":"L5-Z"},"content":"     * Tests the `processInput` function\u0027s behaviour when the user enters a gym command, adds one","lastModifiedDate":"2024-04-14"},{"lineNumber":374,"author":{"gitId":"L5-Z"},"content":"     * station, and then types \u0027back\u0027 to exit.","lastModifiedDate":"2024-04-14"},{"lineNumber":375,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the gym is not added and a delete message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"    void processInput_workoutCommandWithGymStationExit_expectsNoGymAddedAndDeleteMessage() {","lastModifiedDate":"2024-04-12"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"workout /e:gym /n:2 /date:25-03-2023\"","lastModifiedDate":"2024-04-12"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-12"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"                + \"bench press /s:2 /r:4 /w:10,20\"","lastModifiedDate":"2024-04-12"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-12"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"                + \"back\"","lastModifiedDate":"2024-04-12"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-12"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-12"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"        myHandler.processInput();","lastModifiedDate":"2024-04-12"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(outContent.toString().contains(\"Removed Gym entry with 1 station(s).\"));","lastModifiedDate":"2024-04-12"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":391,"author":{"gitId":"L5-Z"},"content":"     * Tests the `userInduction` function\u0027s behaviour when the user enters a valid username.","lastModifiedDate":"2024-04-14"},{"lineNumber":392,"author":{"gitId":"L5-Z"},"content":"     * Verifies that the welcome greeting is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"    void userInduction_validUsername_printGreeting() {","lastModifiedDate":"2024-04-10"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"john\";","lastModifiedDate":"2024-04-10"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"        myHandler.userInduction();","lastModifiedDate":"2024-04-10"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"Welcome aboard, Captain john\"","lastModifiedDate":"2024-04-10"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.PARTITION_LINE","lastModifiedDate":"2024-04-10"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"                + \"Tips: Enter \u0027help\u0027 to view the pilot manual!\"","lastModifiedDate":"2024-04-10"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"                + \"Initiating FTL jump sequence...\"","lastModifiedDate":"2024-04-10"},{"lineNumber":406,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-10"},{"lineNumber":407,"author":{"gitId":"rouvinerh"},"content":"                + \"FTL jump completed.\"","lastModifiedDate":"2024-04-10"},{"lineNumber":408,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":409,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(outContent.toString(), expected);","lastModifiedDate":"2024-04-10"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":411,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":413,"author":{"gitId":"L5-Z"},"content":"     * Tests the `handleWorkout` function\u0027s behaviour when an invalid string is passed.","lastModifiedDate":"2024-04-14"},{"lineNumber":414,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":416,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":417,"author":{"gitId":"rouvinerh"},"content":"    void handleWorkout_invalidInput_expectsErrorMessagePrinted() {","lastModifiedDate":"2024-04-11"},{"lineNumber":418,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler();","lastModifiedDate":"2024-04-11"},{"lineNumber":419,"author":{"gitId":"rouvinerh"},"content":"        myHandler.handleWorkout(\"boo\");","lastModifiedDate":"2024-04-11"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(\"\\u001b[31mException Caught!\"));","lastModifiedDate":"2024-04-11"},{"lineNumber":421,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":423,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":424,"author":{"gitId":"L5-Z"},"content":"     * Tests the `handleHealth` function\u0027s behaviour when an invalid string is passed.","lastModifiedDate":"2024-04-14"},{"lineNumber":425,"author":{"gitId":"L5-Z"},"content":"     * Verifies that an error message is printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":426,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":427,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"    void handleHealth_invalidInput_expectsErrorMessagePrinted() {","lastModifiedDate":"2024-04-11"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"        Handler myHandler \u003d new Handler();","lastModifiedDate":"2024-04-11"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"        myHandler.handleWorkout(\"boo\");","lastModifiedDate":"2024-04-11"},{"lineNumber":431,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(\"\\u001b[31mException Caught!\"));","lastModifiedDate":"2024-04-11"},{"lineNumber":432,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":433,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"JustinSoh":27,"rouvinerh":243,"L5-Z":162,"syj02":1}},{"path":"src/test/java/ui/IntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package ui;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import health.HealthList;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import utility.Parser;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import workouts.Run;","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutLists;","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import helper.TestHelper;","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"import java.io.InputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2024-04-07"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-07"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"public class IntegrationTest {","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayInputStream inContent \u003d new ByteArrayInputStream(\"\".getBytes());","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    private static final InputStream originalIn \u003d System.in;","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    @BeforeAll","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    public static void setUpStreams() {","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"        System.setIn(inContent);","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    @AfterEach","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    public void tearDown(){","lastModifiedDate":"2024-04-07"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists.clearWorkoutsRunGym();","lastModifiedDate":"2024-04-12"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"        outContent.reset();","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        errContent.reset();","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"    @AfterAll","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"    public static void restoreStreams() {","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"        System.setIn(originalIn);","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"     * Integration testing for adding a Bmi and Show latest when error is present","lastModifiedDate":"2024-04-11"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"    void addBmiAndShowLatest_incorrectInput_expectErrors(){","lastModifiedDate":"2024-04-11"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"        // Craft the input String to be passed to handler","lastModifiedDate":"2024-04-11"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder inputString \u003d new StringBuilder();","lastModifiedDate":"2024-04-11"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder expectedString \u003d new StringBuilder();","lastModifiedDate":"2024-04-11"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"        // test to see if incorrect health input can be captured","lastModifiedDate":"2024-04-11"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmiiii /height:1.75 /weight:70.00000 /date:18-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidCommandString(ErrorConstant.INVALID_HEALTH_INPUT_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h: /height:1.75 /weight:70.00 /date:22.11.2001\");","lastModifiedDate":"2024-04-11"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidCommandString(ErrorConstant.INVALID_HEALTH_INPUT_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:123123 /height:1.75 /weight:70.00 /date:22.11.2001\");","lastModifiedDate":"2024-04-11"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidCommandString(ErrorConstant.INVALID_HEALTH_INPUT_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"        // test to see if incorrect command can be captured","lastModifiedDate":"2024-04-11"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"healthsssss /h:bmiiii /height:1.75 /weight:70.00000 /date:18-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidCommandString(ErrorConstant.INVALID_COMMAND_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"        // test to see if incorrect slashes can be captured","lastModifiedDate":"2024-04-11"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.750000 /////weight:70.00 /date:18-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.TOO_MANY_SLASHES_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"        // test to see if incorrect height can be captured","lastModifiedDate":"2024-04-11"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.750000 /weight:70.00 /date:18-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_HEIGHT_WEIGHT_INPUT_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"        // test to see if incorrect weight can be captured","lastModifiedDate":"2024-04-11"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.75 /weight:70.00000 /date:18-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_HEIGHT_WEIGHT_INPUT_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        // test to see if date error can be captured (invalid date)","lastModifiedDate":"2024-04-11"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.75 /weight:70.00 /date:00-00-0000\");","lastModifiedDate":"2024-04-11"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_YEAR_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"        // test to see if date error can be captured (invalid date)","lastModifiedDate":"2024-04-11"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.75 /weight:70.00 /date:30-00-0000\");","lastModifiedDate":"2024-04-11"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_YEAR_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"        // test to see if date error can be captured (invalid date)","lastModifiedDate":"2024-04-11"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.75 /weight:70.00 /date:30-13-2000\");","lastModifiedDate":"2024-04-11"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"        // test to see if date error can be captured (invalid date)","lastModifiedDate":"2024-04-11"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.75 /weight:70.00 /date:33-11-2001\");","lastModifiedDate":"2024-04-11"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"        // test to see if incorrect date can be captured","lastModifiedDate":"2024-04-11"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.75 /weight:70.00 /date:22.11.2001\");","lastModifiedDate":"2024-04-11"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.75000 /weight:70.00 /date:18-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_HEIGHT_WEIGHT_INPUT_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.75 /weight:70.00000 /date:18-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_HEIGHT_WEIGHT_INPUT_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /item:invalidFlag\");","lastModifiedDate":"2024-04-11"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.INVALID_LATEST_OR_DELETE_FILTER));","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /////item:\");","lastModifiedDate":"2024-04-11"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInvalidInputString(ErrorConstant.TOO_MANY_SLASHES_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /item:\");","lastModifiedDate":"2024-04-11"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInsufficientInput(ErrorConstant.INSUFFICIENT_LATEST_FILTER_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest\");","lastModifiedDate":"2024-04-11"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(TestHelper.errorInsufficientInput(ErrorConstant.INSUFFICIENT_LATEST_FILTER_ERROR));","lastModifiedDate":"2024-04-11"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"        // Run the process to test the output","lastModifiedDate":"2024-04-11"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"        Handler handler\u003d new Handler(inputString.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"        handler.processInput();","lastModifiedDate":"2024-04-11"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expectedString.toString(), errContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"        outContent.reset();","lastModifiedDate":"2024-04-11"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"     * Test the behaviour of print latest when given the filter period/bmi/appointment","lastModifiedDate":"2024-04-11"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"     * This is the flow of sequence","lastModifiedDate":"2024-04-11"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"     * 1. Add a bmi (bmi1)","lastModifiedDate":"2024-04-11"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"     * 2. Print latest bmi (prints bmi1)","lastModifiedDate":"2024-04-11"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"     * 3. Add a bmi (bmi2)","lastModifiedDate":"2024-04-11"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"     * 4. Print latest bmi (prints bmi2) - latest bmi should be bmi2","lastModifiedDate":"2024-04-11"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"     * 5. Add a period (period1)","lastModifiedDate":"2024-04-11"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"     * 6. Print latest period (prints period1)","lastModifiedDate":"2024-04-11"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"     * 7. Add a period (period2)","lastModifiedDate":"2024-04-11"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"     * 8. Print latest period (prints period2) - latest period should be period2","lastModifiedDate":"2024-04-11"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"     * 9. Add an appointment (appointment1)","lastModifiedDate":"2024-04-11"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"     * 10. Print latest appointment (prints appointment1)","lastModifiedDate":"2024-04-11"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"     * 11. Add an appointment (appointment2) that is earlier than appointment1","lastModifiedDate":"2024-04-11"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"     * 12. Print latest appointment (prints appointment2) - latest appointment should be appointment1 still","lastModifiedDate":"2024-04-11"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"     * 13. Add an appointment (appointment3) that is the latest (2026)","lastModifiedDate":"2024-04-11"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"     * 14. Print latest appointment (prints appointment2) - latest appointment should be appointment 3","lastModifiedDate":"2024-04-11"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-11"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"    void addHealthAndShowLatest_correctInput_expectCorrectLatestOutput() {","lastModifiedDate":"2024-04-11"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"        // Craft the input String to be passed to handler","lastModifiedDate":"2024-04-11"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder inputString \u003d new StringBuilder();","lastModifiedDate":"2024-04-11"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height:1.75 /weight:70.00 /date:18-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /item:bmi\");","lastModifiedDate":"2024-04-11"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:bmi /height: 2.00 /weight:40.00 /date:20-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /item:bmi\");","lastModifiedDate":"2024-04-11"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:period /start:18-12-2023 /end:26-12-2023\");","lastModifiedDate":"2024-04-11"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /item:period\");","lastModifiedDate":"2024-04-11"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:period /start:27-01-2024 /end:03-03-2024\");","lastModifiedDate":"2024-04-11"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /item:period\");","lastModifiedDate":"2024-04-11"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:appointment /date:29-04-2025 /time:12:00 /description:knee surgery\");","lastModifiedDate":"2024-04-11"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /item:appointment\");","lastModifiedDate":"2024-04-11"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:appointment /date:25-03-2024 /time:23:01 /description:knee surgery 2\");","lastModifiedDate":"2024-04-11"},{"lineNumber":210,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /item:appointment\");","lastModifiedDate":"2024-04-11"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"health /h:appointment /date:25-03-2026 /time:10:01 /description:plastic surgery\");","lastModifiedDate":"2024-04-11"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(System.lineSeparator());","lastModifiedDate":"2024-04-11"},{"lineNumber":215,"author":{"gitId":"JustinSoh"},"content":"        inputString.append(\"latest /item:appointment\");","lastModifiedDate":"2024-04-11"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"        // Craft the expected String to be printed","lastModifiedDate":"2024-04-11"},{"lineNumber":219,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder expectedString \u003d new StringBuilder();","lastModifiedDate":"2024-04-11"},{"lineNumber":220,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"        String addBmiString \u003d TestHelper.addBmiOutputString(\"70.00\",","lastModifiedDate":"2024-04-11"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"                \"1.75\",","lastModifiedDate":"2024-04-11"},{"lineNumber":223,"author":{"gitId":"JustinSoh"},"content":"                \"2024-03-18\",","lastModifiedDate":"2024-04-11"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"                22.86,","lastModifiedDate":"2024-04-11"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"                HealthConstant.NORMAL_WEIGHT_MESSAGE);","lastModifiedDate":"2024-04-11"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"        String latestBmiString \u003d TestHelper.latestBmiOutputString(\"2024-03-18\",","lastModifiedDate":"2024-04-11"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"                22.86,","lastModifiedDate":"2024-04-11"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"                HealthConstant.NORMAL_WEIGHT_MESSAGE);","lastModifiedDate":"2024-04-11"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"        String addBmiString2 \u003d TestHelper.addBmiOutputString(\"40.00\",","lastModifiedDate":"2024-04-11"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"                \"2.00\",","lastModifiedDate":"2024-04-11"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"                \"2024-03-20\",","lastModifiedDate":"2024-04-11"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"                10.00,","lastModifiedDate":"2024-04-11"},{"lineNumber":236,"author":{"gitId":"JustinSoh"},"content":"                HealthConstant.UNDERWEIGHT_MESSAGE);","lastModifiedDate":"2024-04-11"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"        String latestBmiString2 \u003d TestHelper.latestBmiOutputString(\"2024-03-20\",","lastModifiedDate":"2024-04-11"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"                10.00,","lastModifiedDate":"2024-04-11"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"                HealthConstant.UNDERWEIGHT_MESSAGE);","lastModifiedDate":"2024-04-11"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"        String addPeriodString \u003d TestHelper.addPeriodOutputString(\"2023-12-18\",","lastModifiedDate":"2024-04-11"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"                \"2023-12-26\",","lastModifiedDate":"2024-04-11"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"                9","lastModifiedDate":"2024-04-11"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"        );","lastModifiedDate":"2024-04-11"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"        String latestPeriodString \u003d TestHelper.latestPeriodOutputString(\"2023-12-18\",","lastModifiedDate":"2024-04-11"},{"lineNumber":248,"author":{"gitId":"JustinSoh"},"content":"                \"2023-12-26\",","lastModifiedDate":"2024-04-11"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"                9,","lastModifiedDate":"2024-04-11"},{"lineNumber":250,"author":{"gitId":"JustinSoh"},"content":"                HealthConstant.DAYS_MESSAGE);","lastModifiedDate":"2024-04-11"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"        String addPeriodString2 \u003d TestHelper.addPeriodOutputString(\"2024-01-27\",","lastModifiedDate":"2024-04-11"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"                \"2024-03-03\",","lastModifiedDate":"2024-04-11"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"                37","lastModifiedDate":"2024-04-11"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"        );","lastModifiedDate":"2024-04-11"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"        String latestPeriodString2 \u003d TestHelper.latestPeriodOutputString(\"2024-01-27\",","lastModifiedDate":"2024-04-11"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"                \"2024-03-03\",","lastModifiedDate":"2024-04-11"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"                37,","lastModifiedDate":"2024-04-11"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"                HealthConstant.DAYS_MESSAGE);","lastModifiedDate":"2024-04-11"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":262,"author":{"gitId":"JustinSoh"},"content":"        String addAppointmentString \u003d TestHelper.addAppointmentString(\"2025-04-29\",","lastModifiedDate":"2024-04-11"},{"lineNumber":263,"author":{"gitId":"JustinSoh"},"content":"                \"12:00\",","lastModifiedDate":"2024-04-11"},{"lineNumber":264,"author":{"gitId":"JustinSoh"},"content":"                \"knee surgery\");","lastModifiedDate":"2024-04-11"},{"lineNumber":265,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":266,"author":{"gitId":"JustinSoh"},"content":"        String latestAppointmentString \u003d TestHelper.latestAppointmentOutputString(\"2025-04-29\",","lastModifiedDate":"2024-04-11"},{"lineNumber":267,"author":{"gitId":"JustinSoh"},"content":"                \"12:00\",","lastModifiedDate":"2024-04-11"},{"lineNumber":268,"author":{"gitId":"JustinSoh"},"content":"                \"knee surgery\");","lastModifiedDate":"2024-04-11"},{"lineNumber":269,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"        String addAppointmentString2 \u003d TestHelper.addAppointmentString(\"2024-03-25\",","lastModifiedDate":"2024-04-11"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"                \"23:01\",","lastModifiedDate":"2024-04-11"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"                \"knee surgery 2\");","lastModifiedDate":"2024-04-11"},{"lineNumber":273,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":274,"author":{"gitId":"JustinSoh"},"content":"        String latestAppointmentString2 \u003d TestHelper.latestAppointmentOutputString(\"2024-03-25\",","lastModifiedDate":"2024-04-11"},{"lineNumber":275,"author":{"gitId":"JustinSoh"},"content":"                \"23:01\",","lastModifiedDate":"2024-04-11"},{"lineNumber":276,"author":{"gitId":"JustinSoh"},"content":"                \"knee surgery 2\");","lastModifiedDate":"2024-04-11"},{"lineNumber":277,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":278,"author":{"gitId":"JustinSoh"},"content":"        String addAppointmentString3 \u003d TestHelper.addAppointmentString(\"2026-03-25\",","lastModifiedDate":"2024-04-11"},{"lineNumber":279,"author":{"gitId":"JustinSoh"},"content":"                \"10:01\",","lastModifiedDate":"2024-04-11"},{"lineNumber":280,"author":{"gitId":"JustinSoh"},"content":"                \"plastic surgery\");","lastModifiedDate":"2024-04-11"},{"lineNumber":281,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":282,"author":{"gitId":"JustinSoh"},"content":"        String latestAppointmentString3 \u003d TestHelper.latestAppointmentOutputString(\"2026-03-25\",","lastModifiedDate":"2024-04-11"},{"lineNumber":283,"author":{"gitId":"JustinSoh"},"content":"                \"10:01\",","lastModifiedDate":"2024-04-11"},{"lineNumber":284,"author":{"gitId":"JustinSoh"},"content":"                \"plastic surgery\");","lastModifiedDate":"2024-04-11"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":286,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":287,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(addBmiString);","lastModifiedDate":"2024-04-11"},{"lineNumber":288,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(latestBmiString);","lastModifiedDate":"2024-04-11"},{"lineNumber":289,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(addBmiString2);","lastModifiedDate":"2024-04-11"},{"lineNumber":290,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(latestBmiString2);","lastModifiedDate":"2024-04-11"},{"lineNumber":291,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(addPeriodString);","lastModifiedDate":"2024-04-11"},{"lineNumber":292,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(latestPeriodString);","lastModifiedDate":"2024-04-11"},{"lineNumber":293,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(addPeriodString2);","lastModifiedDate":"2024-04-11"},{"lineNumber":294,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(latestPeriodString2);","lastModifiedDate":"2024-04-11"},{"lineNumber":295,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(addAppointmentString);","lastModifiedDate":"2024-04-11"},{"lineNumber":296,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(latestAppointmentString);","lastModifiedDate":"2024-04-11"},{"lineNumber":297,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(addAppointmentString2);","lastModifiedDate":"2024-04-11"},{"lineNumber":298,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(latestAppointmentString); // the latest appointment is earlier so it should print first","lastModifiedDate":"2024-04-11"},{"lineNumber":299,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(addAppointmentString3);","lastModifiedDate":"2024-04-11"},{"lineNumber":300,"author":{"gitId":"JustinSoh"},"content":"        expectedString.append(latestAppointmentString3); // the latest appointment is earlier then appointment3","lastModifiedDate":"2024-04-11"},{"lineNumber":301,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":302,"author":{"gitId":"JustinSoh"},"content":"        // Run the process to test the output","lastModifiedDate":"2024-04-11"},{"lineNumber":303,"author":{"gitId":"JustinSoh"},"content":"        Handler handler\u003d new Handler(inputString.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":304,"author":{"gitId":"JustinSoh"},"content":"        handler.processInput();","lastModifiedDate":"2024-04-11"},{"lineNumber":305,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expectedString.toString(), outContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":306,"author":{"gitId":"JustinSoh"},"content":"        outContent.reset();","lastModifiedDate":"2024-04-11"},{"lineNumber":307,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":308,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":309,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":310,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":311,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":312,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behaviour of having the same expected output when saving and loading a Gym object.","lastModifiedDate":"2024-04-02"},{"lineNumber":313,"author":{"gitId":"JustinSoh"},"content":"     * This is tested by ensuring the print history of the Gym object is the same before and after saving and loading.","lastModifiedDate":"2024-04-02"},{"lineNumber":314,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":315,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":316,"author":{"gitId":"JustinSoh"},"content":"    void testSaveAndLoadGym_gymObjectInput_expectSamePrintHistory(){","lastModifiedDate":"2024-04-02"},{"lineNumber":317,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym \u003d new Gym();","lastModifiedDate":"2024-04-02"},{"lineNumber":318,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":319,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":320,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"ExerciseA\", \"1\", \"10\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":321,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"ExerciseB\", \"2\", \"20\" , \"1.0,2.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":322,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":323,"author":{"gitId":"JustinSoh"},"content":"            // Save the expected output","lastModifiedDate":"2024-04-02"},{"lineNumber":324,"author":{"gitId":"JustinSoh"},"content":"            Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":325,"author":{"gitId":"JustinSoh"},"content":"            output.printAddGym(newGym);","lastModifiedDate":"2024-04-07"},{"lineNumber":326,"author":{"gitId":"JustinSoh"},"content":"            String expectedString \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":327,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":328,"author":{"gitId":"JustinSoh"},"content":"            // Save the string, clear the static list, and then simulate load","lastModifiedDate":"2024-04-02"},{"lineNumber":329,"author":{"gitId":"JustinSoh"},"content":"            String saveString \u003d newGym.toFileString();","lastModifiedDate":"2024-04-02"},{"lineNumber":330,"author":{"gitId":"JustinSoh"},"content":"            tearDown();","lastModifiedDate":"2024-04-07"},{"lineNumber":331,"author":{"gitId":"JustinSoh"},"content":"            Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":332,"author":{"gitId":"JustinSoh"},"content":"            Gym loadedGym \u003d parser.parseGymFileInput(saveString);","lastModifiedDate":"2024-04-07"},{"lineNumber":333,"author":{"gitId":"JustinSoh"},"content":"            output.printAddGym(loadedGym);","lastModifiedDate":"2024-04-07"},{"lineNumber":334,"author":{"gitId":"JustinSoh"},"content":"            String outputContent \u003d outContent.toString();","lastModifiedDate":"2024-04-07"},{"lineNumber":335,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":336,"author":{"gitId":"JustinSoh"},"content":"            // Expect the same value","lastModifiedDate":"2024-04-02"},{"lineNumber":337,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expectedString, outputContent);","lastModifiedDate":"2024-04-07"},{"lineNumber":338,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":339,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.FileReadError | CustomExceptions.InsufficientInput e){","lastModifiedDate":"2024-04-08"},{"lineNumber":341,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-04-02"},{"lineNumber":342,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":343,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":344,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":345,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":346,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"     * Tests if the output of the bot when adding runs and gyms, using history and latest commands is correct.","lastModifiedDate":"2024-04-02"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"     * Two gyms and runs are added, followed by the history and latest commands to view it.","lastModifiedDate":"2024-04-02"},{"lineNumber":349,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":350,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":351,"author":{"gitId":"JustinSoh"},"content":"    void testLatestDisplay_userInputsTwoGymAndRuns_expectsLatestGymAndRun(){","lastModifiedDate":"2024-04-02"},{"lineNumber":352,"author":{"gitId":"JustinSoh"},"content":"        String run1 \u003d \"WORKOUT /e:run /d:10.30 /t:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"        String run2 \u003d \"WORKOUT /e:run /d:11.59 /t:30:10 /date:17-03-2024\";","lastModifiedDate":"2024-04-06"},{"lineNumber":354,"author":{"gitId":"JustinSoh"},"content":"        String gym1 \u003d \"WORKOUT /e:gym /n:2 /date:18-03-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":355,"author":{"gitId":"JustinSoh"},"content":"        String gym1Station1 \u003d \"benchpress /s:2 /r:4 /w:40,60\";","lastModifiedDate":"2024-04-02"},{"lineNumber":356,"author":{"gitId":"JustinSoh"},"content":"        String gym1Station2 \u003d \"squats /s:3 /r:4 /w:10,20,30\";","lastModifiedDate":"2024-04-02"},{"lineNumber":357,"author":{"gitId":"JustinSoh"},"content":"        String gym2 \u003d \"WORKOUT /e:gym /n:1 /date:22-03-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":358,"author":{"gitId":"JustinSoh"},"content":"        String gym2Station1 \u003d \"deadlift /s:4 /r:4 /w:120,130,140,160\";","lastModifiedDate":"2024-04-02"},{"lineNumber":359,"author":{"gitId":"JustinSoh"},"content":"        String showLatestGym \u003d \"LATEST /item:gym\";","lastModifiedDate":"2024-04-02"},{"lineNumber":360,"author":{"gitId":"JustinSoh"},"content":"        String showLatestRun \u003d \"LATEST /item:run\";","lastModifiedDate":"2024-04-02"},{"lineNumber":361,"author":{"gitId":"JustinSoh"},"content":"        String showHistoryGym \u003d \"HISTORY /item:gym\";","lastModifiedDate":"2024-04-02"},{"lineNumber":362,"author":{"gitId":"JustinSoh"},"content":"        String showHistoryRun \u003d \"HISTORY /item:run\";","lastModifiedDate":"2024-04-02"},{"lineNumber":363,"author":{"gitId":"JustinSoh"},"content":"        String showHistoryAll \u003d \"HISTORY /item:workouts\";","lastModifiedDate":"2024-04-02"},{"lineNumber":364,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":365,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"        String inputString \u003d run1 +System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"                + run2 +System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"                + gym1 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"                + gym1Station1 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"                + gym1Station2 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"                + gym2 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":372,"author":{"gitId":"rouvinerh"},"content":"                + gym2Station1 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"                + showLatestGym + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"                + showLatestRun + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"                + showHistoryGym + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"                + showHistoryRun + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"                + showHistoryAll + System.lineSeparator();","lastModifiedDate":"2024-04-02"},{"lineNumber":378,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":379,"author":{"gitId":"JustinSoh"},"content":"        Handler newHandler \u003d new Handler(inputString);","lastModifiedDate":"2024-04-07"},{"lineNumber":380,"author":{"gitId":"JustinSoh"},"content":"        newHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":382,"author":{"gitId":"JustinSoh"},"content":"        tearDown();","lastModifiedDate":"2024-04-07"},{"lineNumber":383,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":384,"author":{"gitId":"JustinSoh"},"content":"        // Craft expected output","lastModifiedDate":"2024-04-02"},{"lineNumber":385,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-04-02"},{"lineNumber":386,"author":{"gitId":"JustinSoh"},"content":"            Run run1Expected \u003d new Run(\"40:10\", \"10.30\", \"15-03-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"            Run run2Expected \u003d new Run(\"30:10\", \"11.59\", \"17-03-2024\");","lastModifiedDate":"2024-04-06"},{"lineNumber":388,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":389,"author":{"gitId":"JustinSoh"},"content":"            Gym gym1expected \u003d new Gym(\"18-03-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":390,"author":{"gitId":"JustinSoh"},"content":"            gym1expected.addStation(\"benchpress\", \"2\", \"4\", \"40.0,60.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":391,"author":{"gitId":"JustinSoh"},"content":"            gym1expected.addStation(\"squats\", \"3\", \"4\", \"10.0,20.0,30.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":392,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":393,"author":{"gitId":"JustinSoh"},"content":"            Gym gym2expected \u003d new Gym(\"22-03-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":394,"author":{"gitId":"JustinSoh"},"content":"            gym2expected.addStation(\"deadlift\",  \"4\",","lastModifiedDate":"2024-04-13"},{"lineNumber":395,"author":{"gitId":"JustinSoh"},"content":"                    \"4\", \"120.0,130.0,140.0,160.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":396,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":397,"author":{"gitId":"JustinSoh"},"content":"            Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":398,"author":{"gitId":"JustinSoh"},"content":"            output.printAddRun(run1Expected);","lastModifiedDate":"2024-04-07"},{"lineNumber":399,"author":{"gitId":"JustinSoh"},"content":"            output.printAddRun(run2Expected);","lastModifiedDate":"2024-04-07"},{"lineNumber":400,"author":{"gitId":"JustinSoh"},"content":"            output.printGymStationPrompt(1);","lastModifiedDate":"2024-04-07"},{"lineNumber":401,"author":{"gitId":"JustinSoh"},"content":"            output.printGymStationPrompt(2);","lastModifiedDate":"2024-04-07"},{"lineNumber":402,"author":{"gitId":"JustinSoh"},"content":"            output.printAddGym(gym1expected);","lastModifiedDate":"2024-04-07"},{"lineNumber":403,"author":{"gitId":"JustinSoh"},"content":"            output.printGymStationPrompt(1);","lastModifiedDate":"2024-04-07"},{"lineNumber":404,"author":{"gitId":"JustinSoh"},"content":"            output.printAddGym(gym2expected);","lastModifiedDate":"2024-04-07"},{"lineNumber":405,"author":{"gitId":"JustinSoh"},"content":"            output.printLatestGym();","lastModifiedDate":"2024-04-07"},{"lineNumber":406,"author":{"gitId":"JustinSoh"},"content":"            output.printLatestRun();","lastModifiedDate":"2024-04-07"},{"lineNumber":407,"author":{"gitId":"JustinSoh"},"content":"            output.printHistory(WorkoutConstant.GYM);","lastModifiedDate":"2024-04-07"},{"lineNumber":408,"author":{"gitId":"JustinSoh"},"content":"            output.printHistory(WorkoutConstant.RUN);","lastModifiedDate":"2024-04-07"},{"lineNumber":409,"author":{"gitId":"JustinSoh"},"content":"            output.printHistory(WorkoutConstant.ALL);","lastModifiedDate":"2024-04-07"},{"lineNumber":410,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":411,"author":{"gitId":"JustinSoh"},"content":"            String expected \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(expected, result);","lastModifiedDate":"2024-04-02"},{"lineNumber":413,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":414,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e){","lastModifiedDate":"2024-04-13"},{"lineNumber":415,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Shouldn\u0027t have failed\");","lastModifiedDate":"2024-04-02"},{"lineNumber":416,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":417,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":418,"author":{"gitId":"JustinSoh"},"content":"        tearDown();","lastModifiedDate":"2024-04-11"},{"lineNumber":419,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":421,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the bot when 4 Period objects are added, expects the four periods to be reflected","lastModifiedDate":"2024-04-02"},{"lineNumber":423,"author":{"gitId":"rouvinerh"},"content":"     * accordingly with a valid prediction on when the next cycle is.","lastModifiedDate":"2024-04-02"},{"lineNumber":424,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":425,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":426,"author":{"gitId":"syj02"},"content":"    void testPrediction_userInputsFourPeriods_expectPrediction() throws CustomExceptions.InsufficientInput","lastModifiedDate":"2024-04-11"},{"lineNumber":427,"author":{"gitId":"syj02"},"content":"            , CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-11"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"        String period1 \u003d \"health /h:period /start:18-12-2023 /end:26-12-2023\";","lastModifiedDate":"2024-04-02"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"        String period2 \u003d \"health /h:period /start:18-01-2024 /end:26-01-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"        String period3 \u003d \"health /h:period /start:21-02-2024 /end:28-02-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":431,"author":{"gitId":"rouvinerh"},"content":"        String period4 \u003d \"health /h:period /start:22-03-2024 /end:29-03-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":432,"author":{"gitId":"rouvinerh"},"content":"        String prediction \u003d \"health /h:prediction\";","lastModifiedDate":"2024-04-02"},{"lineNumber":433,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":434,"author":{"gitId":"rouvinerh"},"content":"        String inputString \u003d period1 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":435,"author":{"gitId":"rouvinerh"},"content":"                + period2 +System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":436,"author":{"gitId":"rouvinerh"},"content":"                + period3 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":437,"author":{"gitId":"rouvinerh"},"content":"                + period4 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"                + prediction + System.lineSeparator();","lastModifiedDate":"2024-04-02"},{"lineNumber":439,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":440,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":441,"author":{"gitId":"JustinSoh"},"content":"        Handler newHandler \u003d new Handler(inputString);","lastModifiedDate":"2024-04-07"},{"lineNumber":442,"author":{"gitId":"JustinSoh"},"content":"        newHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":443,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":444,"author":{"gitId":"JustinSoh"},"content":"        tearDown();","lastModifiedDate":"2024-04-07"},{"lineNumber":445,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":446,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":447,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":448,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod1 \u003d new Period(\"18-12-2023\" , \"26-12-2023\");","lastModifiedDate":"2024-04-02"},{"lineNumber":449,"author":{"gitId":"JustinSoh"},"content":"        output.printAddPeriod(expectedPeriod1);","lastModifiedDate":"2024-04-07"},{"lineNumber":450,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":451,"author":{"gitId":"JustinSoh"},"content":"        Period expectedPeriod2 \u003d new Period(\"18-01-2024\" , \"26-01-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":452,"author":{"gitId":"JustinSoh"},"content":"        output.printAddPeriod(expectedPeriod2);","lastModifiedDate":"2024-04-07"},{"lineNumber":453,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":454,"author":{"gitId":"JustinSoh"},"content":"        Period expectedPeriod3 \u003d new Period(\"21-02-2024\", \"28-02-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":455,"author":{"gitId":"JustinSoh"},"content":"        output.printAddPeriod(expectedPeriod3);","lastModifiedDate":"2024-04-07"},{"lineNumber":456,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":457,"author":{"gitId":"JustinSoh"},"content":"        Period expectedPeriod4 \u003d new Period(\"22-03-2024\", \"29-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":458,"author":{"gitId":"JustinSoh"},"content":"        output.printAddPeriod(expectedPeriod4);","lastModifiedDate":"2024-04-07"},{"lineNumber":459,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":460,"author":{"gitId":"JustinSoh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":461,"author":{"gitId":"JustinSoh"},"content":"        parser.parsePredictionInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":462,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":463,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":464,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-04-02"},{"lineNumber":465,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":466,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":467,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":468,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":469,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the bot when 3 Period objects are added and a prediction is attempted.","lastModifiedDate":"2024-04-02"},{"lineNumber":470,"author":{"gitId":"rouvinerh"},"content":"     * Expects an exception thrown for prediction since there are insufficient Period objects added.","lastModifiedDate":"2024-04-02"},{"lineNumber":471,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":472,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":473,"author":{"gitId":"rouvinerh"},"content":"    void testPrediction_userInputsThreePeriods_expectNoPredictionPrintedAndErrorMessagePrinted() {","lastModifiedDate":"2024-04-02"},{"lineNumber":474,"author":{"gitId":"rouvinerh"},"content":"        String period1 \u003d \"health /h:period /start:18-12-2023 /end:26-12-2023\";","lastModifiedDate":"2024-04-02"},{"lineNumber":475,"author":{"gitId":"rouvinerh"},"content":"        String period2 \u003d \"health /h:period /start:18-01-2024 /end:26-01-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":476,"author":{"gitId":"rouvinerh"},"content":"        String period3 \u003d \"health /h:period /start:21-02-2024 /end:28-02-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":477,"author":{"gitId":"rouvinerh"},"content":"        String prediction \u003d \"health /h:prediction\";","lastModifiedDate":"2024-04-02"},{"lineNumber":478,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":479,"author":{"gitId":"rouvinerh"},"content":"        String inputString \u003d period1 +System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":480,"author":{"gitId":"rouvinerh"},"content":"                + period2 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":481,"author":{"gitId":"rouvinerh"},"content":"                + period3 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":482,"author":{"gitId":"rouvinerh"},"content":"                + prediction + System.lineSeparator();","lastModifiedDate":"2024-04-02"},{"lineNumber":483,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":484,"author":{"gitId":"JustinSoh"},"content":"        Handler newHandler \u003d new Handler(inputString);","lastModifiedDate":"2024-04-07"},{"lineNumber":485,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":486,"author":{"gitId":"JustinSoh"},"content":"        newHandler.processInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":487,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":488,"author":{"gitId":"rouvinerh"},"content":"        String resultErr \u003d errContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":489,"author":{"gitId":"JustinSoh"},"content":"        tearDown();","lastModifiedDate":"2024-04-07"},{"lineNumber":490,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":491,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod1 \u003d new Period(\"18-12-2023\" , \"26-12-2023\");","lastModifiedDate":"2024-04-02"},{"lineNumber":492,"author":{"gitId":"JustinSoh"},"content":"        output.printAddPeriod(expectedPeriod1);","lastModifiedDate":"2024-04-07"},{"lineNumber":493,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod2 \u003d new Period(\"18-01-2024\" , \"26-01-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":494,"author":{"gitId":"JustinSoh"},"content":"        output.printAddPeriod(expectedPeriod2);","lastModifiedDate":"2024-04-07"},{"lineNumber":495,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod3 \u003d new Period(\"21-02-2024\", \"28-02-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":496,"author":{"gitId":"JustinSoh"},"content":"        output.printAddPeriod(expectedPeriod3);","lastModifiedDate":"2024-04-07"},{"lineNumber":497,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":498,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":499,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-04-02"},{"lineNumber":500,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":501,"author":{"gitId":"rouvinerh"},"content":"        // expect error message","lastModifiedDate":"2024-04-02"},{"lineNumber":502,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":503,"author":{"gitId":"JustinSoh"},"content":"            Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":504,"author":{"gitId":"JustinSoh"},"content":"            parser.parsePredictionInput();","lastModifiedDate":"2024-04-07"},{"lineNumber":505,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-02"},{"lineNumber":506,"author":{"gitId":"JustinSoh"},"content":"            output.printException(e.getMessage());","lastModifiedDate":"2024-04-07"},{"lineNumber":507,"author":{"gitId":"syj02"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-11"},{"lineNumber":508,"author":{"gitId":"syj02"},"content":"            output.printException(e.getMessage());","lastModifiedDate":"2024-04-11"},{"lineNumber":509,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":510,"author":{"gitId":"rouvinerh"},"content":"        String expectedErr \u003d errContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":511,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expectedErr, resultErr);","lastModifiedDate":"2024-04-02"},{"lineNumber":512,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":513,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"JustinSoh":423,"rouvinerh":86,"syj02":4}},{"path":"src/test/java/ui/OutputTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import health.Appointment;","lastModifiedDate":"2024-04-01"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import java.io.InputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import helper.TestHelper;","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutLists;","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-04-07"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-07"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2024-04-07"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2024-04-07"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"class OutputTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayInputStream inContent \u003d new ByteArrayInputStream(\"\".getBytes());","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    private static final InputStream originalIn \u003d System.in;","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"    @BeforeAll","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    public static void setUpStreams() {","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        System.setIn(inContent);","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"    @AfterEach","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"    public void cleanup() {","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists.clearWorkoutsRunGym();","lastModifiedDate":"2024-04-12"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"        errContent.reset();","lastModifiedDate":"2024-04-11"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"    @AfterAll","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"    public static void restoreStreams() {","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"        System.setIn(originalIn);","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printHistory function for Run objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid parameters specified.","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"    void printHistory_runsOnly_expectAllRunsPrinted() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        Run run1 \u003d new Run(\"40:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"        Run run2 \u003d new Run(\"01:59:10\", \"15.3\");","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"                \"Your run history:\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_HEADER_INDEX_FORMAT) +","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_DATA_INDEX_FORMAT, 1, run1) +","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_DATA_INDEX_FORMAT, 2, run2) +","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(WorkoutConstant.RUN);","lastModifiedDate":"2024-04-07"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-12"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-11"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"    void printGreeting_correctInput_expectGreetingPrinted() {","lastModifiedDate":"2024-04-11"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"        String expected;","lastModifiedDate":"2024-04-11"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"        output.printGreeting(UiConstant.FILE_FOUND, \"Captain Voyager\");","lastModifiedDate":"2024-04-11"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"        expected \u003d TestHelper.printGreetingsFoundString(\"Captain Voyager\");","lastModifiedDate":"2024-04-11"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"        output.printGreeting(UiConstant.FILE_FOUND, \"Captain 123\");","lastModifiedDate":"2024-04-11"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        expected \u003d TestHelper.printGreetingsFoundString(\"Captain 123\");","lastModifiedDate":"2024-04-11"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"        output.printGreeting(UiConstant.FILE_NOT_FOUND, \"Captain Voyager\");","lastModifiedDate":"2024-04-11"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"        expected \u003d TestHelper.printGreetingNotFoundString(\"Captain Voyager\");","lastModifiedDate":"2024-04-11"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behaviour of the printLatest for incorrect Input which would result in an error","lastModifiedDate":"2024-04-11"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"     * Behaviour Tested","lastModifiedDate":"2024-04-11"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"     * - invalid filter","lastModifiedDate":"2024-04-11"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"     * - empty run/gym/workouts/bmi/appointment/period list","lastModifiedDate":"2024-04-11"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"     * - empty input","lastModifiedDate":"2024-04-11"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"    void printHistory_incorrectInput_throwError() {","lastModifiedDate":"2024-04-11"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-11"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"        String expectedString;","lastModifiedDate":"2024-04-11"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(\"invalidFilter\");","lastModifiedDate":"2024-04-11"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorInvalidCommandString(ErrorConstant.INVALID_HISTORY_FILTER_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expectedString, errContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty run list","lastModifiedDate":"2024-04-11"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(WorkoutConstant.RUN);","lastModifiedDate":"2024-04-11"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorInvalidCommandString(ErrorConstant.RUN_EMPTY_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(errContent.toString(), expectedString);","lastModifiedDate":"2024-04-12"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty gym list","lastModifiedDate":"2024-04-11"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(WorkoutConstant.GYM);","lastModifiedDate":"2024-04-11"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorInvalidCommandString(ErrorConstant.GYM_EMPTY_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty workout list","lastModifiedDate":"2024-04-11"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(WorkoutConstant.ALL);","lastModifiedDate":"2024-04-11"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorInvalidCommandString(ErrorConstant.WORKOUTS_EMPTY_ERROR);","lastModifiedDate":"2024-04-12"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty BMI list","lastModifiedDate":"2024-04-11"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(HealthConstant.BMI);","lastModifiedDate":"2024-04-11"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorOutOfBoundsString(ErrorConstant.BMI_EMPTY_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty PERIOD list","lastModifiedDate":"2024-04-11"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(HealthConstant.PERIOD);","lastModifiedDate":"2024-04-11"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorOutOfBoundsString(ErrorConstant.PERIOD_EMPTY_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty APPOINTMENT list","lastModifiedDate":"2024-04-11"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(HealthConstant.APPOINTMENT);","lastModifiedDate":"2024-04-11"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorOutOfBoundsString(ErrorConstant.APPOINTMENT_EMPTY_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(\"\");","lastModifiedDate":"2024-04-11"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorInvalidCommandString(ErrorConstant.INVALID_HISTORY_FILTER_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expectedString, errContent.toString());","lastModifiedDate":"2024-04-13"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behaviour of the printLatest for incorrect Input which would result in an error","lastModifiedDate":"2024-04-11"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"     * Behaviour Tested","lastModifiedDate":"2024-04-11"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"     * - invalid filter","lastModifiedDate":"2024-04-11"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"     * - empty run/gym/bmi/appointment/period list","lastModifiedDate":"2024-04-11"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"     * - empty input","lastModifiedDate":"2024-04-11"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"    void printLatest_incorrectInput_throwError() {","lastModifiedDate":"2024-04-11"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-11"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"        String expectedString;","lastModifiedDate":"2024-04-11"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"        output.printLatest(\"invalidFilter\");","lastModifiedDate":"2024-04-11"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"        expectedString \u003d TestHelper.errorInvalidCommandString(ErrorConstant.INVALID_LATEST_OR_DELETE_FILTER);","lastModifiedDate":"2024-04-13"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expectedString, errContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty run list","lastModifiedDate":"2024-04-11"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"        output.printLatest(WorkoutConstant.RUN);","lastModifiedDate":"2024-04-11"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorOutOfBoundsString(ErrorConstant.RUN_EMPTY_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty gym list","lastModifiedDate":"2024-04-11"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"        output.printLatest(WorkoutConstant.GYM);","lastModifiedDate":"2024-04-11"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorOutOfBoundsString(ErrorConstant.GYM_EMPTY_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":210,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty BMI list","lastModifiedDate":"2024-04-11"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"        output.printLatest(HealthConstant.BMI);","lastModifiedDate":"2024-04-11"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorOutOfBoundsString(ErrorConstant.BMI_EMPTY_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":215,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty PERIOD list","lastModifiedDate":"2024-04-11"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"        output.printLatest(HealthConstant.PERIOD);","lastModifiedDate":"2024-04-11"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorOutOfBoundsString(ErrorConstant.PERIOD_EMPTY_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":219,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":220,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"        // printing latest of an empty APPOINTMENT list","lastModifiedDate":"2024-04-11"},{"lineNumber":223,"author":{"gitId":"JustinSoh"},"content":"        output.printLatest(HealthConstant.APPOINTMENT);","lastModifiedDate":"2024-04-11"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"        expectedString \u003d TestHelper.errorOutOfBoundsString(ErrorConstant.APPOINTMENT_EMPTY_ERROR);","lastModifiedDate":"2024-04-11"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(errContent.toString().contains(expectedString));","lastModifiedDate":"2024-04-11"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"        output.printLatest(\"\");","lastModifiedDate":"2024-04-11"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"        expectedString \u003d TestHelper.errorInvalidCommandString(ErrorConstant.INVALID_LATEST_OR_DELETE_FILTER);","lastModifiedDate":"2024-04-13"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expectedString.toString(), errContent.toString());","lastModifiedDate":"2024-04-11"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-11"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestRun function after a Run object is added.","lastModifiedDate":"2024-03-20"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid parameters specified.","lastModifiedDate":"2024-03-20"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"    void printLatestRun_oneRun_expectOneRunPrinted() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"        Run newRun \u003d new Run(\"40:10\", \"10.3\");","lastModifiedDate":"2024-04-04"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"                \"Your latest run:\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_HEADER_INDEX_FORMAT) +","lastModifiedDate":"2024-04-04"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_DATA_INDEX_FORMAT, 1, newRun) +","lastModifiedDate":"2024-04-04"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"        output.printLatestRun();","lastModifiedDate":"2024-04-07"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-12"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestRun function when no Runs are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":263,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":264,"author":{"gitId":"JustinSoh"},"content":"    void printLatestRun_noRun_expectNoRunMessage() {","lastModifiedDate":"2024-03-13"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"\\u001b[31mException Caught!\" +","lastModifiedDate":"2024-04-10"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001b[31mOut of Bounds Error: \" +","lastModifiedDate":"2024-04-10"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"                ErrorConstant.RUN_EMPTY_ERROR +","lastModifiedDate":"2024-04-10"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001b[0m\\u001b[0m\" +","lastModifiedDate":"2024-04-10"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"        output.printLatestRun();","lastModifiedDate":"2024-04-07"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(expected));","lastModifiedDate":"2024-04-10"},{"lineNumber":274,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":275,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestGym function when two Gyms are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"    void printLatestGym_twoGyms_expectOneGymPrinted() {","lastModifiedDate":"2024-03-20"},{"lineNumber":281,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"            Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-20"},{"lineNumber":284,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Bench Press\", \"1\", \"10\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Shoulder Press\", \"2\", \"10\", \"1.0,2.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"            Gym gym2 \u003d new Gym();","lastModifiedDate":"2024-03-20"},{"lineNumber":288,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Squat Press\", \"1\", \"50\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":289,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Lat Press\", \"2\", \"10\", \"1.0,2.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":290,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":291,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":292,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Shouldn\u0027t have failed\");","lastModifiedDate":"2024-04-13"},{"lineNumber":293,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":294,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":295,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"                \"Your latest gym:\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"                \"Gym Session 2 (Date: NA)\" +","lastModifiedDate":"2024-03-26"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":302,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 1 Squat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":303,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 1) +","lastModifiedDate":"2024-03-26"},{"lineNumber":304,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":305,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"50 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":306,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":307,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 2 Lat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":308,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 2) +","lastModifiedDate":"2024-03-26"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":310,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"10 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":311,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":312,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 2, \"10 reps at 2.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":316,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":317,"author":{"gitId":"JustinSoh"},"content":"        output.printLatestGym();","lastModifiedDate":"2024-04-07"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestGym function when no Gyms are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"    void printLatestGym_noGym_expectNoGymMessage() {","lastModifiedDate":"2024-03-20"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"\\u001b[31mException Caught!\" +","lastModifiedDate":"2024-04-10"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001b[31mOut of Bounds Error: \" +","lastModifiedDate":"2024-04-10"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"                ErrorConstant.GYM_EMPTY_ERROR +","lastModifiedDate":"2024-04-10"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001b[0m\\u001b[0m\" +","lastModifiedDate":"2024-04-10"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":333,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":334,"author":{"gitId":"JustinSoh"},"content":"        output.printLatestGym();","lastModifiedDate":"2024-04-07"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(expected));","lastModifiedDate":"2024-04-10"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when two Bmi objects are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"    void printLatestBmi_twoBmis_expectOneBmiPrinted() {","lastModifiedDate":"2024-04-01"},{"lineNumber":343,"author":{"gitId":"JustinSoh"},"content":"        new Bmi(\"1.75\", \"70.0\", \"18-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":344,"author":{"gitId":"JustinSoh"},"content":"        new Bmi(\"1.55\", \"55.0\", \"20-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":345,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":346,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":347,"author":{"gitId":"JustinSoh"},"content":"        output.printLatestBmi();","lastModifiedDate":"2024-04-07"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"                \"2024-03-20\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"                \"Your BMI is 22.89\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"                \"Great! You\u0027re within normal range.\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when two Period objects are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"    void printLatestPeriod_twoPeriods_expectOnePeriodPrinted() {","lastModifiedDate":"2024-03-25"},{"lineNumber":366,"author":{"gitId":"JustinSoh"},"content":"        new Period(\"09-02-2023\", \"16-02-2023\");","lastModifiedDate":"2024-04-07"},{"lineNumber":367,"author":{"gitId":"JustinSoh"},"content":"        new Period(\"09-03-2023\", \"16-03-2023\");","lastModifiedDate":"2024-04-07"},{"lineNumber":368,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":369,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":370,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":371,"author":{"gitId":"JustinSoh"},"content":"        output.printLatestPeriod();","lastModifiedDate":"2024-04-07"},{"lineNumber":372,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":373,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"                \"Period Start: 2023-03-09 Period End: 2023-03-16\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":378,"author":{"gitId":"j013n3"},"content":"                \"Period Length: 8 day(s)\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestAppointment function when two Appointment objects are added.","lastModifiedDate":"2024-04-01"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":390,"author":{"gitId":"syj02"},"content":"    void printLatestAppointment_twoAppointments_expectOneAppointmentPrinted() {","lastModifiedDate":"2024-04-10"},{"lineNumber":391,"author":{"gitId":"JustinSoh"},"content":"        new Appointment(\"29-03-2025\", \"17:00\", \"test\");","lastModifiedDate":"2024-04-13"},{"lineNumber":392,"author":{"gitId":"JustinSoh"},"content":"        new Appointment(\"24-01-2026\", \"12:00\", \"test2\");","lastModifiedDate":"2024-04-13"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":394,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":395,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":396,"author":{"gitId":"syj02"},"content":"        output.printLatestAppointment();","lastModifiedDate":"2024-04-10"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":399,"author":{"gitId":"syj02"},"content":"                \"On 2026-01-24 at 12:00: test2\" +","lastModifiedDate":"2024-04-10"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-01"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-01"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":406,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":407,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of printAppointmentHistory when two Appointment objects are added.","lastModifiedDate":"2024-04-01"},{"lineNumber":408,"author":{"gitId":"rouvinerh"},"content":"     * Expects two Appointment objects to be pritned.","lastModifiedDate":"2024-04-01"},{"lineNumber":409,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If there is out of bounds access.","lastModifiedDate":"2024-04-01"},{"lineNumber":411,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-04-01"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":413,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":414,"author":{"gitId":"rouvinerh"},"content":"    void printAppointmentHistory_twoAppointments_expectTwoAppointmentsPrinted() throws","lastModifiedDate":"2024-04-01"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-01"},{"lineNumber":416,"author":{"gitId":"JustinSoh"},"content":"        new Appointment(\"29-03-2024\", \"17:00\", \"test\");","lastModifiedDate":"2024-04-07"},{"lineNumber":417,"author":{"gitId":"JustinSoh"},"content":"        new Appointment(\"24-01-2026\", \"12:00\", \"test2\");","lastModifiedDate":"2024-04-07"},{"lineNumber":418,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":419,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":420,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":421,"author":{"gitId":"JustinSoh"},"content":"        output.printAppointmentHistory();","lastModifiedDate":"2024-04-07"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":423,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":424,"author":{"gitId":"rouvinerh"},"content":"                \"Your Appointment history:\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":425,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":426,"author":{"gitId":"rouvinerh"},"content":"                \"1. On 2024-03-29 at 17:00: test\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":427,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"                \"2. On 2026-01-24 at 12:00: test2\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":431,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-01"},{"lineNumber":432,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-01"},{"lineNumber":433,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":434,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":435,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":436,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printPeriodHistory function when two Period objects are added.","lastModifiedDate":"2024-04-01"},{"lineNumber":437,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":439,"author":{"gitId":"rouvinerh"},"content":"    void printPeriodHistory_twoPeriods_expectTwoPeriodsPrinted() throws","lastModifiedDate":"2024-04-01"},{"lineNumber":440,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-01"},{"lineNumber":441,"author":{"gitId":"JustinSoh"},"content":"        new Period(\"09-02-2023\", \"16-02-2023\");","lastModifiedDate":"2024-04-07"},{"lineNumber":442,"author":{"gitId":"JustinSoh"},"content":"        new Period(\"09-03-2023\", \"16-03-2023\");","lastModifiedDate":"2024-04-07"},{"lineNumber":443,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":444,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":445,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":446,"author":{"gitId":"JustinSoh"},"content":"        output.printPeriodHistory();","lastModifiedDate":"2024-04-07"},{"lineNumber":447,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":448,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":449,"author":{"gitId":"rouvinerh"},"content":"                \"Your Period history:\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":450,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":451,"author":{"gitId":"syj02"},"content":"                \"1. Period Start: 2023-03-09 Period End: 2023-03-16\" +","lastModifiedDate":"2024-04-09"},{"lineNumber":452,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":453,"author":{"gitId":"j013n3"},"content":"                \"Period Length: 8 day(s)\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":454,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":455,"author":{"gitId":"syj02"},"content":"                \"2. Period Start: 2023-02-09 Period End: 2023-02-16\" +","lastModifiedDate":"2024-04-09"},{"lineNumber":456,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":457,"author":{"gitId":"j013n3"},"content":"                \"Period Length: 8 day(s)\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":458,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":459,"author":{"gitId":"j013n3"},"content":"                \"Cycle Length: 28 day(s)\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":460,"author":{"gitId":"syj02"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-09"},{"lineNumber":461,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":462,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":463,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-01"},{"lineNumber":464,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":465,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-01"},{"lineNumber":466,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":467,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":468,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":469,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when two Bmi objects are added.","lastModifiedDate":"2024-04-01"},{"lineNumber":470,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":471,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":472,"author":{"gitId":"rouvinerh"},"content":"    void printBmiHistory_twoBmis_expectTwoBmisPrinted() throws CustomExceptions.OutOfBounds,","lastModifiedDate":"2024-04-01"},{"lineNumber":473,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-01"},{"lineNumber":474,"author":{"gitId":"JustinSoh"},"content":"        new Bmi(\"1.75\", \"70.0\", \"18-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":475,"author":{"gitId":"JustinSoh"},"content":"        new Bmi(\"1.55\", \"55.0\", \"20-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":476,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":477,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-07"},{"lineNumber":478,"author":{"gitId":"JustinSoh"},"content":"        output.printBmiHistory();","lastModifiedDate":"2024-04-07"},{"lineNumber":479,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":480,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":481,"author":{"gitId":"rouvinerh"},"content":"                \"Your BMI history:\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":482,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":483,"author":{"gitId":"syj02"},"content":"                \"1. 2024-03-20\" +","lastModifiedDate":"2024-04-09"},{"lineNumber":484,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":485,"author":{"gitId":"syj02"},"content":"                \"Your BMI is 22.89\" +","lastModifiedDate":"2024-04-09"},{"lineNumber":486,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":487,"author":{"gitId":"rouvinerh"},"content":"                \"Great! You\u0027re within normal range.\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":488,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":489,"author":{"gitId":"syj02"},"content":"                \"2. 2024-03-18\" +","lastModifiedDate":"2024-04-09"},{"lineNumber":490,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":491,"author":{"gitId":"syj02"},"content":"                \"Your BMI is 22.86\" +","lastModifiedDate":"2024-04-09"},{"lineNumber":492,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":493,"author":{"gitId":"rouvinerh"},"content":"                \"Great! You\u0027re within normal range.\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":494,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":495,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":496,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-01"},{"lineNumber":497,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-01"},{"lineNumber":498,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":499,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":500,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":501,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":502,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printGymHistory function, which should print both Gyms","lastModifiedDate":"2024-03-20"},{"lineNumber":503,"author":{"gitId":"rouvinerh"},"content":"     * added.","lastModifiedDate":"2024-03-20"},{"lineNumber":504,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":505,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":506,"author":{"gitId":"JustinSoh"},"content":"    void printGymHistory_correctInput_expectPrintGymHistory() {","lastModifiedDate":"2024-03-19"},{"lineNumber":507,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":508,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-04-13"},{"lineNumber":509,"author":{"gitId":"JustinSoh"},"content":"            Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-19"},{"lineNumber":510,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Bench Press\", \"1\", \"50\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":511,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Shoulder Press\", \"2\", \"10\", \"1.0,2.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":512,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":513,"author":{"gitId":"JustinSoh"},"content":"            Gym gym2 \u003d new Gym();","lastModifiedDate":"2024-03-19"},{"lineNumber":514,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Squat Press\", \"1\", \"50\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":515,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Lat Press\", \"2\", \"10\", \"1.0,2.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":516,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":517,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":518,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Shouldn\u0027t have failed\");","lastModifiedDate":"2024-04-13"},{"lineNumber":519,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":520,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":521,"author":{"gitId":"JustinSoh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-13"},{"lineNumber":522,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":523,"author":{"gitId":"JustinSoh"},"content":"                \"Your gym history:\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":524,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":525,"author":{"gitId":"JustinSoh"},"content":"                \"Gym Session 1 (Date: NA)\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":526,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":527,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 1 Bench Press\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":528,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 1) +","lastModifiedDate":"2024-04-13"},{"lineNumber":529,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":530,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"50 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":531,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":532,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 2 Shoulder Press\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":533,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 2) +","lastModifiedDate":"2024-04-13"},{"lineNumber":534,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":535,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"10 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":536,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":537,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 2, \"10 reps at 2.000 KG\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":538,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":539,"author":{"gitId":"JustinSoh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-13"},{"lineNumber":540,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":541,"author":{"gitId":"JustinSoh"},"content":"                \"Gym Session 2 (Date: NA)\" +","lastModifiedDate":"2024-04-13"},{"lineNumber":542,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":543,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 1 Squat Press\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":544,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 1) +","lastModifiedDate":"2024-04-13"},{"lineNumber":545,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":546,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"50 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":547,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":548,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 2 Lat Press\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":549,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 2) +","lastModifiedDate":"2024-04-13"},{"lineNumber":550,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":551,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"10 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":552,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":553,"author":{"gitId":"JustinSoh"},"content":"                String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 2, \"10 reps at 2.000 KG\") +","lastModifiedDate":"2024-04-13"},{"lineNumber":554,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-13"},{"lineNumber":555,"author":{"gitId":"JustinSoh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-13"},{"lineNumber":556,"author":{"gitId":"JustinSoh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-13"},{"lineNumber":557,"author":{"gitId":"JustinSoh"},"content":"        Output output \u003d new Output();","lastModifiedDate":"2024-04-13"},{"lineNumber":558,"author":{"gitId":"JustinSoh"},"content":"        output.printHistory(WorkoutConstant.GYM);","lastModifiedDate":"2024-04-13"},{"lineNumber":559,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-13"},{"lineNumber":560,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":561,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":562,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":563,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":564,"author":{"gitId":"JustinSoh"},"content":"     * Test the behaviour of the printRunHistory function, which should print both Runs and Gyms","lastModifiedDate":"2024-03-27"},{"lineNumber":565,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":566,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":567,"author":{"gitId":"JustinSoh"},"content":"    void printWorkoutHistory() {","lastModifiedDate":"2024-03-27"},{"lineNumber":568,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":569,"author":{"gitId":"JustinSoh"},"content":"            new Run(\"01:11:12\", \"10.24\", \"19-12-1999\");","lastModifiedDate":"2024-04-13"},{"lineNumber":570,"author":{"gitId":"JustinSoh"},"content":"            Gym gym1 \u003d new Gym(\"11-11-1992\");","lastModifiedDate":"2024-03-27"},{"lineNumber":571,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Bench Press\", \"2\", \"4\", \"10.0,20.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":572,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Squat Press\", \"2\", \"4\", \"100.0,200.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":573,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":574,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":575,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Shouldn\u0027t have failed\");","lastModifiedDate":"2024-04-13"},{"lineNumber":576,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":577,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":578,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":579,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"j013n3":4,"JustinSoh":339,"rouvinerh":221,"L5-Z":4,"syj02":11}},{"path":"src/test/java/utility/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-04-07"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"class ParserTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    private static final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    private static final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    private Parser parser;","lastModifiedDate":"2024-04-07"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    @BeforeAll","lastModifiedDate":"2024-04-10"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    public static void setUpStreams() {","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    @AfterAll","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    public static void restoreStreams() {","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    @BeforeEach","lastModifiedDate":"2024-04-07"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    void setUp() {","lastModifiedDate":"2024-04-07"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2024-04-07"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the parseDate function with a correctly formatted string.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    void parseDate_correctDateInput_returnDate() {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        LocalDate result \u003d parser.parseDate(\"08-03-2024\");","lastModifiedDate":"2024-04-07"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        LocalDate expected \u003d LocalDate.of(2024, 3, 8);","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the parseDate function with an incorrectly formatted string.","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"     * Expects null to be returned.","lastModifiedDate":"2024-03-29"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    void parseDate_incorrectDateInput_returnNull () {","lastModifiedDate":"2024-03-29"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"2024-03-08\";","lastModifiedDate":"2024-03-29"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"        LocalDate result \u003d parser.parseDate(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"        assertNull(result);","lastModifiedDate":"2024-04-10"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of parseFormattedDate when valid LocalDate variable is passed.","lastModifiedDate":"2024-04-10"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"     * Expects correct string date returned.","lastModifiedDate":"2024-04-10"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    void parseFormattedDate_correctDate_returnStringDate() {","lastModifiedDate":"2024-04-10"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"        LocalDate date \u003d LocalDate.of(2024, 4, 10);","lastModifiedDate":"2024-04-10"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d parser.parseFormattedDate(date);","lastModifiedDate":"2024-04-10"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"10-04-2024\";","lastModifiedDate":"2024-04-10"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-04-10"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of parseFormattedDate when null LocalDate variable is passed.","lastModifiedDate":"2024-04-10"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"     * Expects \"NA\" returned","lastModifiedDate":"2024-04-10"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    void parseFormattedDate_nullDate_returnNoDateString() {","lastModifiedDate":"2024-04-10"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d parser.parseFormattedDate(null);","lastModifiedDate":"2024-04-10"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"NA\";","lastModifiedDate":"2024-04-10"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-04-10"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of parseTime when a valid time string is passed.","lastModifiedDate":"2024-04-10"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"     * Expects correct LocalTime returned.","lastModifiedDate":"2024-04-10"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"    void parseTime_validTime_returnCorrectTime() {","lastModifiedDate":"2024-04-10"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"        LocalTime result \u003d parser.parseTime(\"23:34\");","lastModifiedDate":"2024-04-10"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"        LocalTime expected \u003d LocalTime.of(23, 34);","lastModifiedDate":"2024-04-10"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-04-10"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of parseTime when a valid time string is passed.","lastModifiedDate":"2024-04-10"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"     * Expects correct LocalTime returned.","lastModifiedDate":"2024-04-10"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"    void parseTime_invalidTime_returnCorrectTime() {","lastModifiedDate":"2024-04-10"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"        parser.parseTime(\"60:34\");","lastModifiedDate":"2024-04-10"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"\\u001b[31mException Caught!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errContent.toString().contains(expected));","lastModifiedDate":"2024-04-10"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-29"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed to validateDate.","lastModifiedDate":"2024-03-29"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"     * Expects the correct details to be returned as a list of strings.","lastModifiedDate":"2024-03-29"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-29"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-29"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"    public void splitDeleteInput_correctInput_returnsCorrectDeleteValues() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:appointment /index:1\";","lastModifiedDate":"2024-03-29"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"appointment\", \"1\"};","lastModifiedDate":"2024-03-29"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"        String[] result \u003d parser.splitDeleteInput(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-29"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-29"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of insufficient parameters being passed to validateDate.","lastModifiedDate":"2024-03-29"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-29"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-29"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-29"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"    public void splitDeleteInput_missingParameter_throwsInsufficientParameterException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:appointment\";","lastModifiedDate":"2024-03-29"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e parser.splitDeleteInput(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of splitDeleteInput when too many forward slashes have been specified.","lastModifiedDate":"2024-04-10"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-10"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"    public void splitDeleteInput_tooManyForwardSlashes_throwsInvalidInputException() {","lastModifiedDate":"2024-04-10"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:appointment /index:1/\";","lastModifiedDate":"2024-04-10"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e parser.splitDeleteInput(input));","lastModifiedDate":"2024-04-10"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of parseDeleteInput when correct parameters are passed.","lastModifiedDate":"2024-04-10"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"     * Expects correct parameters returned.","lastModifiedDate":"2024-04-10"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"    public void parseDeleteInput_validParameters_expectValidDetailsReturned() {","lastModifiedDate":"2024-04-10"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:appointment /index:1\";","lastModifiedDate":"2024-04-10"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"appointment\", \"1\"};","lastModifiedDate":"2024-04-10"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d parser.parseDeleteInput(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-04-10"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":152,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-27"},{"lineNumber":153,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":154,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a correctly formatted user input being passed into splitBmiInput.","lastModifiedDate":"2024-04-10"},{"lineNumber":155,"author":{"gitId":"j013n3"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":156,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":157,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":158,"author":{"gitId":"j013n3"},"content":"    void splitBmiInput_correctInput_returnsCorrectBmiValues() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"        String input \u003d \"/h:bmi /height:1.71 /weight:60.50 /date:19-03-2024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"        String[] expected \u003d {\"1.71\", \"60.50\", \"19-03-2024\"};","lastModifiedDate":"2024-03-27"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"        String[] result \u003d parser.splitBmiInput(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-27"},{"lineNumber":164,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":167,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a string with missing parameter being passed into splitBmiInput.","lastModifiedDate":"2024-04-10"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-29"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"    void splitBmiInput_missingParameter_throwsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"        String input \u003d \"/h:bmi /height:1.71 /date:19-03-2024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e parser.splitBmiInput(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of too many forward slashes being passed into splitBmiInput.","lastModifiedDate":"2024-04-10"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-10"},{"lineNumber":180,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"    void splitBmiInput_tooManyForwardSlashes_throwsInvalidInputException() {","lastModifiedDate":"2024-04-10"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"        String input \u003d \"/h:bmi /height:1.71 /weight:80.00 /date:19-03-2024 /\";","lastModifiedDate":"2024-04-10"},{"lineNumber":184,"author":{"gitId":"j013n3"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e parser.splitBmiInput(input));","lastModifiedDate":"2024-04-10"},{"lineNumber":185,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":186,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":187,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":189,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a correctly formatted string being passed into splitPeriodInput.","lastModifiedDate":"2024-04-10"},{"lineNumber":190,"author":{"gitId":"j013n3"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":191,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":192,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":193,"author":{"gitId":"j013n3"},"content":"    void splitPeriodInput_correctInput_noExceptionThrown() throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-29"},{"lineNumber":195,"author":{"gitId":"j013n3"},"content":"        String input \u003d \"/h:period /start:29-04-2023 /end:30-04-2023\";","lastModifiedDate":"2024-03-28"},{"lineNumber":196,"author":{"gitId":"j013n3"},"content":"        String[] expected \u003d {\"29-04-2023\", \"30-04-2023\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"        String[] result \u003d parser.splitPeriodInput(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-28"},{"lineNumber":199,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a string with a missing parameter being passed into splitPeriodInput.","lastModifiedDate":"2024-04-10"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-29"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":206,"author":{"gitId":"j013n3"},"content":"    void splitPeriodInput_missingParameter_throwsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":207,"author":{"gitId":"j013n3"},"content":"        String input \u003d \"/h:period /end:29-04-2023\";","lastModifiedDate":"2024-04-08"},{"lineNumber":208,"author":{"gitId":"j013n3"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e parser.splitPeriodInput(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":209,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":210,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":211,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-04-09"},{"lineNumber":212,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":213,"author":{"gitId":"syj02"},"content":"     * Tests the behaviour of a correctly formatted string being passed into splitAppointmentInput.","lastModifiedDate":"2024-04-10"},{"lineNumber":214,"author":{"gitId":"syj02"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":215,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":216,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":217,"author":{"gitId":"syj02"},"content":"    void splitAppointmentInput_correctInput_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":218,"author":{"gitId":"syj02"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":219,"author":{"gitId":"syj02"},"content":"        String input \u003d \"/h:appointment /date:30-03-2024 /time:19:30 /description:test\";","lastModifiedDate":"2024-03-28"},{"lineNumber":220,"author":{"gitId":"syj02"},"content":"        String[] expected \u003d {\"30-03-2024\", \"19:30\", \"test\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":221,"author":{"gitId":"syj02"},"content":"        String[] result \u003d parser.splitAppointmentDetails(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":222,"author":{"gitId":"syj02"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-28"},{"lineNumber":223,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":224,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":225,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":226,"author":{"gitId":"syj02"},"content":"     * Tests the behaviour of a correctly formatted string being passed into splitAppointmentDetails.","lastModifiedDate":"2024-04-10"},{"lineNumber":227,"author":{"gitId":"syj02"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-29"},{"lineNumber":228,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":229,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":230,"author":{"gitId":"syj02"},"content":"    void splitAppointmentInput_missingParameter_throwsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":231,"author":{"gitId":"syj02"},"content":"        String input \u003d \"/h:appointment /date:30-03-2024 /description:test\";","lastModifiedDate":"2024-03-28"},{"lineNumber":232,"author":{"gitId":"syj02"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e parser.splitAppointmentDetails(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":233,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":234,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":235,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":236,"author":{"gitId":"syj02"},"content":"     * Tests the behaviour of too many forward slashes being passed into splitAppointmentDetails.","lastModifiedDate":"2024-04-10"},{"lineNumber":237,"author":{"gitId":"syj02"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-10"},{"lineNumber":238,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":239,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":240,"author":{"gitId":"syj02"},"content":"    void splitAppointmentInput_tooManyForwardSlashes_throwsInvalidInputException() {","lastModifiedDate":"2024-04-10"},{"lineNumber":241,"author":{"gitId":"syj02"},"content":"        String input \u003d \"/h:appointment /date:30-03-2024 /time:19:30 /description:test/\";","lastModifiedDate":"2024-04-10"},{"lineNumber":242,"author":{"gitId":"syj02"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e parser.splitAppointmentDetails(input));","lastModifiedDate":"2024-04-10"},{"lineNumber":243,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":244,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":245,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":246,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being","lastModifiedDate":"2024-03-31"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"     * passed into parseHistoryAndLatestInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"     * Expects no error thrown, and correct filter string returned.","lastModifiedDate":"2024-03-31"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"    void parseHistoryAndDeleteInput_correctInput_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:appointment\";","lastModifiedDate":"2024-03-31"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d parser.parseHistory(input);","lastModifiedDate":"2024-04-11"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"appointment\";","lastModifiedDate":"2024-03-31"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an empty string being passed into parseHistoryAndLatestInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"     * Expects null to be returned.","lastModifiedDate":"2024-03-31"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"    void parseHistoryAndDeleteInput_emptyString_expectsNullReturned() {","lastModifiedDate":"2024-04-10"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:\";","lastModifiedDate":"2024-03-31"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"        assertNull(parser.parseDeleteInput(input));","lastModifiedDate":"2024-04-10"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":273,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behaviour of a correctly formatted string without","lastModifiedDate":"2024-03-31"},{"lineNumber":274,"author":{"gitId":"JustinSoh"},"content":"     * dates being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":275,"author":{"gitId":"JustinSoh"},"content":"     * Expects the list of strings to contain the correct parameters.","lastModifiedDate":"2024-03-31"},{"lineNumber":276,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":277,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If there is insufficient input.","lastModifiedDate":"2024-03-31"},{"lineNumber":278,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":279,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":280,"author":{"gitId":"JustinSoh"},"content":"    void splitGymInput_correctInputWithoutDate_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":281,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":282,"author":{"gitId":"JustinSoh"},"content":"        String input \u003d \"/e:gym /n:3\";","lastModifiedDate":"2024-03-31"},{"lineNumber":283,"author":{"gitId":"JustinSoh"},"content":"        String[] expected \u003d {\"3\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":284,"author":{"gitId":"JustinSoh"},"content":"        String[] result \u003d parser.splitGymInput(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":286,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":287,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":288,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":289,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behaviour of a correctly formatted string being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":290,"author":{"gitId":"JustinSoh"},"content":"     * Expects the list of strings to contain the correct parameters.","lastModifiedDate":"2024-03-31"},{"lineNumber":291,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":292,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If there is insufficient input.","lastModifiedDate":"2024-03-31"},{"lineNumber":293,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":294,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":295,"author":{"gitId":"JustinSoh"},"content":"    void splitGymInput_correctInputWithDate_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":296,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":297,"author":{"gitId":"JustinSoh"},"content":"        String input \u003d \"/e:gym /n:3 /date:29-03-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":298,"author":{"gitId":"JustinSoh"},"content":"        String[] expected \u003d {\"3\", \"29-03-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":299,"author":{"gitId":"JustinSoh"},"content":"        String[] result \u003d parser.splitGymInput(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":300,"author":{"gitId":"JustinSoh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":301,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":302,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":303,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":304,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behaviour of an incorrectly formatted string with insufficient parameters","lastModifiedDate":"2024-03-31"},{"lineNumber":305,"author":{"gitId":"JustinSoh"},"content":"     * being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":306,"author":{"gitId":"JustinSoh"},"content":"     * Expects an InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":307,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":308,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":309,"author":{"gitId":"JustinSoh"},"content":"    void splitGymInput_incorrectInput_expectInsufficientInputExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":310,"author":{"gitId":"JustinSoh"},"content":"        String input \u003d \"/e:gym\";","lastModifiedDate":"2024-03-31"},{"lineNumber":311,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":312,"author":{"gitId":"JustinSoh"},"content":"                parser.splitGymInput(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":313,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":314,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-09"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string without","lastModifiedDate":"2024-03-31"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"     * dates being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"     * Expects the list of strings to contain the correct parameters.","lastModifiedDate":"2024-03-31"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If there is insufficient input.","lastModifiedDate":"2024-03-31"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"    void splitRunInput_correctInputWithoutDate_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/e:run /t:25:24 /d:5.15\";","lastModifiedDate":"2024-04-06"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"25:24\", \"5.15\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d parser.splitRunInput(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"     * Expects the list of strings to contain the correct parameters.","lastModifiedDate":"2024-03-31"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If there is insufficient input.","lastModifiedDate":"2024-03-31"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"    void splitRunInput_correctInputWithDate_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/e:run /d:5.15 /t:25:24 /date:29-04-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"25:24\", \"5.15\", \"29-04-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d parser.splitRunInput(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrectly formatted string with insufficient parameters","lastModifiedDate":"2024-03-31"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"     * being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"     * Expects an InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"    void splitRunInput_incorrectInput_expectInsufficientInputExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/e:run /d:5.10\";","lastModifiedDate":"2024-03-31"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"                parser.splitRunInput(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the extractSubstringFromSpecificIndex with a correct flag.","lastModifiedDate":"2024-03-28"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"     * Expects the \u0027bmi\u0027 string to be extracted.","lastModifiedDate":"2024-03-28"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"    void extractSubstringFromSpecificIndex_correctFlag_returnsCorrectSubstring() {","lastModifiedDate":"2024-03-28"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"        String test \u003d \"/h:bmi\";","lastModifiedDate":"2024-03-28"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"        String testDelimiter \u003d \"/h:\";","lastModifiedDate":"2024-03-28"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d parser.extractSubstringFromSpecificIndex(test, testDelimiter);","lastModifiedDate":"2024-04-07"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"bmi\";","lastModifiedDate":"2024-03-28"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-28"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":372,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-09"},{"lineNumber":373,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":374,"author":{"gitId":"JustinSoh"},"content":"    void parseGymFileInput_correctInput_returnsGymObject() {","lastModifiedDate":"2024-03-31"},{"lineNumber":375,"author":{"gitId":"JustinSoh"},"content":"        String input \u003d \"gym:2:11-11-1997:bench press:4:10:10,20,30,40:squats:2:5:20,30\";","lastModifiedDate":"2024-03-31"},{"lineNumber":376,"author":{"gitId":"JustinSoh"},"content":"        String input2 \u003d \"gym:2:NA:bench press:4:10:10,20,30,40:squats:2:5:20,30\";","lastModifiedDate":"2024-03-31"},{"lineNumber":377,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":378,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-03-31"},{"lineNumber":379,"author":{"gitId":"JustinSoh"},"content":"            Gym gymOutput \u003d parser.parseGymFileInput(input);","lastModifiedDate":"2024-04-07"},{"lineNumber":380,"author":{"gitId":"JustinSoh"},"content":"            Gym gymOutput2 \u003d parser.parseGymFileInput(input2);","lastModifiedDate":"2024-04-07"},{"lineNumber":381,"author":{"gitId":"JustinSoh"},"content":"            // make sure that there is two gym station created","lastModifiedDate":"2024-03-31"},{"lineNumber":382,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(2, gymOutput.getStations().size());","lastModifiedDate":"2024-03-31"},{"lineNumber":383,"author":{"gitId":"JustinSoh"},"content":"            // make sure that the date is correct","lastModifiedDate":"2024-03-31"},{"lineNumber":384,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(\"1997-11-11\", gymOutput.getDate());","lastModifiedDate":"2024-04-12"},{"lineNumber":385,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(gymOutput2.getDate(), \"NA\");","lastModifiedDate":"2024-04-12"},{"lineNumber":386,"author":{"gitId":"JustinSoh"},"content":"            // make sure the gym exercise names are correct","lastModifiedDate":"2024-03-31"},{"lineNumber":387,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(\"bench press\", gymOutput.getStationByIndex(0).getStationName());","lastModifiedDate":"2024-03-31"},{"lineNumber":388,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(\"squats\", gymOutput.getStationByIndex(1).getStationName());","lastModifiedDate":"2024-03-31"},{"lineNumber":389,"author":{"gitId":"JustinSoh"},"content":"            // make sure the number of sets are correct","lastModifiedDate":"2024-03-31"},{"lineNumber":390,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(4, gymOutput.getStationByIndex(0).getNumberOfSets());","lastModifiedDate":"2024-03-31"},{"lineNumber":391,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(2, gymOutput.getStationByIndex(1).getNumberOfSets());","lastModifiedDate":"2024-03-31"},{"lineNumber":392,"author":{"gitId":"JustinSoh"},"content":"            // make sure the reps of each station are correct","lastModifiedDate":"2024-03-31"},{"lineNumber":393,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(10, gymOutput.getStationByIndex(0).getSets().get(0).getNumberOfRepetitions());","lastModifiedDate":"2024-04-01"},{"lineNumber":394,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(5, gymOutput.getStationByIndex(1).getSets().get(0).getNumberOfRepetitions());","lastModifiedDate":"2024-04-01"},{"lineNumber":395,"author":{"gitId":"JustinSoh"},"content":"            // make sure the weights of each station are correct","lastModifiedDate":"2024-03-31"},{"lineNumber":396,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(10, gymOutput.getStationByIndex(0).getSets().get(0).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":397,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(20, gymOutput.getStationByIndex(0).getSets().get(1).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":398,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(30, gymOutput.getStationByIndex(0).getSets().get(2).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":399,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(40, gymOutput.getStationByIndex(0).getSets().get(3).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":400,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(20, gymOutput.getStationByIndex(1).getSets().get(0).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":401,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(30, gymOutput.getStationByIndex(1).getSets().get(1).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":402,"author":{"gitId":"JustinSoh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":403,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-31"},{"lineNumber":404,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":405,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":406,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":407,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":408,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behaviour of parseGymFileInput when invalid input strings are given.","lastModifiedDate":"2024-04-11"},{"lineNumber":409,"author":{"gitId":"JustinSoh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-12"},{"lineNumber":410,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":411,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-11"},{"lineNumber":412,"author":{"gitId":"JustinSoh"},"content":"    void parseGymFileInput_incorrectInput_throwsInvalidInputException() {","lastModifiedDate":"2024-04-12"},{"lineNumber":413,"author":{"gitId":"JustinSoh"},"content":"        // not enough parameters","lastModifiedDate":"2024-04-11"},{"lineNumber":414,"author":{"gitId":"JustinSoh"},"content":"        String input1 \u003d \"gym:2:11-11-1997:bench press:4:10:10,20,30,40:squats:2:5\";","lastModifiedDate":"2024-04-11"},{"lineNumber":415,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e parser.parseGymFileInput(input1));","lastModifiedDate":"2024-04-12"},{"lineNumber":416,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":417,"author":{"gitId":"JustinSoh"},"content":"        // blank parameters","lastModifiedDate":"2024-04-11"},{"lineNumber":418,"author":{"gitId":"JustinSoh"},"content":"        String input2 \u003d \"gym:2:11-11-1997:bench press:4:10:10,20,30,40:squats:2:5:\";","lastModifiedDate":"2024-04-11"},{"lineNumber":419,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e parser.parseGymFileInput(input2));","lastModifiedDate":"2024-04-12"},{"lineNumber":420,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":421,"author":{"gitId":"JustinSoh"},"content":"        // station name too long","lastModifiedDate":"2024-04-11"},{"lineNumber":422,"author":{"gitId":"JustinSoh"},"content":"        String input3 \u003d \"gym:2:11-11-1997:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA:4:10:10,20,30,40:squats:2:5:10,20\";","lastModifiedDate":"2024-04-11"},{"lineNumber":423,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e parser.parseGymFileInput(input3));","lastModifiedDate":"2024-04-12"},{"lineNumber":424,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":425,"author":{"gitId":"JustinSoh"},"content":"        // station name does not follow regex","lastModifiedDate":"2024-04-11"},{"lineNumber":426,"author":{"gitId":"JustinSoh"},"content":"        String input4 \u003d \"gym:2:11-11-1997:aa;:4:10:10,20,30,40:squats:2:5:10,20\";","lastModifiedDate":"2024-04-11"},{"lineNumber":427,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e parser.parseGymFileInput(input4));","lastModifiedDate":"2024-04-12"},{"lineNumber":428,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":429,"author":{"gitId":"JustinSoh"},"content":"        // non-numerical sets","lastModifiedDate":"2024-04-11"},{"lineNumber":430,"author":{"gitId":"JustinSoh"},"content":"        String input5 \u003d \"gym:2:11-11-1997:bench press:a:10:10,20,30,40:squats:2:5:10,20\";","lastModifiedDate":"2024-04-11"},{"lineNumber":431,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e parser.parseGymFileInput(input5));","lastModifiedDate":"2024-04-12"},{"lineNumber":432,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":433,"author":{"gitId":"JustinSoh"},"content":"        // weights size more than number of sets","lastModifiedDate":"2024-04-11"},{"lineNumber":434,"author":{"gitId":"JustinSoh"},"content":"        String input6 \u003d \"gym:2:11-11-1997:bench press:a:10:10,20,30,40:squats:2:5:10\";","lastModifiedDate":"2024-04-11"},{"lineNumber":435,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e parser.parseGymFileInput(input6));","lastModifiedDate":"2024-04-12"},{"lineNumber":436,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":437,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"    // @@author rouvinerh","lastModifiedDate":"2024-04-13"},{"lineNumber":439,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":440,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct inputs being passed to splitAndValidateGymStationInput","lastModifiedDate":"2024-04-13"},{"lineNumber":441,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions thrown.","lastModifiedDate":"2024-04-13"},{"lineNumber":442,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":443,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If there are not enough parameters.","lastModifiedDate":"2024-04-13"},{"lineNumber":444,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput      If there are invalid parameters specified.","lastModifiedDate":"2024-04-13"},{"lineNumber":445,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":446,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-13"},{"lineNumber":447,"author":{"gitId":"rouvinerh"},"content":"    void splitAndValidateGymStationInput_validInput_correctParametersReturned() throws","lastModifiedDate":"2024-04-13"},{"lineNumber":448,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":449,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"Bench Press /s:2 /r:4 /w:10,20\";","lastModifiedDate":"2024-04-13"},{"lineNumber":450,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"Bench Press\", \"2\", \"4\", \"10,20\"};","lastModifiedDate":"2024-04-13"},{"lineNumber":451,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d parser.splitGymStationInput(input);","lastModifiedDate":"2024-04-13"},{"lineNumber":452,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-04-13"},{"lineNumber":453,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":454,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":455,"author":{"gitId":"rouvinerh"},"content":"    ","lastModifiedDate":"2024-04-13"},{"lineNumber":456,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":457,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"j013n3":59,"JustinSoh":123,"rouvinerh":239,"syj02":36}},{"path":"src/test/java/utility/ValidationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"import health.Bmi;","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"import health.Period;","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-04-07"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutLists;","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import java.io.InputStream;","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"public class ValidationTest {","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    private Validation validation;","lastModifiedDate":"2024-04-07"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    private final ByteArrayInputStream inContent \u003d new ByteArrayInputStream(\"\".getBytes());","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    private final InputStream originalIn \u003d System.in;","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    private final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    @BeforeEach","lastModifiedDate":"2024-04-07"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    public void setUpStreams() {","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"        validation \u003d new Validation();","lastModifiedDate":"2024-04-07"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"        System.setIn(inContent);","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    @AfterEach","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    public void restoreStreams() {","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        System.setIn(originalIn);","lastModifiedDate":"2024-04-10"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-04-10"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists.clearWorkoutsRunGym();","lastModifiedDate":"2024-04-12"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-04-10"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-07"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of isEmptyParameterPresent when an array of Strings is passed that has no empty strings.","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"     * Expects it to return false.","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    void isEmptyParameterPresent_nonEmptyStrings_returnsFalse() {","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"1\", \"2\", \"3\", \"4\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"        assertFalse(validation.isEmptyParameterPresent(input));","lastModifiedDate":"2024-04-14"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of isEmptyParameterPresent when an array of Strings is passed that has empty strings.","lastModifiedDate":"2024-04-14"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"     * Expects it to return true.","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"    void isEmptyParameterPresent_nonEmptyStrings_returnsTrue() {","lastModifiedDate":"2024-04-14"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"1\", \"2\", \"3\", \"\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(validation.isEmptyParameterPresent(input));","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateDateInput function with a correctly formatted string.","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    void validateDateInput_validDate_noExceptionThrown() {","lastModifiedDate":"2024-04-14"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"        String validDate \u003d \"09-11-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateDateInput(validDate));","lastModifiedDate":"2024-04-14"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateDateInput function when invalid inputs","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"     * are passed to it.","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown with the correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"    void validateDateInput_invalidDateInput_expectsInvalidInputExceptionWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"        // invalid day format","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"9-11-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input1));","lastModifiedDate":"2024-04-14"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"        // invalid month format","lastModifiedDate":"2024-03-31"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"09-1-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input2));","lastModifiedDate":"2024-04-14"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"        // invalid year format","lastModifiedDate":"2024-03-31"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"09-01-24\";","lastModifiedDate":"2024-03-31"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input3));","lastModifiedDate":"2024-04-14"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"        // illegal day number","lastModifiedDate":"2024-03-31"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"32-01-24\";","lastModifiedDate":"2024-03-31"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input4));","lastModifiedDate":"2024-04-14"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"        // day zero","lastModifiedDate":"2024-03-31"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"        String input5 \u003d \"00-11-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input5));","lastModifiedDate":"2024-04-14"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"        // illegal month number","lastModifiedDate":"2024-03-31"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"        String input6 \u003d \"09-13-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input6));","lastModifiedDate":"2024-04-14"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"        // invalid delimiter","lastModifiedDate":"2024-03-31"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"        String input7 \u003d \"09/12/2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input7));","lastModifiedDate":"2024-04-14"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"        // missing year","lastModifiedDate":"2024-03-31"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"        String input8 \u003d \"09-12\";","lastModifiedDate":"2024-03-31"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input8));","lastModifiedDate":"2024-04-14"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_DATE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        // leap year","lastModifiedDate":"2024-04-06"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"        String input9 \u003d \"29-02-2023\";","lastModifiedDate":"2024-04-06"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input9));","lastModifiedDate":"2024-04-14"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_LEAP_YEAR_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"        // year before 1967","lastModifiedDate":"2024-04-06"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"        String input10 \u003d \"29-02-0000\";","lastModifiedDate":"2024-04-06"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateInput(input10));","lastModifiedDate":"2024-04-14"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_YEAR_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed to validateDate.","lastModifiedDate":"2024-03-31"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"    void validateDeleteInput_correctInput_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"appointment\", \"2\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateDeleteInput(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateDeleteInput function when invalid inputs are passed to it.","lastModifiedDate":"2024-04-14"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"     * Expects either InvalidInput or InsufficientInput exception to be thrown with the correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"    void validateDeleteInput_incorrectInput_expectsExceptionThrownWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"        // invalid item","lastModifiedDate":"2024-03-31"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"free!\", \"2\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDeleteInput(input1));","lastModifiedDate":"2024-04-14"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_LATEST_OR_DELETE_FILTER));","lastModifiedDate":"2024-04-14"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"        // invalid index","lastModifiedDate":"2024-03-31"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"gym\", \"-a\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDeleteInput(input2));","lastModifiedDate":"2024-04-14"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_INDEX_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"        // empty strings","lastModifiedDate":"2024-04-14"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"        String[] input3 \u003d {\"gym\", \"\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDeleteInput(input3));","lastModifiedDate":"2024-04-14"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INSUFFICIENT_DELETE_PARAMETERS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct filter strings being passed to validateHistoryFilter.","lastModifiedDate":"2024-04-14"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"    void validateHistoryFilter_correctFilter_expectsNoExceptionThrown() {","lastModifiedDate":"2024-04-14"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateHistoryFilter(\"gym\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateHistoryFilter(\"run\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateHistoryFilter(\"bmi\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateHistoryFilter(\"period\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateHistoryFilter(\"appointment\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateHistoryFilter(\"workouts\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect filter strings being passed to validateHistoryFilter.","lastModifiedDate":"2024-04-14"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown with correct error message.","lastModifiedDate":"2024-04-14"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"    void validateHistoryFilter_incorrectFilter_expectsInvalidInputExceptionWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"                validation.validateHistoryFilter(\"foo\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_HISTORY_FILTER_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct filter strings being passed to validateDeleteAndLatestFilter.","lastModifiedDate":"2024-04-14"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"    void validateDeleteAndLatestFilter_correctFilter_expectsNoExceptionThrown() {","lastModifiedDate":"2024-04-14"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateDeleteAndLatestFilter(\"gym\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateDeleteAndLatestFilter(\"run\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateDeleteAndLatestFilter(\"bmi\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateDeleteAndLatestFilter(\"period\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateDeleteAndLatestFilter(\"appointment\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect filter strings being passed to validateDeleteAndLatestFilter.","lastModifiedDate":"2024-04-14"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown with correct error message.","lastModifiedDate":"2024-04-14"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"    void validateDeleteAndLatestFilter_incorrectFilter_expectsInvalidInputExceptionWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDeleteAndLatestFilter(\"foo\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_LATEST_OR_DELETE_FILTER));","lastModifiedDate":"2024-04-14"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed into validateBmi.","lastModifiedDate":"2024-03-31"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"    void validateBmiInput_correctParameters_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"1.71\", \"70.00\", \"22-02-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateBmiInput(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateBmiInput function when invalid inputs are passed to it.","lastModifiedDate":"2024-04-14"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"     * Expects either InsufficientInput or InvalidInput exception to be thrown with the correct error message","lastModifiedDate":"2024-04-14"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"     * printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"    void validateBmiInput_incorrectInputs_expectsExceptionThrownWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"        // 1 decimal point weight","lastModifiedDate":"2024-03-31"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"1.71\", \"70.0\", \"29-04-2023\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e validation.validateBmiInput(input1));","lastModifiedDate":"2024-04-14"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_HEIGHT_WEIGHT_INPUT_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"        // 1 decimal point height","lastModifiedDate":"2024-03-31"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"1.7\", \"70.03\", \"29-04-2023\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"                validation.validateBmiInput(input2));","lastModifiedDate":"2024-04-14"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_HEIGHT_WEIGHT_INPUT_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"        // height \u003d 0","lastModifiedDate":"2024-04-14"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"        String[] input3 \u003d {\"0.00\", \"70.03\", \"29-04-2023\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"                validation.validateBmiInput(input3));","lastModifiedDate":"2024-04-14"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.ZERO_HEIGHT_AND_WEIGHT_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"        // height \u003e 2.75","lastModifiedDate":"2024-04-14"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"        String[] input4 \u003d {\"3.00\", \"70.03\", \"29-04-2023\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"                validation.validateBmiInput(input4));","lastModifiedDate":"2024-04-14"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.MAX_HEIGHT_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"        // weight \u003e 650","lastModifiedDate":"2024-04-14"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"        String[] input5 \u003d {\"2.00\", \"1000.00\", \"29-04-2023\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"                validation.validateBmiInput(input5));","lastModifiedDate":"2024-04-14"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.MAX_WEIGHT_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"        // specified date already added","lastModifiedDate":"2024-04-14"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"        new Bmi(\"1.70\", \"70.00\", \"14-04-2024\");","lastModifiedDate":"2024-04-14"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"        String[] input6 \u003d {\"1.70\", \"70.03\", \"14-04-2024\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"                validation.validateBmiInput(input6));","lastModifiedDate":"2024-04-14"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.DATE_ALREADY_EXISTS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"        // empty strings","lastModifiedDate":"2024-04-14"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"        String[] input7 \u003d {\"\", \"70.0\", \"29-04-2023\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"                validation.validateBmiInput(input7));","lastModifiedDate":"2024-04-14"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of validateDateNotAfterToday when a date string before 2024 is given.","lastModifiedDate":"2024-04-14"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"    void validateDateNotAfterToday_dateBeforeToday_noExceptionThrown() {","lastModifiedDate":"2024-04-14"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"14-04-2023\";","lastModifiedDate":"2024-04-14"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateDateNotAfterToday(input));","lastModifiedDate":"2024-04-14"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of validateDateNotAfterToday when a date string after 2024 is given.","lastModifiedDate":"2024-04-14"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown with correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"    void validateDateNotAfterToday_dateAfterToday_expectsExceptionThrownWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"14-04-2025\";","lastModifiedDate":"2024-04-14"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateNotAfterToday(input));","lastModifiedDate":"2024-04-14"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.DATE_IN_FUTURE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":323,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-04-14"},{"lineNumber":324,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":325,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of correct parameters being passed into validatePeriodInput.","lastModifiedDate":"2024-04-14"},{"lineNumber":326,"author":{"gitId":"j013n3"},"content":"     * Expects no exception thrown.","lastModifiedDate":"2024-04-14"},{"lineNumber":327,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":328,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":329,"author":{"gitId":"j013n3"},"content":"    void validatePeriodInput_correctParameters_expectsExceptionThrownWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":330,"author":{"gitId":"j013n3"},"content":"        boolean isParser \u003d true;","lastModifiedDate":"2024-04-10"},{"lineNumber":331,"author":{"gitId":"j013n3"},"content":"        String[] input \u003d {\"22-03-2024\", \"28-03-2024\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":332,"author":{"gitId":"j013n3"},"content":"        assertDoesNotThrow(() -\u003e validation.validatePeriodInput(input, isParser));","lastModifiedDate":"2024-04-14"},{"lineNumber":333,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":334,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":335,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":336,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of incorrect parameters being passed into validatePeriodInput.","lastModifiedDate":"2024-04-14"},{"lineNumber":337,"author":{"gitId":"j013n3"},"content":"     * Expects either InvalidInput or InsufficientInput exception to be thrown with correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":338,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":339,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":340,"author":{"gitId":"j013n3"},"content":"    void validatePeriodInput_incorrectParameters_expectsExceptionThrownWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":341,"author":{"gitId":"j013n3"},"content":"        boolean isParser \u003d true;","lastModifiedDate":"2024-04-10"},{"lineNumber":342,"author":{"gitId":"j013n3"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":343,"author":{"gitId":"j013n3"},"content":"        // empty strings","lastModifiedDate":"2024-04-14"},{"lineNumber":344,"author":{"gitId":"j013n3"},"content":"        String[] input1 \u003d {\"\", \"29-03-2024\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":345,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":346,"author":{"gitId":"j013n3"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":347,"author":{"gitId":"j013n3"},"content":"                validation.validatePeriodInput(input1, isParser));","lastModifiedDate":"2024-04-14"},{"lineNumber":348,"author":{"gitId":"j013n3"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INSUFFICIENT_PERIOD_PARAMETERS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":349,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":350,"author":{"gitId":"j013n3"},"content":"        // end date before start date","lastModifiedDate":"2024-03-31"},{"lineNumber":351,"author":{"gitId":"j013n3"},"content":"        String[] input2 \u003d {\"28-03-2024\", \"22-03-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":352,"author":{"gitId":"j013n3"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":353,"author":{"gitId":"j013n3"},"content":"                validation.validatePeriodInput(input2, isParser));","lastModifiedDate":"2024-04-14"},{"lineNumber":354,"author":{"gitId":"j013n3"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.PERIOD_END_BEFORE_START_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":355,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":356,"author":{"gitId":"j013n3"},"content":"        // invalid start date","lastModifiedDate":"2024-04-14"},{"lineNumber":357,"author":{"gitId":"j013n3"},"content":"        // end date before start date","lastModifiedDate":"2024-04-14"},{"lineNumber":358,"author":{"gitId":"j013n3"},"content":"        String[] input3 \u003d {\"28-13-2024\", \"22-03-2024\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":359,"author":{"gitId":"j013n3"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":360,"author":{"gitId":"j013n3"},"content":"                validation.validatePeriodInput(input3, isParser));","lastModifiedDate":"2024-04-14"},{"lineNumber":361,"author":{"gitId":"j013n3"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_START_DATE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":362,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":363,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":364,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-14"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed into validateAppointmentDetails.","lastModifiedDate":"2024-04-14"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointmentInput_correctParameters_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":372,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"29-04-2024\", \"19:30\", \"test description\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateAppointmentDetails(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect parameters being passed into validateAppointmentDetails.","lastModifiedDate":"2024-04-14"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"     * Expects either InvalidInput or InsufficientInput exception to be thrown with correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointmentInput_incorrectParameters_expectsInvalidInputException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"        // description too long","lastModifiedDate":"2024-03-31"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"28-04-2024\", \"22:30\",","lastModifiedDate":"2024-03-31"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"                           \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +","lastModifiedDate":"2024-03-31"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"                           \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"                validation.validateAppointmentDetails(input1));","lastModifiedDate":"2024-04-14"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.DESCRIPTION_LENGTH_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"        // description contains non-alphanumeric characters","lastModifiedDate":"2024-03-31"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"28-04-2024\", \"22:30\", \"doctor | ;\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"                validation.validateAppointmentDetails(input2));","lastModifiedDate":"2024-04-14"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_DESCRIPTION_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"        // empty strings","lastModifiedDate":"2024-04-14"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"        String[] input3 \u003d {\"\", \"22:30\", \"doctor\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"                validation.validateAppointmentDetails(input3));","lastModifiedDate":"2024-04-14"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted time string being passed into validateTimeInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":406,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":407,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":408,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":409,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_correctInput_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"23:50\";","lastModifiedDate":"2024-03-31"},{"lineNumber":411,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateTimeInput(input));","lastModifiedDate":"2024-04-07"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":413,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":414,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect parameters being passed into validateTimeInput.","lastModifiedDate":"2024-04-14"},{"lineNumber":416,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown with correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":417,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":418,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":419,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_invalidInput_expectsInvalidInputExceptionWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":421,"author":{"gitId":"rouvinerh"},"content":"        // invalid delimiter","lastModifiedDate":"2024-03-31"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"23-50\";","lastModifiedDate":"2024-03-31"},{"lineNumber":423,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":424,"author":{"gitId":"rouvinerh"},"content":"                validation.validateTimeInput(input1));","lastModifiedDate":"2024-04-14"},{"lineNumber":425,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_ACTUAL_TIME_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":426,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":427,"author":{"gitId":"rouvinerh"},"content":"        // illegal hours","lastModifiedDate":"2024-03-31"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"24:50\";","lastModifiedDate":"2024-03-31"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"                validation.validateTimeInput(input2));","lastModifiedDate":"2024-04-14"},{"lineNumber":431,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_ACTUAL_TIME_HOUR_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":432,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":433,"author":{"gitId":"rouvinerh"},"content":"        // illegal minutes","lastModifiedDate":"2024-03-31"},{"lineNumber":434,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"21:60\";","lastModifiedDate":"2024-03-31"},{"lineNumber":435,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":436,"author":{"gitId":"rouvinerh"},"content":"                validation.validateTimeInput(input3));","lastModifiedDate":"2024-04-14"},{"lineNumber":437,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_ACTUAL_TIME_MINUTE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":439,"author":{"gitId":"rouvinerh"},"content":"        // time contains letters","lastModifiedDate":"2024-03-31"},{"lineNumber":440,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"12:2a\";","lastModifiedDate":"2024-03-31"},{"lineNumber":441,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":442,"author":{"gitId":"rouvinerh"},"content":"                validation.validateTimeInput(input4));","lastModifiedDate":"2024-04-14"},{"lineNumber":443,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_ACTUAL_TIME_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":444,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":445,"author":{"gitId":"rouvinerh"},"content":"        // invalid format","lastModifiedDate":"2024-03-31"},{"lineNumber":446,"author":{"gitId":"rouvinerh"},"content":"        String input5 \u003d \"21:55:44\";","lastModifiedDate":"2024-03-31"},{"lineNumber":447,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":448,"author":{"gitId":"rouvinerh"},"content":"                validation.validateTimeInput(input5));","lastModifiedDate":"2024-04-14"},{"lineNumber":449,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_ACTUAL_TIME_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":450,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":451,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":452,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":453,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed to validateRunInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":454,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":455,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":456,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":457,"author":{"gitId":"rouvinerh"},"content":"    void validateRunInput_correctInput_expectsNoExceptionsThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":458,"author":{"gitId":"rouvinerh"},"content":"        // with dates","lastModifiedDate":"2024-03-31"},{"lineNumber":459,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"20:25\", \"5.15\", \"29-03-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":460,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateRunInput(input1));","lastModifiedDate":"2024-04-07"},{"lineNumber":461,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":462,"author":{"gitId":"rouvinerh"},"content":"        // without dates","lastModifiedDate":"2024-03-31"},{"lineNumber":463,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"20:25\", \"5.15\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":464,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateRunInput(input2));","lastModifiedDate":"2024-04-07"},{"lineNumber":465,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":466,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":467,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":468,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect parameters being passed into validateRunInput.","lastModifiedDate":"2024-04-14"},{"lineNumber":469,"author":{"gitId":"rouvinerh"},"content":"     * Expects either InvalidInput or InsufficientInput exception to be thrown with correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":470,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":471,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":472,"author":{"gitId":"rouvinerh"},"content":"    void validateRunInput_incorrectParameters_expectsExceptionThrownWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":473,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":474,"author":{"gitId":"rouvinerh"},"content":"        // invalid distance","lastModifiedDate":"2024-03-31"},{"lineNumber":475,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"20:25\", \"5\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":476,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":477,"author":{"gitId":"rouvinerh"},"content":"                validation.validateRunInput(input1));","lastModifiedDate":"2024-04-07"},{"lineNumber":478,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_RUN_DISTANCE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":479,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":480,"author":{"gitId":"rouvinerh"},"content":"        // date in future","lastModifiedDate":"2024-03-31"},{"lineNumber":481,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"20:25\", \"5.25\", \"31-03-2025\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":482,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":483,"author":{"gitId":"rouvinerh"},"content":"                validation.validateRunInput(input2));","lastModifiedDate":"2024-04-07"},{"lineNumber":484,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.DATE_IN_FUTURE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":485,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":486,"author":{"gitId":"rouvinerh"},"content":"        // has non integer values in time","lastModifiedDate":"2024-04-14"},{"lineNumber":487,"author":{"gitId":"rouvinerh"},"content":"        String[] input3 \u003d {\"2a:03\", \"5.00\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":488,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":489,"author":{"gitId":"rouvinerh"},"content":"                validation.validateRunInput(input3));","lastModifiedDate":"2024-04-10"},{"lineNumber":490,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_RUN_TIME_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":491,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":492,"author":{"gitId":"rouvinerh"},"content":"        // invalid delimiter","lastModifiedDate":"2024-04-14"},{"lineNumber":493,"author":{"gitId":"rouvinerh"},"content":"        String[] input4 \u003d {\"25-03\", \"5.00\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":494,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":495,"author":{"gitId":"rouvinerh"},"content":"                validation.validateRunInput(input4));","lastModifiedDate":"2024-04-10"},{"lineNumber":496,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_RUN_TIME_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":497,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":498,"author":{"gitId":"rouvinerh"},"content":"        // too many parts","lastModifiedDate":"2024-04-14"},{"lineNumber":499,"author":{"gitId":"rouvinerh"},"content":"        String[] input5 \u003d {\"25:03:04:22\", \"5.00\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":500,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":501,"author":{"gitId":"rouvinerh"},"content":"                validation.validateRunInput(input5));","lastModifiedDate":"2024-04-12"},{"lineNumber":502,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_RUN_TIME_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":503,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":504,"author":{"gitId":"rouvinerh"},"content":"        // invalid format test 1","lastModifiedDate":"2024-04-14"},{"lineNumber":505,"author":{"gitId":"rouvinerh"},"content":"        String[] input6 \u003d {\"1:2:3\", \"5.00\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":506,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":507,"author":{"gitId":"rouvinerh"},"content":"                validation.validateRunInput(input6));","lastModifiedDate":"2024-04-12"},{"lineNumber":508,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_RUN_TIME_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":509,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":510,"author":{"gitId":"rouvinerh"},"content":"        // invalid format","lastModifiedDate":"2024-04-14"},{"lineNumber":511,"author":{"gitId":"rouvinerh"},"content":"        String[] input7 \u003d {\"100:00:00\", \"5.00\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":512,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":513,"author":{"gitId":"rouvinerh"},"content":"                validation.validateRunInput(input7));","lastModifiedDate":"2024-04-12"},{"lineNumber":514,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_RUN_TIME_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":515,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":516,"author":{"gitId":"rouvinerh"},"content":"        // empty strings","lastModifiedDate":"2024-04-14"},{"lineNumber":517,"author":{"gitId":"rouvinerh"},"content":"        String[] input8 \u003d {\"20:25\", \"\"};","lastModifiedDate":"2024-04-14"},{"lineNumber":518,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":519,"author":{"gitId":"rouvinerh"},"content":"                validation.validateRunInput(input8));","lastModifiedDate":"2024-04-12"},{"lineNumber":520,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INSUFFICIENT_RUN_PARAMETERS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":521,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":522,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":523,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":524,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of valid input being passed to validateGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":525,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":526,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":527,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":528,"author":{"gitId":"rouvinerh"},"content":"    void validateGymInput_correctInput_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":529,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"4\", \"29-04-2023\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":530,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateGymInput(input1));","lastModifiedDate":"2024-04-07"},{"lineNumber":531,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":532,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"4\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":533,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e validation.validateGymInput(input2));","lastModifiedDate":"2024-04-07"},{"lineNumber":534,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":535,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":536,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":537,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect parameters being passed into validateRunInput.","lastModifiedDate":"2024-04-14"},{"lineNumber":538,"author":{"gitId":"rouvinerh"},"content":"     * Expects either InvalidInput or InsufficientInput exception to be thrown with correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":539,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":540,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":541,"author":{"gitId":"rouvinerh"},"content":"    void validateGymInput_invalidInput_expectsExceptionThrownWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":542,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":543,"author":{"gitId":"rouvinerh"},"content":"        // non integer number of sets","lastModifiedDate":"2024-04-12"},{"lineNumber":544,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"a\", null};","lastModifiedDate":"2024-04-12"},{"lineNumber":545,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":546,"author":{"gitId":"rouvinerh"},"content":"                validation.validateGymInput(input1));","lastModifiedDate":"2024-04-12"},{"lineNumber":547,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_NUMBER_OF_STATIONS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":548,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":549,"author":{"gitId":"rouvinerh"},"content":"        // number of sets exceeds maximum allowed","lastModifiedDate":"2024-04-12"},{"lineNumber":550,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"51\", null};","lastModifiedDate":"2024-04-12"},{"lineNumber":551,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":552,"author":{"gitId":"rouvinerh"},"content":"                validation.validateGymInput(input2));","lastModifiedDate":"2024-04-12"},{"lineNumber":553,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.MAX_STATIONS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":554,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":555,"author":{"gitId":"rouvinerh"},"content":"        // number of sets below minimum allowed","lastModifiedDate":"2024-04-12"},{"lineNumber":556,"author":{"gitId":"rouvinerh"},"content":"        String[] input3 \u003d {\"-1\", null};","lastModifiedDate":"2024-04-12"},{"lineNumber":557,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":558,"author":{"gitId":"rouvinerh"},"content":"                validation.validateGymInput(input3));","lastModifiedDate":"2024-04-12"},{"lineNumber":559,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_NUMBER_OF_STATIONS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":560,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":561,"author":{"gitId":"rouvinerh"},"content":"        // empty strings","lastModifiedDate":"2024-04-14"},{"lineNumber":562,"author":{"gitId":"rouvinerh"},"content":"        String[] input4 \u003d {\"\", null};","lastModifiedDate":"2024-04-14"},{"lineNumber":563,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":564,"author":{"gitId":"rouvinerh"},"content":"                validation.validateGymInput(input4));","lastModifiedDate":"2024-04-14"},{"lineNumber":565,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INSUFFICIENT_GYM_PARAMETERS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":566,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":567,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":568,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":569,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a valid start date being passed to validateDateAfterLatestPeriod.","lastModifiedDate":"2024-04-12"},{"lineNumber":570,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-04-12"},{"lineNumber":571,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":572,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":573,"author":{"gitId":"rouvinerh"},"content":"    void validateDateAfterLatestPeriodInput_validInput_noExceptionThrown() {","lastModifiedDate":"2024-04-12"},{"lineNumber":574,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d  \"10-04-2024\";","lastModifiedDate":"2024-04-12"},{"lineNumber":575,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":576,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateAfterLatestPeriodInput(input1, null));","lastModifiedDate":"2024-04-14"},{"lineNumber":577,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":578,"author":{"gitId":"rouvinerh"},"content":"        LocalDate latestPeriodEndDate2 \u003d LocalDate.of(2024, 3, 9);","lastModifiedDate":"2024-04-12"},{"lineNumber":579,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"11-04-2024\";","lastModifiedDate":"2024-04-12"},{"lineNumber":580,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":581,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateAfterLatestPeriodInput(input2, latestPeriodEndDate2));","lastModifiedDate":"2024-04-12"},{"lineNumber":582,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":583,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":584,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":585,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of invalid start dates being passed to validateDateAfterLatestPeriod.","lastModifiedDate":"2024-04-12"},{"lineNumber":586,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown with correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":587,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":588,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":589,"author":{"gitId":"rouvinerh"},"content":"    void validateDateAfterLatestPeriodInput_invalidDateInput_expectsInvalidInputExceptionWithCorrectMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":590,"author":{"gitId":"rouvinerh"},"content":"        LocalDate latestPeriodEndDate \u003d LocalDate.of(2024, 3, 9);","lastModifiedDate":"2024-04-12"},{"lineNumber":591,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":592,"author":{"gitId":"rouvinerh"},"content":"        //date is before latestPeriodEndDate","lastModifiedDate":"2024-04-12"},{"lineNumber":593,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"09-02-2024\";","lastModifiedDate":"2024-04-12"},{"lineNumber":594,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":595,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateAfterLatestPeriodInput(input1, latestPeriodEndDate));","lastModifiedDate":"2024-04-12"},{"lineNumber":596,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.CURRENT_START_BEFORE_PREVIOUS_END));","lastModifiedDate":"2024-04-14"},{"lineNumber":597,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":598,"author":{"gitId":"rouvinerh"},"content":"        //date same as latestPeriodEndDate","lastModifiedDate":"2024-04-12"},{"lineNumber":599,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"09-03-2024\";","lastModifiedDate":"2024-04-12"},{"lineNumber":600,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":601,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateAfterLatestPeriodInput(input2, latestPeriodEndDate));","lastModifiedDate":"2024-04-12"},{"lineNumber":602,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.CURRENT_START_BEFORE_PREVIOUS_END));","lastModifiedDate":"2024-04-14"},{"lineNumber":603,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":604,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":605,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":606,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of start dates being passed to validateStartDatesTally.","lastModifiedDate":"2024-04-12"},{"lineNumber":607,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-04-12"},{"lineNumber":608,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":609,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":610,"author":{"gitId":"rouvinerh"},"content":"    void validateStartDatesTally_validInput_noExceptionThrown() {","lastModifiedDate":"2024-04-12"},{"lineNumber":611,"author":{"gitId":"rouvinerh"},"content":"        new Period(\"01-01-2024\");","lastModifiedDate":"2024-04-14"},{"lineNumber":612,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"01-01-2024\", \"05-01-2024\"};","lastModifiedDate":"2024-04-12"},{"lineNumber":613,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":614,"author":{"gitId":"rouvinerh"},"content":"                validation.validateStartDatesTally(null, input1));","lastModifiedDate":"2024-04-14"},{"lineNumber":615,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":616,"author":{"gitId":"rouvinerh"},"content":"        LocalDate latestPeriodEndDate2 \u003d LocalDate.of(2024,1,1);","lastModifiedDate":"2024-04-14"},{"lineNumber":617,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"01-01-2024\", \"05-02-2024\"};","lastModifiedDate":"2024-04-12"},{"lineNumber":618,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":619,"author":{"gitId":"rouvinerh"},"content":"                validation.validateStartDatesTally(latestPeriodEndDate2, input2));","lastModifiedDate":"2024-04-12"},{"lineNumber":620,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":621,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":622,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":623,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect parameters being passed into validateRunInput.","lastModifiedDate":"2024-04-14"},{"lineNumber":624,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown with correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":625,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":626,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":627,"author":{"gitId":"rouvinerh"},"content":"    void validateStartDatesTally_invalidInput_expectsInvalidInputExceptionWithCorrectMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":628,"author":{"gitId":"rouvinerh"},"content":"        new Period(\"01-01-2024\");","lastModifiedDate":"2024-04-14"},{"lineNumber":629,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":630,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":631,"author":{"gitId":"rouvinerh"},"content":"        //start dates do not tally","lastModifiedDate":"2024-04-12"},{"lineNumber":632,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"01-01-2023\", \"05-01-2024\"};","lastModifiedDate":"2024-04-12"},{"lineNumber":633,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":634,"author":{"gitId":"rouvinerh"},"content":"                validation.validateStartDatesTally(null, input1));","lastModifiedDate":"2024-04-14"},{"lineNumber":635,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_START_DATE_INPUT_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":636,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":637,"author":{"gitId":"rouvinerh"},"content":"        //end date is missing from user input","lastModifiedDate":"2024-04-12"},{"lineNumber":638,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"01-01-2024\", null};","lastModifiedDate":"2024-04-12"},{"lineNumber":639,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":640,"author":{"gitId":"rouvinerh"},"content":"                validation.validateStartDatesTally(null, input2));","lastModifiedDate":"2024-04-14"},{"lineNumber":641,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.END_DATE_NOT_FOUND_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":642,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":643,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":644,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":645,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a date that is not found the list being passed to validateDateNotPresent.","lastModifiedDate":"2024-04-12"},{"lineNumber":646,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-04-12"},{"lineNumber":647,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":648,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":649,"author":{"gitId":"rouvinerh"},"content":"    void validateDateNotPresent_validInput_noExceptionThrown() {","lastModifiedDate":"2024-04-12"},{"lineNumber":650,"author":{"gitId":"rouvinerh"},"content":"        new Bmi(\"1.75\", \"70.00\", \"02-02-2024\");","lastModifiedDate":"2024-04-14"},{"lineNumber":651,"author":{"gitId":"rouvinerh"},"content":"        new Bmi(\"1.75\", \"71.00\", \"02-03-2024\");","lastModifiedDate":"2024-04-14"},{"lineNumber":652,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":653,"author":{"gitId":"rouvinerh"},"content":"        //date not found in list","lastModifiedDate":"2024-04-12"},{"lineNumber":654,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"03-03-2024\";","lastModifiedDate":"2024-04-12"},{"lineNumber":655,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e","lastModifiedDate":"2024-04-12"},{"lineNumber":656,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateNotPresent(input1));","lastModifiedDate":"2024-04-12"},{"lineNumber":657,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":658,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":659,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":660,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a date that is found the list being passed to validateDateNotPresent.","lastModifiedDate":"2024-04-12"},{"lineNumber":661,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidException to be thrown with correct error message printed.","lastModifiedDate":"2024-04-14"},{"lineNumber":662,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":663,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":664,"author":{"gitId":"rouvinerh"},"content":"    void validateDateNotPresent_invalidInput_expectsInvalidInputExceptionWithCorrectMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":665,"author":{"gitId":"rouvinerh"},"content":"        new Bmi(\"1.75\", \"70.00\", \"02-02-2024\");","lastModifiedDate":"2024-04-14"},{"lineNumber":666,"author":{"gitId":"rouvinerh"},"content":"        new Bmi(\"1.75\", \"71.00\", \"02-03-2024\");","lastModifiedDate":"2024-04-14"},{"lineNumber":667,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":668,"author":{"gitId":"rouvinerh"},"content":"        //date found in list","lastModifiedDate":"2024-04-12"},{"lineNumber":669,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"02-02-2024\";","lastModifiedDate":"2024-04-12"},{"lineNumber":670,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":671,"author":{"gitId":"rouvinerh"},"content":"                validation.validateDateNotPresent(input1));","lastModifiedDate":"2024-04-12"},{"lineNumber":672,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.DATE_ALREADY_EXISTS_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":673,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":674,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"j013n3":45,"JustinSoh":11,"rouvinerh":618}},{"path":"src/test/java/workouts/GymStationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package workouts;","lastModifiedDate":"2024-04-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-04-13"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-04-13"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-13"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2024-04-13"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"class GymStationTest {","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    // @@author rouvinerh","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    private GymStation gymStation;","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    @BeforeEach","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    void setUp() {","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"        // initialise a gymStation object to test the methods","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"            gymStation \u003d new GymStation(\"Bench Press\",","lastModifiedDate":"2024-04-13"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"                    \"1\",","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"                    \"10\",","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"                    \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InsufficientInput | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"            fail(\"Should not have thrown error here\");","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    @AfterEach","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of valid exercise names being passed to validateExerciseName.","lastModifiedDate":"2024-04-13"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    void validateExerciseName_correctName_noExceptionThrown() {","lastModifiedDate":"2024-04-13"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"Bench Press\";","lastModifiedDate":"2024-04-13"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e gymStation.validateGymStationName(input1));","lastModifiedDate":"2024-04-13"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"squat\";","lastModifiedDate":"2024-04-13"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e gymStation.validateGymStationName(input2));","lastModifiedDate":"2024-04-13"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"testing exercise\";","lastModifiedDate":"2024-04-13"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e gymStation.validateGymStationName(input3));","lastModifiedDate":"2024-04-13"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of invalid exercise names being passed to validateExerciseName.","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-13"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-13"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    void validateExerciseName_invalidNames_expectsInvalidInputException() {","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        // numbers in name","lastModifiedDate":"2024-04-13"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"bench1\";","lastModifiedDate":"2024-04-13"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"        Exception exception \u003d assertThrows(CustomExceptions.InvalidInput.class, ()","lastModifiedDate":"2024-04-13"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"                -\u003e gymStation.validateGymStationName(input1));","lastModifiedDate":"2024-04-13"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_GYM_STATION_NAME_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"        // special characters in name","lastModifiedDate":"2024-04-13"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"bench-;\";","lastModifiedDate":"2024-04-13"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e gymStation.validateGymStationName(input2));","lastModifiedDate":"2024-04-13"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_GYM_STATION_NAME_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"        // special characters in name","lastModifiedDate":"2024-04-13"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"bench-;\";","lastModifiedDate":"2024-04-13"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e gymStation.validateGymStationName(input3));","lastModifiedDate":"2024-04-13"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_GYM_STATION_NAME_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"        // name length \u003e 25 chars","lastModifiedDate":"2024-04-13"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \";","lastModifiedDate":"2024-04-13"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e gymStation.validateGymStationName(input4));","lastModifiedDate":"2024-04-13"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_GYM_STATION_NAME_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of empty exercise names being passed to validateExerciseName.","lastModifiedDate":"2024-04-13"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-04-13"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-13"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"    void validateExerciseName_emptyNames_expectsInsufficientInputException() {","lastModifiedDate":"2024-04-13"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"        Exception exception \u003d assertThrows(CustomExceptions.InsufficientInput.class, ()","lastModifiedDate":"2024-04-13"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"                -\u003e gymStation.validateGymStationName(\"\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_GYM_STATION_EMPTY_NAME_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correct weights array being passed to validateWeightsArray.","lastModifiedDate":"2024-04-13"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown, and the correct ArrayList of integers to be","lastModifiedDate":"2024-04-13"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"     * returned.","lastModifiedDate":"2024-04-13"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the input string does not have the right format.","lastModifiedDate":"2024-04-13"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-13"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"    void processWeightsArray_correctInput_returnCorrectArrayList() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"1.0,2.25,50.5,60.75,0.0\";","lastModifiedDate":"2024-04-13"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"        ArrayList\u003cDouble\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-13"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"        expected.add(1.0);","lastModifiedDate":"2024-04-13"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"        expected.add(2.25);","lastModifiedDate":"2024-04-13"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"        expected.add(50.5);","lastModifiedDate":"2024-04-13"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        expected.add(60.75);","lastModifiedDate":"2024-04-13"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"        expected.add(0.0);","lastModifiedDate":"2024-04-13"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"        ArrayList\u003cDouble\u003e result \u003d gymStation.processWeightsArray(input);","lastModifiedDate":"2024-04-13"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected.toArray(), result.toArray());","lastModifiedDate":"2024-04-13"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect weights array being passed to validateWeightsArray.","lastModifiedDate":"2024-04-13"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-13"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-13"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"    void processWeightsArray_invalidInput_expectInvalidInputException() {","lastModifiedDate":"2024-04-13"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"        // negative weights","lastModifiedDate":"2024-04-13"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"-1,2\";","lastModifiedDate":"2024-04-13"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        Exception exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"                gymStation.processWeightsArray(input1));","lastModifiedDate":"2024-04-13"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_ARRAY_FORMAT_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        // blanks","lastModifiedDate":"2024-04-13"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"\";","lastModifiedDate":"2024-04-13"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"                gymStation.processWeightsArray(input));","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_EMPTY_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"        // non integer weights","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"1,a\";","lastModifiedDate":"2024-04-13"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"                gymStation.processWeightsArray(input2));","lastModifiedDate":"2024-04-13"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_ARRAY_FORMAT_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"        // incorrect multiple of weights","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"1.333,1.444,0.998\";","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"                gymStation.processWeightsArray(input3));","lastModifiedDate":"2024-04-13"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_VALUE_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"        // exceed max weights","lastModifiedDate":"2024-04-13"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"3000\";","lastModifiedDate":"2024-04-13"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"                gymStation.processWeightsArray(input4));","lastModifiedDate":"2024-04-13"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHT_MAX_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-04-13"}],"authorContributionMap":{"JustinSoh":18,"rouvinerh":146}},{"path":"src/test/java/workouts/GymTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package workouts;","lastModifiedDate":"2024-03-24"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-24"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-24"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-24"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-30"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-24"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-04-13"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"class GymTest {","lastModifiedDate":"2024-03-24"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-24"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"    void setUp() {","lastModifiedDate":"2024-03-24"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists.clearWorkoutsRunGym();","lastModifiedDate":"2024-04-12"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of adding a new station to the gym.","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     * Verifies whether the newly added station is correctly reflected in {@code GymSet}.","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"     * Expected Behaviour is to add stations and sets to the gym.","lastModifiedDate":"2024-03-24"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    void addStation_validInput_expectAddedStation() {","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym \u003d new Gym();","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"ExerciseOne\", \"1\", \"10\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"ExerciseTwo\", \"2\", \"20\", \"1.0,2.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(2, newGym.getStations().size());","lastModifiedDate":"2024-03-24"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"ExerciseThree\", \"3\", \"30\", \"1.0,2.0,3.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cGymStation\u003e stations \u003d newGym.getStations();","lastModifiedDate":"2024-03-24"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(3, stations.size());","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"            for(int i \u003d 0; i \u003c stations.size(); i++){","lastModifiedDate":"2024-03-24"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"                String stationName \u003d stations.get(i).getStationName();","lastModifiedDate":"2024-03-24"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"                ArrayList\u003cGymSet\u003e sets \u003d stations.get(i).getSets();","lastModifiedDate":"2024-03-24"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"                int numberOfSets \u003d sets.size();","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"                if (i \u003d\u003d 0){","lastModifiedDate":"2024-03-24"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(\"ExerciseOne\", stationName);","lastModifiedDate":"2024-04-13"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(1, numberOfSets );","lastModifiedDate":"2024-03-24"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(1.0, sets.get(0).getWeight());","lastModifiedDate":"2024-04-13"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(10, sets.get(0).getNumberOfRepetitions());","lastModifiedDate":"2024-04-13"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"                } else if (i \u003d\u003d 1){","lastModifiedDate":"2024-03-24"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(\"ExerciseTwo\", stationName);","lastModifiedDate":"2024-04-13"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(2, numberOfSets );","lastModifiedDate":"2024-03-24"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(1.0, sets.get(0).getWeight());","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(20, sets.get(0).getNumberOfRepetitions());","lastModifiedDate":"2024-04-13"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(2.0, sets.get(1).getWeight());","lastModifiedDate":"2024-04-13"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(20, sets.get(1).getNumberOfRepetitions());","lastModifiedDate":"2024-04-13"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"                } else if (i \u003d\u003d 2){","lastModifiedDate":"2024-03-24"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(\"ExerciseThree\", stationName);","lastModifiedDate":"2024-04-13"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(3, numberOfSets );","lastModifiedDate":"2024-03-24"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(1.0, sets.get(0).getWeight());","lastModifiedDate":"2024-04-13"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(30, sets.get(0).getNumberOfRepetitions());","lastModifiedDate":"2024-04-13"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(2.0, sets.get(1).getWeight());","lastModifiedDate":"2024-04-13"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(30, sets.get(1).getNumberOfRepetitions());","lastModifiedDate":"2024-04-13"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(3.0, sets.get(2).getWeight());","lastModifiedDate":"2024-04-13"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(30, sets.get(2).getNumberOfRepetitions());","lastModifiedDate":"2024-04-13"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-03-24"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-24"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"     * Test to see if getStationByIndex handles invalid index correctly by throwing an OutOfBounds exception.","lastModifiedDate":"2024-04-13"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-13"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"    void getStationByIndex_invalidIndex_throwOutOfBoundsError(){","lastModifiedDate":"2024-04-13"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym \u003d new Gym();","lastModifiedDate":"2024-04-13"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"        Exception exception;","lastModifiedDate":"2024-04-13"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-04-13"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"ExerciseOne\", \"1\", \"10\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"ExerciseTwo\", \"2\", \"20\", \"1.0,2.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"ExerciseThree\", \"3\", \"30\", \"1.0,2.0,3.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"            exception \u003d assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e newGym.getStationByIndex(-1));","lastModifiedDate":"2024-04-13"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"            assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_INDEX_SEARCH_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"            exception \u003d assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e newGym.getStationByIndex(3));","lastModifiedDate":"2024-04-13"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"            assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_INDEX_SEARCH_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-04-13"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"    // Test for toFileString method","lastModifiedDate":"2024-04-13"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-30"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"    void toFileString_correctInput_expectedCorrectString(){","lastModifiedDate":"2024-03-30"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        String expected1 \u003d \"GYM:2:11-11-1997:bench press:4:4:10.0,20.0,30.0,40.0:squats:4:3:20.0,30.0,40.0,50.0\";","lastModifiedDate":"2024-04-06"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"        String expected2WithNoDate \u003d \"GYM:2:NA:bench press:4:4:10.0,20.0,30.0,40.0:squats:4:3:20.0,30.0,40.0,50.0\";","lastModifiedDate":"2024-04-06"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-04-13"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"            Gym newGym \u003d new Gym(\"11-11-1997\");","lastModifiedDate":"2024-03-30"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"            Gym newGym2 \u003d new Gym();","lastModifiedDate":"2024-03-30"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"bench press\", \"4\", \"4\", \"10.0,20.0,30.0,40.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"squats\", \"4\", \"3\", \"20.0,30.0,40.0,50.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"            newGym2.addStation(\"bench press\", \"4\", \"4\", \"10.0,20.0,30.0,40.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"            newGym2.addStation(\"squats\", \"4\", \"3\", \"20.0,30.0,40.0,50.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"            String output \u003d newGym.toFileString();","lastModifiedDate":"2024-03-30"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"            String output2 \u003d newGym2.toFileString();","lastModifiedDate":"2024-03-30"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expected1, output);","lastModifiedDate":"2024-03-30"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expected2WithNoDate, output2);","lastModifiedDate":"2024-03-30"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-30"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behaviour of incorrect inputs being passed to","lastModifiedDate":"2024-04-13"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"     * addStation method in Gym","lastModifiedDate":"2024-04-13"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-13"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-13"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"    void addStation_invalidInput_expectsInvalidInputException() {","lastModifiedDate":"2024-04-13"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        Gym gym \u003d new Gym();","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"        Exception exception;","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"        // number of sets is not a positive integer","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"a\", \"4\", \"1020\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_SETS_POSITIVE_DIGIT_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"        // number of reps is not a positive integer","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"2\", \"a\", \"1020\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_REPS_POSITIVE_DIGIT_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"        // weights does not have comma","lastModifiedDate":"2024-04-13"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"2\", \"3\", \"1020\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_NUMBER_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"        // weights array \u003e maximum","lastModifiedDate":"2024-04-13"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"2\", \"3\", \"10000,20\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHT_MAX_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"        // weights array \u003e minimum","lastModifiedDate":"2024-04-13"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"2\", \"3\", \"-10,-20\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_ARRAY_FORMAT_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"        // weights array has letters","lastModifiedDate":"2024-04-13"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"2\", \"3\", \"10,a\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_ARRAY_FORMAT_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"        // weights array has spaces","lastModifiedDate":"2024-04-13"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"2\", \"3\", \"10, 20\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_ARRAY_FORMAT_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"        // weights array regex fail","lastModifiedDate":"2024-04-13"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"2\", \"3\", \"a\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_ARRAY_FORMAT_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        // no weights specified","lastModifiedDate":"2024-04-13"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"2\", \"3\", \"\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains(ErrorConstant.INVALID_WEIGHTS_EMPTY_ERROR));","lastModifiedDate":"2024-04-13"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"        // weights and sets do not match","lastModifiedDate":"2024-04-13"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"        exception \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-13"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(\"Bench Press\", \"1\", \"3\", \"10,20\"));","lastModifiedDate":"2024-04-13"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"        assertTrue(exception.getMessage().contains((ErrorConstant.INVALID_WEIGHTS_NUMBER_ERROR)));","lastModifiedDate":"2024-04-13"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-24"}],"authorContributionMap":{"JustinSoh":193,"rouvinerh":1}},{"path":"src/test/java/workouts/RunTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-14"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-12"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"class RunTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists.clearWorkoutsRunGym();","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of checkRunTime when valid inputs are passed.","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    void checkRunTime_correctInput_returnListOfTimes() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"        // with hours","lastModifiedDate":"2024-04-12"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        String testTime \u003d \"01:59:10\";","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"        Run runTest \u003d new Run(testTime, \"15.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result \u003d runTest.processRunTime(testTime);","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected \u003d {1, 59, 10};","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-04-12"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        // without hours","lastModifiedDate":"2024-04-12"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result2 \u003d runTest.processRunTime(\"50:52\");","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected2 \u003d {-1, 50, 52};","lastModifiedDate":"2024-04-12"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected2, result2);","lastModifiedDate":"2024-04-12"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        // with hours, zero minutes zero seconds","lastModifiedDate":"2024-04-12"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result3 \u003d runTest.processRunTime(\"01:00:00\");","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected3 \u003d {1, 0, 0};","lastModifiedDate":"2024-04-12"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected3, result3);","lastModifiedDate":"2024-04-12"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"        // max time","lastModifiedDate":"2024-04-12"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result4 \u003d runTest.processRunTime(\"99:59:59\");","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected4 \u003d {99, 59, 59};","lastModifiedDate":"2024-04-12"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected4, result4);","lastModifiedDate":"2024-04-12"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        // min time","lastModifiedDate":"2024-04-12"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result5 \u003d runTest.processRunTime(\"00:01\");","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected5 \u003d {-1, 0, 1};","lastModifiedDate":"2024-04-12"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected5, result5);","lastModifiedDate":"2024-04-12"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        // max minute max second","lastModifiedDate":"2024-04-12"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result6 \u003d runTest.processRunTime(\"59:59\");","lastModifiedDate":"2024-04-13"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected6 \u003d {-1, 59, 59};","lastModifiedDate":"2024-04-12"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected6, result6);","lastModifiedDate":"2024-04-12"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of checkRunTime when invalid inputs are passed.","lastModifiedDate":"2024-04-12"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown with the correct error message","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"    void processRunTime_invalidInputs_expectInvalidInputExceptionWithCorrectErrorMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"        // hours set to 00","lastModifiedDate":"2024-04-12"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"00:30:00\";","lastModifiedDate":"2024-04-12"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e new Run(input1, \"15.3\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_HOUR_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"        // invalid minutes","lastModifiedDate":"2024-04-12"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"60:00\";","lastModifiedDate":"2024-04-12"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e new Run(input2, \"15.3\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_MINUTE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"        // invalid seconds","lastModifiedDate":"2024-04-12"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"05:60\";","lastModifiedDate":"2024-04-12"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e new Run(input3, \"15.3\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.INVALID_SECOND_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"        // 00:00 as time","lastModifiedDate":"2024-04-12"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"00:00\";","lastModifiedDate":"2024-04-12"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e new Run(input4, \"15.3\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.ZERO_TIME_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-12"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"     * Test the behaviour of checkDistance when valid distance is passed.","lastModifiedDate":"2024-04-12"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"     * Expects the 2 decimal place string distance to be returned.","lastModifiedDate":"2024-04-12"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-12"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If distance is outside valid range","lastModifiedDate":"2024-04-12"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-12"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-12"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"    void checkDistance_validDistance_returnTwoDecimalPlaceDistance() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-12"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"        Run run1 \u003d new Run(\"25:00\", \"5.00\");","lastModifiedDate":"2024-04-12"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(\"5.00\", run1.getDistance());","lastModifiedDate":"2024-04-12"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"        // min distance","lastModifiedDate":"2024-04-12"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"        Run run2 \u003d new Run(\"00:02\", \"0.01\");","lastModifiedDate":"2024-04-12"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(\"0.01\", run2.getDistance());","lastModifiedDate":"2024-04-12"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"        // max distance","lastModifiedDate":"2024-04-12"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"        Run run3 \u003d new Run(\"99:59:00\", \"5000.00\");","lastModifiedDate":"2024-04-12"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(\"5000.00\", run3.getDistance());","lastModifiedDate":"2024-04-12"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of checkDistance when invalid distances are passed.","lastModifiedDate":"2024-04-12"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-12"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"    void checkDistance_invalidDistance_throwsInvalidInputException() {","lastModifiedDate":"2024-04-12"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"        // more than max of 5000","lastModifiedDate":"2024-04-12"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"                new Run(\"03:30:00\", \"5001.00\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.DISTANCE_TOO_LONG_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"        // less than min of 0","lastModifiedDate":"2024-04-12"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"                new Run(\"03:30:00\", \"0.00\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.ZERO_DISTANCE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of calculatedPace when a valid run is added.","lastModifiedDate":"2024-04-12"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown and correct pace returned.","lastModifiedDate":"2024-04-12"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"    void calculatePace_validTimeAndDistance_returnCorrectPace() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-12"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"        Run run1 \u003d new Run(\"25:00\", \"5.00\");","lastModifiedDate":"2024-04-12"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(\"5:00/km\", run1.getPace());","lastModifiedDate":"2024-04-12"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        Run run2 \u003d new Run(\"01:25:00\", \"5.00\");","lastModifiedDate":"2024-04-12"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(\"17:00/km\", run2.getPace());","lastModifiedDate":"2024-04-12"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"        // min pace","lastModifiedDate":"2024-04-12"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        Run run3 \u003d new Run(\"5:00\", \"5.00\");","lastModifiedDate":"2024-04-12"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(\"1:00/km\", run3.getPace());","lastModifiedDate":"2024-04-12"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"        // max pace","lastModifiedDate":"2024-04-12"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"        Run run4 \u003d new Run(\"02:30:00\", \"5.00\");","lastModifiedDate":"2024-04-12"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(\"30:00/km\", run4.getPace());","lastModifiedDate":"2024-04-12"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of calculatedPace when a run with an invalid pace is added.","lastModifiedDate":"2024-04-12"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-12"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"    void calculatePace_invalidTimeAndDistance_throwInvalidInputException() {","lastModifiedDate":"2024-04-12"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        Exception exceptionThrown;","lastModifiedDate":"2024-04-14"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        // exceed max pace of 30:00/km","lastModifiedDate":"2024-04-12"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"                new Run(\"03:30:00\", \"5.00\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.MAX_PACE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"        // below min pace of 1:00/km","lastModifiedDate":"2024-04-12"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"        exceptionThrown \u003d assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"                new Run(\"02:00\", \"10.00\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(exceptionThrown.toString().contains(ErrorConstant.MIN_PACE_ERROR));","lastModifiedDate":"2024-04-14"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":1,"rouvinerh":162}},{"path":"src/test/java/workouts/WorkoutListsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"class WorkoutListsTest {","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    void setUp() {","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists.clearWorkoutsRunGym();","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of adding a new run to the run list.","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     * Verifies whether the newly added run is correctly reflected in the run and WorkoutList.","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    void addRun_normalInput_expectAppend()  {","lastModifiedDate":"2024-03-14"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"            Run inputRun \u003d new Run(\"40:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"            WorkoutLists workoutListsInstance \u003d new WorkoutLists();","lastModifiedDate":"2024-04-12"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"            workoutListsInstance.addRun(inputRun);","lastModifiedDate":"2024-04-12"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-07"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cRun\u003e runList \u003d WorkoutLists.getRuns();","lastModifiedDate":"2024-04-12"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cWorkout\u003e workoutList \u003d WorkoutLists.getWorkouts();","lastModifiedDate":"2024-04-12"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"            Workout expectedRun \u003d runList.get(runList.size() - 1);","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"            Workout expectedWorkout \u003d workoutList.get(runList.size() - 1);","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(inputRun, expectedRun);","lastModifiedDate":"2024-03-14"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(inputRun, expectedWorkout);","lastModifiedDate":"2024-03-14"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception.\");","lastModifiedDate":"2024-03-14"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting the workout list with {@code RUN} , {@code ALL}","lastModifiedDate":"2024-03-14"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"     * Verifies whether the method is able to correct retrieve the list of workouts.","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    void getWorkouts_properInput_expectRetrievalRun() {","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cRun\u003e inputList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"            inputList.add(new Run(\"40:10\", \"10.3\", \"15-03-2024\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"            inputList.add(new Run(\"30:10\", \"20.3\", \"30-03-2023\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cRun\u003e runList \u003d WorkoutLists.getRuns();","lastModifiedDate":"2024-04-12"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"            for(int i \u003d 0; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"                Run expected \u003d inputList.get(i);","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"                Run actual \u003d (Run) runList.get(i);","lastModifiedDate":"2024-03-14"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"                assertEquals(expected, actual);","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-04-12"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception.\");","lastModifiedDate":"2024-03-14"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting the latest run from the run list.","lastModifiedDate":"2024-03-14"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"     * Expected behavior is for {@code actual} to equal to the {@code secondRun}","lastModifiedDate":"2024-03-14"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    void getLatestRun_properList_correctRetrieval() {","lastModifiedDate":"2024-03-14"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"            new Run(\"20:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"            Run secondRun \u003d new Run(\"20:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"            Run actual \u003d WorkoutLists.getLatestRun();","lastModifiedDate":"2024-04-12"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(secondRun, actual);","lastModifiedDate":"2024-03-14"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-14"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"     * Test the behaviour when you try to get the latest run from an empty list.","lastModifiedDate":"2024-03-14"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"     * Expected behaviour is to raise {@code OutOfBounds} exception.","lastModifiedDate":"2024-03-14"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"    void getLatestRun_emptyList_throwOutOfBound() {","lastModifiedDate":"2024-03-14"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"        // Call the method or code that should throw the exception","lastModifiedDate":"2024-03-14"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, WorkoutLists::getLatestRun);","lastModifiedDate":"2024-04-12"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one run left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"    void deleteRun_properList_listOfSizeOne() throws CustomExceptions.InvalidInput, CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"20:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"20:11\", \"10.3\", \"15-03-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists.deleteRun(index);","lastModifiedDate":"2024-04-12"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(1, WorkoutLists.getRunSize());","lastModifiedDate":"2024-04-12"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"    void deleteRun_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"                WorkoutLists.deleteRun(0));","lastModifiedDate":"2024-04-12"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"    void deleteRun_properListInvalidIndex_throwOutOfBoundsForRun() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"20:11\", \"10.3\", \"15-03-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"                WorkoutLists.deleteRun(invalidIndex));","lastModifiedDate":"2024-04-12"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of gyms with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one gym left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"    void deleteGym_properList_listOfSizeOne() throws CustomExceptions.InvalidInput, CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"        Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0,2.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-04-13"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Bench Press\", \"1\", \"50\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Shoulder Press\", \"2\", \"10\", \"1.0,2.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"            Gym gym2 \u003d new Gym();","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Squat Press\", \"1\", \"50\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Lat Press\", \"2\", \"10\", \"1.0,2.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Bicep curls\", \"1\", \"10\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-04-13"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"        WorkoutLists.deleteGym(index);","lastModifiedDate":"2024-04-12"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(1, WorkoutLists.getGymSize());","lastModifiedDate":"2024-04-12"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of gym with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"    void deleteGym_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"                WorkoutLists.deleteGym(0));","lastModifiedDate":"2024-04-12"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"    void deleteGym_properListInvalidIndex_throwOutOfBoundsForGym() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-13"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"        Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-25"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-04-13"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Bench Press\", \"1\", \"50\", \"1.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Shoulder Press\", \"2\", \"10\", \"2.0,3.0\");","lastModifiedDate":"2024-04-13"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-04-13"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"                WorkoutLists.deleteGym(invalidIndex));","lastModifiedDate":"2024-04-12"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":126,"rouvinerh":82,"L5-Z":1}}]
