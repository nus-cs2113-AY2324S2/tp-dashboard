[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    mainClass.set(\"seedu.pulsepilot.PulsePilot\")","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    archiveBaseName.set(\"pulsepilot\")","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"JustinSoh":1,"rouvinerh":2,"-":44}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display |    Name    |             Github Profile             | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"--------|:----------:|:--------------------------------------:|:---------:","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Justin Soh | [Github](https://github.com/JustinSoh) | [Portfolio](https://justinsoh.github.io/)","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Rouvin Erh | [Github](https://github.com/rouvinerh) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alfaatih | [Github](https://github.com/L5-Z) | [Portfolio](https://l5-z.github.io)","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |  Jolene  | [Github](https://github.com/j013n3) | [Portfolio](docs/team/j013n3.md)","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ying Jia | [Github](https://github.com/syj02) | [Portfolio](docs/team/syj02.md)","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"j013n3":1,"JustinSoh":2,"rouvinerh":1,"L5-Z":1,"syj02":1,"-":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"* [Acknowledgements](#acknowledgements)","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"* [Introduction](#introduction)","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"* [Design](#design)","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"  * [Overview of Components](#overview-of-components)","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"  * [Architecture](#architecture)","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"  * [UI component](#ui-component)","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"  * [Utility component](#utility-component)","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"  * [Health component](#health-component)","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"  * [Workout component](#workout-component)","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"  * [Storage component](#storage-component)","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"  * [PulsePilot component](#pulsepilot-component)","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"* [Product scope](#product-scope)","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"  * [Target user profile](#target-user-profile)","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"  * [Value proposition](#value-proposition)","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"* [User Stories](#user-stories)","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"* [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"* [Glossary](#glossary)","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"* [Instructions for manual testing](#instructions-for-manual-testing)","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"Our team has referenced [Address Book (Level-3)](https://github.com/se-edu/addressbook-level3) ","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"referenced for their [User Guide (UG)](https://se-education.org/addressbook-level3/UserGuide.html)","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"and [Developer Guide (DG)](https://se-education.org/addressbook-level3/DeveloperGuide.html) to better structure our own Developer Guide.","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"- The `java.util.Scanner` class from the Java Standard Library is used for reading user input.","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"- The `JUnit 5` testing framework is used for writing and running unit tests.","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"- {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"-- include links to the original source as well}","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"## Introduction","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"The aim of this guide is to provide an explanation for all the functions and processing of information in PulsePilot. This is to enable any technical readers to get a detailed understanding of the application\u0027s internals.","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"The application follows an Object-Oriented Design approach, with separate classes for handling different components","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"of the application, such as user input, output, exercise logging, and health data management.","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"The main entry point of the application is the Handler class, which contains the processInput method. ","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"This method is responsible for parsing user input, validating it, and delegating the appropriate actions ","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"to other classes based on the command provided.","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"The Output class is responsible for printing messages, prompts, and information to the console.","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"The Run and Gym classes represent different types of exercises that the user can log. ","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"The Health, Bmi, Period and Appointment classes are used to manage health-related data, such as Body Mass Index (BMI), ","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"menstrual period information and medical appointment details. ","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"The LogFile class is used for logging application events and user actions to a log file.","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}","lastModifiedDate":"2020-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"This guide will include UML diagrams to better each component of our product. ","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"## Design","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"### Overview of Components","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"`Main`","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"- When PulsePilot is launched, it creates an instance of `PulsePilot`.","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"`PulsePilot`","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"- Upon creation, it initialises a `LogFile` and `DataFile` object to create log and data files for the bot.","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"- The `initialiseBot()` function is called to retrieve the user\u0027s name. ","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"### Architecture","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"### UI component","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"### Utility component","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"### Health component","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"The Health component consists of Health, HealthList, Bmi, Period, and Appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"{Insert class diagram -- half drawn in draw.io}","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"1. `Health` class stores date. ","lastModifiedDate":"2024-03-28"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"2. `HealthList`class stores separate lists for different `Health` objects using ArrayList.","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"`HealthList`includes methods to add, delete, view history of the various `Health`lists.","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"3. `Bmi`class stores bmi attributes (i.e. height, weight, date, bmi value and bmi category). ","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"j013n3"},"content":"4. `Period`class stores period attributes (i.e. start date of period, end date of period, period length ","lastModifiedDate":"2024-03-28"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"and cycle length). ","lastModifiedDate":"2024-03-28"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"5. `Appointment`class stores appointment attributes (i.e. date, time, appointment description). Primarily, `Appointment`","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"has all necessary getter methods to access the attributes.","lastModifiedDate":"2024-03-27"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"### Workout component","lastModifiedDate":"2024-03-27"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"### Storage component","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"### PulsePilot component","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"Outpatients who need to monitor their health activity and health parameters.","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"PulsePilot is a health monitoring application designed to bridge the gap between medical professionals ","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"and patients during outpatient recovery. PulsePilot offers outpatients the capability to input and track a range of ","lastModifiedDate":"2024-03-28"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"health activities, encompassing both aerobic and anaerobic exercises, alongside crucial health parameters such as ","lastModifiedDate":"2024-03-28"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"BMI and menstrual cycles. Simultaneously, PulsePilot facilitates access to this vital data for various ","lastModifiedDate":"2024-03-28"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"healthcare professionals, ensuring comprehensive and seamless support in guiding outpatient recovery processes.","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"| Version | As a ...              | I want to ...       | So that I can ...                          |","lastModifiedDate":"2020-05-24"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"|---------|-----------------------|---------------------|--------------------------------------------|","lastModifiedDate":"2024-03-28"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"| 1.0     | gym enthusiast        | enter my gym stats  | track my gym sessions                      |","lastModifiedDate":"2024-03-27"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"| 1.0     | runner                | see my running pace | see my relative speed for each run         |","lastModifiedDate":"2024-03-27"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"| 1.0     | runner                | log my runs         | track my running progress over time        |","lastModifiedDate":"2024-03-27"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"| 1.0     | health conscious user | calculate my BMI | track change in my weight over time        |","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"| 1.0     | female user           | track my menstrual cycle | monitor any deviations from my normal menstrual cycle |","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"| 2.0     | runner                | see my latest run | quickly view my most recent run details    |","lastModifiedDate":"2024-03-27"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"| 2.0     | gym enthusiast        | see my latest gym session | quickly view my most recent gym session    | ","lastModifiedDate":"2024-03-27"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"| 2.0     | gym enthusiast        | enter varying weights for sets | accurately track my progress and strength gains | ","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"| 2.0     | female user           | predict my next period start date | plan ahead and better manage my health | ","lastModifiedDate":"2024-03-28"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"| 2.0     | injured user          | track my medical appointments | remember the appointments I have  |","lastModifiedDate":"2024-03-28"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":127,"author":{"gitId":"L5-Z"},"content":"- **Usability**: The application should have a user-friendly command-line interface with ","lastModifiedDate":"2024-03-27"},{"lineNumber":128,"author":{"gitId":"L5-Z"},"content":"clear instructions and prompts for user input.","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"L5-Z"},"content":"- **Reliability**: The application should handle invalid or incomplete user input gracefully, ","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"L5-Z"},"content":"providing appropriate error messages and prompting the user for correct input.","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"L5-Z"},"content":"- **Maintainability**: The codebase should follow best practices for Object-Oriented Programming, ","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"L5-Z"},"content":"including proper separation of concerns, modularization, and code documentation.","lastModifiedDate":"2024-03-27"},{"lineNumber":133,"author":{"gitId":"L5-Z"},"content":"- **Testability**: The application should have comprehensive unit tests to ","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"L5-Z"},"content":"ensure correct functionality and enable easier maintenance and future enhancements.","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"{Give non-functional requirements}","lastModifiedDate":"2020-05-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"## Glossary","lastModifiedDate":"2020-05-24"},{"lineNumber":139,"author":{"gitId":"L5-Z"},"content":"- **Run**: An exercise activity involving running or jogging, typically characterized by distance, duration, and date.","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"L5-Z"},"content":"-  **Gym**: An exercise activity involving various strength training exercises or ","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"L5-Z"},"content":"workouts performed at a gym or fitness center.","lastModifiedDate":"2024-03-27"},{"lineNumber":142,"author":{"gitId":"L5-Z"},"content":"- **BMI (Body Mass Index)**: A measure of body fat based on height and weight, ","lastModifiedDate":"2024-03-27"},{"lineNumber":143,"author":{"gitId":"L5-Z"},"content":"used to assess overall health and fitness.","lastModifiedDate":"2024-03-27"},{"lineNumber":144,"author":{"gitId":"L5-Z"},"content":"- **Menstrual Period**: A recurring physiological event in females, characterized by the start and end dates.","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"syj02"},"content":"- **Medical Appointment**: An arrangement with a doctor, physiotherapist, or healthcare professional, ","lastModifiedDate":"2024-03-27"},{"lineNumber":146,"author":{"gitId":"syj02"},"content":"to meet at a certain time and place.","lastModifiedDate":"2024-03-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* *glossary item* - Definition","lastModifiedDate":"2020-05-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"## Instructions for manual testing","lastModifiedDate":"2020-05-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}","lastModifiedDate":"2020-05-24"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"### Adding a new run","lastModifiedDate":"2024-03-27"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"#### Expected Input: ","lastModifiedDate":"2024-03-27"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"```java","lastModifiedDate":"2024-03-27"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"WORKOUT /e:run /d:\u003cdistance\u003e /t:\u003ctime\u003e /date:\u003cdate\u003e","lastModifiedDate":"2024-03-27"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"```","lastModifiedDate":"2024-03-27"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"- Replace `\u003cdistance\u003e` with the distance covered to 2 decimal place  (e.g. if the distance is 5.123 km, enter 5.12).","lastModifiedDate":"2024-03-27"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"- Replace `\u003ctime\u003e` with the duration of the run in the format `HH:MM:SS` (e.g. if you ran for an hour and 5 minutes,","lastModifiedDate":"2024-03-27"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"  enter 01:05:00).","lastModifiedDate":"2024-03-27"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"- Replace `\u003cdate\u003e` with the date of the run in the format `DD-MM-YYYY` (e.g. if the date is 24/07/2024, enter","lastModifiedDate":"2024-03-27"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"  24-07-2024).","lastModifiedDate":"2024-03-27"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"#### Sequence Diagram for Adding a New Run Exercise","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"wip","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"\u003c!--![Sequence Diagram for Adding a New Run Exercise]()--\u003e","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"#### General Workflow of Adding a New Run Exercise","lastModifiedDate":"2024-03-27"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"1. User input is passed to `handleExercise()` of the `handler` class.","lastModifiedDate":"2024-03-27"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"2. `handleExercise()` will call `checkTypeOfExercise()` to validate the input and determine the type of exercise.","lastModifiedDate":"2024-03-27"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"3. If the exercise type is `run`, `checkTypeofExercise()` will return `WorkoutConstant.RUN`","lastModifiedDate":"2024-03-27"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"4. Upon receiving `WorkoutConstant.RUN`, `handlerExercise()` will call `Run.getRun()` to extract out","lastModifiedDate":"2024-03-27"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"all the run details. These details are stored in `runDetails: String[]`.","lastModifiedDate":"2024-03-27"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"5. `handlerExercise()` will then call `Run.addRun` to create a `newRun` object","lastModifiedDate":"2024-03-27"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"   - If there is a date provided, it will add the date to the `newRun` object.","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"   - Else it will add `NA` to the date parameter. ","lastModifiedDate":"2024-03-27"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"   - It will also add the `distance`, `time`, and `pace` to the `newRun` object.","lastModifiedDate":"2024-03-27"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"   - Lastly, it will add the `newRun` object to the `runList` and `workoutList` in the `WorkoutList` class.","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"6. The newly created `newRun` object is parsed into `Output.printAddRun()` and printed out to the user","lastModifiedDate":"2024-03-27"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"[Back to table of contents](#Developer-Guide)","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":183,"author":{"gitId":"L5-Z"},"content":"### How to load sample data","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"L5-Z"},"content":"The application does not currently support loading sample data. However, you can manually test different scenarios ","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"L5-Z"},"content":"by entering commands and providing input through the command-line interface.","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"L5-Z"},"content":"For example, to test logging a run exercise, you can enter the following command:","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"L5-Z"},"content":"```java","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"L5-Z"},"content":"WORKOUT /e:run /d:10.3 /t:00:40:10 /date:15-03-2024","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"L5-Z"},"content":"```","lastModifiedDate":"2024-03-27"},{"lineNumber":191,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":192,"author":{"gitId":"L5-Z"},"content":"This command will create a new run exercise with a distance of 10.3 units, a duration of 40 minutes and 10 seconds,","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"L5-Z"},"content":"and a date of March 15, 2024.","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"syj02"},"content":"Similarly, you can test logging gym workouts, recording BMI and menstrual period information, tracking medical","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"syj02"},"content":"appointment, viewing the exercise history, and accessing the latest run details by entering the appropriate commands.","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"j013n3":17,"JustinSoh":37,"rouvinerh":20,"L5-Z":41,"syj02":46,"-":35}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"# PulsePilot","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"{Give product intro here}","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"rouvinerh":1,"-":7}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"PulsePilot is a **desktop app for tracking health-related information, optimised for users via a Command Line Interface (CLI)**. If one can type fast, you can key in and track health-related information faster than traditional GUI applications installed on your phone or computer.","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"* [Quick Start](#quick-start)","lastModifiedDate":"2024-03-16"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"* [Notes About Command Format](#notes-about-command-format)","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"* [Commands](#commands)","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"  * [Workout: Run](#workout-run)","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"  * [Workout: Gym](#workout-gym)","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    * [Adding Gym Stations](#adding-gym-stations)","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"  * [Health: BMI](#health-bmi)","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"  * [Health: Period](#health-period)","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"  * [History](#history)","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"  * [Latest](#latest)","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"  * [Help](#help)","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"  * [Exit](#exit)","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"* [Logging](#logging)","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"* [Saving Data](#saving-data)","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"* [Frequently Asked Questions (FAQ)](#faq)","lastModifiedDate":"2024-03-16"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"* [Command Summary](#command-summary)","lastModifiedDate":"2024-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"{Give steps to get started quickly}","lastModifiedDate":"2020-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"1. Ensure that you have the latest Java 11.","lastModifiedDate":"2024-03-16"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"2. Download the latest `pulsepilot.jar`.","lastModifiedDate":"2024-03-16"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"3. Copy the file to the folder you want to use as the home folder for PulsePilot.","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"4. Open a command terminal (either cmd.exe or bash), cd to the folder with `pulsepilot.jar` in it, and use `java -jar pulsepilot.jar` to run the application.","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"5. The welcome message for PulsePilot should be printed to the screen.","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"6. Type commands in the command line and press Enter to execute it. Using `help` and pressing Enter will print the help message.","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"The bot will prompt you for your name before starting. ","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-16"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":" _              _","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"|_)    |  _  _ |_) o  |  _ _|_","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"|  |_| | _\u003e (/_|   |  | (_) |_","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"Engaging orbital thrusters...","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"PulsePilot on standby","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"What is your name, voyager?","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"Jason","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"Welcome aboard, Captain Jason","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"Tips: Enter \u0027help\u0027 to view the pilot manual!","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"Initiating FTL jump sequence...","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"FTL jump completed.","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"Terminal primed. Command inputs are now accepted...","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"## Notes About Command Format","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"* Parameters in `UPPER_CASE` are the parameters to be **supplied by the user**.","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"* Parameters in square brackets are optional.","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"  * `[/d:DATE]` means that the `DATE` parameter is **optional**.","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2024-03-16"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"## Commands","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"### Workout: Run","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"Adds a new Run workout to track. ","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"Format: `new /e:run /d:DISTANCE /t:TIME [/date:DATE]`","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"* All parameters must be provided in correct order as shown above.","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"* `DISTANCE` is a **2 decimal point positive number** (i.e. `15.24`) representing the distance ran.","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"* `TIME` is in `[HH]:MM:SS` format (i.e. `25:30`). The `HH` representing hours is **optional**.","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"* `DATE` is in `DD-MM-YYYY` format (i.e. `19-03-2024`).","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"Examples: `new /e:run /d:5.24 /t:25:23 /date:19-03-2024`","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"new /e:run /d:5.24 /t:25:23 /date:19-03-2024","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"Successfully added a new run session","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"Type\tTime\t\tDistance\tPace\t\tDate","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"run \t25:23\t\t5.24\t\t4:51/km\t\t2024-03-19","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"### Workout: Gym","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"Adds a new gym session to track. ","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"Format: `new /e:gym /n:NUMBER_OF_STATIONS`","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"* All parameters must be provided in correct order as shown above.","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"* `NUMBER_OF_STATIONS` is a **positive integer**  representing the number of stations for one Gym session.","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"Examples: `new /e:gym /n:2`","lastModifiedDate":"2024-03-20"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"#### Adding Gym Stations","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"Upon entry of the `new /e:gym` command, the bot will prompt for further details for each station done:","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"Format: `STATION_NAME /s:SET /r:REPS /w:WEIGHT`","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"* All parameters must be provided in correct order as shown above.","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"* `STATION_NAME` is a **string**  representing the name of the gym station.","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"* `SET` is a **positive integer**  representing the number of sets done for one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"* `REPS` is a **positive integer**  representing the number of repetitions done for one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"* `WEIGHT` is a **positive integer**  representing the weight used for one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"Examples: `Bench Press /s:4 /r:10 /w:75`","lastModifiedDate":"2024-03-20"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"new /e:gym /n:2","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"Please enter the details of station 1. (Format: [name of exercise:string] /s:[sets:number] /r:[reps:number] /w:[weights:number])","lastModifiedDate":"2024-03-20"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"Bench Press /s:4 /r:10 /w:5","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"Please enter the details of station 2. (Format: [name of exercise:string] /s:[sets:number] /r:[reps:number] /w:[weights:number])","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"Squat /s:4 /r:5 /w:100","lastModifiedDate":"2024-03-20"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"Successfully added a new gym session","lastModifiedDate":"2024-03-20"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"Bench Press: 4 sets of 10 reps at 5 KG","lastModifiedDate":"2024-03-20"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"Squat: 4 sets of 5 reps at 100 KG","lastModifiedDate":"2024-03-20"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"### Health: BMI","lastModifiedDate":"2024-03-20"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"Calculates user\u0027s Body Mass Index (BMI).","lastModifiedDate":"2024-03-19"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"Format: `health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE`","lastModifiedDate":"2024-03-20"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"* All parameters must be provided in correct order as shown above.","lastModifiedDate":"2024-03-19"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"* `HEIGHT` is a **2 decimal point number in metres** (i.e. `1.71`) representing the user\u0027s height.","lastModifiedDate":"2024-03-20"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"* `WEIGHT` is a **2 decimal point number in kilograms** (i.e. `60.50`) representing the user’s weight.","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"* `DATE` is in `DD-MM-YYYY` format (i.e. `19-03-2024`).","lastModifiedDate":"2024-03-19"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"Examples:","lastModifiedDate":"2024-03-19"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"* `health /h:bmi /height:1.70 /weight:75.42 /date:19-03-2024`","lastModifiedDate":"2024-03-20"},{"lineNumber":145,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":147,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-03-19"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"health /h:bmi /height:1.70 /weight:75.42 /date:19-03-2024","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"Added: bmi | 1.70 | 75.42 | 19-03-2024","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"j013n3"},"content":"2024-03-19","lastModifiedDate":"2024-03-19"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"Your BMI is 26.1","lastModifiedDate":"2024-03-20"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"You\u0027re overweight.","lastModifiedDate":"2024-03-20"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":155,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-03-19"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"### Health: Period","lastModifiedDate":"2024-03-20"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"Tracks the start and end of user\u0027s menstrual cycle.","lastModifiedDate":"2024-03-19"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"Format: `health /h:period /start:START_DATE /end:END_DATE`","lastModifiedDate":"2024-03-20"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"* All parameters must be provided in correct order as shown above.","lastModifiedDate":"2024-03-19"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"* `START_DATE` is `DD-MM-YYYY` format (i.e. `19-03-2024`) representing the start of a cycle.","lastModifiedDate":"2024-03-20"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"* `END_DATE` is a `DD-MM-YYYY` format (i.e. `19-03-2024`) representing the end of a cycle.","lastModifiedDate":"2024-03-20"},{"lineNumber":166,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":167,"author":{"gitId":"j013n3"},"content":"Examples:","lastModifiedDate":"2024-03-19"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"* `health /h:period /start:09-03-2022 /end:16-03-2022`","lastModifiedDate":"2024-03-20"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"health /h:period /start:09-03-2022 /end:16-03-2022","lastModifiedDate":"2024-03-20"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"Added: period | 09-03-2022 | 16-03-2022","lastModifiedDate":"2024-03-20"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"Period Start: 2022-03-09 Period End: 2022-03-16","lastModifiedDate":"2024-03-20"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"Period Length: 8 days","lastModifiedDate":"2024-03-20"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-03-19"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"### History","lastModifiedDate":"2024-03-20"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"Prints all tracked instances of `run`, `gym`, `bmi` or `period`.","lastModifiedDate":"2024-03-20"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"Format: `history /view:TYPE`","lastModifiedDate":"2024-03-20"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"* `TYPE` is either `run`, `gym`, `bmi` or `period`.","lastModifiedDate":"2024-03-20"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"Examples:","lastModifiedDate":"2024-03-20"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"* `history /view:run`","lastModifiedDate":"2024-03-20"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"history /view:run","lastModifiedDate":"2024-03-20"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"Index\t\tType\tTime\t\tDistance\tPace\t\tDate","lastModifiedDate":"2024-03-20"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"1.\t\trun \t25:00\t\t5.00\t\t5:00/km\t\t2024-03-17","lastModifiedDate":"2024-03-20"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"2.\t\trun \t25:23\t\t5.24\t\t4:51/km\t\t2024-03-18","lastModifiedDate":"2024-03-20"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"3.\t\trun \t25:23\t\t5.24\t\t4:51/km\t\t2024-03-19","lastModifiedDate":"2024-03-20"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-03-19"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"### Latest","lastModifiedDate":"2024-03-20"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"Prints the latest instance of `run`, `gym`, `bmi` or `period`.","lastModifiedDate":"2024-03-20"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"Format: `latest /view:TYPE`","lastModifiedDate":"2024-03-20"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"* `TYPE` is either `run`, `gym`, `bmi` or `period`.","lastModifiedDate":"2024-03-20"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"Examples:","lastModifiedDate":"2024-03-20"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"* `latest /view:run`","lastModifiedDate":"2024-03-20"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"latest /view:period","lastModifiedDate":"2024-03-20"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"Period Start: 2022-03-09 Period End: 2022-03-16","lastModifiedDate":"2024-03-20"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"Period Length: 8 days","lastModifiedDate":"2024-03-20"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"### Help","lastModifiedDate":"2024-03-20"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"Prints the `help` message. ","lastModifiedDate":"2024-03-20"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"Format: `help`","lastModifiedDate":"2024-03-20"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"Expected output:","lastModifiedDate":"2024-03-20"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"help","lastModifiedDate":"2024-03-20"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"Commands List:","lastModifiedDate":"2024-03-20"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"new /e:run /d:DISTANCE /t:TIME [/date:DATE] - Add a new run","lastModifiedDate":"2024-03-20"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"new /e:gym /n:NUMBER_OF_STATIONS [/date:DATE] - Add a new gym workout","lastModifiedDate":"2024-03-20"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE - Add new BMI data","lastModifiedDate":"2024-03-20"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"health /h:period /start:START_DATE /end:END_DATE - Add new period data","lastModifiedDate":"2024-03-20"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"history /view:[run/gym/bmi/period] - Show history of runs/gyms/bmi records/periods tracked","lastModifiedDate":"2024-03-20"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"latest /view:[run/gym/bmi/period] - Show history of runs/gyms/bmi records/periods tracked","lastModifiedDate":"2024-03-20"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"help - Show this help message","lastModifiedDate":"2024-03-20"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"exit - Exit the program","lastModifiedDate":"2024-03-20"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"### Exit","lastModifiedDate":"2024-03-20"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"Exits the bot gracefully.","lastModifiedDate":"2024-03-20"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"Format: `exit`","lastModifiedDate":"2024-03-20"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"exit","lastModifiedDate":"2024-03-20"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"Initiating PulsePilot landing sequence...","lastModifiedDate":"2024-03-20"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"PulsePilot successful touchdown","lastModifiedDate":"2024-03-20"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"See you soon, Captain!","lastModifiedDate":"2024-03-20"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"## Logging","lastModifiedDate":"2024-03-20"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"The latest logs are written to `pulsepilot_log.txt` once the bot exits. Each time the bot is run, the current `pulsepilot_log.txt` file is overwritten with the most recent logs. The logs record both info messages and any error messages.","lastModifiedDate":"2024-03-20"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"## Saving Data","lastModifiedDate":"2024-03-20"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"As of now, the bot does not write or read from any file. This feature will be implemented in v2.0. ","lastModifiedDate":"2024-03-20"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":273,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-24"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"**1.** How do I transfer my data to another computer?","lastModifiedDate":"2024-03-16"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"As of now, it is not possible to do so. This feature will be implemented in `v2.0`. ","lastModifiedDate":"2024-03-20"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":279,"author":{"gitId":"-"},"content":"## Command Summary","lastModifiedDate":"2020-05-24"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"| Action       | Format, Examples                                                                                                                     |","lastModifiedDate":"2024-03-16"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"|--------------|--------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-03-20"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"| Print help   | `help`                                                                                                                               |","lastModifiedDate":"2024-03-20"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"| Add new run  | `new /e:run /d:DISTANCE /t:TIME [/date:DATE]`\u003cbr/\u003eExample: `new /e:run /d:5.24 /t:25:23 /date:19-03-2024`                            |","lastModifiedDate":"2024-03-20"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"| Add gym      | `new /e:gym /n:NUMBER_OF_STATIONS`\u003cbr/\u003eExample:`new /e:gym /n:4`                                                                     |","lastModifiedDate":"2024-03-20"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"| Track BMI    | `health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE` \u003cbr/\u003eExample:   `health /h:bmi /height:1.70 /weight:75.42 /date:19-03-2024` |","lastModifiedDate":"2024-03-20"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"| Track Period | `health /h:period /start:START_DATE /end:END_DATE` \u003cbr/\u003eExample:   `health /h:period /start:09-03-2022 /end:16-03-2022`              |","lastModifiedDate":"2024-03-20"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"| View history | `history /view:TYPE` \u003cbr/\u003eExample:   `history /view:run`                                                                             |","lastModifiedDate":"2024-03-20"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"| View latest  | `latest /view:TYPE` \u003cbr/\u003eExample:   `latest /view:bmi`                                                                               |","lastModifiedDate":"2024-03-20"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"| Exit bot     | `exit`                                                                                                                               |","lastModifiedDate":"2024-03-20"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"j013n3":20,"rouvinerh":238,"-":33}},{"path":"src/main/java/health/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"import utility.HealthConstant;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":" * The Appointment class extends the Health class.","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":" * It contains information about the date, time, and description of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"public class Appointment extends Health {","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"     * The date of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"    protected LocalDate date;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"     * The time of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    protected LocalTime time;","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"     * The description of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"    protected String description;","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"     * Constructor for Appointment object.","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"     * @param stringDate A string representing the date of the appointment","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"     * @param stringTime A string representing the time of the appointment","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"     * @param description A string describing the appointment","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"    public Appointment(String stringDate, String stringTime, String description) {","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"        this.date \u003d Parser.parseDate(stringDate);","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"        this.time \u003d Parser.parseTime(stringTime);","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"     * Retrieves the date of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"     * @return The date of appointment in LocalDate","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"        assert date !\u003d null : ErrorConstant.NULL_DATE_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"        return this.date;","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"     * Retrieves the time of the appointment","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"     * @return The time of appointment in LocalTime","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"        assert time !\u003d null : ErrorConstant.NULL_TIME_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"        return this.time;","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"     * Retrieves the description of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"     * @return The description of appointment in String","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"    public String getDescription() {","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        return this.description;","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"     * Retrieves the string representation of an Appointment object.","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"     * @return A formatted string representing an Appointment object.","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"    @Override","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"    public String toString() {","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"        return String.format(HealthConstant.PRINT_APPOINTMENT_FORMAT,","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"                getDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"                getTime(),","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"                this.description);","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"j013n3":3,"rouvinerh":4,"L5-Z":1,"syj02":74}},{"path":"src/main/java/health/Bmi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"package health;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import utility.HealthConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":" * The Bmi class extends the Health class and provides functionality to calculate","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":" * and categorise the Body Mass Index based on user\u0027s height and weight.","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":" */","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"public class Bmi extends Health {","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"     * The height of the user in meters.","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"    protected double height;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"     * The weight of the user in kilograms.","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    protected double weight;","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"     * The Bmi of the user.","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"    protected double bmiValue;","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     * The BMI category.","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"    protected String bmiCategory;","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"     * The date of user input.","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    protected LocalDate date;","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"     * Constructor for Bmi object.","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"     * @param height A string representing the user\u0027s height.","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"     * @param weight A string representing the user\u0027s weight.","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If height or weight values are not positive.","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"    public Bmi(String height, String weight, String date) {","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"        this.height \u003d Double.parseDouble(height);","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"        this.weight \u003d Double.parseDouble(weight);","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"j013n3"},"content":"        assert this.height \u003e 0 \u0026\u0026 this.weight \u003e 0 : ErrorConstant.NEGATIVE_VALUE_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"        this.date \u003d Parser.parseDate(date);","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"        this.bmiValue \u003d calculateBmiValue();","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"        this.bmiCategory \u003d getBmiCategory(bmiValue);","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"j013n3"},"content":"     * Returns height recorded in Bmi object.","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"j013n3"},"content":"     * @return The height recorded in the Bmi object.","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"    public String getHeight() {","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.TWO_DECIMAL_PLACE_FORMAT, height);","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"     * Returns weight recorded in Bmi object.","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"j013n3"},"content":"     * @return The weight recorded in the Bmi object.","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"    public String getWeight() {","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.TWO_DECIMAL_PLACE_FORMAT, weight);","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"     * Returns date recorded in Bmi object.","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"     * @return The date recorded in the Bmi object.","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"j013n3"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"        return date;","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"     * Calculates Bmi based on height and weight.","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"     * @return The calculated Bmi value.","lastModifiedDate":"2024-03-19"},{"lineNumber":93,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If calculated value is not positive.","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"    public double calculateBmiValue() {","lastModifiedDate":"2024-03-18"},{"lineNumber":96,"author":{"gitId":"j013n3"},"content":"        double bmi \u003d Math.round((weight / (Math.pow(height, UiConstant.POWER_OF_TWO))) * UiConstant.ROUNDING_FACTOR)","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"j013n3"},"content":"                / UiConstant.ROUNDING_FACTOR;","lastModifiedDate":"2024-03-21"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"        assert bmi \u003e 0: ErrorConstant.NEGATIVE_BMI_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"        return bmi;","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":101,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":102,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"j013n3"},"content":"     * Prints the Bmi category based on the calculated Bmi value.","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"     * @param bmiValue The Bmi value to categorize.","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"     * @return A string presenting the Bmi category.","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If calculated value is not positive.","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":109,"author":{"gitId":"j013n3"},"content":"    public static String getBmiCategory(double bmiValue) {","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"j013n3"},"content":"        assert bmiValue \u003e 0: ErrorConstant.NEGATIVE_BMI_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":111,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"j013n3"},"content":"        if (bmiValue \u003c HealthConstant.UNDERWEIGHT_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.UNDERWEIGHT_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"        } else if (bmiValue \u003c HealthConstant.NORMAL_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.NORMAL_WEIGHT_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"        } else if (bmiValue \u003c HealthConstant.OVERWEIGHT_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.OVERWEIGHT_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"        } else if (bmiValue \u003c HealthConstant.OBESE_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.OBESE_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"        } else {","lastModifiedDate":"2024-03-14"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.SEVERELY_OBESE_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"     * Returns a string containing calculated Bmi value and its corresponding category.","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"     * @return A string of Bmi object.","lastModifiedDate":"2024-03-19"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.PRINT_BMI_FORMAT,","lastModifiedDate":"2024-03-28"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"                this.date,","lastModifiedDate":"2024-03-28"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"                this.calculateBmiValue(),","lastModifiedDate":"2024-03-28"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"                getBmiCategory(bmiValue));","lastModifiedDate":"2024-03-28"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"j013n3":119,"rouvinerh":2,"L5-Z":4,"syj02":12}},{"path":"src/main/java/health/Health.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"package health;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":" * Represents a Health object to track user\u0027s health information.","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"public class Health {","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"    protected LocalDate date \u003d null;","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"    public Health() {","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"        return date;","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"    @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"    public String toString(){","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"        return getDate().toString();","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"j013n3":15,"rouvinerh":3,"syj02":3}},{"path":"src/main/java/health/HealthList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import utility.HealthConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-25"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":" * Represents the list of BMI objects stored.","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"public class HealthList extends ArrayList\u003cHealth\u003e {","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"    /** LogFile for logging health-related activities. */","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    static LogFile logFile \u003d LogFile.getInstance();","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"    /** The list of Bmi records. */","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    private static final ArrayList\u003cBmi\u003e bmis \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"    /** The list of Appointment records. */","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    private static final ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"    /** The list of Period records. */","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"    private static final ArrayList\u003cPeriod\u003e periods \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"     * Adds a Bmi to the list of Bmis whenever addBmi is called.","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"     * @param bmi Bmi object.","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If Bmi object is null.","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"    public static void addBmi(Bmi bmi) {","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"        assert bmi !\u003d null : ErrorConstant.NULL_BMI_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"        bmis.add(bmi);","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-22"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"     * Prints the most recently added Bmi object from bmis list.","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If bmis list is empty.","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"    public static void showCurrentBmi() {","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"        assert !bmis.isEmpty() : ErrorConstant.EMPTY_BMI_LIST_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"        int currentIndex \u003d bmis.size();","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"        System.out.println(bmis.get(currentIndex - 1));","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"     * Prints all the BMI entries recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If bmis list is empty","lastModifiedDate":"2024-03-22"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"    public static void showBmiHistory() {","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"        assert !bmis.isEmpty() : ErrorConstant.EMPTY_BMI_LIST_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"        for (Bmi bmi : bmis) {","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"            System.out.println(bmi);","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"     * Adds a period to the ArrayList of periods.","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"     * @param period Period object to be added","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If period object is null","lastModifiedDate":"2024-03-22"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"    public static void addPeriod(Period period) {","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"        assert period !\u003d null : ErrorConstant.NULL_PERIOD_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"        if (!periods.isEmpty()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"            Period previousPeriod \u003d periods.get(periods.size() - 1);","lastModifiedDate":"2024-03-25"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"            previousPeriod.setCycleLength(period.getStartDate());","lastModifiedDate":"2024-03-25"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"        periods.add(period);","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"     * Prints the latest period object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If periods list is empty","lastModifiedDate":"2024-03-22"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"    public static void showLatestPeriod() {","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"        assert !periods.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"        int currentIndex \u003d periods.size();","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"        System.out.println(periods.get(currentIndex - 1));","lastModifiedDate":"2024-03-19"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"     * Prints all Period entries tracked.","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":93,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If periods list is empty","lastModifiedDate":"2024-03-22"},{"lineNumber":94,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"    public static void showPeriodHistory() {","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"j013n3"},"content":"        assert !periods.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"j013n3"},"content":"        for (Period period : periods) {","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"            System.out.println(period);","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":103,"author":{"gitId":"j013n3"},"content":"     * Prints the latest three Period objects from the periods list.","lastModifiedDate":"2024-03-28"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"    public static void printLatestThreeCycles() {","lastModifiedDate":"2024-03-28"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"        int size \u003d periods.size();","lastModifiedDate":"2024-03-28"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"        int startIndex \u003d size - HealthConstant.LATEST_THREE_CYCLE_LENGTHS;","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"j013n3"},"content":"        assert startIndex \u003e\u003d 0 : ErrorConstant.START_INDEX_NEGATIVE_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":110,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":111,"author":{"gitId":"j013n3"},"content":"        int endIndex \u003d size - HealthConstant.LAST_CYCLE_OFFSET;","lastModifiedDate":"2024-03-28"},{"lineNumber":112,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"        for (int i \u003d startIndex; i \u003c\u003d endIndex; i++) {","lastModifiedDate":"2024-03-28"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"            System.out.println(periods.get(i));","lastModifiedDate":"2024-03-28"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"     * Retrieves the number of periods recorded.","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"     * @return The number of periods recorded.","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"    public static int getPeriodSize() {","lastModifiedDate":"2024-03-25"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"        return periods.size();","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"     * Gets the Period object at the specified index.","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"     * @param index The index of the Period object.","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"     * @return The Period object at the specified index, or null if the index is out of bounds.","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"    public static Period getPeriod(int index) {","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"        if (index \u003c 0 || index \u003e\u003d periods.size()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"            return null;","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"        return periods.get(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"     * Predicts the start date of the next period based on the average cycle length of the last three cycles.","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"     * @return The predicted start date of the next period","lastModifiedDate":"2024-03-28"},{"lineNumber":144,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If periods lists is empty","lastModifiedDate":"2024-03-28"},{"lineNumber":145,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"j013n3"},"content":"    public static LocalDate predictNextPeriodStartDate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"j013n3"},"content":"        assert !periods.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":148,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"j013n3"},"content":"        Period latestPeriod \u003d periods.get(periods.size() - 1);","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"j013n3"},"content":"        return latestPeriod.nextCyclePrediction();","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"j013n3"},"content":"    //@@l5_z","lastModifiedDate":"2024-03-22"},{"lineNumber":154,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":155,"author":{"gitId":"j013n3"},"content":"     * Clears the Bmis and Periods array lists.","lastModifiedDate":"2024-03-20"},{"lineNumber":156,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If periods and bmis lists are not empty","lastModifiedDate":"2024-03-22"},{"lineNumber":157,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":158,"author":{"gitId":"j013n3"},"content":"    public static void clearHealthLists() {","lastModifiedDate":"2024-03-27"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"        periods.clear();","lastModifiedDate":"2024-03-20"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"        bmis.clear();","lastModifiedDate":"2024-03-20"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"        appointments.clear();","lastModifiedDate":"2024-03-27"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"        assert bmis.isEmpty() : ErrorConstant.BMI_LIST_UNCLEARED_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"        assert periods.isEmpty() : ErrorConstant.PERIOD_LIST_UNCLEARED_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":164,"author":{"gitId":"j013n3"},"content":"        assert appointments.isEmpty() : ErrorConstant.APPOINTMENT_LIST_UNCLEARED_ERROR;","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":166,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"     * Retrieves size of periods list.","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"     * @return Size of periods list.","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"    public static int getPeriodsSize() {","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"        return periods.size();","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"     * Retrieves size of bmis list.","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"     * @return Size of bmis list.","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"    public static int getBmisSize() {","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"        return bmis.size();","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"j013n3"},"content":"     * Deletes Bmi object based on index.","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"j013n3"},"content":"     * @param index Index of the Bmi object to be deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"j013n3"},"content":"    public static void deleteBmi(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":190,"author":{"gitId":"j013n3"},"content":"        assert !bmis.isEmpty() : ErrorConstant.EMPTY_BMI_LIST_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":191,"author":{"gitId":"j013n3"},"content":"        if (index \u003c 0 || index \u003e\u003d bmis.size()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":192,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":193,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"        Bmi deletedBmi \u003d bmis.get(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":195,"author":{"gitId":"j013n3"},"content":"        System.out.printf((HealthConstant.LOG_DELETE_BMI_FORMAT) + \"%n\",","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"j013n3"},"content":"                        deletedBmi.bmiValue,","lastModifiedDate":"2024-03-26"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"                        deletedBmi.date);","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"        bmis.remove(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"j013n3"},"content":"        LogFile.writeLog(HealthConstant.BMI_REMOVED_MESSAGE_PREFIX + index, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"     * Deletes Bmi object based on index.","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"     * @param index Index of the Bmi object to be deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"j013n3"},"content":"    public static void deletePeriod(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":207,"author":{"gitId":"j013n3"},"content":"        assert !periods.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":208,"author":{"gitId":"j013n3"},"content":"        if (index \u003c 0 || index \u003e\u003d periods.size()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":209,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":210,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":211,"author":{"gitId":"j013n3"},"content":"        Period deletedPeriod \u003d periods.get(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":212,"author":{"gitId":"j013n3"},"content":"        System.out.printf((HealthConstant.LOG_DELETE_PERIOD_FORMAT) + \"%n\",","lastModifiedDate":"2024-03-27"},{"lineNumber":213,"author":{"gitId":"j013n3"},"content":"                deletedPeriod.getStartDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":214,"author":{"gitId":"j013n3"},"content":"                deletedPeriod.getEndDate());","lastModifiedDate":"2024-03-27"},{"lineNumber":215,"author":{"gitId":"j013n3"},"content":"        periods.remove(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":216,"author":{"gitId":"j013n3"},"content":"        LogFile.writeLog(HealthConstant.PERIOD_REMOVED_MESSAGE_PREFIX + index, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":217,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":218,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":219,"author":{"gitId":"syj02"},"content":"    //@@author syj_02","lastModifiedDate":"2024-03-26"},{"lineNumber":220,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":221,"author":{"gitId":"syj02"},"content":"     * Adds an Appointment to the list of Appointments whenever addAppointment is called.","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"syj02"},"content":"     * Sorts all Appointment objects in the list by date and time of the appointments with","lastModifiedDate":"2024-03-27"},{"lineNumber":223,"author":{"gitId":"syj02"},"content":"     * the earliest appointment at the top..","lastModifiedDate":"2024-03-27"},{"lineNumber":224,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":225,"author":{"gitId":"syj02"},"content":"     * @param appointment Appointment object","lastModifiedDate":"2024-03-27"},{"lineNumber":226,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If Appointment object is null.","lastModifiedDate":"2024-03-27"},{"lineNumber":227,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":228,"author":{"gitId":"syj02"},"content":"    public static void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-26"},{"lineNumber":229,"author":{"gitId":"syj02"},"content":"        assert appointment !\u003d null : ErrorConstant.NULL_APPOINTMENT_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":230,"author":{"gitId":"syj02"},"content":"        appointments.add(appointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":231,"author":{"gitId":"syj02"},"content":"        appointments.sort(Comparator.comparing(Appointment::getDate).thenComparing(Appointment::getTime));","lastModifiedDate":"2024-03-26"},{"lineNumber":232,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":233,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":234,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":235,"author":{"gitId":"syj02"},"content":"     * Deletes Appointment object based on index.","lastModifiedDate":"2024-03-27"},{"lineNumber":236,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":237,"author":{"gitId":"syj02"},"content":"     * @param index Index of the Appointment object to be deleted.","lastModifiedDate":"2024-03-27"},{"lineNumber":238,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions If the index is out of bounds","lastModifiedDate":"2024-03-27"},{"lineNumber":239,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":240,"author":{"gitId":"syj02"},"content":"    public static void deleteAppointment(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-26"},{"lineNumber":241,"author":{"gitId":"syj02"},"content":"        assert !appointments.isEmpty() : ErrorConstant.EMPTY_APPOINTMENT_LIST_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":242,"author":{"gitId":"syj02"},"content":"        if (index \u003c 1 || index \u003e appointments.size()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":243,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":244,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":245,"author":{"gitId":"syj02"},"content":"        index -\u003d 1;","lastModifiedDate":"2024-03-26"},{"lineNumber":246,"author":{"gitId":"syj02"},"content":"        Appointment deletedAppointment \u003d appointments.get(index);","lastModifiedDate":"2024-03-26"},{"lineNumber":247,"author":{"gitId":"syj02"},"content":"        System.out.printf((HealthConstant.LOG_DELETE_APPOINTMENT_FORMAT) + \"%n\",","lastModifiedDate":"2024-03-27"},{"lineNumber":248,"author":{"gitId":"syj02"},"content":"                deletedAppointment.date,","lastModifiedDate":"2024-03-26"},{"lineNumber":249,"author":{"gitId":"syj02"},"content":"                deletedAppointment.time,","lastModifiedDate":"2024-03-26"},{"lineNumber":250,"author":{"gitId":"syj02"},"content":"                deletedAppointment.description);","lastModifiedDate":"2024-03-27"},{"lineNumber":251,"author":{"gitId":"syj02"},"content":"        appointments.remove(index);","lastModifiedDate":"2024-03-26"},{"lineNumber":252,"author":{"gitId":"syj02"},"content":"        LogFile.writeLog(HealthConstant.APPOINTMENT_REMOVED_MESSAGE_PREFIX + index, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":253,"author":{"gitId":"syj02"},"content":"        showAppointmentList();","lastModifiedDate":"2024-03-26"},{"lineNumber":254,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":255,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":256,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":257,"author":{"gitId":"syj02"},"content":"     * Prints all Appointment entries tracked.","lastModifiedDate":"2024-03-27"},{"lineNumber":258,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":259,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If appointments list is empty","lastModifiedDate":"2024-03-27"},{"lineNumber":260,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":261,"author":{"gitId":"syj02"},"content":"    public static void showAppointmentList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":262,"author":{"gitId":"syj02"},"content":"        assert !appointments.isEmpty() : ErrorConstant.EMPTY_APPOINTMENT_LIST_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":263,"author":{"gitId":"syj02"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-26"},{"lineNumber":264,"author":{"gitId":"syj02"},"content":"        for (Appointment appointment: appointments) {","lastModifiedDate":"2024-03-26"},{"lineNumber":265,"author":{"gitId":"syj02"},"content":"            System.out.print(index + \". \");","lastModifiedDate":"2024-03-26"},{"lineNumber":266,"author":{"gitId":"syj02"},"content":"            System.out.println(appointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":267,"author":{"gitId":"syj02"},"content":"            index +\u003d 1;","lastModifiedDate":"2024-03-26"},{"lineNumber":268,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":269,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":270,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"j013n3":152,"rouvinerh":5,"L5-Z":1,"syj02":112}},{"path":"src/main/java/health/Period.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import utility.HealthConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":" * Represents a Period object to track user\u0027s menstrual cycle.","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"public class Period extends Health {","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"     * The start date of period i.e. the first day of period flow which is also the first day of cycle.","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"    protected LocalDate startDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"     * The end date of period i.e. the last day of period flow.","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"    protected LocalDate endPeriodDate;","lastModifiedDate":"2024-03-25"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"     * The number of days between the first day and last day of period flow.","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"    protected long periodLength;","lastModifiedDate":"2024-03-25"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"     * The number of days between the first day and last day of the period cycle.","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"    protected long cycleLength;","lastModifiedDate":"2024-03-25"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-22"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"     * Constructs a Period object with the given start and end dates in string format.","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"     * @param stringStartDate A string representing the start date of the period","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"     * @param stringEndDate   A string representing the end date of the period","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"    public Period(String stringStartDate, String stringEndDate) {","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"        this.startDate \u003d Parser.parseDate(stringStartDate);","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"        this.endPeriodDate \u003d Parser.parseDate(stringEndDate);","lastModifiedDate":"2024-03-25"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"        this.periodLength \u003d calculatePeriodLength();","lastModifiedDate":"2024-03-25"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"        this.cycleLength \u003d 0;","lastModifiedDate":"2024-03-25"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"     * Retrieves the start date of the period.","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"     * @return The start date.","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError if the start date is null","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"    public LocalDate getStartDate() {","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"        assert startDate !\u003d null : ErrorConstant.NULL_START_DATE_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"        return startDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"     * Retrieves the end date of the period.","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"     * @return The end date.","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError if the end date is null","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"    public LocalDate getEndDate() {","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"        assert endPeriodDate !\u003d null : ErrorConstant.NULL_END_DATE_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"        return endPeriodDate;","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"     * Calculates the length of the period in days.","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"     * @return The length of the period.","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"    public long calculatePeriodLength() {","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"        assert startDate.isBefore(endPeriodDate) : ErrorConstant.PERIOD_END_BEFORE_START_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"        // Add 1 to include both start and end dates","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"        return ChronoUnit.DAYS.between(startDate,endPeriodDate) + 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"     * Sets the cycle length of the current period based on the start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"     * @param nextStartDate The start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"    public void setCycleLength(LocalDate nextStartDate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"        this.cycleLength \u003d ChronoUnit.DAYS.between(startDate, nextStartDate);","lastModifiedDate":"2024-03-25"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"     * Calculates the sum of the cycle lengths of the latest three menstrual cycles.","lastModifiedDate":"2024-03-25"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"     * @return The sum of the cycle lengths of the latest three menstrual cycles.","lastModifiedDate":"2024-03-25"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"    public long getLastThreeCycleLengths() {","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"        int size \u003d HealthList.getPeriodSize();","lastModifiedDate":"2024-03-25"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"        long sumOfCycleLengths \u003d 0;","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"        int startIndexForPrediction \u003d size - HealthConstant.MIN_SIZE_FOR_PREDICTION;","lastModifiedDate":"2024-03-28"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"        assert startIndexForPrediction \u003e\u003d 0 : ErrorConstant.START_INDEX_NEGATIVE_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"        int endIndexForPrediction \u003d size - HealthConstant.LAST_CYCLE_INDEX_OFFSET;","lastModifiedDate":"2024-03-28"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"        assert endIndexForPrediction \u003e\u003d startIndexForPrediction : ErrorConstant.END_INDEX_GREATER_THAN_START_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"syj02"},"content":"        for (int i \u003d startIndexForPrediction; i \u003c\u003d endIndexForPrediction; i++) {","lastModifiedDate":"2024-03-28"},{"lineNumber":106,"author":{"gitId":"syj02"},"content":"            sumOfCycleLengths +\u003d HealthList.getPeriod(i).cycleLength;","lastModifiedDate":"2024-03-25"},{"lineNumber":107,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"        return sumOfCycleLengths;","lastModifiedDate":"2024-03-25"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":113,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":114,"author":{"gitId":"syj02"},"content":"     * Predicts the start date of the next period based on the average cycle length.","lastModifiedDate":"2024-03-25"},{"lineNumber":115,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":116,"author":{"gitId":"syj02"},"content":"     * @return The predicted start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":117,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":118,"author":{"gitId":"syj02"},"content":"    public LocalDate nextCyclePrediction() {","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"syj02"},"content":"        long averageCycleLength \u003d getLastThreeCycleLengths() / HealthConstant.LATEST_THREE_CYCLE_LENGTHS;","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"syj02"},"content":"        return this.startDate.plusDays(averageCycleLength);","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":124,"author":{"gitId":"syj02"},"content":"     * Prints a message indicating the number of days until the predicted start date of the next period,","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"syj02"},"content":"     * or how many days late the period is if the current date is after the predicted start date.","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"syj02"},"content":"     * @param nextPeriodStartDate The predicted start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"syj02"},"content":"    public static void printNextCyclePrediction(LocalDate nextPeriodStartDate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"syj02"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"syj02"},"content":"        long daysUntilNextPeriod \u003d today.until(nextPeriodStartDate, ChronoUnit.DAYS);","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"syj02"},"content":"        if (today.isBefore(nextPeriodStartDate)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"syj02"},"content":"            System.out.println(HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"syj02"},"content":"                    + nextPeriodStartDate +","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"syj02"},"content":"                    HealthConstant.COUNT_DAYS_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"syj02"},"content":"                    + daysUntilNextPeriod","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"syj02"},"content":"                    + HealthConstant.DAYS_MESSAGE);","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"syj02"},"content":"        if (today.isAfter(nextPeriodStartDate)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"syj02"},"content":"            System.out.println(HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"syj02"},"content":"                    + nextPeriodStartDate","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"syj02"},"content":"                    + HealthConstant.PERIOD_IS_LATE","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"syj02"},"content":"                    + -daysUntilNextPeriod","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"syj02"},"content":"                    + HealthConstant.DAYS_MESSAGE);","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":147,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":148,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"syj02"},"content":"     * Retrieves the string representation of a Period object.","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"syj02"},"content":"     * @return A formatted string representing a Period object.","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":153,"author":{"gitId":"syj02"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":154,"author":{"gitId":"syj02"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":155,"author":{"gitId":"syj02"},"content":"        return String.format(HealthConstant.PRINT_PERIOD_FORMAT,","lastModifiedDate":"2024-03-26"},{"lineNumber":156,"author":{"gitId":"syj02"},"content":"                getStartDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":157,"author":{"gitId":"syj02"},"content":"                getEndDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":158,"author":{"gitId":"syj02"},"content":"                this.periodLength)","lastModifiedDate":"2024-03-26"},{"lineNumber":159,"author":{"gitId":"syj02"},"content":"                + (this.cycleLength \u003e 0 ? System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":160,"author":{"gitId":"syj02"},"content":"                + String.format(HealthConstant.PRINT_CYCLE_FORMAT, this.cycleLength) : UiConstant.EMPTY_STRING);","lastModifiedDate":"2024-03-26"},{"lineNumber":161,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":162,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"j013n3":3,"rouvinerh":3,"L5-Z":2,"syj02":154}},{"path":"src/main/java/seedu/pulsepilot/PulsePilot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package seedu.pulsepilot;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import static ui.Handler.initialiseBot;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import static ui.Handler.processInput;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import static ui.Handler.terminateBot;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"public class PulsePilot {","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"     * Main entry-point for PulsePilot.","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"        initialiseBot();","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"        processInput();","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"        terminateBot();","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"rouvinerh":3,"L5-Z":8,"-":5}},{"path":"src/main/java/storage/DataFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"//@@author L5-Z","lastModifiedDate":"2024-03-25"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"package storage;","lastModifiedDate":"2024-03-24"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-03-24"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-24"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import java.io.File;","lastModifiedDate":"2024-03-24"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-24"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"import health.Appointment;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-25"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import health.Period;","lastModifiedDate":"2024-03-25"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-25"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-25"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-24"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-24"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-24"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":" * Represents a DataFile object used to read and write data stored in PulsePilot to a file.","lastModifiedDate":"2024-03-24"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-24"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"public class DataFile {","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"    public static String userName \u003d null;","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"    private static DataFile instance \u003d null;","lastModifiedDate":"2024-03-24"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"     * Private constructor to prevent instantiation from outside the class.","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"    private DataFile() {","lastModifiedDate":"2024-03-24"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"        loadDataFile();","lastModifiedDate":"2024-03-25"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"     * Returns a singular instance of the DataFile class.","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"     * If the instance is null, it creates a new instance.","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-24"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"     * @return An instance of the DataFile class.","lastModifiedDate":"2024-03-25"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"    public static DataFile getInstance() {","lastModifiedDate":"2024-03-24"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2024-03-24"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"            instance \u003d new DataFile();","lastModifiedDate":"2024-03-24"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"        return instance;","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"     * Checks if data file already exists. If it does, log it. Else, create the file and log the event.","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"     * @param dataFile Represents the data file.","lastModifiedDate":"2024-03-24"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"     * @return Integer representing a found data file, 0, or not found, 1","lastModifiedDate":"2024-03-25"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileCreateError If there is an error creating the data file.","lastModifiedDate":"2024-03-24"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"    public static int verifyIntegrity(File dataFile) throws CustomExceptions.FileCreateError {","lastModifiedDate":"2024-03-25"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-24"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"            if (dataFile.createNewFile()) {","lastModifiedDate":"2024-03-24"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Created new data file\", false);","lastModifiedDate":"2024-03-24"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"                return UiConstant.FILE_NOT_FOUND;","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"            } else {","lastModifiedDate":"2024-03-24"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Reading from existing data file\", false);","lastModifiedDate":"2024-03-24"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"                return UiConstant.FILE_FOUND;","lastModifiedDate":"2024-03-25"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileCreateError(ErrorConstant.CREATE_FILE_ERROR);","lastModifiedDate":"2024-03-25"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"     * Initialises the data file to be used. Function exits if file cannot be created.","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"    public static int loadDataFile() {","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"        int status \u003d UiConstant.FILE_NOT_FOUND;","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"            status \u003d verifyIntegrity(UiConstant.SAVE_FILE);","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.FileCreateError e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"            System.err.println(ErrorConstant.CREATE_FILE_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(ErrorConstant.CREATE_FILE_ERROR, true);","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"            System.exit(1);","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"        Path dataFilePath \u003d Path.of(UiConstant.DATA_FILE_PATH);","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"        assert Files.exists(dataFilePath) : \"Data file does not exist.\";","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"        return status;","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"     * Function reads the existing data file, and adds the relevant data to PulsePilot.","lastModifiedDate":"2024-03-24"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError If there is an error reading the data file.","lastModifiedDate":"2024-03-24"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"    public static void readDataFile() throws CustomExceptions.FileReadError {","lastModifiedDate":"2024-03-24"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"        int lineNumberCount \u003d 0; // just for getting lineNumber, no other use","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"        try (final Scanner readFile \u003d new Scanner(UiConstant.SAVE_FILE)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Read begins\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"            while (readFile.hasNextLine()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"                String [] input \u003d readFile.nextLine().split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"                String dataType \u003d input[UiConstant.DATA_TYPE_INDEX].trim();","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"                String name \u003d input[UiConstant.NAME_INDEX].trim();","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"                DataType filter \u003d DataType.valueOf(dataType);","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"                switch (filter){","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"                case NAME:","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"L5-Z"},"content":"                    processName(name);","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":109,"author":{"gitId":"L5-Z"},"content":"                case APPOINTMENT:","lastModifiedDate":"2024-03-26"},{"lineNumber":110,"author":{"gitId":"L5-Z"},"content":"                    // processAppointment(words);","lastModifiedDate":"2024-03-24"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-26"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"                ","lastModifiedDate":"2024-03-24"},{"lineNumber":113,"author":{"gitId":"L5-Z"},"content":"                case PERIOD:","lastModifiedDate":"2024-03-26"},{"lineNumber":114,"author":{"gitId":"L5-Z"},"content":"                    // processPeriod(words);","lastModifiedDate":"2024-03-24"},{"lineNumber":115,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":116,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":117,"author":{"gitId":"L5-Z"},"content":"                case BMI:","lastModifiedDate":"2024-03-26"},{"lineNumber":118,"author":{"gitId":"L5-Z"},"content":"                    // processBmi(words);","lastModifiedDate":"2024-03-24"},{"lineNumber":119,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":120,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":121,"author":{"gitId":"L5-Z"},"content":"                case GYM:","lastModifiedDate":"2024-03-26"},{"lineNumber":122,"author":{"gitId":"L5-Z"},"content":"                    // processGym(words);","lastModifiedDate":"2024-03-24"},{"lineNumber":123,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":124,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":125,"author":{"gitId":"L5-Z"},"content":"                case RUN:","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"L5-Z"},"content":"                    // processRun(words);","lastModifiedDate":"2024-03-24"},{"lineNumber":127,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":128,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":129,"author":{"gitId":"L5-Z"},"content":"                default:","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"L5-Z"},"content":"                    break; // valueOf results in immediate exception for non-match with enum DataType","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-03-24"},{"lineNumber":132,"author":{"gitId":"L5-Z"},"content":"                lineNumberCount +\u003d 1;","lastModifiedDate":"2024-03-27"},{"lineNumber":133,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":134,"author":{"gitId":"L5-Z"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":135,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Invalid item read at line: \" + (lineNumberCount + 1) + \"! \" + e, true);","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.CORRUPT_ERROR);","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"L5-Z"},"content":"    public static void processName(String name){","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"L5-Z"},"content":"        userName \u003d name.trim();","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":142,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":143,"author":{"gitId":"L5-Z"},"content":"    public static void processAppointment(){}","lastModifiedDate":"2024-03-27"},{"lineNumber":144,"author":{"gitId":"L5-Z"},"content":"    public static void processPeriod(){}","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"L5-Z"},"content":"    public static void processBmi(){}","lastModifiedDate":"2024-03-27"},{"lineNumber":146,"author":{"gitId":"L5-Z"},"content":"    public static void processGym(){}","lastModifiedDate":"2024-03-27"},{"lineNumber":147,"author":{"gitId":"L5-Z"},"content":"    public static void processRun(){}","lastModifiedDate":"2024-03-27"},{"lineNumber":148,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"L5-Z"},"content":"     * Saves the user data to a file.","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"L5-Z"},"content":"     * // param health data of all specified user input to be saved.","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions If an error occurs during file operations.","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"L5-Z"},"content":"    public static void saveDataFile(String name,","lastModifiedDate":"2024-03-27"},{"lineNumber":156,"author":{"gitId":"L5-Z"},"content":"                                    ArrayList\u003cBmi\u003e bmiArrayList,","lastModifiedDate":"2024-03-27"},{"lineNumber":157,"author":{"gitId":"L5-Z"},"content":"                                    ArrayList\u003cAppointment\u003e appointmentArrayList,","lastModifiedDate":"2024-03-26"},{"lineNumber":158,"author":{"gitId":"L5-Z"},"content":"                                    ArrayList\u003cPeriod\u003e periodArrayList,","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"L5-Z"},"content":"                                    ArrayList\u003cRun\u003e runArrayList,","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"L5-Z"},"content":"                                    ArrayList\u003cGym\u003e gymArrayList","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"L5-Z"},"content":"                                    ) throws CustomExceptions.FileWriteError {","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"L5-Z"},"content":"        try (FileWriter dataFile \u003d new FileWriter(UiConstant.DATA_FILE_PATH)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Attempting to write data, name: \" + name, false);","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"L5-Z"},"content":"            writeName(dataFile, name);","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Written name\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"L5-Z"},"content":"            writeHealthData(bmiArrayList,","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"L5-Z"},"content":"                    appointmentArrayList,","lastModifiedDate":"2024-03-26"},{"lineNumber":169,"author":{"gitId":"L5-Z"},"content":"                    periodArrayList);","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"L5-Z"},"content":"            writeWorkoutData(runArrayList, gymArrayList);","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Write end\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":174,"author":{"gitId":"L5-Z"},"content":"            dataFile.close();","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileWriteError(ErrorConstant.SAVE_ERROR);","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":179,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":180,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"L5-Z"},"content":"     * Writes health data to the data file.","lastModifiedDate":"2024-03-27"},{"lineNumber":183,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"L5-Z"},"content":"     * // param healthData Health data to be written.","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"L5-Z"},"content":"    public static void writeName(FileWriter dataFile, String name) throws IOException {","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"L5-Z"},"content":"        dataFile.write(DataType.NAME + UiConstant.SPLIT_BY_COLON + name.trim());","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Wrote name to file\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":190,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":191,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":192,"author":{"gitId":"L5-Z"},"content":"     * Writes health data to the data file.","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"L5-Z"},"content":"     * // param healthData Health data to be written.","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"L5-Z"},"content":"    public static void writeHealthData(ArrayList\u003cBmi\u003e bmiArrayList,","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"L5-Z"},"content":"                                       ArrayList\u003cAppointment\u003e appointmentArrayList,","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"L5-Z"},"content":"                                       ArrayList\u003cPeriod\u003e periodArrayList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":199,"author":{"gitId":"L5-Z"},"content":"        /*","lastModifiedDate":"2024-03-27"},{"lineNumber":200,"author":{"gitId":"L5-Z"},"content":"        // Write each bmi entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":201,"author":{"gitId":"L5-Z"},"content":"        // bmi format: bmi|HEIGHT|WEIGHT|BMI_SCORE|DATE (NA if no date)","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"L5-Z"},"content":"        for (Health bmiEntry : bmiArrayList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":203,"author":{"gitId":"L5-Z"},"content":"            // dataFile.write(task.getType() + UiConstant.LINE.trim() + task.getLabel() + UiConstant.LINE.trim()","lastModifiedDate":"2024-03-27"},{"lineNumber":204,"author":{"gitId":"L5-Z"},"content":"            // + task.getRange() + UiConstant.LINE.trim() +","lastModifiedDate":"2024-03-27"},{"lineNumber":205,"author":{"gitId":"L5-Z"},"content":"            //       task.getStatusIcon() + System.LineSeparator());","lastModifiedDate":"2024-03-27"},{"lineNumber":206,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":207,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":208,"author":{"gitId":"L5-Z"},"content":"        // Write each appointment entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":209,"author":{"gitId":"L5-Z"},"content":"        // appointment format: appointment|DATE|DESCRIPTION","lastModifiedDate":"2024-03-27"},{"lineNumber":210,"author":{"gitId":"L5-Z"},"content":"        for (Health appointmentEntry : appointmentArrayList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":211,"author":{"gitId":"L5-Z"},"content":"            // dataFile.write(task.getType() + UiConstant.LINE.trim() + task.getLabel() + UiConstant.LINE.trim()","lastModifiedDate":"2024-03-27"},{"lineNumber":212,"author":{"gitId":"L5-Z"},"content":"            // + task.getRange() + UiConstant.LINE.trim() +","lastModifiedDate":"2024-03-27"},{"lineNumber":213,"author":{"gitId":"L5-Z"},"content":"            //       task.getStatusIcon() + System.LineSeparator());","lastModifiedDate":"2024-03-27"},{"lineNumber":214,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":215,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":216,"author":{"gitId":"L5-Z"},"content":"        // Write each period entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":217,"author":{"gitId":"L5-Z"},"content":"        // period format: period|START|END|DURATION|NEXT","lastModifiedDate":"2024-03-27"},{"lineNumber":218,"author":{"gitId":"L5-Z"},"content":"        for (Health periodEntry : periodArrayList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":219,"author":{"gitId":"L5-Z"},"content":"            // dataFile.write(task.getType() + UiConstant.LINE.trim() + task.getLabel() + UiConstant.LINE.trim()","lastModifiedDate":"2024-03-27"},{"lineNumber":220,"author":{"gitId":"L5-Z"},"content":"            // + task.getRange() + UiConstant.LINE.trim() +","lastModifiedDate":"2024-03-27"},{"lineNumber":221,"author":{"gitId":"L5-Z"},"content":"            //       task.getStatusIcon() + System.LineSeparator());","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":223,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":224,"author":{"gitId":"L5-Z"},"content":"         */","lastModifiedDate":"2024-03-27"},{"lineNumber":225,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":226,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":227,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":228,"author":{"gitId":"L5-Z"},"content":"     * Writes Workout data to the data file.","lastModifiedDate":"2024-03-27"},{"lineNumber":229,"author":{"gitId":"L5-Z"},"content":"     * // param workoutData Workout data to be written.","lastModifiedDate":"2024-03-27"},{"lineNumber":230,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":231,"author":{"gitId":"L5-Z"},"content":"    public static void writeWorkoutData(ArrayList\u003cRun\u003e runArrayList, ArrayList\u003cGym\u003e gymArrayList){","lastModifiedDate":"2024-03-27"},{"lineNumber":232,"author":{"gitId":"L5-Z"},"content":"        /*","lastModifiedDate":"2024-03-27"},{"lineNumber":233,"author":{"gitId":"L5-Z"},"content":"        // Write each period entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":234,"author":{"gitId":"L5-Z"},"content":"        // run format: run|DISTANCE|TIME|PACE|DATE","lastModifiedDate":"2024-03-27"},{"lineNumber":235,"author":{"gitId":"L5-Z"},"content":"        for (Workout runEntry : runArrayList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":236,"author":{"gitId":"L5-Z"},"content":"            // dataFile.write(task.getType() + UiConstant.LINE.trim() + task.getLabel() + UiConstant.LINE.trim()","lastModifiedDate":"2024-03-27"},{"lineNumber":237,"author":{"gitId":"L5-Z"},"content":"            // + task.getRange() + UiConstant.LINE.trim() +","lastModifiedDate":"2024-03-27"},{"lineNumber":238,"author":{"gitId":"L5-Z"},"content":"            //       task.getStatusIcon() + System.LineSeparator());","lastModifiedDate":"2024-03-27"},{"lineNumber":239,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":240,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":241,"author":{"gitId":"L5-Z"},"content":"        // Write each period entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":242,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":243,"author":{"gitId":"L5-Z"},"content":"        Gym Format:","lastModifiedDate":"2024-03-27"},{"lineNumber":244,"author":{"gitId":"L5-Z"},"content":"        gym|NUM_STATIONS|DATE|gym_1|STATION1_NAME|NUM_SETS|WEIGHT1,WEIGHT2,WEIGHT3,WEIGHT4","lastModifiedDate":"2024-03-27"},{"lineNumber":245,"author":{"gitId":"L5-Z"},"content":"        |gym_2|STATION2_NAME...","lastModifiedDate":"2024-03-27"},{"lineNumber":246,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":247,"author":{"gitId":"L5-Z"},"content":"        for (Workout gymEntry : gymArrayList) {","lastModifiedDate":"2024-03-27"},{"lineNumber":248,"author":{"gitId":"L5-Z"},"content":"            // dataFile.write(task.getType() + UiConstant.LINE.trim() + task.getLabel() + UiConstant.LINE.trim()","lastModifiedDate":"2024-03-27"},{"lineNumber":249,"author":{"gitId":"L5-Z"},"content":"            // + task.getRange() + UiConstant.LINE.trim() +","lastModifiedDate":"2024-03-27"},{"lineNumber":250,"author":{"gitId":"L5-Z"},"content":"            //       task.getStatusIcon() + System.LineSeparator());","lastModifiedDate":"2024-03-27"},{"lineNumber":251,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":252,"author":{"gitId":"L5-Z"},"content":"        */","lastModifiedDate":"2024-03-24"},{"lineNumber":253,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":254,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":255,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-24"},{"lineNumber":256,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"}],"authorContributionMap":{"L5-Z":256}},{"path":"src/main/java/storage/DataType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"package storage;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"public enum DataType {","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"    NAME,","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"    BMI,","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"    APPOINTMENT,","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"    PERIOD,","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"    GYM,","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"    RUN","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"L5-Z":10}},{"path":"src/main/java/storage/LogFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package storage;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":" * Represents a Logfile object used to write information and error logs for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"public class LogFile {","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"    protected static FileHandler logFileHandler \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"    private static LogFile instance \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"    private static final Logger logger \u003d Logger.getLogger(LogFile.class.getName());","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"     * Private constructor to prevent instantiation from outside the class.","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"    private LogFile() {","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"        initializeLogFile();","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     * Returns a singular instance of the LogFile class.","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"     * If the instance is null, it creates a new instance.","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     * @return An instance of the LogFile class.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"    public static LogFile getInstance() {","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"            instance \u003d new LogFile();","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"        return instance;","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * Initialises the log file to be used. Creates the log file if needed, then sets formatters.","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * Parent handlers are set to false to prevent printing of logs to terminal.","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    public static void initializeLogFile() {","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"            if (logFileHandler \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"                logFileHandler \u003d new FileHandler(UiConstant.LOG_FILE_PATH);","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"                logFileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"                logger.addHandler(logFileHandler);","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"                logger.setUseParentHandlers(false);","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"            throw new RuntimeException(\"Error setting up log file\", e);","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        assert(logFileHandler !\u003d null);","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     * Writes information or warning logs to the log file.","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     * @param input   String representing the user\u0027s input.","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     * @param isError Boolean variable to determine if log is an error.","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    public static void writeLog(String input, boolean isError) {","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"        if (isError) {","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"            logger.log(Level.WARNING, \"Error: \" + input);","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"            logger.log(Level.INFO, input);","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"JustinSoh":2,"rouvinerh":51,"L5-Z":16}},{"path":"src/main/java/ui/Handler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"package ui;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import storage.DataFile;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"import utility.HealthConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import utility.Command;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import utility.Filters;","lastModifiedDate":"2024-03-25"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"import workouts.WorkoutList;","lastModifiedDate":"2024-03-25"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"import workouts.GymStation;","lastModifiedDate":"2024-03-25"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"import workouts.Workout;","lastModifiedDate":"2024-03-25"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":" * Represents user input parsing and handling","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":" * before providing feedback to the user.","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"public class Handler {","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"    public static Scanner in;","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    static LogFile logFile \u003d LogFile.getInstance();","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"     * Processes user input and filters for valid command words from enum {@code Command},","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"     * then creates the relevant object based on details entered.","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"     * @throws IllegalArgumentException If an error occurs during command processing.","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"    public static void processInput() {","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"        while (in.hasNextLine()) {","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"            String userInput \u003d in.nextLine();","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"            String instruction \u003d userInput.toUpperCase().split(UiConstant.SPLIT_BY_WHITESPACE)[0];","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"User Input: \" + userInput, false);","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"            assert userInput !\u003d null : \"Object cannot be null\";","lastModifiedDate":"2024-03-22"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"            try {","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"                Command command \u003d Command.valueOf(instruction);","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"                switch (command) {","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"                case EXIT:","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"                    LogFile.writeLog(\"User ran command: exit\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"                    System.out.println(UiConstant.EXIT_MESSAGE);","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"                    return;","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"                case WORKOUT:","lastModifiedDate":"2024-03-25"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"                    handleWorkout(userInput);","lastModifiedDate":"2024-03-25"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"                case HEALTH:","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"                    handleHealth(userInput);","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"                case HISTORY:","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"                    handleHistory(userInput);","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"                case LATEST:","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"                    handleLatest(userInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"                case DELETE:","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"                    handleDelete(userInput);","lastModifiedDate":"2024-03-25"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"                    break;","lastModifiedDate":"2024-03-25"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"                case HELP:","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"                    Output.printHelp();","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"                default:","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"                    break; // valueOf results in immediate exception for non-match with enum Command","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-03-11"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"            } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"                Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"                Output.printException(ErrorConstant.INVALID_COMMAND_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"     * Constructs either a new Run or Gym object based on the user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"    public static void handleWorkout(String userInput) {","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"            String typeOfExercise \u003d checkTypeOfExercise(userInput);","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"            if (typeOfExercise.equals(WorkoutConstant.RUN)) {","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"                String[] runDetails \u003d Run.getRun(userInput);","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"                Run newRun \u003d Run.addRun(runDetails);","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"                Output.printAddRun(newRun);","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"            } else if (typeOfExercise.equals(WorkoutConstant.GYM)) {","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"                int numberOfStations \u003d getNumberOfGymStations(userInput);","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"                String gymDate \u003d getDateFromGym(userInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"                Gym gym;","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"                if (gymDate.isEmpty()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"                    gym \u003d new Gym();","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"                } else {","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"                    gym \u003d new Gym(gymDate);","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"                }","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"                getGymStation(numberOfStations, gym);","lastModifiedDate":"2024-03-19"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"     * Handles history command.","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"     * Show history of all exercises, run or gym.","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"L5-Z"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"    public static void handleHistory(String userInput) {","lastModifiedDate":"2024-03-19"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"        String filter \u003d Parser.parseHistoryAndLatestInput(userInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"        if (filter !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"            Output.printHistory(filter);","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"     * Handles the delete command.","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"     * Deletes an item stored within PulsePilot.","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"    public static void handleDelete(String userInput) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"        String[] parsedInputs \u003d Parser.parseDeleteInput(userInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        if (parsedInputs \u003d\u003d null) {","lastModifiedDate":"2024-03-26"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"            return;","lastModifiedDate":"2024-03-26"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"            Filters parsedFilter \u003d Filters.valueOf(parsedInputs[0].toUpperCase());","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"            int index \u003d Integer.parseInt(parsedInputs[1]) - 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"            switch (parsedFilter) {","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"            case BMI:","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deleteBmi(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deletePeriod(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"            case GYM:","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteGym(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"            case RUN:","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteRun(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"            default:","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"     * Handles user input related to health data. Parses the user input to determine","lastModifiedDate":"2024-03-19"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"     * the type of health data and processes it accordingly.","lastModifiedDate":"2024-03-19"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"     * @param userInput A string containing health data information of user.","lastModifiedDate":"2024-03-19"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":175,"author":{"gitId":"L5-Z"},"content":"    public static void handleHealth(String userInput) {","lastModifiedDate":"2024-03-18"},{"lineNumber":176,"author":{"gitId":"syj02"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"            String typeOfHealth \u003d Parser.extractSubstringFromSpecificIndex(userInput, HealthConstant.HEALTH_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"            Filters parsedFilter \u003d Filters.valueOf(typeOfHealth.toUpperCase());","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"            switch(parsedFilter) {","lastModifiedDate":"2024-03-27"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"            case BMI:","lastModifiedDate":"2024-03-27"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"                Parser.parseBmiInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":183,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"                Parser.parsePeriodInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"            case PREDICTION:","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"                Parser.parsePredictionInput();","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":191,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"            case APPOINTMENT:","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"                Parser.parseAppointmentInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"            default:","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"            }","lastModifiedDate":"2024-03-14"},{"lineNumber":199,"author":{"gitId":"syj02"},"content":"        } catch (CustomExceptions.InvalidInput |  CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"            Output.printException(ErrorConstant.HEALTH_INPUT_BLANK_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":203,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":205,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the date from the input for a Gym output.","lastModifiedDate":"2024-03-26"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"     * Returns empty string if not specified.","lastModifiedDate":"2024-03-26"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-03-26"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"     * @return A string representing the date.","lastModifiedDate":"2024-03-26"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"    public static String getDateFromGym(String input) {","lastModifiedDate":"2024-03-26"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"            return Parser.extractSubstringFromSpecificIndex(input, WorkoutConstant.SPLIT_BY_DATE);","lastModifiedDate":"2024-03-28"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"            return \"\";","lastModifiedDate":"2024-03-26"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the number of gym stations in one Gym object from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":223,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-03-19"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If the user input is insufficient.","lastModifiedDate":"2024-03-19"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput      If the user input is invalid or blank.","lastModifiedDate":"2024-03-19"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-22"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"    public static int getNumberOfGymStations(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-03-19"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-19"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"        String numberOfStationString \u003d Parser.extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-03-28"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"                WorkoutConstant.SPLIT_BY_NUMBER_OF_STATIONS);","lastModifiedDate":"2024-03-25"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"        assert Integer.parseInt(numberOfStationString) \u003e 0 : ErrorConstant.NEGATIVE_VALUE_ERROR;","lastModifiedDate":"2024-03-21"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"        return Integer.parseInt(numberOfStationString);","lastModifiedDate":"2024-03-21"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":236,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-22"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the gym station details and adds a GymStation object to Gym.","lastModifiedDate":"2024-03-20"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfStations The number of stations in one gym session.","lastModifiedDate":"2024-03-20"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"     * @param gym              The Gym object.","lastModifiedDate":"2024-03-20"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"    private static void getGymStation(int numberOfStations, Gym gym) {","lastModifiedDate":"2024-03-19"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"        int i \u003d 0;","lastModifiedDate":"2024-03-26"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"        while (i \u003c numberOfStations) {","lastModifiedDate":"2024-03-26"},{"lineNumber":248,"author":{"gitId":"JustinSoh"},"content":"            try {","lastModifiedDate":"2024-03-19"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":250,"author":{"gitId":"JustinSoh"},"content":"                Output.printGymStationPrompt(i + 1);","lastModifiedDate":"2024-03-19"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"                String userInput \u003d in.nextLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"                GymStation.addGymStationInputValid(gym, userInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"                i++;","lastModifiedDate":"2024-03-26"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"            } catch (CustomExceptions.InsufficientInput | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-19"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"                Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-19"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"        Output.printAddGym(gym);","lastModifiedDate":"2024-03-26"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":262,"author":{"gitId":"JustinSoh"},"content":"     * Prints the latest run, gym, BMI entry or Period tracked.","lastModifiedDate":"2024-03-20"},{"lineNumber":263,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":264,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput String representing user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":265,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":266,"author":{"gitId":"JustinSoh"},"content":"    public static void handleLatest(String userInput) {","lastModifiedDate":"2024-03-20"},{"lineNumber":267,"author":{"gitId":"JustinSoh"},"content":"        String filter \u003d Parser.parseHistoryAndLatestInput(userInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":268,"author":{"gitId":"JustinSoh"},"content":"        if (filter !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":269,"author":{"gitId":"JustinSoh"},"content":"            Output.printLatest(filter);","lastModifiedDate":"2024-03-20"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":273,"author":{"gitId":"JustinSoh"},"content":"    //@@author","lastModifiedDate":"2024-03-22"},{"lineNumber":274,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":275,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":276,"author":{"gitId":"L5-Z"},"content":"     * Checks the type of exercise based on the user input.","lastModifiedDate":"2024-03-19"},{"lineNumber":277,"author":{"gitId":"L5-Z"},"content":"     * Usage: to use this method whenever the user enters a new exercise.","lastModifiedDate":"2024-03-19"},{"lineNumber":278,"author":{"gitId":"L5-Z"},"content":"     * Handles all the checks for input validity and sufficiency.","lastModifiedDate":"2024-03-19"},{"lineNumber":279,"author":{"gitId":"L5-Z"},"content":"     * Can assume input is valid and sufficient if no exceptions are thrown.","lastModifiedDate":"2024-03-19"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-22"},{"lineNumber":281,"author":{"gitId":"L5-Z"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-19"},{"lineNumber":282,"author":{"gitId":"L5-Z"},"content":"     * @return The type of exercise {@code Constant.RUN} or {@code Constant.GYM}.","lastModifiedDate":"2024-03-19"},{"lineNumber":283,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput      If the user input is invalid or blank.","lastModifiedDate":"2024-03-19"},{"lineNumber":284,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InsufficientInput If the user input is insufficient.","lastModifiedDate":"2024-03-19"},{"lineNumber":285,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":286,"author":{"gitId":"L5-Z"},"content":"    public static String checkTypeOfExercise(String userInput) throws","lastModifiedDate":"2024-03-19"},{"lineNumber":287,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-19"},{"lineNumber":288,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-19"},{"lineNumber":289,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":290,"author":{"gitId":"JustinSoh"},"content":"        boolean exerciseTypeIsValid \u003d false;","lastModifiedDate":"2024-03-25"},{"lineNumber":291,"author":{"gitId":"JustinSoh"},"content":"        boolean isRunValid \u003d false;","lastModifiedDate":"2024-03-25"},{"lineNumber":292,"author":{"gitId":"JustinSoh"},"content":"        boolean isGymValid \u003d false;","lastModifiedDate":"2024-03-25"},{"lineNumber":293,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"        String exerciseType \u003d Parser.extractSubstringFromSpecificIndex(userInput,","lastModifiedDate":"2024-03-28"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"                WorkoutConstant.SPLIT_BY_EXERCISE_TYPE);","lastModifiedDate":"2024-03-28"},{"lineNumber":296,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":297,"author":{"gitId":"JustinSoh"},"content":"        exerciseTypeIsValid \u003d Workout.checkIfExerciseTypeIsValid(exerciseType);","lastModifiedDate":"2024-03-25"},{"lineNumber":298,"author":{"gitId":"JustinSoh"},"content":"        boolean isRun \u003d exerciseType.equals(WorkoutConstant.RUN);","lastModifiedDate":"2024-03-25"},{"lineNumber":299,"author":{"gitId":"JustinSoh"},"content":"        boolean isGym \u003d exerciseType.equals(WorkoutConstant.GYM);","lastModifiedDate":"2024-03-25"},{"lineNumber":300,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":301,"author":{"gitId":"JustinSoh"},"content":"        if (isRun) {","lastModifiedDate":"2024-03-25"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"            String runDistance \u003d Parser.extractSubstringFromSpecificIndex(userInput, WorkoutConstant.SPLIT_BY_DISTANCE);","lastModifiedDate":"2024-03-28"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"            String runTime \u003d Parser.extractSubstringFromSpecificIndex(userInput, WorkoutConstant.SPLIT_BY_TIME);","lastModifiedDate":"2024-03-28"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"            String runDate \u003d Parser.extractSubstringFromSpecificIndex(userInput, WorkoutConstant.SPLIT_BY_DATE);","lastModifiedDate":"2024-03-28"},{"lineNumber":305,"author":{"gitId":"JustinSoh"},"content":"            isRunValid \u003d Run.checkIfRunIsValid(runDistance, runTime, runDate);","lastModifiedDate":"2024-03-25"},{"lineNumber":306,"author":{"gitId":"JustinSoh"},"content":"        } else if (isGym) {","lastModifiedDate":"2024-03-25"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"            String numberOfStations \u003d Parser.extractSubstringFromSpecificIndex(userInput,","lastModifiedDate":"2024-03-28"},{"lineNumber":308,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.SPLIT_BY_NUMBER_OF_STATIONS);","lastModifiedDate":"2024-03-25"},{"lineNumber":309,"author":{"gitId":"JustinSoh"},"content":"            isGymValid \u003d Gym.checkIfGymIsValid(numberOfStations);","lastModifiedDate":"2024-03-25"},{"lineNumber":310,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":311,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":312,"author":{"gitId":"JustinSoh"},"content":"        if (exerciseTypeIsValid \u0026\u0026 isRunValid) {","lastModifiedDate":"2024-03-25"},{"lineNumber":313,"author":{"gitId":"L5-Z"},"content":"            return WorkoutConstant.RUN;","lastModifiedDate":"2024-03-21"},{"lineNumber":314,"author":{"gitId":"JustinSoh"},"content":"        } else if (exerciseTypeIsValid \u0026\u0026 isGymValid) {","lastModifiedDate":"2024-03-25"},{"lineNumber":315,"author":{"gitId":"L5-Z"},"content":"            return WorkoutConstant.GYM;","lastModifiedDate":"2024-03-21"},{"lineNumber":316,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-25"},{"lineNumber":317,"author":{"gitId":"JustinSoh"},"content":"            return \"\";","lastModifiedDate":"2024-03-25"},{"lineNumber":318,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":319,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":320,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":321,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-22"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"     * Get user\u0027s name, and print profile induction messages.","lastModifiedDate":"2024-03-22"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-22"},{"lineNumber":325,"author":{"gitId":"L5-Z"},"content":"    public static void userInduction() {","lastModifiedDate":"2024-03-20"},{"lineNumber":326,"author":{"gitId":"L5-Z"},"content":"        String name \u003d in.nextLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":327,"author":{"gitId":"L5-Z"},"content":"        DataFile.userName \u003d name;","lastModifiedDate":"2024-03-27"},{"lineNumber":328,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Welcome aboard, Captain \" + name);","lastModifiedDate":"2024-03-20"},{"lineNumber":329,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":330,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":331,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Tips: Enter \u0027help\u0027 to view the pilot manual!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":332,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Initiating FTL jump sequence...\");","lastModifiedDate":"2024-03-20"},{"lineNumber":333,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":334,"author":{"gitId":"L5-Z"},"content":"        // DataFile.saveName(name);","lastModifiedDate":"2024-03-26"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"        LogFile.writeLog(\"Name Entered: \" + name, false);","lastModifiedDate":"2024-03-22"},{"lineNumber":336,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":337,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"FTL jump completed.\");","lastModifiedDate":"2024-03-20"},{"lineNumber":338,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":339,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-22"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"     * Initialise scanner to read user input.","lastModifiedDate":"2024-03-22"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-22"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"    public static void initialiseScanner() {","lastModifiedDate":"2024-03-20"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2024-03-20"},{"lineNumber":345,"author":{"gitId":"L5-Z"},"content":"        assert in !\u003d null : \"Object cannot be null\";","lastModifiedDate":"2024-03-22"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-22"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"     * Close scanner to stop reading user input.","lastModifiedDate":"2024-03-22"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-22"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"    public static void destroyScanner() {","lastModifiedDate":"2024-03-20"},{"lineNumber":352,"author":{"gitId":"JustinSoh"},"content":"        if (in !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"            in.close();","lastModifiedDate":"2024-03-20"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":355,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":357,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":358,"author":{"gitId":"L5-Z"},"content":"     * Initializes PulsePilot by printing a welcome message, loading tasks from storage,","lastModifiedDate":"2024-03-18"},{"lineNumber":359,"author":{"gitId":"L5-Z"},"content":"     * and returning the tasks list.","lastModifiedDate":"2024-03-11"},{"lineNumber":360,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":361,"author":{"gitId":"L5-Z"},"content":"    public static void initialiseBot() {","lastModifiedDate":"2024-03-11"},{"lineNumber":362,"author":{"gitId":"L5-Z"},"content":"        Output.printWelcomeBanner();","lastModifiedDate":"2024-03-18"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"        initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":364,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Started bot\", false);","lastModifiedDate":"2024-03-18"},{"lineNumber":365,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":366,"author":{"gitId":"L5-Z"},"content":"        int status \u003d DataFile.loadDataFile();","lastModifiedDate":"2024-03-25"},{"lineNumber":367,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":368,"author":{"gitId":"L5-Z"},"content":"        if (status \u003d\u003d 0) {","lastModifiedDate":"2024-03-27"},{"lineNumber":369,"author":{"gitId":"L5-Z"},"content":"            try {","lastModifiedDate":"2024-03-27"},{"lineNumber":370,"author":{"gitId":"L5-Z"},"content":"                DataFile.readDataFile(); // File read","lastModifiedDate":"2024-03-27"},{"lineNumber":371,"author":{"gitId":"L5-Z"},"content":"                Output.printGreeting(status, DataFile.userName);","lastModifiedDate":"2024-03-27"},{"lineNumber":372,"author":{"gitId":"L5-Z"},"content":"            } catch (CustomExceptions.FileReadError e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":373,"author":{"gitId":"L5-Z"},"content":"                Output.printException(e.getMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":374,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":375,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":376,"author":{"gitId":"L5-Z"},"content":"            Output.printGreeting(status, DataFile.userName);","lastModifiedDate":"2024-03-27"},{"lineNumber":377,"author":{"gitId":"L5-Z"},"content":"            userInduction();","lastModifiedDate":"2024-03-20"},{"lineNumber":378,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":379,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":380,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Terminal primed. Command inputs are now accepted...\");","lastModifiedDate":"2024-03-20"},{"lineNumber":381,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":382,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":383,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":384,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":385,"author":{"gitId":"L5-Z"},"content":"     * Terminates PulsePilot by saving tasks to storage, printing a goodbye message,","lastModifiedDate":"2024-03-18"},{"lineNumber":386,"author":{"gitId":"L5-Z"},"content":"     * and indicating the filename where tasks are saved.","lastModifiedDate":"2024-03-11"},{"lineNumber":387,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":388,"author":{"gitId":"L5-Z"},"content":"    public static void terminateBot() {","lastModifiedDate":"2024-03-11"},{"lineNumber":389,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"User terminating PulsePilot\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":390,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":391,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Attempting to save data file\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":392,"author":{"gitId":"L5-Z"},"content":"            DataFile.saveDataFile(DataFile.userName, null, null, null,","lastModifiedDate":"2024-03-27"},{"lineNumber":393,"author":{"gitId":"L5-Z"},"content":"                    null, null);","lastModifiedDate":"2024-03-27"},{"lineNumber":394,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"File saved\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":395,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.FileWriteError e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":396,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"File write error\", true);","lastModifiedDate":"2024-03-27"},{"lineNumber":397,"author":{"gitId":"L5-Z"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":398,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":399,"author":{"gitId":"L5-Z"},"content":"        Output.printGoodbyeMessage();","lastModifiedDate":"2024-03-20"},{"lineNumber":400,"author":{"gitId":"L5-Z"},"content":"        // Yet to implement : Reply.printReply(\"Saved tasks as: \" + Constant.FILE_NAME);","lastModifiedDate":"2024-03-11"},{"lineNumber":401,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Bot exited gracefully\", false);","lastModifiedDate":"2024-03-20"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"        destroyScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":403,"author":{"gitId":"L5-Z"},"content":"        System.exit(0);","lastModifiedDate":"2024-03-11"},{"lineNumber":404,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":405,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"j013n3":8,"JustinSoh":95,"rouvinerh":133,"L5-Z":159,"syj02":10}},{"path":"src/main/java/ui/Output.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"package ui;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import utility.Filters;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import utility.HealthConstant;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import workouts.GymStation;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import workouts.Workout;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutList;","lastModifiedDate":"2024-03-12"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import health.Appointment;","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"public class Output {","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"     * Prints a horizontal line.","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"    public static void printLine() {","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"     * Prints the help message.","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    public static void printHelp() {","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Commands List:\");","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"        System.out.println();","lastModifiedDate":"2024-03-14"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"workout /e:run /d:DISTANCE /t:TIME [/date:DATE] - Add a new run\");","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"workout /e:gym /n:NUMBER_OF_STATIONS [/date:DATE] - Add a new gym workout\");","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE - Add new BMI data\");","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"health /h:period /start:START_DATE /end:END_DATE - Add new period data\");","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"        System.out.println(\"health /h:prediction - Predicts next period\u0027s start date\");","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"health /h:appointment /date:DATE /time:TIME /description:DESCRIPTION\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"                \" - Add new appointment data\");","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"history /item:[run/gym/bmi/period] - \" +","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"                \"Shows history of runs/gyms/bmi records/periods tracked/appointment records\");","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"latest /item:[run/gym/bmi/period] - \" +","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"                \"Shows latest entry of runs/gyms/bmi records/periods tracked/appointment records\");","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"help - Show this help message\");","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"exit - Exit the program\");","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"     * Prints an ASCII Art depicting the word \u0027PulsePilot\u0027.","lastModifiedDate":"2024-03-14"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"    public static void printArt() {","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\" _              _\");","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"|_)    |  _  _ |_) o  |  _ _|_\");","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"|  |_| | _\u003e (/_|   |  | (_) |_\");","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"     * Prints the gym station prompt.","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"     * @param stationNumber Integer representing the current gym station index.","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"    public static void printGymStationPrompt(int stationNumber) {","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(\"Please enter the details of station \"","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"                + stationNumber","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"                + \". (Format: \" + WorkoutConstant.STATION_GYM_FORMAT + \")\");","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"     * Returns the formatted string for printing runs.","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"     * @param index          The index of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"     * @param currentWorkout The current Workout object within the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"     * @return A string","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    private static String getFormattedRunWithIndex(int index, Workout currentWorkout) {","lastModifiedDate":"2024-03-14"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.RUN_DATA_INDEX_FORMAT, index, currentWorkout);","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"     * Prints the text header when adding a new Run.","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"     * @param newRun The new Run object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"    public static void printAddRun(Run newRun) {","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"        System.out.println(WorkoutConstant.ADD_RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"        System.out.println(WorkoutConstant.RUN_HEADER);","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(newRun);","lastModifiedDate":"2024-03-12"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-12"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"     * Prints the message when a new Bmi is added.","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"     * @param newBmi The new Bmi object added.","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"    public static void printAddBmi(Bmi newBmi) {","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(HealthConstant.BMI_ADDED_MESSAGE_PREFIX","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"                + newBmi.getHeight()","lastModifiedDate":"2024-03-27"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"                + newBmi.getWeight()","lastModifiedDate":"2024-03-27"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"                + newBmi.getDate());","lastModifiedDate":"2024-03-27"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(newBmi);","lastModifiedDate":"2024-03-27"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"     * Prints the message when a new Period is added.","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"     * @param newPeriod The new Period object added.","lastModifiedDate":"2024-03-27"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"    public static void printAddPeriod(Period newPeriod) {","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(HealthConstant.PERIOD_ADDED_MESSAGE_PREFIX","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"                + newPeriod.getStartDate()","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"                + newPeriod.getEndDate());","lastModifiedDate":"2024-03-27"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(newPeriod);","lastModifiedDate":"2024-03-27"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"    public static void printAddAppointment(Appointment newAppointment) {","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(HealthConstant.APPOINTMENT_ADDED_MESSAGE_PREFIX","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"                + newAppointment.getDate()","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"                + newAppointment.getTime()","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"                + newAppointment.getDescription());","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(newAppointment);","lastModifiedDate":"2024-03-27"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"     * Prints the text header when adding a new Gym.","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"     * @param gym The new Gym object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"    public static void printAddGym(Gym gym) {","lastModifiedDate":"2024-03-19"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":146,"author":{"gitId":"L5-Z"},"content":"        System.out.println(WorkoutConstant.ADD_GYM);","lastModifiedDate":"2024-03-21"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"        printGymStats(gym);","lastModifiedDate":"2024-03-19"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"     * Prints all Workout objects (Run and Gym) based on the time it was added.","lastModifiedDate":"2024-03-27"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"     * The list is sorted in descending order. (Latest one first)","lastModifiedDate":"2024-03-27"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"    protected static void printWorkoutHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-27"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.HISTORY_WORKOUTS_HEADER);","lastModifiedDate":"2024-03-27"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.HISTORY_WORKOUTS_HEADER_FORMAT);","lastModifiedDate":"2024-03-27"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003c? extends Workout\u003e workoutList \u003d WorkoutList.getWorkouts(WorkoutConstant.ALL);","lastModifiedDate":"2024-03-27"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c workoutList.size(); i++) {","lastModifiedDate":"2024-03-27"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"            Workout workout \u003d workoutList.get(i);","lastModifiedDate":"2024-03-27"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"            if (workout instanceof Run) {","lastModifiedDate":"2024-03-27"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"                Run run \u003d (Run) workout;","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"                System.out.println(String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"                        (i + 1), run.getFormatForAllHistory()));","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"            } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"                Gym gym \u003d (Gym) workout;","lastModifiedDate":"2024-03-27"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"                int numberOfStation \u003d gym.getStations().size();","lastModifiedDate":"2024-03-27"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"                for (int j \u003d 0; j \u003c numberOfStation; j++) {","lastModifiedDate":"2024-03-27"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"                    String gymString;","lastModifiedDate":"2024-03-27"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"                    if (j \u003d\u003d 0) {","lastModifiedDate":"2024-03-27"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"                        gymString \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"                                (i + 1), gym.getHistoryFormatForSpecificGymStation(j));","lastModifiedDate":"2024-03-27"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"                    } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"                        gymString \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"                                \"\", gym.getHistoryFormatForSpecificGymStation(j));","lastModifiedDate":"2024-03-27"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"                    }","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"                    System.out.println(gymString);","lastModifiedDate":"2024-03-27"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-03-27"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"     * Prints all the Run objects added to the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If index is out of bounds.","lastModifiedDate":"2024-03-20"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If user input is invalid.","lastModifiedDate":"2024-03-20"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"    protected static void printRunHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Your run history:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":195,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003c? extends Workout\u003e workoutList \u003d WorkoutList.getWorkouts(WorkoutConstant.RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.RUN_HEADER_INDEX_FORMAT);","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c workoutList.size(); i++) {","lastModifiedDate":"2024-03-12"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2024-03-14"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"            Workout currentWorkout \u003d workoutList.get(i);","lastModifiedDate":"2024-03-14"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"            String output \u003d getFormattedRunWithIndex(index, currentWorkout);","lastModifiedDate":"2024-03-14"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(output);","lastModifiedDate":"2024-03-14"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"     * Prints all the stations within a specified Gym object.","lastModifiedDate":"2024-03-20"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"     * @param gym The Gym object containing the GymStation objects to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"    protected static void printGymStats(Gym gym) {","lastModifiedDate":"2024-03-27"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cGymStation\u003e allStations \u003d gym.getStations();","lastModifiedDate":"2024-03-19"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c allStations.size(); i++) {","lastModifiedDate":"2024-03-26"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"            System.out.printf(\"Station %d %s%n\", i + 1, allStations.get(i).toString());","lastModifiedDate":"2024-03-27"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"     * Prints all the information for all Gym objects within the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If index is out of bounds.","lastModifiedDate":"2024-03-20"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If user input is invalid.","lastModifiedDate":"2024-03-20"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"    protected static void printGymHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Your gym history:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":228,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003c? extends Workout\u003e workoutList \u003d WorkoutList.getWorkouts(WorkoutConstant.GYM);","lastModifiedDate":"2024-03-21"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c workoutList.size(); i++) {","lastModifiedDate":"2024-03-19"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2024-03-19"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"            Gym currentWorkout \u003d (Gym) workoutList.get(i);","lastModifiedDate":"2024-03-19"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(\"Gym Session \" + index + currentWorkout);","lastModifiedDate":"2024-03-19"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"            printGymStats(currentWorkout);","lastModifiedDate":"2024-03-19"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"            if (i !\u003d workoutList.size() - 1) {","lastModifiedDate":"2024-03-19"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"                printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":236,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-19"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"     * Prints all Bmi objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If there is access to a Bmi object that does not exist.","lastModifiedDate":"2024-03-20"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"    protected static void printBmiHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Your BMI history:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"        HealthList.showBmiHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"     * Prints all Period objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If there is access to a Period object that does not exist.","lastModifiedDate":"2024-03-20"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"    protected static void printPeriodHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Your Period history:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"        HealthList.showPeriodHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Run recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"    protected static void printLatestRun() {","lastModifiedDate":"2024-03-27"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"            Workout latestRun \u003d WorkoutList.getLatestRun();","lastModifiedDate":"2024-03-20"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"            String latestRunString \u003d getFormattedRunWithIndex(WorkoutList.getRunSize(), latestRun);","lastModifiedDate":"2024-03-20"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(\"Your latest run:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":277,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(WorkoutConstant.RUN_HEADER_INDEX_FORMAT);","lastModifiedDate":"2024-03-27"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(latestRunString);","lastModifiedDate":"2024-03-20"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-20"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Gym recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":289,"author":{"gitId":"JustinSoh"},"content":"    protected static void printLatestGym() {","lastModifiedDate":"2024-03-27"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"            Gym latestGym \u003d WorkoutList.getLatestGym();","lastModifiedDate":"2024-03-20"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"            int index \u003d WorkoutList.getGymSize();","lastModifiedDate":"2024-03-20"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(\"Your latest gym:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(\"Gym Session \" + index + latestGym);","lastModifiedDate":"2024-03-20"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"            printGymStats(latestGym);","lastModifiedDate":"2024-03-20"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-20"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest BMI entry recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":306,"author":{"gitId":"JustinSoh"},"content":"    protected static void printLatestBmi() {","lastModifiedDate":"2024-03-27"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"        HealthList.showCurrentBmi();","lastModifiedDate":"2024-03-20"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Period entry recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":315,"author":{"gitId":"JustinSoh"},"content":"    protected static void printLatestPeriod() {","lastModifiedDate":"2024-03-27"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"        HealthList.showLatestPeriod();","lastModifiedDate":"2024-03-20"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"     * Handler function to print the latest entry of Run, Gym, Period, or BMI objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"     * @param filter String used to determine the latest Run, Gym, Period, or BMI objects is to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"    public static void printLatest(String filter) {","lastModifiedDate":"2024-03-20"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"            Filters parsedFilter \u003d Filters.valueOf(filter.toUpperCase());","lastModifiedDate":"2024-03-20"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"            switch (parsedFilter) {","lastModifiedDate":"2024-03-20"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"            case RUN:","lastModifiedDate":"2024-03-20"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"                printLatestRun();","lastModifiedDate":"2024-03-20"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"            case GYM:","lastModifiedDate":"2024-03-20"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"                printLatestGym();","lastModifiedDate":"2024-03-20"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"            case BMI:","lastModifiedDate":"2024-03-20"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"                printLatestBmi();","lastModifiedDate":"2024-03-20"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-20"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"                printLatestPeriod();","lastModifiedDate":"2024-03-20"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"            default:","lastModifiedDate":"2024-03-20"},{"lineNumber":347,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_LATEST_FILTER_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-20"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"     * Handler function to print all entries of Run, Gym, Period, or BMI objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"     * @param filter String used to determine if all Run, Gym, Period, or BMI objects are to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":359,"author":{"gitId":"JustinSoh"},"content":"    public static void printHistory(String filter) {","lastModifiedDate":"2024-03-19"},{"lineNumber":360,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-19"},{"lineNumber":361,"author":{"gitId":"JustinSoh"},"content":"            Filters parsedFilter \u003d Filters.valueOf(filter.toUpperCase());","lastModifiedDate":"2024-03-19"},{"lineNumber":362,"author":{"gitId":"JustinSoh"},"content":"            switch (parsedFilter) {","lastModifiedDate":"2024-03-19"},{"lineNumber":363,"author":{"gitId":"JustinSoh"},"content":"            case WORKOUTS:","lastModifiedDate":"2024-03-27"},{"lineNumber":364,"author":{"gitId":"JustinSoh"},"content":"                printWorkoutHistory();","lastModifiedDate":"2024-03-27"},{"lineNumber":365,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":366,"author":{"gitId":"JustinSoh"},"content":"            case RUN:","lastModifiedDate":"2024-03-19"},{"lineNumber":367,"author":{"gitId":"JustinSoh"},"content":"                printRunHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":368,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-19"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":370,"author":{"gitId":"JustinSoh"},"content":"            case GYM:","lastModifiedDate":"2024-03-19"},{"lineNumber":371,"author":{"gitId":"JustinSoh"},"content":"                printGymHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":372,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-19"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"            case BMI:","lastModifiedDate":"2024-03-20"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"                printBmiHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-20"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"                printPeriodHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":382,"author":{"gitId":"JustinSoh"},"content":"            default:","lastModifiedDate":"2024-03-19"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-26"},{"lineNumber":384,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-19"},{"lineNumber":385,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.OutOfBounds | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-13"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":387,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":388,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"     * Prints a specified message and the exception error message.","lastModifiedDate":"2024-03-20"},{"lineNumber":392,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"     * @param message The custom message to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":395,"author":{"gitId":"JustinSoh"},"content":"    public static void printException(String message) {","lastModifiedDate":"2024-03-26"},{"lineNumber":396,"author":{"gitId":"L5-Z"},"content":"        System.err.println(\"Exception Caught!\" + System.lineSeparator() + message);","lastModifiedDate":"2024-03-26"},{"lineNumber":397,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":398,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"     * Prints the welcome banner for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":402,"author":{"gitId":"L5-Z"},"content":"    public static void printWelcomeBanner() {","lastModifiedDate":"2024-03-18"},{"lineNumber":403,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":404,"author":{"gitId":"L5-Z"},"content":"        printArt();","lastModifiedDate":"2024-03-18"},{"lineNumber":405,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Engaging orbital thrusters...\");","lastModifiedDate":"2024-03-18"},{"lineNumber":406,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"PulsePilot on standby\");","lastModifiedDate":"2024-03-18"},{"lineNumber":407,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":408,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":409,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":411,"author":{"gitId":"rouvinerh"},"content":"     * Checks whether storage file is present, and prints corresponding message.","lastModifiedDate":"2024-03-20"},{"lineNumber":412,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":413,"author":{"gitId":"rouvinerh"},"content":"     * @param status Integer representing whether the storage file has been loaded. If set to 0, file is present. Else,","lastModifiedDate":"2024-03-20"},{"lineNumber":414,"author":{"gitId":"rouvinerh"},"content":"     *               file is not present.","lastModifiedDate":"2024-03-20"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":416,"author":{"gitId":"L5-Z"},"content":"    public static void printGreeting(int status, String name) {","lastModifiedDate":"2024-03-26"},{"lineNumber":417,"author":{"gitId":"L5-Z"},"content":"        if (status \u003d\u003d 0) {","lastModifiedDate":"2024-03-18"},{"lineNumber":418,"author":{"gitId":"L5-Z"},"content":"            System.out.println(\"Welcome back, Captain \" + name);","lastModifiedDate":"2024-03-26"},{"lineNumber":419,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(UiConstant.SUCCESSFUL_LOAD);","lastModifiedDate":"2024-03-21"},{"lineNumber":420,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-03-18"},{"lineNumber":421,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(UiConstant.MISSING_FILE);","lastModifiedDate":"2024-03-21"},{"lineNumber":422,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":423,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":424,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":425,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":426,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":427,"author":{"gitId":"rouvinerh"},"content":"     * Prints the goodbye message for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":429,"author":{"gitId":"L5-Z"},"content":"    public static void printGoodbyeMessage() {","lastModifiedDate":"2024-03-20"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":431,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"PulsePilot successful touchdown\");","lastModifiedDate":"2024-03-20"},{"lineNumber":432,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"See you soon, Captain!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":433,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":434,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":435,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"j013n3":1,"JustinSoh":138,"rouvinerh":227,"L5-Z":69}},{"path":"src/main/java/utility/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"package utility;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":" * Enum representing the commands for PulsePilot","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"public enum Command {","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"    WORKOUT,","lastModifiedDate":"2024-03-25"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"    HISTORY,","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"    LATEST,","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"    HEALTH,","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    DELETE,","lastModifiedDate":"2024-03-25"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"    HELP,","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"    EXIT,","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"JustinSoh":2,"rouvinerh":4,"L5-Z":9}},{"path":"src/main/java/utility/CustomExceptions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package utility;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":" * Represents a custom exception class designed for PulsePilot to handle errors during command processing.","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"public class CustomExceptions extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an OutOfBounds error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"    public static class OutOfBounds extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"        public OutOfBounds(String message) {","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an InvalidInput error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    public static class InvalidInput extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"        public InvalidInput(String message) {","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-14"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an FileReadError error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    public static class FileReadError extends Exception{","lastModifiedDate":"2024-03-24"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"        public FileReadError(String message) {","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an FileWriteError error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    public static class FileWriteError extends Exception{","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        public FileWriteError(String message) {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an FileCreateError error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    public static class FileCreateError extends Exception{","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        public FileCreateError(String message) {","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an InsufficientInput error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"    public static class InsufficientInput extends Exception {","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"        public InsufficientInput(String message) {","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"JustinSoh":22,"rouvinerh":43,"L5-Z":3}},{"path":"src/main/java/utility/ErrorConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package utility;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"public class ErrorConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"    // General Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"    public static final String NEGATIVE_VALUE_ERROR \u003d \"Requires a positive integer!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"    public static final String INVALID_INDEX_DELETE_ERROR \u003d \"Invalid index to delete!\";","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"    // Storage Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"    public static final String SAVE_ERROR \u003d \"File save failed. Write error occurred:\";","lastModifiedDate":"2024-03-25"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"    public static final String LOAD_ERROR \u003d \"File read error:\" + \"Error at \";","lastModifiedDate":"2024-03-25"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"    public static final String CREATE_FILE_ERROR \u003d \"Unable to create file.\";","lastModifiedDate":"2024-03-25"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"    public static final String CORRUPT_ERROR \u003d \"File is corrupted. Ceasing any further data imports.\";","lastModifiedDate":"2024-03-25"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"    // Input Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_COMMAND_ERROR \u003d \"Invalid command. Enter \u0027help\u0027 to view available commands.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"    public static final String UNSPECIFIED_PARAMETER_ERROR \u003d \"Parameter(s) unspecified.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_PARAMETER_ERROR \u003d \"Parameter(s) invalid or out of bounds\";","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"    public static final String NO_DATE_SPECIFIED_ERROR \u003d \"NA\";","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_ITEM_ERROR \u003d \"Invalid item specified.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"    public static final String CORRECT_FILTER_ITEM_FORMAT \u003d \"/item:run/gym/workouts/bmi/period\";","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"    // Date errors","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_DATE_ERROR \u003d \"Invalid date format. Format is DD-MM-YYYY in integers.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_DAY_ERROR \u003d \"Day must be an integer between 01 and 31.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_MONTH_ERROR \u003d \"Month must be an integer between 01 and 12.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"    public static final String PARSING_DATE_ERROR \u003d\"Error parsing date!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"    // Time errors","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_TIME_ERROR \u003d \"Invalid time format. Format is HH:MM:SS or MM:SS with integers\";","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_MINUTES_ERROR \u003d \"Minutes must be a positive integer between 01 and 59.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_HOURS_ERROR \u003d \"Hours must be a positive integer between 1 and 23\";","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"    public static final String PARSING_TIME_ERROR \u003d \"Error parsing time!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"    //Delete Errors","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_COMMAND_FORMAT_ERROR \u003d \"Invalid command format.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"j013n3"},"content":"    public static final String CORRECT_DELETE_COMMAND_FORMAT \u003d \"Usage: delete /item:filter /index:index\";","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"    public static final String NULL_ITEM_ERROR \u003d \"No item specified.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"    public static final String CORRECT_ITEM_FORMAT \u003d \"Use /item:run/gym/period/bmi\";","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"    public static final String NULL_INDEX_ERROR \u003d \"No index specified\";","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"    public static final String NEGATIVE_INDEX_ERROR \u003d \"Index must be a valid positive integer.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    // EXERCISE ERRORS","lastModifiedDate":"2024-03-25"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    public static final String UNSPECIFIED_ERROR \u003d \"Unspecified error\";","lastModifiedDate":"2024-03-25"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"    // HISTORY ERRORS","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_RUN_EMPTY_ERROR \u003d \"No runs found! You need to add a run first!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_GYM_EMPTY_ERROR \u003d \"No gyms found! You need to add a gym first!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_EMPTY_ERROR \u003d \"No workouts found! You need to add \" +","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"            \"either a run or a gym first\";","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"    // RUN ERRORS","lastModifiedDate":"2024-03-25"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_DISTANCE_DOUBLE_ERROR \u003d \"Distance must be a double! e.g. /d:24.00\";","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_DISTANCE_POSITIVE_ERROR \u003d \"Distance must be positive! e.g. /d:10.32\";","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_TIME_EMPTY_ERROR \u003d \"Time cannot be blank! e.g. /t:HH:MM:SS\";","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_TIME_INVALID_FORMAT_ERROR \u003d \"Time must be in HH:MM:SS format! e.g. /t:00:40:10\";","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_TIME_INTEGER_ERROR \u003d \"Time must be in HH:MM:SS format! e.g. /t:00:40:10\";","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_TIME_HOURS_RANGE_ERROR \u003d \"Hours must be between 00 and 23! e.g. /t:23:40:10\";","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_TIME_MINUTES_RANGE_ERROR \u003d \"Minutes must be between 00 and 59! e.g. /t:23:33:10\";","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_TIME_SECONDS_RANGE_ERROR \u003d \"Seconds must be between 00 and 59! e.g. /t:00:40:10\";","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_DISTANCE_EMPTY_ERROR \u003d \"Distance cannot be blank! e.g. /d:10.32\";","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"    // GYM ERRORS","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"    public static final String NO_OF_STATION_BLANK_ERROR \u003d \"Number of stations cannot be blank! e.g. /n:3\";","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    public static final String NO_OF_STATION_POSITIVE_ERROR \u003d \"Number of stations must be positive! e.g. /n:4\";","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"    public static final String NO_OF_STATION_DIGIT_ERROR \u003d \"Number of stations must be a number! e.g. /n:5\";","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_EXERCISE_NAME_BLANK_ERROR \u003d \"Exercise name cannot be blank! e.g. \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"            WorkoutConstant.STATION_GYM_FORMAT;","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_SET_DIGIT_ERROR \u003d \"Number of sets must be a number! e.g. /s:4\";","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_SET_POSITIVE_ERROR \u003d \"Number of sets must be positive! e.g. /s:4\";","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_SET_BLANK_ERROR \u003d \"Number of sets cannot be blank! e.g. /s:4\";","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_REP_DIGIT_ERROR \u003d \"Number of reps must be a number! e.g. /r:4\";","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_REP_POSITIVE_ERROR \u003d \"Number of reps must be positive! e.g. /r:4\";","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_REP_BLANK_ERROR \u003d \"Number of reps cannot be blank! e.g. /r:4\";","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_WEIGHT_POSITIVE_ERROR \u003d \"Weights must be positive! e.g. /w:10,20,30\";","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_WEIGHT_BLANK_ERROR \u003d \"Weights cannot be blank! e.g. /w:10,20,30\";","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_WEIGHT_DIGIT_ERROR \u003d \" Weights must be a number! e.g. /w:5,10,20\";","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_WEIGHTS_INCORRECT_NUMBER_ERROR \u003d \" Number of weight values must be the same as\" +","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"            \" the number of sets! e.g. benchpress /s:2 /r:10 /w:10,20\";","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_STATION_INPUT_DIGIT_ERROR \u003d \"Numeric input required for sets, reps and weights!\"","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"            + \" e.g. \" + WorkoutConstant.STATION_GYM_FORMAT;","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"    // HEALTH ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"    public static final String HEALTH_INPUT_BLANK_ERROR \u003d \"Type of health cannot be empty. \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"j013n3"},"content":"            \"Please input either /h:bmi, /h:period, /h:prediction or /h:appointment\";","lastModifiedDate":"2024-03-28"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"    public static final String INVALID_HEALTH_INPUT_ERROR \u003d \"Invalid input for health type! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"            \"Please input either /h:bmi, /h:period, /h:prediction or /h:appointment\";","lastModifiedDate":"2024-03-28"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"    // BMI ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"    public static final String INSUFFICIENT_BMI_PARAMETERS_ERROR \u003d \"Insufficient parameters for bmi! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"            \"Example input: /h:bmi /height:height /weight:weight /date:date\";","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"    public static final String NEGATIVE_BMI_ERROR \u003d \"Bmi must be a positive value\";","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"    public static final String NULL_BMI_ERROR \u003d \"Bmi object cannot be null.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_BMI_LIST_ERROR \u003d \"BMI List is empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"syj02"},"content":"    public static final String BMI_LIST_UNCLEARED_ERROR \u003d \"Bmi list is not cleared.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"    public static final String HEIGHT_WEIGHT_INPUT_ERROR \u003d","lastModifiedDate":"2024-03-28"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"            \"Height and weight should be 2 decimal place positive numbers!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"    // PERIOD ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"    public static final String INSUFFICIENT_PERIOD_PARAMETERS_ERROR \u003d \"Insufficient parameters for period! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"            \"Example input: /h:period /start:startDate /end:endDate\";","lastModifiedDate":"2024-03-26"},{"lineNumber":113,"author":{"gitId":"syj02"},"content":"    public static final String NULL_PERIOD_ERROR \u003d \"Period object cannot be null.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":114,"author":{"gitId":"syj02"},"content":"    public static final String NULL_START_DATE_ERROR \u003d \"Start date of period cannot be empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":115,"author":{"gitId":"syj02"},"content":"    public static final String NULL_END_DATE_ERROR \u003d \"End date of period cannot be empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_START_DATE_ERROR \u003d \"Invalid start date!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_END_DATE_ERROR \u003d \"Invalid end date!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_PERIOD_LIST_ERROR \u003d \"Period List is empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":119,"author":{"gitId":"syj02"},"content":"    public static final String PERIOD_LIST_UNCLEARED_ERROR \u003d \"Period list is not cleared.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"    public static final String START_DATE_IN_FUTURE_ERROR \u003d \"Start date cannot be later than today\u0027s date.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATE_IN_FUTURE_ERROR \u003d \"Date specified cannot be later than today\u0027s date.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":122,"author":{"gitId":"syj02"},"content":"    public static final String PERIOD_END_BEFORE_START_ERROR \u003d \"Start date of period must be before end date.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":123,"author":{"gitId":"syj02"},"content":"    public static final String UNABLE_TO_MAKE_PREDICTIONS_ERROR \u003d \"Insufficient period cycles to make prediction.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":124,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":125,"author":{"gitId":"syj02"},"content":"    // APPOINTMENT ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"syj02"},"content":"    public static final String INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR \u003d \"Insufficient parameters for period! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":127,"author":{"gitId":"syj02"},"content":"            \"Example input: /h:appointment /date:date /time:time /description:description /place:place\";","lastModifiedDate":"2024-03-26"},{"lineNumber":128,"author":{"gitId":"syj02"},"content":"    public static final String NULL_APPOINTMENT_ERROR \u003d \"Appointment object cannot be null.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":129,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_APPOINTMENT_LIST_ERROR \u003d \"Appointment list is empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":130,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_LIST_UNCLEARED_ERROR \u003d \"Appointment list is not cleared.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"    public static final String START_INDEX_NEGATIVE_ERROR \u003d \"Start index for prediction must be positive\";","lastModifiedDate":"2024-03-28"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"    public static final String END_INDEX_GREATER_THAN_START_ERROR \u003d","lastModifiedDate":"2024-03-28"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"            \"End index must be greater than start index is negative\";","lastModifiedDate":"2024-03-28"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"    public static final String NULL_DATE_ERROR \u003d \"Date of appointment cannot be empty.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"    public static final String NULL_TIME_ERROR \u003d \"Time of appointment cannot be empty.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"    public static final String DESCRIPTION_LENGTH_ERROR \u003d\"Description cannot be more than 100 characters\";","lastModifiedDate":"2024-03-28"},{"lineNumber":137,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":138,"author":{"gitId":"L5-Z"},"content":"    // HISTORY AND LATEST ERRORS","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_HISTORY_FORMAT_ERROR \u003d \"Invalid command format. \" +","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"L5-Z"},"content":"            System.lineSeparator() +","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"L5-Z"},"content":"            \"Usage: history/latest /view:filter\";","lastModifiedDate":"2024-03-27"},{"lineNumber":142,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_HISTORY_FILTER_ERROR \u003d \"Missing/invalid filter used!\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":143,"author":{"gitId":"L5-Z"},"content":"            System.lineSeparator() +","lastModifiedDate":"2024-03-27"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"            \"Use /item:run/gym/workouts/period/bmi\";","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_LATEST_FILTER_ERROR \u003d \"Missing/invalid filter used!\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"            System.lineSeparator() +","lastModifiedDate":"2024-03-27"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"            \"Use /item:run/gym/period/bmi\";","lastModifiedDate":"2024-03-27"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"j013n3":35,"JustinSoh":58,"rouvinerh":1,"L5-Z":25,"syj02":31}},{"path":"src/main/java/utility/Filters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package utility;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":" * Enum representing the filters used for Workouts and Health.","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"public enum Filters {","lastModifiedDate":"2024-03-19"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"    RUN,","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"    GYM,","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"    PERIOD,","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"    BMI,","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    APPOINTMENT,","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"    PREDICTION,","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"    WORKOUTS","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"JustinSoh":8,"rouvinerh":5,"syj02":2}},{"path":"src/main/java/utility/HealthConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package utility;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"public class HealthConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"    // Headers","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"    public static final String BMI \u003d \"bmi\";","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"    public static final String PERIOD \u003d \"period\";","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT \u003d \"appointment\";","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"    // Flags","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    public static final String HEALTH_FLAG \u003d \"/h:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    public static final String HEIGHT_FLAG \u003d \"/height:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"    public static final String WEIGHT_FLAG \u003d \"/weight:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATE_FLAG \u003d \"/date:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    public static final String START_FLAG \u003d \"/start:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    public static final String END_FLAG \u003d \"/end:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    public static final String TIME_FLAG \u003d \"/time:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    public static final String DESCRIPTION_FLAG \u003d \"/description:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"    // Parameters","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer NUM_BMI_PARAMETERS \u003d 3;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer NUM_PERIOD_PARAMETERS \u003d 2;","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer NUM_APPOINTMENT_PARAMETERS \u003d 3;","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"    // Index","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"    public static final Integer HEALTH_TYPE_INDEX \u003d 1;","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"    // Threshold","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"    public static final double UNDERWEIGHT_BMI_THRESHOLD \u003d 18.5;","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"    public static final double NORMAL_BMI_THRESHOLD \u003d 24.9;","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    public static final double OVERWEIGHT_BMI_THRESHOLD \u003d 29.9;","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    public static final double OBESE_BMI_THRESHOLD \u003d 39.9;","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"    // Input","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    public static final String BMI_INPUT \u003d \"h:bmi\";","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"    public static final String PERIOD_INPUT \u003d \"h:period\";","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"    public static final String PREDICT_INPUT \u003d \"h:predict\";","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_INPUT \u003d \"h:appointment\";","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"    // Formatted Strings/Messages","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"    // BMI","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"    public static final String LOG_DELETE_BMI_FORMAT \u003d \"Removed BMI entry of %.2f from %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"    public static final String TWO_DECIMAL_PLACE_FORMAT \u003d \"%.2f\";","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"    public static final String BMI_ADDED_MESSAGE_PREFIX \u003d \"Added: bmi | \";","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"    public static final String BMI_REMOVED_MESSAGE_PREFIX \u003d \"Removed BMI with index: \";","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"    public static final String UNDERWEIGHT_MESSAGE \u003d \"You\u0027re underweight.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"    public static final String NORMAL_WEIGHT_MESSAGE \u003d \"Great! You\u0027re within normal range.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"    public static final String OVERWEIGHT_MESSAGE \u003d \"You\u0027re overweight.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"    public static final String OBESE_MESSAGE \u003d \"You\u0027re obese.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"    public static final String SEVERELY_OBESE_MESSAGE \u003d \"You\u0027re severely obese.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"    // PERIOD","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"    public static final String PRINT_PERIOD_FORMAT \u003d \"Period Start: %s Period End: %s\"","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"            + \"Period Length: %d days\";","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"    public static final String PRINT_BMI_FORMAT \u003d \"%s\"","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"j013n3"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"j013n3"},"content":"            + \"Your BMI is %.2f\"","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"j013n3"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"j013n3"},"content":"            + \"%s\";","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"    public static final String LOG_DELETE_PERIOD_FORMAT \u003d \"Removed period entry with start date: %s and end date: %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"    public static final String PERIOD_ADDED_MESSAGE_PREFIX \u003d \"Added: period | \";","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"    public static final String PERIOD_REMOVED_MESSAGE_PREFIX \u003d \"Removed period with index: \";","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"    // PREDICTION","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"    public static final String PRINT_CYCLE_FORMAT \u003d \"Cycle Length: %d days\";","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"    public static final Integer LATEST_THREE_CYCLE_LENGTHS \u003d 3;","lastModifiedDate":"2024-03-25"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"    public static final Integer LAST_CYCLE_INDEX_OFFSET \u003d 2;","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"j013n3"},"content":"    public static final Integer LAST_CYCLE_OFFSET \u003d 1;","lastModifiedDate":"2024-03-28"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer MIN_SIZE_FOR_PREDICTION \u003d 4;","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"    public static final String PREDICTED_START_DATE_MESSAGE \u003d \"Your next cycle\u0027s predicted start date is \";","lastModifiedDate":"2024-03-25"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"    public static final String COUNT_DAYS_MESSAGE \u003d \", in \";","lastModifiedDate":"2024-03-25"},{"lineNumber":77,"author":{"gitId":"j013n3"},"content":"    public static final String PERIOD_IS_LATE \u003d \". Your period is late by \";","lastModifiedDate":"2024-03-25"},{"lineNumber":78,"author":{"gitId":"j013n3"},"content":"    public static final String DAYS_MESSAGE \u003d \" days.\";","lastModifiedDate":"2024-03-25"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"    // APPOINTMENT","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"    public static final String PRINT_APPOINTMENT_FORMAT \u003d \"On %s at %s: %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"    public static final String LOG_DELETE_APPOINTMENT_FORMAT \u003d \"Removed appointment on %s at %s: %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_ADDED_MESSAGE_PREFIX \u003d \"Added: appointment | \";","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_REMOVED_MESSAGE_PREFIX \u003d \"Removed appointment with index: \";","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_DESCRIPTION_LENGTH \u003d 100;","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"j013n3":14,"JustinSoh":4,"rouvinerh":12,"L5-Z":34,"syj02":22}},{"path":"src/main/java/utility/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import ui.Output;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import health.Appointment;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":" * Represents the parser used for PulsePilot","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"public class Parser {","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     * Parses and converts String date to a LocalDate variable.","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"     * @param date String representing the date.","lastModifiedDate":"2024-03-25"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"     * @return LocalDate variable representing the date.","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"     * @throws DateTimeParseException If there is an error parsing the date.","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    public static LocalDate parseDate(String date) {","lastModifiedDate":"2024-03-25"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"        LocalDate formattedDate \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"            formattedDate \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2024-03-25"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"            Output.printException(ErrorConstant.PARSING_DATE_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"        return formattedDate;","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"     * Parses and converts String time to a LocalDate variable.","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"     * @param stringTime String representing the time.","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"     * @return LocalTime variable representing the time.","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"     * @throws DateTimeParseException If there is an error parsing the time.","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"    public static LocalTime parseTime(String stringTime) throws DateTimeParseException {","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"        LocalTime formattedTime \u003d null;","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"            formattedTime \u003d LocalTime.parse(stringTime, formatter);","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"            Output.printException(ErrorConstant.PARSING_TIME_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"        return formattedTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     * Validates that the input date string is correctly formatted in DD-MM-YYYY.","lastModifiedDate":"2024-03-25"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     * @param date The string date from user input.","lastModifiedDate":"2024-03-25"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid date inputs.","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    public static void validateDateInput(String date) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"        if (!date.matches(UiConstant.VALID_DATE_REGEX)) {","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_DATE_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"        String[] parts \u003d date.split(UiConstant.DASH);","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        int day \u003d Integer.parseInt(parts[0]);","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"        int month \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-03-25"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":70,"author":{"gitId":"j013n3"},"content":"        if (day \u003c UiConstant.MIN_DAY || day \u003e UiConstant.MAX_DAY) {","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_DAY_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":74,"author":{"gitId":"j013n3"},"content":"        if (month \u003c UiConstant.MIN_MONTH || month \u003e UiConstant.MAX_MONTH) {","lastModifiedDate":"2024-03-28"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_MONTH_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"     * Parses and validates user input for the delete command. Returns a list of parsed user input containing the","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"     * filter string and the index.","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"     * @return The filter string, set to either \u0027gym\u0027, \u0027run\u0027, \u0027bmi\u0027 or \u0027period\u0027.","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"    public static String[] parseDeleteInput(String userInput) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"        String[] parsedInputs \u003d new String[2];","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"            String[] inputs \u003d userInput.split(UiConstant.SPLIT_BY_SLASH);","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"            if (inputs.length !\u003d 3) {","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"                throw new CustomExceptions.InsufficientInput(ErrorConstant.INVALID_COMMAND_FORMAT_ERROR","lastModifiedDate":"2024-03-28"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"                        + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":93,"author":{"gitId":"j013n3"},"content":"                        + ErrorConstant.CORRECT_DELETE_COMMAND_FORMAT);","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"            String[] itemSplit \u003d inputs[1].split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"            if (itemSplit.length !\u003d 2 || !itemSplit[0].equalsIgnoreCase(\"item\")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.NULL_ITEM_ERROR","lastModifiedDate":"2024-03-28"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"                        + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"                        + ErrorConstant.CORRECT_ITEM_FORMAT);","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"            validateFilter(itemSplit[1].trim());","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"            String[] indexSplit \u003d inputs[2].split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"            if (indexSplit.length !\u003d 2 || !indexSplit[0].equalsIgnoreCase(\"index\")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.NULL_INDEX_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"            Integer.parseInt(indexSplit[1].trim());","lastModifiedDate":"2024-03-26"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"            parsedInputs[1] \u003d indexSplit[1].trim();","lastModifiedDate":"2024-03-26"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"            return parsedInputs;","lastModifiedDate":"2024-03-26"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"            return null;","lastModifiedDate":"2024-03-26"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.NEGATIVE_INDEX_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"     * Validates whether the filter string is either \u0027run\u0027, \u0027gym\u0027, \u0027bmi\u0027, \u0027period\u0027 ","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     * or \u0027appointment\u0027. ","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     * ","lastModifiedDate":"2024-03-26"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     * @param filter The filter string to be checked.","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the filter string is none of them.","lastModifiedDate":"2024-03-26"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"    public static void validateFilter (String filter) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-26"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"        if (filter.equals(WorkoutConstant.RUN) ","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"                || filter.equals(WorkoutConstant.GYM) ","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"                || filter.equals(HealthConstant.BMI) ","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"                || filter.equals(HealthConstant.PERIOD)","lastModifiedDate":"2024-03-27"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"                || filter.equals(HealthConstant.APPOINTMENT)","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"                || filter.equals(WorkoutConstant.ALL)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"            return;","lastModifiedDate":"2024-03-26"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"        throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_ITEM_ERROR","lastModifiedDate":"2024-03-28"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"                + ErrorConstant.CORRECT_FILTER_ITEM_FORMAT);","lastModifiedDate":"2024-03-28"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-26"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"     * Function validates and parses the user input for the history and latest commands.","lastModifiedDate":"2024-03-26"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput String representing the user input.","lastModifiedDate":"2024-03-26"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"     * @return The filter string, set to either \u0027gym\u0027, \u0027run\u0027, \u0027bmi\u0027 or \u0027period\u0027.","lastModifiedDate":"2024-03-26"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"    public static String parseHistoryAndLatestInput(String userInput) {","lastModifiedDate":"2024-03-26"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"            String type \u003d extractSubstringFromSpecificIndex(userInput, UiConstant.ITEM_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"            if (type.isBlank()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_HISTORY_FILTER_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"            validateFilter(type.toLowerCase());","lastModifiedDate":"2024-03-27"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"            return type.toLowerCase();","lastModifiedDate":"2024-03-27"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"            return null;","lastModifiedDate":"2024-03-26"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"     * Parses input for Bmi command. Adds Bmi object to HealthList if valid.","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"    public static void parseBmiInput(String userInput) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"        String[] bmiDetails \u003d splitBmiInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"        validateBmiInput(bmiDetails);","lastModifiedDate":"2024-03-27"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        Bmi newBmi \u003d new Bmi(bmiDetails[0], bmiDetails[1], bmiDetails[2]);","lastModifiedDate":"2024-03-27"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"        HealthList.addBmi(newBmi);","lastModifiedDate":"2024-03-27"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"        Output.printAddBmi(newBmi);","lastModifiedDate":"2024-03-27"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"     * Validates Bmi details entered.","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"     * @param bmiDetails List of strings representing BMI details.","lastModifiedDate":"2024-03-27"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If there are any errors in the details entered.","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"    public static void validateBmiInput(String[] bmiDetails) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        if (bmiDetails[0].isEmpty()","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"                || bmiDetails[1].isEmpty()","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"                || bmiDetails[2].isEmpty()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"        if (!bmiDetails[0].matches(UiConstant.VALID_TWO_DP_NUMBER_REGEX) ||","lastModifiedDate":"2024-03-28"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"                !bmiDetails[1].matches(UiConstant.VALID_TWO_DP_NUMBER_REGEX)) {","lastModifiedDate":"2024-03-28"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.HEIGHT_WEIGHT_INPUT_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"        validateDateInput(bmiDetails[2]);","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"        LocalDate date \u003d parseDate(bmiDetails[2]);","lastModifiedDate":"2024-03-28"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"        if (date.isAfter(LocalDate.now())) {","lastModifiedDate":"2024-03-28"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.DATE_IN_FUTURE_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-27"},{"lineNumber":203,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":204,"author":{"gitId":"syj02"},"content":"     * Split user input into Bmi command, height, weight and date.","lastModifiedDate":"2024-03-27"},{"lineNumber":205,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":206,"author":{"gitId":"syj02"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-27"},{"lineNumber":207,"author":{"gitId":"syj02"},"content":"     * @return An array of strings containing the extracted Bmi parameters.","lastModifiedDate":"2024-03-27"},{"lineNumber":208,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InvalidInput If the user input is invalid or blank.","lastModifiedDate":"2024-03-27"},{"lineNumber":209,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":210,"author":{"gitId":"syj02"},"content":"    public static String[] splitBmiInput(String input) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":211,"author":{"gitId":"syj02"},"content":"        String [] results \u003d new String[HealthConstant.NUM_BMI_PARAMETERS];","lastModifiedDate":"2024-03-27"},{"lineNumber":212,"author":{"gitId":"syj02"},"content":"        if (!input.contains(HealthConstant.HEIGHT_FLAG)","lastModifiedDate":"2024-03-28"},{"lineNumber":213,"author":{"gitId":"syj02"},"content":"                || !input.contains(HealthConstant.WEIGHT_FLAG)","lastModifiedDate":"2024-03-27"},{"lineNumber":214,"author":{"gitId":"syj02"},"content":"                || !input.contains(HealthConstant.DATE_FLAG)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":215,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":216,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":217,"author":{"gitId":"syj02"},"content":"        results[0] \u003d extractSubstringFromSpecificIndex(input, HealthConstant.HEIGHT_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":218,"author":{"gitId":"syj02"},"content":"        results[1] \u003d extractSubstringFromSpecificIndex(input, HealthConstant.WEIGHT_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":219,"author":{"gitId":"syj02"},"content":"        results[2] \u003d extractSubstringFromSpecificIndex(input, HealthConstant.DATE_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":220,"author":{"gitId":"syj02"},"content":"        return results;","lastModifiedDate":"2024-03-27"},{"lineNumber":221,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"syj02"},"content":"    //@@author","lastModifiedDate":"2024-03-27"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"     * Parses input for Period command. Adds Period object to HealthList if valid.","lastModifiedDate":"2024-03-27"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-27"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"    public static void parsePeriodInput(String userInput) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"        String[] periodDetails \u003d splitPeriodInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"        validatePeriodInput(periodDetails);","lastModifiedDate":"2024-03-27"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"        Period newPeriod \u003d new Period(periodDetails[0], periodDetails[1]);","lastModifiedDate":"2024-03-27"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(newPeriod);","lastModifiedDate":"2024-03-27"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddPeriod(newPeriod);","lastModifiedDate":"2024-03-27"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"     * Split user input into Period command, start date and end date.","lastModifiedDate":"2024-03-27"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-27"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"     * @return An array of strings containing the extracted Period parameters.","lastModifiedDate":"2024-03-27"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the user input is invalid or blank.","lastModifiedDate":"2024-03-27"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"    public static String[] splitPeriodInput(String input) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"        String [] results \u003d new String[HealthConstant.NUM_PERIOD_PARAMETERS];","lastModifiedDate":"2024-03-27"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"        if (!input.contains(HealthConstant.START_FLAG)","lastModifiedDate":"2024-03-28"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"                || !input.contains(HealthConstant.END_FLAG)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INSUFFICIENT_PERIOD_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"        results[0] \u003d extractSubstringFromSpecificIndex(input, HealthConstant.START_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"        results[1] \u003d extractSubstringFromSpecificIndex(input, HealthConstant.END_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"        return results;","lastModifiedDate":"2024-03-27"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"     * Validates Period details entered.","lastModifiedDate":"2024-03-27"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"     * @param periodDetails List of strings representing Period details.","lastModifiedDate":"2024-03-27"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are any errors in the details entered.","lastModifiedDate":"2024-03-27"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"    public static void validatePeriodInput(String[] periodDetails) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"        if (periodDetails[0].isEmpty() || periodDetails[1].isEmpty()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INSUFFICIENT_PERIOD_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"            validateDateInput(periodDetails[0]);","lastModifiedDate":"2024-03-27"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":270,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_START_DATE_ERROR","lastModifiedDate":"2024-03-28"},{"lineNumber":271,"author":{"gitId":"j013n3"},"content":"                    + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":272,"author":{"gitId":"j013n3"},"content":"                    + e.getMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"            validateDateInput(periodDetails[1]);","lastModifiedDate":"2024-03-27"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":277,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_END_DATE_ERROR","lastModifiedDate":"2024-03-28"},{"lineNumber":278,"author":{"gitId":"j013n3"},"content":"                    + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":279,"author":{"gitId":"j013n3"},"content":"                    + e.getMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"        LocalDate startDate \u003d parseDate(periodDetails[0]);","lastModifiedDate":"2024-03-27"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"        LocalDate endDate \u003d parseDate(periodDetails[1]);","lastModifiedDate":"2024-03-27"},{"lineNumber":284,"author":{"gitId":"j013n3"},"content":"        if (startDate.isAfter(LocalDate.now())) {","lastModifiedDate":"2024-03-28"},{"lineNumber":285,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.START_DATE_IN_FUTURE_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":286,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"        if (startDate.isAfter(endDate)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.PERIOD_END_BEFORE_START_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"     * Parses input for Prediction command.","lastModifiedDate":"2024-03-27"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"     * Prints period prediction if possible.","lastModifiedDate":"2024-03-27"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If prediction cannot be made.","lastModifiedDate":"2024-03-27"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"    public static void parsePredictionInput() throws CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"        if (HealthList.getPeriodSize() \u003e\u003d HealthConstant.MIN_SIZE_FOR_PREDICTION) {","lastModifiedDate":"2024-03-27"},{"lineNumber":300,"author":{"gitId":"j013n3"},"content":"            HealthList.printLatestThreeCycles();","lastModifiedDate":"2024-03-28"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"            LocalDate nextPeriodStartDate \u003d HealthList.predictNextPeriodStartDate();","lastModifiedDate":"2024-03-27"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"            Period.printNextCyclePrediction(nextPeriodStartDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.UNABLE_TO_MAKE_PREDICTIONS_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"     * Validates the time used in HH:MM format.","lastModifiedDate":"2024-03-27"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"     * @param time String representing the time to check.","lastModifiedDate":"2024-03-27"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If time is formatted wrongly.","lastModifiedDate":"2024-03-27"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"    public static void validateTimeInput(String time) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"        if (!time.matches(UiConstant.VALID_TIME_REGEX)) {","lastModifiedDate":"2024-03-28"},{"lineNumber":316,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_TIME_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":318,"author":{"gitId":"j013n3"},"content":"        String [] parts \u003d time.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-28"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"        int hours \u003d Integer.parseInt(parts[0]);","lastModifiedDate":"2024-03-27"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"        int minutes \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-03-27"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":322,"author":{"gitId":"j013n3"},"content":"        if (hours \u003c UiConstant.MIN_HOURS || hours \u003e UiConstant.MAX_HOURS) {","lastModifiedDate":"2024-03-28"},{"lineNumber":323,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_HOURS_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":325,"author":{"gitId":"j013n3"},"content":"        if (minutes \u003c UiConstant.MIN_MINUTES || minutes \u003e UiConstant.MAX_MINUTES) {","lastModifiedDate":"2024-03-28"},{"lineNumber":326,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_MINUTES_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"     * Validates the time used in HH:MM format.","lastModifiedDate":"2024-03-27"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"     * @param time String representing the time to check.","lastModifiedDate":"2024-03-27"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If time is formatted wrongly.","lastModifiedDate":"2024-03-27"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"    public static void validateRunTimeInput(String time) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"        if (!time.matches(UiConstant.VALID_TIME_REGEX) \u0026\u0026","lastModifiedDate":"2024-03-28"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"                !time.matches(UiConstant.VALID_TIME_WITH_HOURS_REGEX)) {","lastModifiedDate":"2024-03-28"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(\"Invalid time format. \" +","lastModifiedDate":"2024-03-27"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"                    \"Format is HH:MM:SS or MM:SS with integers\");","lastModifiedDate":"2024-03-27"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"        String [] parts \u003d time.split(\":\");","lastModifiedDate":"2024-03-27"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"        int hours \u003d -1; // if not needed, leave as -1.","lastModifiedDate":"2024-03-27"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"        int minutes;","lastModifiedDate":"2024-03-27"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"        int seconds;","lastModifiedDate":"2024-03-27"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"        if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2024-03-27"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"            minutes \u003d Integer.parseInt(parts[0]);","lastModifiedDate":"2024-03-27"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"            seconds \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-03-27"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"        } else if (parts.length \u003d\u003d 3) {","lastModifiedDate":"2024-03-27"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"            hours \u003d Integer.parseInt(parts[0]);","lastModifiedDate":"2024-03-27"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"            minutes \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-03-27"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"            seconds \u003d Integer.parseInt(parts[2]);","lastModifiedDate":"2024-03-27"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(\"Invalid time format. Format is HH:MM:SS or MM:SS with integers\");","lastModifiedDate":"2024-03-27"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"        if (minutes \u003c 1 || minutes \u003e 60) {","lastModifiedDate":"2024-03-27"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(\"Minutes must be a positive integer between 01 and 59.\");","lastModifiedDate":"2024-03-27"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"        if (seconds \u003c 1 || seconds \u003e 60) {","lastModifiedDate":"2024-03-27"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(\"Minutes must be a positive integer between 01 and 59.\");","lastModifiedDate":"2024-03-27"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"        if (hours \u003d\u003d 0) {","lastModifiedDate":"2024-03-27"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(\"Hours cannot be 0. Use MM:SS instead\");","lastModifiedDate":"2024-03-27"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"     * Validates Appointment details entered.","lastModifiedDate":"2024-03-27"},{"lineNumber":372,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"     * @param appointmentDetails List of strings representing Appointment details.","lastModifiedDate":"2024-03-27"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are any errors in the details entered.","lastModifiedDate":"2024-03-27"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"    public static void validateAppointmentDetails(String[] appointmentDetails)","lastModifiedDate":"2024-03-27"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"            throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"        if (appointmentDetails[0].isEmpty()","lastModifiedDate":"2024-03-28"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"                || appointmentDetails[1].isEmpty()","lastModifiedDate":"2024-03-28"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"                || appointmentDetails[2].isEmpty()) {","lastModifiedDate":"2024-03-28"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant","lastModifiedDate":"2024-03-27"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"                    .INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"        validateDateInput(appointmentDetails[0]);","lastModifiedDate":"2024-03-28"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"        validateTimeInput(appointmentDetails[1]);","lastModifiedDate":"2024-03-28"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"        if (appointmentDetails[2].length() \u003e HealthConstant.MAX_DESCRIPTION_LENGTH) {","lastModifiedDate":"2024-03-28"},{"lineNumber":388,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.DESCRIPTION_LENGTH_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"     * Split user input into Appointment command, date, time and description.","lastModifiedDate":"2024-03-27"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-27"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"     * @return An array of strings containing the extracted Appointment parameters.","lastModifiedDate":"2024-03-27"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the user input is invalid or blank.","lastModifiedDate":"2024-03-27"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"    public static String[] splitAppointmentDetails(String input)","lastModifiedDate":"2024-03-27"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"            throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"        String [] results \u003d new String[HealthConstant.NUM_APPOINTMENT_PARAMETERS];","lastModifiedDate":"2024-03-27"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"        if (!input.contains(HealthConstant.DATE_FLAG)","lastModifiedDate":"2024-03-28"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"                || !input.contains(HealthConstant.TIME_FLAG)","lastModifiedDate":"2024-03-27"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"                || !input.contains(HealthConstant.DESCRIPTION_FLAG)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":406,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":407,"author":{"gitId":"rouvinerh"},"content":"        results[0] \u003d extractSubstringFromSpecificIndex(input, HealthConstant.DATE_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":408,"author":{"gitId":"rouvinerh"},"content":"        results[1] \u003d extractSubstringFromSpecificIndex(input, HealthConstant.TIME_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":409,"author":{"gitId":"rouvinerh"},"content":"        results[2] \u003d extractSubstringFromSpecificIndex(input, HealthConstant.DESCRIPTION_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"        return results;","lastModifiedDate":"2024-03-27"},{"lineNumber":411,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":413,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":414,"author":{"gitId":"rouvinerh"},"content":"     * Parses input for Appointment command. Adds Appointment object to HealthList if valid.","lastModifiedDate":"2024-03-27"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":416,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-27"},{"lineNumber":417,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":418,"author":{"gitId":"rouvinerh"},"content":"    public static void parseAppointmentInput(String userInput) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":419,"author":{"gitId":"rouvinerh"},"content":"        String[] appointmentDetails \u003d splitAppointmentDetails(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"        validateAppointmentDetails(appointmentDetails);","lastModifiedDate":"2024-03-27"},{"lineNumber":421,"author":{"gitId":"rouvinerh"},"content":"        Appointment newAppointment \u003d new Appointment(appointmentDetails[0],","lastModifiedDate":"2024-03-27"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"                appointmentDetails[1],","lastModifiedDate":"2024-03-27"},{"lineNumber":423,"author":{"gitId":"rouvinerh"},"content":"                appointmentDetails[2]);","lastModifiedDate":"2024-03-27"},{"lineNumber":424,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addAppointment(newAppointment);","lastModifiedDate":"2024-03-27"},{"lineNumber":425,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddAppointment(newAppointment);","lastModifiedDate":"2024-03-27"},{"lineNumber":426,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":427,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"     * Extracts a substring from the given input string based on the provided delimiter.","lastModifiedDate":"2024-03-28"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":431,"author":{"gitId":"rouvinerh"},"content":"     * @param input     The input string from which to extract the substring.","lastModifiedDate":"2024-03-28"},{"lineNumber":432,"author":{"gitId":"rouvinerh"},"content":"     * @param delimiter The delimiter to search for in the input string.","lastModifiedDate":"2024-03-28"},{"lineNumber":433,"author":{"gitId":"rouvinerh"},"content":"     * @return The extracted substring, or an empty string if the delimiter is not found.","lastModifiedDate":"2024-03-28"},{"lineNumber":434,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":435,"author":{"gitId":"rouvinerh"},"content":"    public static String extractSubstringFromSpecificIndex(String input, String delimiter) {","lastModifiedDate":"2024-03-28"},{"lineNumber":436,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d input.indexOf(delimiter);","lastModifiedDate":"2024-03-28"},{"lineNumber":437,"author":{"gitId":"rouvinerh"},"content":"        if (index \u003d\u003d -1 || index \u003d\u003d input.length() - delimiter.length()) {","lastModifiedDate":"2024-03-28"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"            return \"\";","lastModifiedDate":"2024-03-28"},{"lineNumber":439,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":440,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":441,"author":{"gitId":"rouvinerh"},"content":"        int startIndex \u003d index + delimiter.length();","lastModifiedDate":"2024-03-28"},{"lineNumber":442,"author":{"gitId":"rouvinerh"},"content":"        int endIndex \u003d input.indexOf(\"/\", startIndex);","lastModifiedDate":"2024-03-28"},{"lineNumber":443,"author":{"gitId":"rouvinerh"},"content":"        if (endIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-28"},{"lineNumber":444,"author":{"gitId":"rouvinerh"},"content":"            endIndex \u003d input.length();","lastModifiedDate":"2024-03-28"},{"lineNumber":445,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":446,"author":{"gitId":"rouvinerh"},"content":"        return input.substring(startIndex, endIndex).trim();","lastModifiedDate":"2024-03-28"},{"lineNumber":447,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":448,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"j013n3":36,"JustinSoh":64,"rouvinerh":309,"syj02":39}},{"path":"src/main/java/utility/UiConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"package utility;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import java.io.File;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":" * Constants class representing all constants used for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"public class UiConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"    // Special Characters","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_SLASH \u003d \"/\";","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"    public static final String SPLIT_BY_COLON \u003d \":\";","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"    public static final String SPLIT_BY_WHITESPACE \u003d \" \";","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_COMMAS \u003d \",\";","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"    public static final String DASH \u003d \"-\";","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    public static final String COMMAS \u003d \",\";","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"    public static final String LINE \u003d \" | \";","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"    public static final String PARTITION_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    // Regex","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_DATE_REGEX \u003d \"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_TWO_DP_NUMBER_REGEX \u003d \"^\\\\d+\\\\.\\\\d{2}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_TIME_REGEX \u003d \"^\\\\d{2}:\\\\d{2}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_TIME_WITH_HOURS_REGEX \u003d \"^\\\\d{2}:\\\\d{2}:\\\\d{2}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"    // PulsePilot UI replies","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"    public static final String EXIT_MESSAGE \u003d \"Initiating PulsePilot landing sequence...\";","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"    // Storage","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    public static final int DATA_TYPE_INDEX \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    public static final int NAME_INDEX \u003d 1;","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"    public static final String LOG_FILE_PATH \u003d \"./pulsepilot_log.txt\";","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATA_FILE_PATH \u003d \"./pulsepilot_data.txt\";","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"    public static final File SAVE_FILE \u003d new File(UiConstant.DATA_FILE_PATH);","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    public static final int FILE_FOUND \u003d 0;","lastModifiedDate":"2024-03-25"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"    public static final int FILE_NOT_FOUND \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    public static final String MISSING_FILE \u003d \"What is your name, voyager?\";","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"    public static final String SUCCESSFUL_LOAD \u003d \"Prior data found. Orbit has been synchronised.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    // History","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"    public static final String ITEM_FLAG \u003d \"/item:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"    // Numerical values","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    public static final Integer MAX_RUNTIME_ARRAY_LENGTH \u003d 3;","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"    public static final Integer MIN_RUNTIME_ARRAY_LENGTH \u003d 2;","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_SECONDS_IN_MINUTE \u003d 60;","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_SECONDS_IN_HOUR \u003d 3600;","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"    public static final Integer MIN_DAY \u003d 1;","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_DAY \u003d 31;","lastModifiedDate":"2024-03-28"},{"lineNumber":54,"author":{"gitId":"j013n3"},"content":"    public static final Integer MIN_MONTH \u003d 1;","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_MONTH \u003d 12;","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"j013n3"},"content":"    public static final Integer MIN_MINUTES \u003d 0;","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_MINUTES \u003d 59;","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"    public static final Integer MIN_HOURS \u003d 0;","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_HOURS \u003d 23;","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"    public static final double POWER_OF_TWO \u003d 2.0;","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"j013n3"},"content":"    public static final double ROUNDING_FACTOR \u003d 100.0;","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"j013n3":11,"JustinSoh":14,"rouvinerh":12,"L5-Z":25,"syj02":1}},{"path":"src/main/java/utility/WorkoutConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package utility;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"public class WorkoutConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"    // Workout Delimiter","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_NUMBER_OF_STATIONS \u003d \"/n:\";","lastModifiedDate":"2024-03-25"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_EXERCISE_TYPE \u003d \"/e:\";","lastModifiedDate":"2024-03-25"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_DISTANCE \u003d \"/d:\";","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_TIME \u003d \"/t:\";","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_DATE \u003d \"/date:\";","lastModifiedDate":"2024-03-25"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_SETS \u003d \"/s:\";","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_REPS \u003d \"/r:\";","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_WEIGHTS \u003d \"/w:\";","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"    // INDEX","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    public static final Integer STATION_NAME_INDEX \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    public static final int COMMAND_INDEX \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    public static final int DISTANCE_INDEX \u003d 1;","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    public static final int TIME_INDEX \u003d 2;","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"    public static final int DATE_INDEX \u003d 3;","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    // KEYWORDS","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"    public static final String RUN \u003d \"run\";","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"    public static final String GYM \u003d \"gym\";","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    public static final String ALL \u003d \"workouts\";","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    // HISTORY (ALL WORKOUTS) CONSTANTS","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_HEADER \u003d \"Showing all workouts (runs and gyms):\";","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_DATA_FORMAT \u003d \"%-5s\\t%-12s\\t%-8s\\t%-15s\\t%-8s\\t%-10s\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"            \"\\t%-4s\\t%-4s\\t%-10s\";","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_HEADER_FORMAT \u003d String.format(","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"            \"%6s\\t%-5s\\t%-12s\\t%-8s\\t%-15s\\t%-8s\\t%-10s\\t%-4s\\t%-4s\\t%-10s\", \"Index\",","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"                    \"Type\", \"Date\" , \"Distance\" , \"Duration\" , \"Pace\", \"Station\", \"Sets\" , \"Reps\" , \"Weights\");","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_DATA_HEADER_FORMAT \u003d \"%-6s\\t%s\";","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    // Formatted Strings/Messages","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_DATA_FORMAT \u003d \"%s \\t%s\\t\\t%s\\t\\t%s\\t\\t%s\";","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_DATA_INDEX_FORMAT \u003d \"%d.\\t\\t\\t%s\";","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"    public static final String RUN_HEADER_INDEX_FORMAT \u003d \"Index\\t\\tType\\tTime\\t\\tDistance\\tPace\\t\\tDate\";","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"    public static final String GYM_STATION_FORMAT \u003d \"%s: \";","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"    public static final String GYM_SET_FORMAT \u003d \"%d reps at %d KG\";","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_SET_INDEX_FORMAT \u003d \"\\t- Set %d. %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"    public static final String INDIVIDUAL_GYM_STATION_FORMAT \u003d \"%d sets\";","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"    public static final int NUMBER_OF_RUN_PARAMETERS \u003d 4;","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"    public static final String RUN_HEADER \u003d \"Type\\tTime\\t\\tDistance\\tPace\\t\\tDate\";","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"    public static final String ADD_RUN \u003d \"Successfully added a new run session\";","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    public static final String ADD_GYM \u003d \"Successfully added a new gym session\";","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"    // Workout Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"    // STANDARDISE FORMAT ACCORDING TO TELEGRAM MESSAGE : \u003cERROR_TYPE\u003e_ERROR","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"    // EXAMPLE : UNSPECIFIED_PARAMETER_ERROR","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"    // EXAMPLE : LOAD_ERROR","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"    // ----------------V V V V V ---- PLEASE CHECK AND MOVE TO ERROR ---- V V V V V----------------","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"    public static final String BLANK_INPUT_FOR_EXERCISE \u003d \"Type of exercise cannot be empty. \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"            \"Please input either /e:run or /e:gym\";","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    public static final String STATION_GYM_FORMAT \u003d \"e.g. Bench Press /s:2 /r:4 \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"            \"/w:10,20\";","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"    public static final String BLANK_INPUT_FOR_GYM_STATION \u003d \"Fields cannot be empty\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"            \"Please input \" + STATION_GYM_FORMAT;","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_INPUT_FOR_EXERCISE \u003d \"Invalid input for exercise type! \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"            \"Please input either /e:run or /e:gym\";","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_RUN_TIME \u003d \"Invalid run time!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_GYM_INPUT \u003d \"Invalid gym parameters!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_GYM_STATION_INDEX \u003d \"Invalid gym station index!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"    public static final String INSUFFICIENT_PARAMETERS_FOR_RUN \u003d \"Insufficient parameters for run! \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"            \"Example input: new /e:run /d:DISTANCE /t:TIME [/date:DATE]\";","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"    public static final String INSUFFICIENT_PARAMETERS_FOR_GYM \u003d \"Insufficient parameters for gym! \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"            \"Example input: new /e:gym /n:\u003cnumber of exercise\u003e\";","lastModifiedDate":"2024-03-21"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"    public static final String INSUFFICIENT_PARAMETERS_FOR_GYM_STATION \u003d \"Insufficient parameters for Gym Stations! \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"            \"Please input [name of exercise] /s:[sets] /r:[reps] /w:[weights]\";","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"JustinSoh":48,"L5-Z":37}},{"path":"src/main/java/workouts/Gym.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":" * Represents a Gym object that contains an ArrayList of GymStation objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"public class Gym extends Workout {","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    protected LocalDate date \u003d null;","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    protected ArrayList\u003cGymStation\u003e stations \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     * Constructor that adds a Gym object to WorkoutList.","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    public Gym() {","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.addGym(this);","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     * Overloaded constructor that adds a Gym object to WorkoutList, and also takes the optional date parameter.","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDate String representing the date parameter specified.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    public Gym(String stringDate) {","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        this.date \u003d Parser.parseDate(stringDate);","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.addGym(this);","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"     * Adds station to an ArrayList of GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * @param name        Name of the gym station.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"     * @param weightsList Weights used for the station.","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     * @param numberOfSet Number of sets done.","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"     * @param repetitions Number of repetitions done.","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input in any parameter.","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    public void addStation(String name, ArrayList\u003cInteger\u003e weightsList, int numberOfSet,","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"                           int repetitions) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"            GymStation newStation \u003d new GymStation(name, weightsList, repetitions, numberOfSet);","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"            stations.add(newStation);","lastModifiedDate":"2024-03-14"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.InvalidInput(WorkoutConstant.INVALID_GYM_INPUT);","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     * Get specific station as part of Gym object based on workout.","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     * @return The desired GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"    public ArrayList\u003cGymStation\u003e getStations() {","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        return stations;","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    public GymStation getStationByIndex(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"        if (index \u003e\u003d stations.size() || index \u003c 0) {","lastModifiedDate":"2024-03-14"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.OutOfBounds(WorkoutConstant.INVALID_GYM_STATION_INDEX);","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"        return stations.get(index);","lastModifiedDate":"2024-03-14"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"     * Method checks if Gym values is valid","lastModifiedDate":"2024-03-25"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"     * Returns {@code true} if {@code numberOfStation} parameters is valid.","lastModifiedDate":"2024-03-25"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"     * Valid only if {@code numberOfStation} is a positive integer / not blank / and is digit.","lastModifiedDate":"2024-03-25"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"     * Otherwise, throw {@code CustomExceptions.InvalidInput}  or {@code CustomExceptions.InsufficientInput}","lastModifiedDate":"2024-03-25"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfStation String representing the number of Station","lastModifiedDate":"2024-03-25"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"     * @return {@code true} if all parameters are valid.","lastModifiedDate":"2024-03-25"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"    public static boolean checkIfGymIsValid(String numberOfStation) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"        if (numberOfStation.isBlank()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.NO_OF_STATION_BLANK_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"            int value \u003d Integer.parseInt(numberOfStation);","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"            if (value \u003c\u003d 0) {","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.NO_OF_STATION_POSITIVE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.NO_OF_STATION_DIGIT_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"        return true;","lastModifiedDate":"2024-03-25"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"        return date;","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"    public void setDate(LocalDate date) {","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the string representation of a Gym object.","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing the Gym object, inclusive of the date and gym stations done.","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"    @Override","lastModifiedDate":"2024-03-14"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-14"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"        String printedDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"            printedDate \u003d date.toString();","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"            return String.format(\" (Date: %s)\", printedDate);","lastModifiedDate":"2024-03-26"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"            return \" (Date: NA)\";","lastModifiedDate":"2024-03-26"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"     * Use when printing the workout history. This method is used to format the reps and weights into a string.","lastModifiedDate":"2024-03-27"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"     * @param station The GymStation object which contains the sets to be formatted.","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"     * @return A StringBuilder array where [0] is reps, [1] is weights.","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"    private StringBuilder[] buildGymRepAndWeightString(GymStation station){","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder[] repAndWeightArray \u003d new StringBuilder[2];","lastModifiedDate":"2024-03-27"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"        repAndWeightArray[0] \u003d new StringBuilder();","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"        repAndWeightArray[1] \u003d new StringBuilder();","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        int repIndex \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        int weightIndex \u003d 1;","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cGymSet\u003e gymSets \u003d station.getSets();","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c gymSets.size(); i++) {","lastModifiedDate":"2024-03-27"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"            String gymRepString \u003d String.valueOf(gymSets.get(i).getRepetitions());","lastModifiedDate":"2024-03-27"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"            String gymWeightString \u003d String.valueOf(gymSets.get(i).getWeight());","lastModifiedDate":"2024-03-27"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"            repAndWeightArray[repIndex].append(gymRepString);","lastModifiedDate":"2024-03-27"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"            repAndWeightArray[weightIndex].append(gymWeightString);","lastModifiedDate":"2024-03-27"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"            if (i !\u003d gymSets.size() - 1) {","lastModifiedDate":"2024-03-27"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"                repAndWeightArray[repIndex].append(UiConstant.COMMAS);","lastModifiedDate":"2024-03-27"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"                repAndWeightArray[weightIndex].append(UiConstant.COMMAS);","lastModifiedDate":"2024-03-27"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"        return repAndWeightArray;","lastModifiedDate":"2024-03-27"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"     * Used when printing all the workouts. This method takes in two parameters {@code isFirstIteration} and {@code i}","lastModifiedDate":"2024-03-27"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"     * @param index indicates which particular gymStation is being queried.","lastModifiedDate":"2024-03-27"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"     * @return","lastModifiedDate":"2024-03-27"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"    public String getHistoryFormatForSpecificGymStation(int index) {","lastModifiedDate":"2024-03-27"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder gymDate \u003d new StringBuilder();","lastModifiedDate":"2024-03-27"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"            gymDate.append(date);","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"            gymDate.append(ErrorConstant.NO_DATE_SPECIFIED_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"        // Get the string format for a specific gym station","lastModifiedDate":"2024-03-27"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"        GymStation station \u003d getStations().get(index);","lastModifiedDate":"2024-03-27"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        String gymStationString \u003d station.getStationName();","lastModifiedDate":"2024-03-27"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"        String gymSetString \u003d String.valueOf(station.getNumberOfSets());","lastModifiedDate":"2024-03-27"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"        // Process the reps and weights into string format","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder [] repAndWeightArray \u003d buildGymRepAndWeightString(station);","lastModifiedDate":"2024-03-27"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"        String gymRepString \u003d repAndWeightArray[0].toString();","lastModifiedDate":"2024-03-27"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"        String gymWeightString \u003d repAndWeightArray[1].toString();","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"        // If it is first iteration, includes dashes for irrelevant field","lastModifiedDate":"2024-03-27"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"        if (index \u003d\u003d 0){","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"            return String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.GYM, gymDate,","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"                    gymStationString,","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"                    gymSetString,","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"                    gymRepString,","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"                    gymWeightString);","lastModifiedDate":"2024-03-27"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"            // if it is not, then leave it blank","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"            return String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"                    gymStationString,","lastModifiedDate":"2024-03-27"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"                    gymSetString,","lastModifiedDate":"2024-03-27"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"                    gymRepString,","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"                    gymWeightString","lastModifiedDate":"2024-03-27"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"            );","lastModifiedDate":"2024-03-27"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":140,"rouvinerh":66,"L5-Z":2}},{"path":"src/main/java/workouts/GymSet.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":" * Represents a GymSet object.","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"public class GymSet {","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"    int weight;","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"    int repetitions;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"     * Constructs a new GymSet object using the weight and reps for 1 set of a gym station.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"     * @param weight The weight done for the set.","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"     * @param repetitions The number of reps done for the set.","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    public GymSet(int weight, int repetitions){","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"        this.repetitions \u003d repetitions;","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"    public int getWeight() {","lastModifiedDate":"2024-03-24"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"        return weight;","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    public void setWeight(int weight) {","lastModifiedDate":"2024-03-24"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    public int getRepetitions() {","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"        return repetitions;","lastModifiedDate":"2024-03-24"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    public void setRepetitions(int repetitions) {","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"        this.repetitions \u003d repetitions;","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves a string representation of a GymSet object.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing a GymSet, inclusive of the number of repetitions and weight done.","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"        return String.format(WorkoutConstant.GYM_SET_FORMAT, this.repetitions, this.weight);","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-14"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":21,"rouvinerh":26,"L5-Z":2}},{"path":"src/main/java/workouts/GymStation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-25"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-25"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":" * Represents a GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"public class GymStation {","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    protected String stationName;","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    protected ArrayList\u003cGymSet\u003e sets \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    protected int numberOfSets;","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     * Constructs a new GymStation object that contains the name, weight, number of repetitions and number of sets done","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"     * in one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"     * @param name         String name of the station","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"     * @param weightsList  Weight used.","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     * @param repetition   Number of reps done.","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     * @param numberOfSets Number of sets done.","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    public GymStation(String name, ArrayList\u003cInteger\u003e weightsList, int repetition, int numberOfSets) {","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        this.stationName \u003d name;","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        this.numberOfSets \u003d numberOfSets;","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"        processSets(weightsList, repetition);","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"     * Function which adds a GymSet object to GymStation.","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"     * @param weightsList     The weight done for the particular set.","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"     * @param repetition The number of repetitions done for the particular set.","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"    public void processSets(ArrayList\u003cInteger\u003e weightsList, int repetition) {","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"        for (int i \u003d 0; i \u003c numberOfSets; i++) {","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"            GymSet newSet \u003d new GymSet(weightsList.get(i), repetition);","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"            sets.add(newSet);","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the station name for the GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"     * @return String representing the name for the station.","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    public String getStationName() {","lastModifiedDate":"2024-03-14"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"        return stationName;","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves an ArrayList of gym sets for the GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     * @return The ArrayList of GymSet objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    public ArrayList\u003cGymSet\u003e getSets() {","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"        return sets;","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves a specific GymSet using an index.","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"     * @param index Index of the desired GymSet.","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"     * @return Desired GymSet object.","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"    public GymSet getSpecificSet(int index) {","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"        return sets.get(index);","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the number sets within the GymStation.","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"     * @return The number of sets done.","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"    public int getNumberOfSets() {","lastModifiedDate":"2024-03-14"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"        return numberOfSets;","lastModifiedDate":"2024-03-14"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"     * Checks parameters from user input for adding a new GymStation.","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"     * @param inputs List of strings representing user input.","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If there is not enough parameters specified.","lastModifiedDate":"2024-03-25"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput      If there is invalid input.","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"    public static void addGymStationInputValid(Gym gym, String inputs) throws","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"        String exerciseName \u003d inputs.split(UiConstant.SPLIT_BY_SLASH)[WorkoutConstant.STATION_NAME_INDEX].trim();","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"        String sets \u003d Parser.extractSubstringFromSpecificIndex(inputs, WorkoutConstant.SPLIT_BY_SETS);","lastModifiedDate":"2024-03-28"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"        String reps \u003d Parser.extractSubstringFromSpecificIndex(inputs, WorkoutConstant.SPLIT_BY_REPS);","lastModifiedDate":"2024-03-28"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"        String weights \u003d Parser.extractSubstringFromSpecificIndex(inputs, WorkoutConstant.SPLIT_BY_WEIGHTS);","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"        String validExerciseName \u003d checkIfExerciseNameIsValid(exerciseName);","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"        int setsInteger \u003d checkIfSetsAreValid(sets);","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"        int repsInteger \u003d checkIfRepsAreValid(reps);","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cInteger\u003e weightsArray \u003d checkIfWeightsAreValid(weights, Integer.parseInt(sets));","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"        assert Integer.parseInt(sets) \u003e 0 : ErrorConstant.NEGATIVE_VALUE_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"        assert Integer.parseInt(reps) \u003e 0 : ErrorConstant.NEGATIVE_VALUE_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        gym.addStation(exerciseName, weightsArray, setsInteger, repsInteger);","lastModifiedDate":"2024-03-26"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the string representation of a GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing a GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder returnString \u003d new StringBuilder(String.format(WorkoutConstant.GYM_STATION_FORMAT,","lastModifiedDate":"2024-03-26"},{"lineNumber":122,"author":{"gitId":"L5-Z"},"content":"                this.getStationName()) + String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT,","lastModifiedDate":"2024-03-21"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"                this.getNumberOfSets()));","lastModifiedDate":"2024-03-26"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c this.getNumberOfSets(); i++) {","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"            returnString.append(System.lineSeparator());","lastModifiedDate":"2024-03-26"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"            returnString.append(String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, i+1 ,","lastModifiedDate":"2024-03-26"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"                    this.getSets().get(i).toString()));","lastModifiedDate":"2024-03-26"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"        return returnString.toString();","lastModifiedDate":"2024-03-26"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"    private static String checkIfExerciseNameIsValid(String exerciseName) throws CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-26"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"        if (exerciseName.isBlank()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.GYM_EXERCISE_NAME_BLANK_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        return exerciseName;","lastModifiedDate":"2024-03-26"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"    private static int checkIfSetsAreValid(String sets) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-26"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"        if (sets.isBlank()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.GYM_SET_BLANK_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"        int setInteger \u003d 0;","lastModifiedDate":"2024-03-26"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"            setInteger \u003d Integer.parseInt(sets);","lastModifiedDate":"2024-03-26"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"            if (setInteger \u003c\u003d 0) {","lastModifiedDate":"2024-03-26"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.GYM_SET_DIGIT_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2024-03-26"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"        return setInteger;","lastModifiedDate":"2024-03-26"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"    private static int checkIfRepsAreValid(String reps) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-03-26"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-26"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"        if (reps.isBlank()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.GYM_REP_BLANK_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"        int repInteger \u003d 0;","lastModifiedDate":"2024-03-26"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"            repInteger \u003d Integer.parseInt(reps);","lastModifiedDate":"2024-03-26"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"            if (repInteger \u003c\u003d 0) {","lastModifiedDate":"2024-03-26"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.GYM_REP_POSITIVE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.GYM_REP_DIGIT_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"        return repInteger;","lastModifiedDate":"2024-03-26"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"    private static ArrayList\u003cInteger\u003e checkIfWeightsAreValid(String weights, int sets)","lastModifiedDate":"2024-03-26"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-03-26"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-26"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"        if(weights.isBlank()){","lastModifiedDate":"2024-03-26"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.GYM_WEIGHT_BLANK_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"        String [] weightsArray \u003d weights.split(UiConstant.SPLIT_BY_COMMAS);","lastModifiedDate":"2024-03-26"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        // if they give me too many values","lastModifiedDate":"2024-03-26"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"        if(weightsArray.length !\u003d sets){","lastModifiedDate":"2024-03-26"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.GYM_WEIGHTS_INCORRECT_NUMBER_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"        return getValidatedWeightsArray(weightsArray);","lastModifiedDate":"2024-03-26"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"    private static ArrayList\u003cInteger\u003e getValidatedWeightsArray(String[] weightsArray)","lastModifiedDate":"2024-03-26"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-26"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cInteger\u003e validatedWeightsArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-26"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-03-26"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"            for(String weight: weightsArray){","lastModifiedDate":"2024-03-26"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"                int weightInteger \u003d Integer.parseInt(weight);","lastModifiedDate":"2024-03-26"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"                if (weightInteger \u003c 0){","lastModifiedDate":"2024-03-26"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"                    throw new CustomExceptions.InvalidInput(ErrorConstant.GYM_WEIGHT_POSITIVE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-03-26"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"                validatedWeightsArray.add(weightInteger);","lastModifiedDate":"2024-03-26"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2024-03-26"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.GYM_WEIGHT_DIGIT_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"        return validatedWeightsArray;","lastModifiedDate":"2024-03-26"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-26"},{"lineNumber":210,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"JustinSoh":129,"rouvinerh":79,"L5-Z":3}},{"path":"src/main/java/workouts/Run.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":" * Represents a Run object.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"public class Run extends Workout {","lastModifiedDate":"2024-03-10"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    protected Integer[] times;","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    protected double distance;","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    protected LocalDate date \u003d null;","lastModifiedDate":"2024-03-12"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    protected String pace;","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    protected boolean isHourPresent;","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"     * Constructs a new Run object with the time and distance from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"     * @param stringTime     The time taken for the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDistance The distance of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    public Run(String stringTime, String stringDistance) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        times \u003d parseTime(stringTime);","lastModifiedDate":"2024-03-10"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        distance \u003d Double.parseDouble(stringDistance);","lastModifiedDate":"2024-03-10"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        pace \u003d calculatePace();","lastModifiedDate":"2024-03-10"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.addRun(this);","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"     * Overloaded constructor that takes in time, distance and the optional date parameter from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * @param stringTime     The time taken for the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDistance The distance of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDate     The date of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    public Run(String stringTime, String stringDistance, String stringDate) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        times \u003d parseTime(stringTime);","lastModifiedDate":"2024-03-10"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        distance \u003d Double.parseDouble(stringDistance);","lastModifiedDate":"2024-03-10"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        date \u003d Parser.parseDate(stringDate);","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"        pace \u003d calculatePace();","lastModifiedDate":"2024-03-10"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.addRun(this);","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"     * Parses a string containing run information, extracts the command, distance and end time before returning","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"     * an array of strings containing the information.","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"     * @param input A string containing the Run information in the format \"new /e:run /d:DISTANCE /t:TIME [/date:DATE]\".","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"     * @return An array of strings containing the extracted command, distance, time taken and date(if given).","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"    public static String[] getRun(String input) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"        String[] results \u003d new String[WorkoutConstant.NUMBER_OF_RUN_PARAMETERS];","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"        if (!input.contains(\"/e:\") || !input.contains(\"/d:\") || !input.contains(\"/t:\")) {","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.UNSPECIFIED_PARAMETER_ERROR);","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"        // Command","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"        results[WorkoutConstant.COMMAND_INDEX] \u003d Parser.extractSubstringFromSpecificIndex(input, \"/e:\");","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"        // Distance","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"        results[WorkoutConstant.DISTANCE_INDEX] \u003d Parser.extractSubstringFromSpecificIndex(input, \"/d:\");","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"        // Time","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        results[WorkoutConstant.TIME_INDEX] \u003d Parser.extractSubstringFromSpecificIndex(input, \"/t:\");","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"        // Date","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"        results[WorkoutConstant.DATE_INDEX] \u003d Parser.extractSubstringFromSpecificIndex(input, \"/date:\");","lastModifiedDate":"2024-03-28"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"        assert !results[WorkoutConstant.COMMAND_INDEX].isEmpty() : \"Command should not be empty\";","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"        assert !results[WorkoutConstant.DISTANCE_INDEX].isEmpty() : \"Distance should not be empty\";","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        assert results[WorkoutConstant.DISTANCE_INDEX].matches(\"\\\\d+(\\\\.\\\\d+)?\") :","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"                \"Distance should be a valid numeric \" + \"value (assuming KM)\";","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"        assert !results[WorkoutConstant.TIME_INDEX].isEmpty() : \"Time should not be empty\";","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"        return results;","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    public static Run addRun(String[] runDetails) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"        Run newRun;","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"        if (runDetails[WorkoutConstant.DATE_INDEX].isEmpty()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"            newRun \u003d new Run(","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.TIME_INDEX],","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.DISTANCE_INDEX]);","lastModifiedDate":"2024-03-27"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"            newRun \u003d new Run(","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.TIME_INDEX],","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.DISTANCE_INDEX],","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.DATE_INDEX]);","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"        return newRun;","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"     * Returns string format of time taken for run.","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"     * @return Formatted string of the time for the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"    public String getTimes() {","lastModifiedDate":"2024-03-14"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"        if (isHourPresent) {","lastModifiedDate":"2024-03-11"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"            return times[0] + \":\" + times[1] + \":\" + times[2];","lastModifiedDate":"2024-03-10"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"            return times[0] + \":\" + times[1];","lastModifiedDate":"2024-03-10"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-10"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves run distance.","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"     * @return Run distance.","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"    public double getDistance() {","lastModifiedDate":"2024-03-10"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"        return distance;","lastModifiedDate":"2024-03-10"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves run pace.","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     * @return Run pace.","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"    public String getPace() {","lastModifiedDate":"2024-03-10"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"        return pace;","lastModifiedDate":"2024-03-10"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"        return date;","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"    public void setDate(LocalDate date) {","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"     * Method parses the time format in either hh:mm:ss or mm:ss.","lastModifiedDate":"2024-03-11"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"     * Sets {@code isHourPresent} variable to true if hours have been specified.","lastModifiedDate":"2024-03-11"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"     * Otherwise, set to false.","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     * @param inputTime String variable representing time taken in either hh:mm:ss or mm:ss format","lastModifiedDate":"2024-03-11"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * @return A list of integers representing the hours (if present), minutes and seconds.","lastModifiedDate":"2024-03-11"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    public Integer[] parseTime(String inputTime) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        String[] stringTimeParts \u003d inputTime.split(\":\");","lastModifiedDate":"2024-03-10"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        int inputLength \u003d stringTimeParts.length;","lastModifiedDate":"2024-03-10"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        Integer[] integerTimes \u003d new Integer[inputLength];","lastModifiedDate":"2024-03-11"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"        if (inputLength \u003d\u003d UiConstant.MAX_RUNTIME_ARRAY_LENGTH) {","lastModifiedDate":"2024-03-21"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"            this.isHourPresent \u003d true;","lastModifiedDate":"2024-03-14"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[0] \u003d Integer.parseInt(stringTimeParts[0]);","lastModifiedDate":"2024-03-10"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[1] \u003d Integer.parseInt(stringTimeParts[1]);","lastModifiedDate":"2024-03-10"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[2] \u003d Integer.parseInt(stringTimeParts[2]);","lastModifiedDate":"2024-03-10"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"        } else if (inputLength \u003d\u003d UiConstant.MIN_RUNTIME_ARRAY_LENGTH) {","lastModifiedDate":"2024-03-21"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"            this.isHourPresent \u003d false;","lastModifiedDate":"2024-03-14"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[0] \u003d Integer.parseInt(stringTimeParts[0]);","lastModifiedDate":"2024-03-10"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[1] \u003d Integer.parseInt(stringTimeParts[1]);","lastModifiedDate":"2024-03-10"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":165,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.InvalidInput(WorkoutConstant.INVALID_RUN_TIME);","lastModifiedDate":"2024-03-21"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-10"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"        return integerTimes;","lastModifiedDate":"2024-03-10"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"     * Method checks if Run values is valid","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"     * Returns {@code true} if {@code runDistance} and {@code runTime} parameters are valid.","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"     * Valid only if {@code runDistance} is a positive double / not blank / and is digit.","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"     * {@code runTime} is not blank.","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"     * {@code runDate} is not blank.","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"     * Otherwise, throw {@code CustomExceptions.InvalidInput}  or {@code CustomExceptions.InsufficientInput}","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"     * @param runDistance String representing the distance of the run","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"     * @param runTime     String representing the time taken for the run","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"     * @param runDate     String representing the date of the run","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"     * @return {@code true} if all parameters are valid.","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"    public static boolean checkIfRunIsValid(String runDistance, String runTime, String runDate)","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.InvalidInput, CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"        // Check to make sure there is sufficient input","lastModifiedDate":"2024-03-26"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"        if (runDistance.isBlank()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.RUN_DISTANCE_EMPTY_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"        if (runTime.isBlank()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.RUN_TIME_EMPTY_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"        // Check to see if distance is a double","lastModifiedDate":"2024-03-26"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-25"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"            double value \u003d Double.parseDouble(runDistance);","lastModifiedDate":"2024-03-25"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"            if (value \u003c\u003d 0) {","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.RUN_DISTANCE_POSITIVE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-25"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.RUN_DISTANCE_DOUBLE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"        // Check to see if time is valid","lastModifiedDate":"2024-03-26"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"        checkIfTimeIsValid(runTime);","lastModifiedDate":"2024-03-26"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"        // Check to see if date is valid","lastModifiedDate":"2024-03-26"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"        if (!runDate.isBlank()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(runDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"        return true;","lastModifiedDate":"2024-03-26"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":215,"author":{"gitId":"JustinSoh"},"content":"    public static void checkIfTimeIsValid(String inputTime) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-03-26"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-26"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"        String[] stringTimeParts \u003d inputTime.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-26"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"        int inputLength \u003d stringTimeParts.length;","lastModifiedDate":"2024-03-26"},{"lineNumber":219,"author":{"gitId":"JustinSoh"},"content":"        int hours \u003d 0;","lastModifiedDate":"2024-03-26"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"        int minute;","lastModifiedDate":"2024-03-26"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"        int seconds;","lastModifiedDate":"2024-03-26"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"        // if it is neither in MM:SS nor HH:MM:SS format","lastModifiedDate":"2024-03-26"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"        if (inputLength !\u003d UiConstant.MAX_RUNTIME_ARRAY_LENGTH \u0026\u0026 inputLength !\u003d UiConstant.MIN_RUNTIME_ARRAY_LENGTH) {","lastModifiedDate":"2024-03-26"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.RUN_TIME_INVALID_FORMAT_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"        // Check if the value provided is an integer","lastModifiedDate":"2024-03-26"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"            if (inputLength \u003d\u003d UiConstant.MAX_RUNTIME_ARRAY_LENGTH) {","lastModifiedDate":"2024-03-26"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"                hours \u003d Integer.parseInt(stringTimeParts[0]);","lastModifiedDate":"2024-03-26"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"                minute \u003d Integer.parseInt(stringTimeParts[1]);","lastModifiedDate":"2024-03-26"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"                seconds \u003d Integer.parseInt(stringTimeParts[2]);","lastModifiedDate":"2024-03-26"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"            } else {","lastModifiedDate":"2024-03-26"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"                minute \u003d Integer.parseInt(stringTimeParts[0]);","lastModifiedDate":"2024-03-26"},{"lineNumber":236,"author":{"gitId":"JustinSoh"},"content":"                seconds \u003d Integer.parseInt(stringTimeParts[1]);","lastModifiedDate":"2024-03-26"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.RUN_TIME_INTEGER_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"        // Check if hour is within the range","lastModifiedDate":"2024-03-26"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"        if (hours \u003c 0 || hours \u003e 23) {","lastModifiedDate":"2024-03-26"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.RUN_TIME_HOURS_RANGE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"        // Check if minute is within the range","lastModifiedDate":"2024-03-26"},{"lineNumber":248,"author":{"gitId":"JustinSoh"},"content":"        if (minute \u003c 0 || minute \u003e 59) {","lastModifiedDate":"2024-03-26"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.RUN_TIME_MINUTES_RANGE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":250,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"        // Check if seconds is within the range","lastModifiedDate":"2024-03-26"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"        if (seconds \u003c 0 || seconds \u003e 59) {","lastModifiedDate":"2024-03-26"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.RUN_TIME_SECONDS_RANGE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"     * Method checks if hour has been specified, then returns total seconds.","lastModifiedDate":"2024-03-11"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"     * @return The total number of seconds in the run.","lastModifiedDate":"2024-03-11"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"    public int calculateTotalSeconds() {","lastModifiedDate":"2024-03-14"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"        int totalSeconds;","lastModifiedDate":"2024-03-10"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"        if (this.isHourPresent) {","lastModifiedDate":"2024-03-14"},{"lineNumber":269,"author":{"gitId":"JustinSoh"},"content":"            totalSeconds \u003d this.times[0] * UiConstant.NUM_SECONDS_IN_HOUR","lastModifiedDate":"2024-03-21"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"                    + this.times[1] * UiConstant.NUM_SECONDS_IN_MINUTE","lastModifiedDate":"2024-03-21"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"                    + this.times[2];","lastModifiedDate":"2024-03-20"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"            totalSeconds \u003d this.times[0] * 60 + this.times[1];","lastModifiedDate":"2024-03-14"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-10"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"        return totalSeconds;","lastModifiedDate":"2024-03-10"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"     * Method calculates the pace of the run, and formats it into M:SS/km.","lastModifiedDate":"2024-03-20"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"     * @return Formatted string the pace of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"    public String calculatePace() {","lastModifiedDate":"2024-03-14"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"        int totalSeconds \u003d calculateTotalSeconds();","lastModifiedDate":"2024-03-10"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"        double paceInDecimal \u003d ((double) totalSeconds / this.distance) / UiConstant.NUM_SECONDS_IN_MINUTE;","lastModifiedDate":"2024-03-21"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"        int minutes \u003d (int) paceInDecimal;","lastModifiedDate":"2024-03-10"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"        double remainingSeconds \u003d paceInDecimal - minutes;","lastModifiedDate":"2024-03-10"},{"lineNumber":289,"author":{"gitId":"JustinSoh"},"content":"        int seconds \u003d (int) Math.round(remainingSeconds * UiConstant.NUM_SECONDS_IN_MINUTE);","lastModifiedDate":"2024-03-21"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"        return String.format(\"%d:%02d/km\", minutes, seconds);","lastModifiedDate":"2024-03-10"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":292,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":293,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the string representation of a Run object.","lastModifiedDate":"2024-03-20"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing a Run object.","lastModifiedDate":"2024-03-20"},{"lineNumber":297,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":298,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":299,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-11"},{"lineNumber":300,"author":{"gitId":"JustinSoh"},"content":"        String printedDate;","lastModifiedDate":"2024-03-14"},{"lineNumber":301,"author":{"gitId":"JustinSoh"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":302,"author":{"gitId":"JustinSoh"},"content":"            printedDate \u003d date.toString();","lastModifiedDate":"2024-03-14"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":304,"author":{"gitId":"L5-Z"},"content":"            printedDate \u003d ErrorConstant.NO_DATE_SPECIFIED_ERROR;","lastModifiedDate":"2024-03-21"},{"lineNumber":305,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":306,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.RUN_DATA_FORMAT, WorkoutConstant.RUN,","lastModifiedDate":"2024-03-27"},{"lineNumber":307,"author":{"gitId":"L5-Z"},"content":"                getTimes(), getDistance(), getPace(), printedDate);","lastModifiedDate":"2024-03-21"},{"lineNumber":308,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":309,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":310,"author":{"gitId":"JustinSoh"},"content":"    public String getFormatForAllHistory() {","lastModifiedDate":"2024-03-27"},{"lineNumber":311,"author":{"gitId":"JustinSoh"},"content":"        String printedDate;","lastModifiedDate":"2024-03-27"},{"lineNumber":312,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":313,"author":{"gitId":"JustinSoh"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":314,"author":{"gitId":"JustinSoh"},"content":"            printedDate \u003d date.toString();","lastModifiedDate":"2024-03-27"},{"lineNumber":315,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":316,"author":{"gitId":"JustinSoh"},"content":"            printedDate \u003d ErrorConstant.NO_DATE_SPECIFIED_ERROR;","lastModifiedDate":"2024-03-27"},{"lineNumber":317,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":318,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":319,"author":{"gitId":"JustinSoh"},"content":"                WorkoutConstant.RUN,","lastModifiedDate":"2024-03-27"},{"lineNumber":320,"author":{"gitId":"JustinSoh"},"content":"                printedDate,","lastModifiedDate":"2024-03-27"},{"lineNumber":321,"author":{"gitId":"JustinSoh"},"content":"                getDistance(),","lastModifiedDate":"2024-03-27"},{"lineNumber":322,"author":{"gitId":"JustinSoh"},"content":"                getTimes(),","lastModifiedDate":"2024-03-27"},{"lineNumber":323,"author":{"gitId":"JustinSoh"},"content":"                getPace(),","lastModifiedDate":"2024-03-27"},{"lineNumber":324,"author":{"gitId":"JustinSoh"},"content":"                \"-\", // Placeholder for gym sets (NA)","lastModifiedDate":"2024-03-27"},{"lineNumber":325,"author":{"gitId":"JustinSoh"},"content":"                \"-\", // Placeholder for gym reps (NA)","lastModifiedDate":"2024-03-27"},{"lineNumber":326,"author":{"gitId":"JustinSoh"},"content":"                \"-\", // Placeholder for gym weight (NA)","lastModifiedDate":"2024-03-27"},{"lineNumber":327,"author":{"gitId":"JustinSoh"},"content":"                \"-\"  // Placeholder for gym station (NA)","lastModifiedDate":"2024-03-27"},{"lineNumber":328,"author":{"gitId":"JustinSoh"},"content":"        );","lastModifiedDate":"2024-03-27"},{"lineNumber":329,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":330,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":331,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-10"}],"authorContributionMap":{"JustinSoh":170,"rouvinerh":135,"L5-Z":27}},{"path":"src/main/java/workouts/Workout.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-25"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":" * Represents a Workout object for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"public abstract class Workout {","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    protected LocalDate date \u003d null;","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"     * Overloaded constructor that uses the optional date parameter from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDate String representing the date of the workout.","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    public Workout(String stringDate) {","lastModifiedDate":"2024-03-10"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"        this.date \u003d Parser.parseDate(stringDate);","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"     * Constructor that builds a new Workout object.","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    public Workout() {","lastModifiedDate":"2024-03-10"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     * Returns the date of the workout.","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"     * @return LocalDate variable representing the date of the workout.","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"        return date;","lastModifiedDate":"2024-03-10"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"     * Method checks if Exercise Type is valid (e.g. run or gym).","lastModifiedDate":"2024-03-25"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"     * Returns {@code true} if all parameters are valid.","lastModifiedDate":"2024-03-25"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"     * Otherwise, throw {@code CustomExceptions.InvalidInput}  or {@code CustomExceptions.InsufficientInput}","lastModifiedDate":"2024-03-25"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"     * @param exerciseType String representing the type of exercise which is either {@code run} or {@code gym}","lastModifiedDate":"2024-03-25"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"     * @return {@code true} if all parameters are valid.","lastModifiedDate":"2024-03-25"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"    public static boolean checkIfExerciseTypeIsValid(String exerciseType) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-25"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"        if (exerciseType.isBlank()){","lastModifiedDate":"2024-03-25"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(WorkoutConstant.BLANK_INPUT_FOR_EXERCISE);","lastModifiedDate":"2024-03-25"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"        exerciseType \u003d exerciseType.toLowerCase();","lastModifiedDate":"2024-03-25"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"        if (!exerciseType.equals(WorkoutConstant.RUN) \u0026\u0026 ! exerciseType.equals(WorkoutConstant.GYM)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(WorkoutConstant.INVALID_INPUT_FOR_EXERCISE);","lastModifiedDate":"2024-03-25"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"        return true;","lastModifiedDate":"2024-03-25"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the string representation of a Workout object.","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing a Workout object.","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"    public String toString(){","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"        return getDate().toString();","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-10"}],"authorContributionMap":{"JustinSoh":35,"rouvinerh":38}},{"path":"src/main/java/workouts/WorkoutList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-10"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":" * Represents the WorkoutList object.","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"public class WorkoutList extends ArrayList\u003cWorkout\u003e {","lastModifiedDate":"2024-03-10"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    private static final ArrayList\u003cWorkout\u003e workouts \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cRun\u003e runs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cGym\u003e gyms \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     * Adds a workout to the list of workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"     * @param workout Workout object to be added.","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    private static void addWorkout(Workout workout) {","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"        workouts.add(workout);","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     * Adds a run to the list of runs and workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     * @param run Run object to be added.","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    public static void addRun(Run run) {","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"        runs.add(run);","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"        addWorkout(run);","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * Adds a gym to the list of gyms and workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     * @param gym Gym object to be added.","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    public static void addGym(Gym gym) {","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        gyms.add(gym);","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        addWorkout(gym);","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"     * Returns a list of workouts based on the filter.","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"     * @param filter can be \"all\", \"run\" or \"gym\".","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"     *               \"all\" returns all workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"     *               \"run\" returns only runs.","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"     *               \"gym\" returns only gym workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"     * @return ArrayList of workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"    public static ArrayList\u003c? extends Workout\u003e getWorkouts(String filter)","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.OutOfBounds,","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"        filter \u003d filter.toLowerCase();","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"        if(!filter.equals(WorkoutConstant.ALL) \u0026\u0026 !filter.equals(WorkoutConstant.RUN)","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"                \u0026\u0026 !filter.equals(WorkoutConstant.GYM)) {","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_HISTORY_FILTER_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"        if(filter.equals(WorkoutConstant.RUN) \u0026\u0026 runs.isEmpty()){","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_RUN_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"        if(filter.equals(WorkoutConstant.ALL) \u0026\u0026 workouts.isEmpty()){","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_WORKOUTS_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"        if(filter.equals(WorkoutConstant.GYM) \u0026\u0026 gyms.isEmpty()){","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_GYM_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"        if(filter.equals(WorkoutConstant.RUN)){","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"            return runs;","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"        } else if (filter.equals(WorkoutConstant.GYM)) {","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"            return gyms;","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"            return workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"     * Returns latest run.","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"     * @return The latest Run object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If no runs are found in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"    public static Run getLatestRun() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-14"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"        if (runs.isEmpty()) {","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_RUN_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"        return runs.get(runs.size() - 1);","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"    public static Gym getLatestGym() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"        if (gyms.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_GYM_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"        return gyms.get(gyms.size() - 1);","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"     * Returns the number of runs in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"     * @return The number of runs.","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"    public static int getRunSize() {","lastModifiedDate":"2024-03-14"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        return runs.size();","lastModifiedDate":"2024-03-12"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"     * Returns the number of gyms in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"     * @return The number of gyms.","lastModifiedDate":"2024-03-20"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"    public static int getGymSize() {","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"        return gyms.size();","lastModifiedDate":"2024-03-20"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     * Deletes Gym object based on index.","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"     * @param index Index of the Gym object to be deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"    public static void deleteGym(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"        assert !gyms.isEmpty() : \"Gym list is empty.\";","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"        if (index \u003c 0 || index \u003e\u003d gyms.size()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.OutOfBounds(\"Invalid index to delete!\");","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        Gym deletedGym \u003d gyms.get(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Removed Gym entry with \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"                deletedGym.stations.size() +","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"                \" stations.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        workouts.remove(deletedGym);","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"        gyms.remove(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"        LogFile.writeLog(\"Removed gym with index: \" + index, false);","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"     * Deletes Run object based on index.","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"     * @param index Index of the Run object to be deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"    public static void deleteRun(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"        assert !runs.isEmpty() : \"Run list is empty.\";","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"        if (index \u003c 0 || index \u003e\u003d runs.size()) {","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.OutOfBounds(\"Invalid index to delete!\");","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        Run deletedRun \u003d runs.get(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Removed Run entry with \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"                deletedRun.distance +","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"                \"km at \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"                deletedRun.getPace() +","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"                \".\");","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"        workouts.remove(deletedRun);","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"        runs.remove(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"        LogFile.writeLog(\"Removed run with index: \" + index, false);","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"     * Clears the workouts, runs and gyms ArrayLists.","lastModifiedDate":"2024-03-20"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"    public static void clearWorkoutsRunGym() {","lastModifiedDate":"2024-03-24"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"        workouts.clear();","lastModifiedDate":"2024-03-11"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"        runs.clear();","lastModifiedDate":"2024-03-11"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"        gyms.clear();","lastModifiedDate":"2024-03-20"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-10"}],"authorContributionMap":{"JustinSoh":65,"rouvinerh":98,"L5-Z":8}},{"path":"src/test/java/health/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"public class AppointmentTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    void setUpStreams() {","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"    @AfterEach","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"    void showAppointmentList_printCorrectAppointmentList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"        Appointment firstAppointment \u003d new Appointment(\"25-03-2024\", \"16:30\", \"Physiotherapy session\");","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"        Appointment secondAppointment \u003d new Appointment(\"22-03-2024\", \"16:00\", \"Wound dressing change\");","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"        Appointment thirdAppointment \u003d new Appointment(\"22-03-2024\", \"11:00\", \"Doctor consultation\");","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(firstAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(secondAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(thirdAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"1. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.description","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"                + \"2. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"                + secondAppointment.description","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"                + \"3. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"                + firstAppointment.description","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"        HealthList.showAppointmentList();","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"    void deleteAppointment_deleteCorrectAppointment_printCorrectList() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"        Appointment firstAppointment \u003d new Appointment(\"25-03-2024\", \"16:30\", \"Physiotherapy session\");","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"        Appointment secondAppointment \u003d new Appointment(\"22-03-2024\", \"16:00\", \"Wound dressing change\");","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"        Appointment thirdAppointment \u003d new Appointment(\"22-03-2024\", \"11:00\", \"Doctor consultation\");","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(firstAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(secondAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(thirdAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Removed appointment on \"","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"                + secondAppointment.description","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"                + \"1. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.description","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"                + \"2. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"                + firstAppointment.description","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"        HealthList.deleteAppointment(2);","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"rouvinerh":1,"syj02":102}},{"path":"src/test/java/health/BmiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-15"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"class BmiTest {","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-25"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    void setUpStreams() {","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-25"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-25"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of toString in Bmi class.","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"    void toString_heightWeight_printsCorrectBMIAndCategory() {","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"        Bmi bmi \u003d new Bmi(\"1.75\", \"70.0\", \"19-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"2024-03-19\"","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 22.86\"","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"                + \"Great! You\u0027re within normal range.\"","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"        System.out.println(bmi);","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within underweight range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"    void printBMICategory_underweight_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"You\u0027re underweight.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(17.5));","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within normal range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"    void printBMICategory_normal_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Great! You\u0027re within normal range.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(22.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within overweight range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"    void printBMICategory_overweight_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"You\u0027re overweight.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(27.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within obese range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"    void printBMICategory_obese_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"You\u0027re obese.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(32.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":86,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within severely obese range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"    void printBMICategory_severelyObese_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"You\u0027re severely obese.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(40.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":97,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of showCurrentBmi.","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":101,"author":{"gitId":"j013n3"},"content":"    void showCurrentBmi_bmiObject_printsCorrectCurrentBmi() {","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"j013n3"},"content":"        Bmi bmi \u003d new Bmi(\"1.75\", \"70.00\", \"19-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"        HealthList.addBmi(bmi);","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"2024-03-19\"","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 22.86\"","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"                + \"Great! You\u0027re within normal range.\"","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"        HealthList.showCurrentBmi();","lastModifiedDate":"2024-03-18"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"     * Test the behaviour of printing Bmi history.","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"    void showBmiHistory_twoBmiObjects_printsCorrectBmiHistory() {","lastModifiedDate":"2024-03-28"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"80.0\", \"20-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"        Bmi secondBmi \u003d new Bmi(\"1.80\", \"74.0\", \"21-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":123,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":124,"author":{"gitId":"syj02"},"content":"        HealthList.addBmi(firstBmi);","lastModifiedDate":"2024-03-19"},{"lineNumber":125,"author":{"gitId":"syj02"},"content":"        HealthList.addBmi(secondBmi);","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"2024-03-20\"","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 26.12\"","lastModifiedDate":"2024-03-19"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"                + \"You\u0027re overweight.\"","lastModifiedDate":"2024-03-19"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"                + \"2024-03-21\"","lastModifiedDate":"2024-03-19"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 22.84\"","lastModifiedDate":"2024-03-19"},{"lineNumber":136,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":137,"author":{"gitId":"syj02"},"content":"                + \"Great! You\u0027re within normal range.\"","lastModifiedDate":"2024-03-19"},{"lineNumber":138,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":139,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":140,"author":{"gitId":"syj02"},"content":"        HealthList.showBmiHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":141,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":142,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of bmi with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one bmi entry left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"    void deleteBmi_properList_listOfSizeOne() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"80.0\", \"20-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        Bmi secondBmi \u003d new Bmi(\"1.80\", \"74.0\", \"21-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(firstBmi);","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(secondBmi);","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"        HealthList.deleteBmi(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, HealthList.getBmisSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of bmi with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"    void deleteBmi_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deleteBmi(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of bmi with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"    void deleteBmi_properListInvalidIndex_throwOutOfBoundsForBmi() {","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"80.0\", \"20-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(firstBmi);","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deleteBmi(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"j013n3":74,"rouvinerh":45,"syj02":65}},{"path":"src/test/java/health/PeriodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-25"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"import utility.HealthConstant;","lastModifiedDate":"2024-03-25"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-25"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"class PeriodTest {","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-25"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-25"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    void setUpStreams() {","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"    @AfterEach","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-25"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-25"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of toString in Period class.","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"    void calculatePeriodLength_printsCorrectPeriod() {","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        Period period \u003d new Period(\"09-03-2022\", \"16-03-2022\");","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"                + period.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"                + period.endPeriodDate","lastModifiedDate":"2024-03-25"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"                + period.periodLength","lastModifiedDate":"2024-03-25"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"                + \" days\"","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"        System.out.println(period);","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the showLatestPeriod method and whether it prints","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     * the last Period object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"    void showLatestPeriod_twoPeriodInputs_printCorrectPeriod() {","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"09-02-2023\", \"16-02-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        Period secondPeriod \u003d new Period(\"09-03-2023\", \"16-03-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.endPeriodDate","lastModifiedDate":"2024-03-25"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.periodLength","lastModifiedDate":"2024-03-25"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"                + \" days\"","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"        HealthList.showLatestPeriod();","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the showPeriodHistory method and whether it prints","lastModifiedDate":"2024-03-28"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"     * the period history correctly.","lastModifiedDate":"2024-03-28"},{"lineNumber":83,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"    void showPeriodHistory_twoInputs_printCorrectPeriodHistory() {","lastModifiedDate":"2024-03-25"},{"lineNumber":86,"author":{"gitId":"j013n3"},"content":"        Period firstPeriod \u003d new Period(\"10-04-2023\", \"16-04-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"        Period secondPeriod \u003d new Period(\"09-05-2023\", \"16-05-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"                + firstPeriod.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":93,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"j013n3"},"content":"                + firstPeriod.endPeriodDate","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":97,"author":{"gitId":"j013n3"},"content":"                + firstPeriod.periodLength","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-25"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-25"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"                + \"Cycle Length: \"","lastModifiedDate":"2024-03-25"},{"lineNumber":101,"author":{"gitId":"j013n3"},"content":"                + firstPeriod.cycleLength","lastModifiedDate":"2024-03-25"},{"lineNumber":102,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"                + \"Period Start: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.endPeriodDate","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":110,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.periodLength","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-19"},{"lineNumber":112,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"        HealthList.showPeriodHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of periods with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one periods entry left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"    void deletePeriod_properList_listOfSizeOne() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"10-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"        Period secondPeriod \u003d new Period(\"09-05-2024\", \"16-05-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(secondPeriod);;","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"        HealthList.deletePeriod(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, HealthList.getPeriodsSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of period with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"    void deletePeriod_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-28"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deletePeriod(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of period with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"j013n3"},"content":"    void deletePeriod_properListInvalidIndex_throwOutOfBoundsForBmi() {","lastModifiedDate":"2024-03-28"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"10-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deletePeriod(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the predictNextPeriodStartDate function and whether it prints","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"     * correct predicted start date.","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"    void predictNextPeriodStartDate_sufficientInputs_printCorrectPredictedDate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"        Period firstPeriod \u003d new Period(\"09-01-2024\", \"16-01-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"j013n3"},"content":"        Period secondPeriod \u003d new Period(\"10-02-2024\", \"16-02-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"j013n3"},"content":"        Period thirdPeriod \u003d new Period(\"09-03-2024\", \"14-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"j013n3"},"content":"        Period fourthPeriod \u003d new Period(\"09-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(thirdPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(fourthPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"        long expectedCycleLength \u003d (32 + 28 + 31) / HealthConstant.LATEST_THREE_CYCLE_LENGTHS;","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"        LocalDate expected \u003d fourthPeriod.getStartDate().plusDays(expectedCycleLength);","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"        LocalDate result \u003d HealthList.predictNextPeriodStartDate();","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the printNextCyclePrediction function and whether it prints","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"     * the predicted date with period is late message.","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"j013n3"},"content":"    void printNextCyclePrediction_afterToday_printPeriodIsLate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"j013n3"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"j013n3"},"content":"        LocalDate predictedDate \u003d today.minusDays(5);","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"j013n3"},"content":"        String expected \u003d HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"j013n3"},"content":"                + predictedDate","lastModifiedDate":"2024-03-25"},{"lineNumber":190,"author":{"gitId":"j013n3"},"content":"                + HealthConstant.PERIOD_IS_LATE","lastModifiedDate":"2024-03-25"},{"lineNumber":191,"author":{"gitId":"j013n3"},"content":"                + \"5\"","lastModifiedDate":"2024-03-25"},{"lineNumber":192,"author":{"gitId":"j013n3"},"content":"                + HealthConstant.DAYS_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":193,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-25"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":195,"author":{"gitId":"j013n3"},"content":"        Period.printNextCyclePrediction(predictedDate);","lastModifiedDate":"2024-03-25"},{"lineNumber":196,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-25"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the printNextCyclePrediction function and whether it prints","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"     * the predicted date and the number of days to predicted date.","lastModifiedDate":"2024-03-25"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"    void printNextCyclePrediction_beforeToday_printNumberOfDaysToPredictedDate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"j013n3"},"content":"        LocalDate predictedDate \u003d today.plusDays(10);","lastModifiedDate":"2024-03-25"},{"lineNumber":207,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":208,"author":{"gitId":"j013n3"},"content":"        String expected \u003d HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":209,"author":{"gitId":"j013n3"},"content":"                + predictedDate","lastModifiedDate":"2024-03-25"},{"lineNumber":210,"author":{"gitId":"j013n3"},"content":"                + \", in 10\"","lastModifiedDate":"2024-03-25"},{"lineNumber":211,"author":{"gitId":"j013n3"},"content":"                + HealthConstant.DAYS_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":212,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-25"},{"lineNumber":213,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":214,"author":{"gitId":"j013n3"},"content":"        Period.printNextCyclePrediction(predictedDate);","lastModifiedDate":"2024-03-25"},{"lineNumber":215,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-25"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":217,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":218,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":219,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the printLatestThreeCycles method and whether it prints","lastModifiedDate":"2024-03-28"},{"lineNumber":220,"author":{"gitId":"j013n3"},"content":"     * the latest three period objects only.","lastModifiedDate":"2024-03-28"},{"lineNumber":221,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":222,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":223,"author":{"gitId":"j013n3"},"content":"    void printLatestThreeCycles_fourInputs_printsThreePeriodObjectsOnly() {","lastModifiedDate":"2024-03-28"},{"lineNumber":224,"author":{"gitId":"j013n3"},"content":"        Period firstPeriod \u003d new Period(\"09-01-2024\", \"16-01-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":225,"author":{"gitId":"j013n3"},"content":"        Period secondPeriod \u003d new Period(\"10-02-2024\", \"16-02-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":226,"author":{"gitId":"j013n3"},"content":"        Period thirdPeriod \u003d new Period(\"09-03-2024\", \"14-03-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":227,"author":{"gitId":"j013n3"},"content":"        Period fourthPeriod \u003d new Period(\"09-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":228,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":229,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-28"},{"lineNumber":230,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-28"},{"lineNumber":231,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(thirdPeriod);","lastModifiedDate":"2024-03-28"},{"lineNumber":232,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(fourthPeriod);","lastModifiedDate":"2024-03-28"},{"lineNumber":233,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":234,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":235,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.getStartDate()","lastModifiedDate":"2024-03-28"},{"lineNumber":236,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":237,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.endPeriodDate","lastModifiedDate":"2024-03-28"},{"lineNumber":238,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":239,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":240,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.periodLength","lastModifiedDate":"2024-03-28"},{"lineNumber":241,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":242,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":243,"author":{"gitId":"j013n3"},"content":"                + \"Cycle Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":244,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.cycleLength","lastModifiedDate":"2024-03-28"},{"lineNumber":245,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":246,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":247,"author":{"gitId":"j013n3"},"content":"                + \"Period Start: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":248,"author":{"gitId":"j013n3"},"content":"                + thirdPeriod.getStartDate()","lastModifiedDate":"2024-03-28"},{"lineNumber":249,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":250,"author":{"gitId":"j013n3"},"content":"                + thirdPeriod.endPeriodDate","lastModifiedDate":"2024-03-28"},{"lineNumber":251,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":252,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":253,"author":{"gitId":"j013n3"},"content":"                + thirdPeriod.periodLength","lastModifiedDate":"2024-03-28"},{"lineNumber":254,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":255,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":256,"author":{"gitId":"j013n3"},"content":"                + \"Cycle Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":257,"author":{"gitId":"j013n3"},"content":"                + thirdPeriod.cycleLength","lastModifiedDate":"2024-03-28"},{"lineNumber":258,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":259,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":260,"author":{"gitId":"j013n3"},"content":"                + \"Period Start: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":261,"author":{"gitId":"j013n3"},"content":"                + fourthPeriod.getStartDate()","lastModifiedDate":"2024-03-28"},{"lineNumber":262,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":263,"author":{"gitId":"j013n3"},"content":"                + fourthPeriod.endPeriodDate","lastModifiedDate":"2024-03-28"},{"lineNumber":264,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":265,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":266,"author":{"gitId":"j013n3"},"content":"                + fourthPeriod.periodLength","lastModifiedDate":"2024-03-28"},{"lineNumber":267,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":268,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-28"},{"lineNumber":269,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":270,"author":{"gitId":"j013n3"},"content":"        HealthList.printLatestThreeCycles();","lastModifiedDate":"2024-03-28"},{"lineNumber":271,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":272,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":273,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"j013n3":166,"rouvinerh":54,"syj02":53}},{"path":"src/test/java/seedu/pulsepilot/PulsePilotTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package seedu.pulsepilot;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"class PulsePilotTest {","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"rouvinerh":2,"-":10}},{"path":"src/test/java/storage/LogFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package storage;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"class LogFileTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"    static LogFile logTest \u003d LogFile.getInstance();","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the getInstance function in the LogFile class, and whether","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"     * it returns a non-null instance.","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    void initializeLogFile_noInput_logFileHandlerNotNull() {","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"        assertNotNull(LogFile.logFileHandler);","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"rouvinerh":17,"L5-Z":1}},{"path":"src/test/java/storage/StorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"raajamani"},"content":"package storage;","lastModifiedDate":"2024-03-15"},{"lineNumber":2,"author":{"gitId":"raajamani"},"content":"public class StorageTest {","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"raajamani"},"content":"}","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"raajamani":5}},{"path":"src/test/java/ui/HandlerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"import workouts.WorkoutList;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"import java.io.InputStream;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-22"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"class HandlerTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"    private final ByteArrayInputStream inContent \u003d new ByteArrayInputStream(\"\".getBytes());","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"    private final InputStream originalIn \u003d System.in;","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"    private final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    public void setUpStreams() {","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"        System.setIn(inContent);","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    @AfterEach","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"    public void restoreStreams() {","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"        System.setIn(originalIn);","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        Handler.destroyScanner();","lastModifiedDate":"2024-03-22"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"        if (Handler.in \u003d\u003d null){","lastModifiedDate":"2024-03-25"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"            return;","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"        assert isScannerClosed(Handler.in) : \"Scanner is not closed\";","lastModifiedDate":"2024-03-22"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-22"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"     * Checks whether the Scanner has been closed after each JUnit test to prevent overwriting of test input for each","lastModifiedDate":"2024-03-22"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     * test.","lastModifiedDate":"2024-03-22"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-22"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     * @param in Scanner object from Handler.","lastModifiedDate":"2024-03-22"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     * @return True if the scanner is closed. Otherwise, return false.","lastModifiedDate":"2024-03-22"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-22"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"    public static boolean isScannerClosed(Scanner in) {","lastModifiedDate":"2024-03-22"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"            in.hasNext();","lastModifiedDate":"2024-03-22"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"            return false;","lastModifiedDate":"2024-03-22"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"        } catch (IllegalStateException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"            return true;","lastModifiedDate":"2024-03-22"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the EXIT command.","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"    void processInput_exitCommand_terminatesProgram() {","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"EXIT\";","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Initiating PulsePilot landing sequence...\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the NEW command to add a Run","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"     * object.","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"    void processInput_workoutCommand_addRunExercise() {","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"WORKOUT /e:run /d:10.3 /t:00:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(output);","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Successfully added a new run session\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the HEALTH command to add","lastModifiedDate":"2024-03-20"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"     * a BMI object.","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"    void processInput_healthCommand_addBMIHealthData() {","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"HEALTH /h:bmi /height:1.70 /weight:65.00 /date:15-03-2024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(output.contains(\"Added: bmi | 1.70 | 65.00 | 2024-03-15\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":110,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the HISTORY command to print","lastModifiedDate":"2024-03-20"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"     * all run objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"L5-Z"},"content":"    void processInput_historyCommand_printsHistoryRun() {","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"L5-Z"},"content":"        String inputRun \u003d \"WORKOUT /e:run /d:10.3 /t:00:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(inputRun.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"        Handler.destroyScanner();","lastModifiedDate":"2024-03-25"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"        String inputHistory \u003d \"HISTORY /item:run\";","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(inputHistory.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":128,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":129,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(output.contains(\"Your run history\"));","lastModifiedDate":"2024-03-26"},{"lineNumber":131,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":132,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the LATEST command to print","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"     * the latest run object.","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":137,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":138,"author":{"gitId":"L5-Z"},"content":"    void processInput_latestCommand_printsLatestRun() {","lastModifiedDate":"2024-03-20"},{"lineNumber":139,"author":{"gitId":"L5-Z"},"content":"        String inputRun \u003d \"WORKOUT /e:run /d:10.3 /t:00:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(inputRun.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"        Handler.destroyScanner();","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"        String inputLatest \u003d \"LATEST /item:run\";","lastModifiedDate":"2024-03-26"},{"lineNumber":146,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(inputLatest.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":148,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Your latest run:\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":153,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the HELP command to print","lastModifiedDate":"2024-03-20"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"     * the help message.","lastModifiedDate":"2024-03-20"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":158,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":159,"author":{"gitId":"L5-Z"},"content":"    void processInput_helpCommand_printsHelp() {","lastModifiedDate":"2024-03-20"},{"lineNumber":160,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"HELP\";","lastModifiedDate":"2024-03-20"},{"lineNumber":161,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":163,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":165,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":166,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Commands List\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":167,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":168,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":169,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":170,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to an invalid command, which prints","lastModifiedDate":"2024-03-20"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"     * an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":175,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":176,"author":{"gitId":"L5-Z"},"content":"    void processInput_invalidCommand_printsInvalidCommandException() {","lastModifiedDate":"2024-03-20"},{"lineNumber":177,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"INVALID\";","lastModifiedDate":"2024-03-20"},{"lineNumber":178,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":180,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":181,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":182,"author":{"gitId":"L5-Z"},"content":"        String expected \u003d \"Exception Caught!\" +","lastModifiedDate":"2024-03-26"},{"lineNumber":183,"author":{"gitId":"L5-Z"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":184,"author":{"gitId":"L5-Z"},"content":"                ErrorConstant.INVALID_COMMAND_ERROR +","lastModifiedDate":"2024-03-26"},{"lineNumber":185,"author":{"gitId":"L5-Z"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":186,"author":{"gitId":"L5-Z"},"content":"        assertEquals(expected, errContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":187,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":188,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":189,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":190,"author":{"gitId":"L5-Z"},"content":"     * Tests the processInput function\u0027s behaviour when the HEALTH command is given with invalid parameters.","lastModifiedDate":"2024-03-26"},{"lineNumber":191,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":192,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":193,"author":{"gitId":"L5-Z"},"content":"    void processInput_healthCommand_insufficientParameters() {","lastModifiedDate":"2024-03-26"},{"lineNumber":194,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"HEALTH /h:bmi /height:1.70\";","lastModifiedDate":"2024-03-26"},{"lineNumber":195,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-26"},{"lineNumber":196,"author":{"gitId":"L5-Z"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-26"},{"lineNumber":197,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-26"},{"lineNumber":198,"author":{"gitId":"syj02"},"content":"        assertTrue(errContent.toString().contains(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR));","lastModifiedDate":"2024-03-26"},{"lineNumber":199,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":200,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"     * Test the behavior of the checkTypeOfExercise method when the user input is valid.","lastModifiedDate":"2024-03-18"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"     * Expected behavior is to return {@code Constant.RUN} or {@code Constant.GYM}","lastModifiedDate":"2024-03-18"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"     * Does not expect EXCEPTION to be thrown.","lastModifiedDate":"2024-03-18"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"    void checkTypeOfExercise_correctUserInput_expectRunOrGym() {","lastModifiedDate":"2024-03-18"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":209,"author":{"gitId":"L5-Z"},"content":"            String input1 \u003d \"workout /e:run /d:10.3 /t:00:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":210,"author":{"gitId":"L5-Z"},"content":"            String expected1 \u003d WorkoutConstant.RUN;","lastModifiedDate":"2024-03-21"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"            String result1 \u003d Handler.checkTypeOfExercise(input1);","lastModifiedDate":"2024-03-18"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(result1, expected1);","lastModifiedDate":"2024-03-18"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":214,"author":{"gitId":"L5-Z"},"content":"            String input2 \u003d \"workout /e:gym /n:4\";","lastModifiedDate":"2024-03-25"},{"lineNumber":215,"author":{"gitId":"L5-Z"},"content":"            String expected2 \u003d WorkoutConstant.GYM;","lastModifiedDate":"2024-03-21"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"            String result2 \u003d Handler.checkTypeOfExercise(input2);","lastModifiedDate":"2024-03-18"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(result2, expected2);","lastModifiedDate":"2024-03-18"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":219,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":220,"author":{"gitId":"JustinSoh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-03-25"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"            fail(ErrorConstant.UNSPECIFIED_ERROR);","lastModifiedDate":"2024-03-25"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":223,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"     * Test the behavior of the checkTypeOfExercise method when the user input has invalid parameters.","lastModifiedDate":"2024-03-18"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"     * Expected behavior is to raise {@code InvalidInput} exception.","lastModifiedDate":"2024-03-18"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"     * Does not test for insufficient parameters.","lastModifiedDate":"2024-03-18"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"     * Refer to {@code checkTypeOfExercise_insufficientUserInput_throwInsufficientInput()} for that.","lastModifiedDate":"2024-03-18"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":231,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":232,"author":{"gitId":"JustinSoh"},"content":"    void checkTypeOfExercise_invalidUserInput_throwInvalidInput() {","lastModifiedDate":"2024-03-18"},{"lineNumber":233,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":234,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"        // with invalid exercise type","lastModifiedDate":"2024-03-18"},{"lineNumber":236,"author":{"gitId":"L5-Z"},"content":"        String input2 \u003d \"workout /e:wrong /d:10.3 /t:00:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-26"},{"lineNumber":237,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Handler.checkTypeOfExercise(input2));","lastModifiedDate":"2024-03-21"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"        // with invalid exercise type","lastModifiedDate":"2024-03-18"},{"lineNumber":240,"author":{"gitId":"L5-Z"},"content":"        String input3 \u003d \"workout /e:gymm /d:10.3 /t:00:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-26"},{"lineNumber":241,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Handler.checkTypeOfExercise(input3));","lastModifiedDate":"2024-03-21"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"     * Test the behavior of the checkTypeOfExercise method when the user input has insufficient parameters.","lastModifiedDate":"2024-03-18"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"     * Expected behavior is to raise {@code InsufficientInput} exception.","lastModifiedDate":"2024-03-18"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"     * Does not test for invalid values.","lastModifiedDate":"2024-03-18"},{"lineNumber":248,"author":{"gitId":"JustinSoh"},"content":"     * Refer to {@code checkTypeOfExercise_invalidUserInput_throwInvalidInput()} for that.","lastModifiedDate":"2024-03-18"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":250,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"    void checkTypeOfExercise_insufficientUserInput_throwInsufficientInput() {","lastModifiedDate":"2024-03-18"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"        // with invalid exercise type","lastModifiedDate":"2024-03-26"},{"lineNumber":254,"author":{"gitId":"L5-Z"},"content":"        String input1 \u003d \"workout /e\";","lastModifiedDate":"2024-03-26"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Handler.checkTypeOfExercise(input1));","lastModifiedDate":"2024-03-26"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"        // without distance, time, and date","lastModifiedDate":"2024-03-18"},{"lineNumber":258,"author":{"gitId":"L5-Z"},"content":"        String input2 \u003d \"workout /e:run\";","lastModifiedDate":"2024-03-26"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Handler.checkTypeOfExercise(input2));","lastModifiedDate":"2024-03-20"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"        // without time and date","lastModifiedDate":"2024-03-18"},{"lineNumber":262,"author":{"gitId":"L5-Z"},"content":"        String input3 \u003d \"workout /e:run /d:10.3\";","lastModifiedDate":"2024-03-26"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Handler.checkTypeOfExercise(input3));","lastModifiedDate":"2024-03-20"},{"lineNumber":264,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":265,"author":{"gitId":"L5-Z"},"content":"        // with invalid format","lastModifiedDate":"2024-03-26"},{"lineNumber":266,"author":{"gitId":"L5-Z"},"content":"        String input5 \u003d \"workout /e-gymm /d-10.3 /t:00:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-26"},{"lineNumber":267,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Handler.checkTypeOfExercise(input5));","lastModifiedDate":"2024-03-26"},{"lineNumber":268,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":269,"author":{"gitId":"L5-Z"},"content":"        // with wrong slash","lastModifiedDate":"2024-03-26"},{"lineNumber":270,"author":{"gitId":"L5-Z"},"content":"        String input6 \u003d \"workout \\\\e:run \\\\d:30:10 \\\\t:00:20:10 \\\\date:15-03-2024\";","lastModifiedDate":"2024-03-26"},{"lineNumber":271,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Handler.checkTypeOfExercise(input6));","lastModifiedDate":"2024-03-26"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":273,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":274,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"JustinSoh":69,"rouvinerh":71,"L5-Z":133,"syj02":1}},{"path":"src/test/java/ui/OutputTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import utility.ErrorConstant;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutList;","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-12"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"class OutputTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    @BeforeAll","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    public static void setUpStreams() {","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    @AfterEach","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"    public void cleanup() {","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"    @AfterAll","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"    public static void restoreStreams() {","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-11"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-03-11"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printHistory function for Run objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid parameters specified.","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    void printHistory_runsOnly_expectAllRunsPrinted() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"40:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"01:59:10\", \"15.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"                \"Your run history:\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"                \"Index\\t\\tType\\tTime\\t\\tDistance\\tPace\\t\\tDate\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"                \"1.\\t\\t\\trun \\t40:10\\t\\t10.3\\t\\t3:54/km\\t\\t2024-03-15\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"                \"2.\\t\\t\\trun \\t1:59:10\\t\\t15.3\\t\\t7:47/km\\t\\tNA\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"        Output.printHistory(WorkoutConstant.RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-12"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printHistory function when an invalid filter is used.","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"    void printHistory_invalidHistoryFilter_throwError() {","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"invalidFilter\";","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Output.printHistory(input));","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestRun function after a Run object is added.","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid parameters specified.","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"    void printLatestRun_oneRun_expectOneRunPrinted() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"40:10\", \"10.3\");","lastModifiedDate":"2024-03-12"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"                \"Your latest run:\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"                \"Index\\t\\tType\\tTime\\t\\tDistance\\tPace\\t\\tDate\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"                \"1.\\t\\t\\trun \\t40:10\\t\\t10.3\\t\\t3:54/km\\t\\tNA\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"        Output.printLatestRun();","lastModifiedDate":"2024-03-12"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-12"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestRun function when no Runs are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"    void printLatestRun_noRun_expectNoRunMessage() {","lastModifiedDate":"2024-03-13"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001B[31mError: \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.HISTORY_RUN_EMPTY_ERROR +","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001B[0m\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"        Output.printLatestRun();","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-13"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestGym function when two Gyms are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"    void printLatestGym_twoGyms_expectOneGymPrinted() {","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"        try{","lastModifiedDate":"2024-03-20"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"            Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cInteger\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1));","lastModifiedDate":"2024-03-26"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cInteger\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1,2));","lastModifiedDate":"2024-03-26"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Bench Press\",  array1, 1, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Shoulder Press\", array2, 2, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"            Gym gym2 \u003d new Gym();","lastModifiedDate":"2024-03-20"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Squat Press\", array1, 1, 50);","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Lat Press\", array2, 2, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"            String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"                    \"Your latest gym:\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"                    \"Gym Session 2 (Date: NA)\" +","lastModifiedDate":"2024-03-26"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 1 Squat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 1) +","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"50 reps at 1 KG\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 2 Lat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 2) +","lastModifiedDate":"2024-03-26"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"10 reps at 1 KG\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 2, \"10 reps at 2 KG\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"                    UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"            Output.printLatestGym();","lastModifiedDate":"2024-03-20"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"        }  catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-20"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestGym function when no Gyms are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"    void printLatestGym_noGym_expectNoGymMessage() {","lastModifiedDate":"2024-03-20"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001B[31mError: \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.HISTORY_GYM_EMPTY_ERROR +","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001B[0m\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"        Output.printLatestGym();","lastModifiedDate":"2024-03-20"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"        cleanup();","lastModifiedDate":"2024-03-20"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when two Bmi objects are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"    @Test void printLatestBmi_twoBmis_expectOneBmiPrinted() {","lastModifiedDate":"2024-03-20"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"70.0\", \"18-03-2024\");","lastModifiedDate":"2024-03-20"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"        Bmi secondBmi \u003d new Bmi(\"1.55\", \"55.0\", \"20-03-2024\");","lastModifiedDate":"2024-03-20"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(firstBmi);","lastModifiedDate":"2024-03-20"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(secondBmi);","lastModifiedDate":"2024-03-20"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"        Output.printLatestBmi();","lastModifiedDate":"2024-03-20"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"                \"2024-03-20\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator()+","lastModifiedDate":"2024-03-20"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"                \"Your BMI is 22.89\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"                \"Great! You\u0027re within normal range.\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when no Bmi objects are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"    void printLatestBmi_noBmi_expectAssertionError() {","lastModifiedDate":"2024-03-20"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(AssertionError.class, Output::printLatestBmi);","lastModifiedDate":"2024-03-20"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when two Period objects are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"    void printLatestPeriod_twoPeriods_expectOnePeriodPrinted() {","lastModifiedDate":"2024-03-25"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"09-02-2023\", \"16-02-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"        Period secondPeriod \u003d new Period(\"09-03-2023\", \"16-03-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-20"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-20"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"        Output.printLatestPeriod();","lastModifiedDate":"2024-03-20"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"                \"Period Start: 2023-03-09 Period End: 2023-03-16\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"                \"Period Length: 8 days\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when no Period objects are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"    void printLatestPeriod_noPeriod_expectAssertionError() {","lastModifiedDate":"2024-03-20"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(AssertionError.class, Output::printLatestPeriod);","lastModifiedDate":"2024-03-20"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printGymHistory function, which should print both Gyms","lastModifiedDate":"2024-03-20"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"     * added.","lastModifiedDate":"2024-03-20"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"    void printGymHistory_correctInput_expectPrintGymHistory(){","lastModifiedDate":"2024-03-19"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-03-19"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cInteger\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1));","lastModifiedDate":"2024-03-26"},{"lineNumber":262,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cInteger\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1,2));","lastModifiedDate":"2024-03-26"},{"lineNumber":263,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":264,"author":{"gitId":"JustinSoh"},"content":"            Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-19"},{"lineNumber":265,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Bench Press\", array1, 1, 50);","lastModifiedDate":"2024-03-26"},{"lineNumber":266,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Shoulder Press\", array2, 2, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":267,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":268,"author":{"gitId":"JustinSoh"},"content":"            Gym gym2 \u003d new Gym();","lastModifiedDate":"2024-03-19"},{"lineNumber":269,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Squat Press\", array1, 1, 50);","lastModifiedDate":"2024-03-26"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"            gym2.addStation(\"Lat Press\", array2, 2, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"            String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":273,"author":{"gitId":"L5-Z"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":274,"author":{"gitId":"L5-Z"},"content":"                    \"Your gym history:\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"                    \"Gym Session 1 (Date: NA)\"+","lastModifiedDate":"2024-03-26"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":278,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 1 Bench Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":279,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 1) +","lastModifiedDate":"2024-03-26"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":281,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"50 reps at 1 KG\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":282,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":283,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 2 Shoulder Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":284,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 2) +","lastModifiedDate":"2024-03-26"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":286,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"10 reps at 1 KG\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":287,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":288,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 2, \"10 reps at 2 KG\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":290,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"                    \"Gym Session 2 (Date: NA)\" +","lastModifiedDate":"2024-03-26"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":294,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 1 Squat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":295,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 1) +","lastModifiedDate":"2024-03-26"},{"lineNumber":296,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":297,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"50 reps at 1 KG\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":298,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":299,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 2 Lat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":300,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 2) +","lastModifiedDate":"2024-03-26"},{"lineNumber":301,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":302,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"10 reps at 1 KG\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":304,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 2, \"10 reps at 2 KG\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":306,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":308,"author":{"gitId":"L5-Z"},"content":"            Output.printHistory(WorkoutConstant.GYM);","lastModifiedDate":"2024-03-21"},{"lineNumber":309,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":310,"author":{"gitId":"JustinSoh"},"content":"        }  catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-19"},{"lineNumber":311,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-19"},{"lineNumber":312,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":313,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":314,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":315,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":316,"author":{"gitId":"JustinSoh"},"content":"     * Test the behaviour of the printRunHistory function, which should print both Runs and Gyms","lastModifiedDate":"2024-03-27"},{"lineNumber":317,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":318,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":319,"author":{"gitId":"JustinSoh"},"content":"    void printWorkoutHistory() {","lastModifiedDate":"2024-03-27"},{"lineNumber":320,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":321,"author":{"gitId":"JustinSoh"},"content":"            Run run1 \u003d new Run(\"11:11:12\", \"10.24\", \"19-12-1923\");","lastModifiedDate":"2024-03-27"},{"lineNumber":322,"author":{"gitId":"JustinSoh"},"content":"            Gym gym1 \u003d new Gym(\"11-11-1992\");","lastModifiedDate":"2024-03-27"},{"lineNumber":323,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Bench Press\", new ArrayList\u003c\u003e(Arrays.asList(10,20)), 2, 4);","lastModifiedDate":"2024-03-27"},{"lineNumber":324,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Squat Press\", new ArrayList\u003c\u003e(Arrays.asList(100,200)), 2, 4);","lastModifiedDate":"2024-03-27"},{"lineNumber":325,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":326,"author":{"gitId":"JustinSoh"},"content":"            String expectedRun1 \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":327,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.RUN,","lastModifiedDate":"2024-03-27"},{"lineNumber":328,"author":{"gitId":"JustinSoh"},"content":"                    \"1923-12-19\",","lastModifiedDate":"2024-03-27"},{"lineNumber":329,"author":{"gitId":"JustinSoh"},"content":"                    \"10.24\",","lastModifiedDate":"2024-03-27"},{"lineNumber":330,"author":{"gitId":"JustinSoh"},"content":"                    \"11:11:12\",","lastModifiedDate":"2024-03-27"},{"lineNumber":331,"author":{"gitId":"JustinSoh"},"content":"                    \"65:33/km\",","lastModifiedDate":"2024-03-27"},{"lineNumber":332,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":333,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":334,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":335,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH","lastModifiedDate":"2024-03-27"},{"lineNumber":336,"author":{"gitId":"JustinSoh"},"content":"                    );","lastModifiedDate":"2024-03-27"},{"lineNumber":337,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":338,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":339,"author":{"gitId":"JustinSoh"},"content":"            String expectedGym1Set1 \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":340,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.GYM,","lastModifiedDate":"2024-03-27"},{"lineNumber":341,"author":{"gitId":"JustinSoh"},"content":"                    \"1992-11-11\",","lastModifiedDate":"2024-03-27"},{"lineNumber":342,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":343,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":344,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":345,"author":{"gitId":"JustinSoh"},"content":"                    \"Bench Press\",","lastModifiedDate":"2024-03-27"},{"lineNumber":346,"author":{"gitId":"JustinSoh"},"content":"                    \"2\",","lastModifiedDate":"2024-03-27"},{"lineNumber":347,"author":{"gitId":"JustinSoh"},"content":"                    \"4,4\",","lastModifiedDate":"2024-03-27"},{"lineNumber":348,"author":{"gitId":"JustinSoh"},"content":"                    \"10,20\"","lastModifiedDate":"2024-03-27"},{"lineNumber":349,"author":{"gitId":"JustinSoh"},"content":"            );","lastModifiedDate":"2024-03-27"},{"lineNumber":350,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":351,"author":{"gitId":"JustinSoh"},"content":"            String expectedGym1Set2 \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":352,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":353,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":354,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":355,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":356,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":357,"author":{"gitId":"JustinSoh"},"content":"                    \"Squat Press\",","lastModifiedDate":"2024-03-27"},{"lineNumber":358,"author":{"gitId":"JustinSoh"},"content":"                    \"2\",","lastModifiedDate":"2024-03-27"},{"lineNumber":359,"author":{"gitId":"JustinSoh"},"content":"                    \"4,4\",","lastModifiedDate":"2024-03-27"},{"lineNumber":360,"author":{"gitId":"JustinSoh"},"content":"                    \"100,200\"","lastModifiedDate":"2024-03-27"},{"lineNumber":361,"author":{"gitId":"JustinSoh"},"content":"            );","lastModifiedDate":"2024-03-27"},{"lineNumber":362,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":363,"author":{"gitId":"JustinSoh"},"content":"            String expected2 \u003d String.format(","lastModifiedDate":"2024-03-27"},{"lineNumber":364,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT, \"2\", expectedGym1Set1)","lastModifiedDate":"2024-03-27"},{"lineNumber":365,"author":{"gitId":"JustinSoh"},"content":"                    + System.lineSeparator() +","lastModifiedDate":"2024-03-27"},{"lineNumber":366,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT, \"\", expectedGym1Set2);","lastModifiedDate":"2024-03-27"},{"lineNumber":367,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":368,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":369,"author":{"gitId":"JustinSoh"},"content":"            String expected1 \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT, \"1\", expectedRun1);","lastModifiedDate":"2024-03-27"},{"lineNumber":370,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":371,"author":{"gitId":"JustinSoh"},"content":"            String expected \u003d UiConstant.PARTITION_LINE + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":372,"author":{"gitId":"JustinSoh"},"content":"                    + WorkoutConstant.HISTORY_WORKOUTS_HEADER + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":373,"author":{"gitId":"JustinSoh"},"content":"                    + WorkoutConstant.HISTORY_WORKOUTS_HEADER_FORMAT + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":374,"author":{"gitId":"JustinSoh"},"content":"                    + expected1 + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":375,"author":{"gitId":"JustinSoh"},"content":"                    + expected2 + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":376,"author":{"gitId":"JustinSoh"},"content":"                    + UiConstant.PARTITION_LINE + System.lineSeparator();","lastModifiedDate":"2024-03-27"},{"lineNumber":377,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":378,"author":{"gitId":"JustinSoh"},"content":"            Output.printHistory(WorkoutConstant.ALL);","lastModifiedDate":"2024-03-27"},{"lineNumber":379,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-27"},{"lineNumber":380,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":381,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Shouldn\u0027t have failed\");","lastModifiedDate":"2024-03-27"},{"lineNumber":382,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":383,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":384,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":385,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"JustinSoh":189,"rouvinerh":186,"L5-Z":10}},{"path":"src/test/java/utility/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-25"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2024-03-25"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"class ParserTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the parseDate function with a correctly formatted string.","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    void parseDate_correctDateInput_returnDate() {","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"        LocalDate result \u003d Parser.parseDate(\"08-03-2024\");","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"        LocalDate expected \u003d LocalDate.of(2024, 3, 8);","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the parseDate function with an incorrectly formatted string.","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    void parseDate_incorrectDateInput_throwException () {","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        System.setErr(new PrintStream(outputStream));","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"2024-03-08\";","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"        Parser.parseDate(invalidDate);","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"        String errorMessage \u003d outputStream.toString().trim();","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(errorMessage.contains(\"Error parsing date\"));","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        System.setErr(System.err);","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_validDate_noExceptionThrown() {","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"        String validDate \u003d \"09-11-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(validDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_invalidDayFormat_throwInvalidInputException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"9-11-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(invalidDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_invalidMonthFormat_throwInvalidInputException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"9-1-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(invalidDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_invalidYearFormat_throwInvalidInputException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"9-11-24\";","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(invalidDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_illegalDayNumber_throwInvalidInputException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"32-11-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(invalidDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_zeroDayNumber_throwInvalidInputException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"00-11-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(invalidDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_illegalMonthNumber_throwInvalidInputException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"09-13-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(invalidDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_zeroMonthNumber_throwInvalidInputException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"09-00-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(invalidDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_wrongDateDelimiter_throwInvalidInputException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"09/12/2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(invalidDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_invalidDateParameters_throwInvalidInputException() {","lastModifiedDate":"2024-03-27"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"        String invalidDate \u003d \"09/12\";","lastModifiedDate":"2024-03-25"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-25"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"            Parser.validateDateInput(invalidDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a correctly formatted user input being passed into splitBmi.","lastModifiedDate":"2024-03-28"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"    void splitBmi_correctInput_returnsCorrectBmiValues() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"        String input \u003d \"/h:bmi /height:1.71 /weight:60.50 /date:19-03-2024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"        String[] expected \u003d {\"1.71\", \"60.50\", \"19-03-2024\"};","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"        String[] result \u003d Parser.splitBmiInput(input);","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a string with missing parameter being passed into splitBmi.","lastModifiedDate":"2024-03-28"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"    void splitBmi_missingParameter_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"        String input \u003d \"/h:bmi /height:1.71 /date:19-03-2024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.splitBmiInput(input));","lastModifiedDate":"2024-03-27"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"    //@@author","lastModifiedDate":"2024-03-27"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of 1 decimal point weight number being passed into splitBmi.","lastModifiedDate":"2024-03-28"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"    void validateBmi_oneDecimalPointWeight_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"1.71\", \"70.0\", \"29-04-2024\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateBmiInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of 1 decimal point height number being passed into splitBmi.","lastModifiedDate":"2024-03-28"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"    void validateBmi_oneDecimalPointHeight_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"1.7\", \"70.03\", \"29-04-2024\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateBmiInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a date far in the future is passed into splitBmi.","lastModifiedDate":"2024-03-28"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"    void validateBmi_dateAfterToday_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"1.70\", \"70.03\", \"28-03-2025\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateBmiInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being passed into splitPeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"    void splitPeriod_correctInput_noExceptionThrown() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-28"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/h:period /start:29-04-2023 /end:30-04-2023\";","lastModifiedDate":"2024-03-28"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"29-04-2023\", \"30-04-2023\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Parser.splitPeriodInput(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-28"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a string with a missing parameter being passed into splitPeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"    void splitPeriod_missingParameter_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/h:period /start:29-04-2023\";","lastModifiedDate":"2024-03-28"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.splitPeriodInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed into validatePeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"    void validatePeriod_correctParameters_noExceptionThrown()  {","lastModifiedDate":"2024-03-28"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"        String [] input \u003d {\"23-03-2024\", \"30-03-2024\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e Parser.validatePeriodInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a string with an empty string being passed into validatePeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"    void validatePeriod_emptyParameter_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"        String [] input \u003d {\"\", \"29-03-2024\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validatePeriodInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a string with invalid start date being passed into validatePeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"    void validatePeriod_invalidStartDate_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"        String [] input \u003d {\"32-04-2024\", \"29-04-2024\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validatePeriodInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a string with invalid end date being passed into validatePeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"    void validatePeriod_invalidEndDate_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"        String [] input \u003d {\"28-04-2024\", \"29-13-2024\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validatePeriodInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a start date far in the future being passed into validatePeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"    void validatePeriod_dateAfterToday_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"        String [] input \u003d {\"28-04-2025\", \"29-13-2025\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validatePeriodInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an end date before the start date being passed into validatePeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"    void validatePeriod_endDateBeforeStartDate_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"        String [] input \u003d {\"28-03-2024\", \"22-03-2024\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validatePeriodInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being passed into splitAppointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"    void splitAppointment_correctInput_noExceptionThrown() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-28"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/h:appointment /date:30-03-2024 /time:19:30 /description:test\";","lastModifiedDate":"2024-03-28"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"30-03-2024\", \"19:30\", \"test\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Parser.splitAppointmentDetails(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-28"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being passed into splitAppointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"    void splitAppointment_missingParameter_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/h:appointment /date:30-03-2024 /description:test\";","lastModifiedDate":"2024-03-28"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.splitAppointmentDetails(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed into validateAppointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointment_correctParameters_noExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"29-04-2024\", \"19:30\", \"test description\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e Parser.validateAppointmentDetails(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an empty string being passed into validateAppointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointment_emptyParameters_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"29-04-2024\", \"19:30\", \"\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateAppointmentDetails(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrectly formatted date being passed into validateAppointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointment_incorrectDateFormat_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"32-04-2024\", \"19:30\", \"test description\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateAppointmentDetails(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrectly formatted time being passed into validateAppointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointment_incorrectTimeFormat_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"28-04-2024\", \"25:30\", \"test description\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateAppointmentDetails(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a description being more than 100 characters being passed into validateAppointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointment_descriptionTooLong_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"28-04-2024\", \"22:30\",","lastModifiedDate":"2024-03-28"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"                          \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +","lastModifiedDate":"2024-03-28"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"                          \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateAppointmentDetails(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted time string being passed into validateTimeInput.","lastModifiedDate":"2024-03-28"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_correctInput_noExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"23:50\";","lastModifiedDate":"2024-03-28"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e Parser.validateTimeInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrect time with the wrong delimiter being passed into validateTimeInput.","lastModifiedDate":"2024-03-28"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_invalidDelimiter_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"23-50\";","lastModifiedDate":"2024-03-28"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateTimeInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrect time with invalid hours being passed into validateTimeInput.","lastModifiedDate":"2024-03-28"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_invalidHours_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"24:50\";","lastModifiedDate":"2024-03-28"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateTimeInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrect time with invalid minutes being passed into validateTimeInput.","lastModifiedDate":"2024-03-28"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_invalidMinutes_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"21:60\";","lastModifiedDate":"2024-03-28"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateTimeInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":372,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrect time with letters being passed into validateTimeInput.","lastModifiedDate":"2024-03-28"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_invalidTimeWithLetters_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"12:2a\";","lastModifiedDate":"2024-03-28"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateTimeInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrect time with seconds included being passed into validateTimeInput.","lastModifiedDate":"2024-03-28"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_invalidTimeFormat_throwsInvalidInputException() {","lastModifiedDate":"2024-03-28"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"21:55:44\";","lastModifiedDate":"2024-03-28"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Parser.validateTimeInput(input));","lastModifiedDate":"2024-03-28"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the extractSubstringFromSpecificIndex with a correct flag.","lastModifiedDate":"2024-03-28"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"     * Expects the \u0027bmi\u0027 string to be extracted.","lastModifiedDate":"2024-03-28"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"    void extractSubstringFromSpecificIndex_correctFlag_returnsCorrectSubstring() {","lastModifiedDate":"2024-03-28"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"        String test \u003d \"/h:bmi\";","lastModifiedDate":"2024-03-28"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"        String testDelimiter \u003d \"/h:\";","lastModifiedDate":"2024-03-28"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d Parser.extractSubstringFromSpecificIndex(test, testDelimiter);","lastModifiedDate":"2024-03-28"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"bmi\";","lastModifiedDate":"2024-03-28"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-28"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"j013n3":23,"rouvinerh":381}},{"path":"src/test/java/workouts/GymTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package workouts;","lastModifiedDate":"2024-03-24"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-24"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-24"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-24"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-24"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-24"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"class GymTest {","lastModifiedDate":"2024-03-24"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-24"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    void setUp() {","lastModifiedDate":"2024-03-24"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-24"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-24"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of adding a new station to the gym.","lastModifiedDate":"2024-03-24"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"     * Verifies whether the newly added station is correctly reflected in {@Code GymSet}.","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"     * Expected Behaviour is to add stations and sets to the gym.","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    void addStation_validInput_expectAddedStation() {","lastModifiedDate":"2024-03-24"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym \u003d new Gym();","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cInteger\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1));","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cInteger\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1,2));","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cInteger\u003e array3 \u003d new ArrayList\u003c\u003e(Arrays.asList(1,2,3));","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"Exercise 1\", array1, 1, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"Exercise 2\", array2, 2, 20);","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(2, newGym.getStations().size());","lastModifiedDate":"2024-03-24"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"Exercise 3\", array3, 3, 30);","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cGymStation\u003e stations \u003d newGym.getStations();","lastModifiedDate":"2024-03-24"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(3, stations.size());","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"            for(int i \u003d 0; i \u003c stations.size(); i++){","lastModifiedDate":"2024-03-24"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"                String stationName \u003d stations.get(i).getStationName();","lastModifiedDate":"2024-03-24"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"                ArrayList\u003cGymSet\u003e sets \u003d stations.get(i).getSets();","lastModifiedDate":"2024-03-24"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"                int numberOfSets \u003d sets.size();","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"                if (i \u003d\u003d 0){","lastModifiedDate":"2024-03-24"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(\"Exercise 1\", stationName);","lastModifiedDate":"2024-03-24"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(1, numberOfSets );","lastModifiedDate":"2024-03-24"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"                    for(int j \u003d 0; j \u003c sets.size(); j++){","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"                        assertEquals(array1.get(j), sets.get(j).getWeight());","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"                        assertEquals(10, sets.get(j).getRepetitions());","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"                    }","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"                } else if (i \u003d\u003d 1){","lastModifiedDate":"2024-03-24"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(\"Exercise 2\", stationName);","lastModifiedDate":"2024-03-24"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(2, numberOfSets );","lastModifiedDate":"2024-03-24"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"                    for(int j \u003d 0; j \u003c sets.size(); j++){","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"                        assertEquals(array2.get(j), sets.get(j).getWeight());","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"                        assertEquals(20, sets.get(j).getRepetitions());","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"                    }","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"                } else if (i \u003d\u003d 2){","lastModifiedDate":"2024-03-24"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(\"Exercise 3\", stationName);","lastModifiedDate":"2024-03-24"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(3, numberOfSets );","lastModifiedDate":"2024-03-24"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"                    for(int j \u003d 0; j \u003c sets.size(); j++){","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"                        assertEquals(array3.get(j), sets.get(j).getWeight());","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"                        assertEquals(30, sets.get(j).getRepetitions());","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"                    }","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-03-24"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-24"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    void getStations() {","lastModifiedDate":"2024-03-24"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"    void getStationByIndex() {","lastModifiedDate":"2024-03-24"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"    void addGymStationInput() {","lastModifiedDate":"2024-03-24"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"    void checkGymStationInput() {","lastModifiedDate":"2024-03-24"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-24"}],"authorContributionMap":{"JustinSoh":100}},{"path":"src/test/java/workouts/RunTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import utility.UiConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"class RunTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of parsing a time string with hours into an integer array.","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    void parseTime_correctInputWithHours_returnListOfTimes() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"        String testTime \u003d \"01:59:10\";","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"        Run runTest \u003d new Run(testTime, \"15.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result \u003d runTest.parseTime(testTime);","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected \u003d {1, 59, 10};","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c UiConstant.MAX_RUNTIME_ARRAY_LENGTH; i++) {","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(result[i], expected[i]);","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of parsing a time string without hours into an integer array.","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    void parseTime_correctInputWithOutHours_returnListOfTimes() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        String testTime \u003d \"50:52\";","lastModifiedDate":"2024-03-14"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"        Run runTest \u003d new Run(testTime, \"15.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result \u003d runTest.parseTime(\"50:52\");","lastModifiedDate":"2024-03-14"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected \u003d {50, 52};","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c UiConstant.MIN_RUNTIME_ARRAY_LENGTH; i++) {","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(result[i], expected[i]);","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"     * Test the behaviour of an incorrect time string being passed in for the run.","lastModifiedDate":"2024-03-14"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"    void parseTime_wrongInput_throwInvalidInputForRun() {","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"        String testTime \u003d \"50\";","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e new Run(testTime, \"15.3\"));","lastModifiedDate":"2024-03-14"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of calculating the total seconds taken for the run.","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    void calculateSeconds_correctInput_returnTotalSeconds() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        Run testRun \u003d new Run(\"01:05:42\", \"10.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        int result \u003d testRun.calculateTotalSeconds();","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"        int expected \u003d 3942;","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(result, expected);","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of calculating and returning a string representing the pace for the run.","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    void calculatePace_correctInput_returnPace() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"        Run testRun \u003d new Run(\"1:20:10\", \"10.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d testRun.calculatePace();","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d\"7:47/km\";","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(result, expected);","lastModifiedDate":"2024-03-14"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the getRun function when a valid Run object has been added.","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid parameters.","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"    void getRun_validInput_expectCorrectParsing() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"new /e:run /d:10.3 /t:00:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"        String[] result \u003d Run.getRun(input);","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"        assertArrayEquals(new String[]{\"run\", \"10.3\", \"00:40:10\", \"15-03-2024\"}, result);","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the getRun function when a Run object is added with missing","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"     * parameters.","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"    void getRun_missingParameter_expectException() {","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"new /e:run /d:10.3\";","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Run.getRun(input));","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":4,"rouvinerh":81,"L5-Z":13}},{"path":"src/test/java/workouts/WorkoutListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import utility.WorkoutConstant;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"class WorkoutListTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    void setUp() {","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of adding a new run to the run list.","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     * Verifies whether the newly added run is correctly reflected in the run and WorkoutList.","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    void addRun_normalInput_expectAppend()  {","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"            Run inputRun \u003d new Run(\"40:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"            WorkoutList.addRun(inputRun);","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003c? extends Workout\u003e runList \u003d WorkoutList.getWorkouts(WorkoutConstant.RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003c? extends Workout\u003e workoutList \u003d WorkoutList.getWorkouts(WorkoutConstant.ALL);","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"            Workout expectedRun \u003d runList.get(runList.size() - 1);","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"            Workout expectedWorkout \u003d workoutList.get(runList.size() - 1);","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(inputRun, expectedRun);","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(inputRun, expectedWorkout);","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-14"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception.\");","lastModifiedDate":"2024-03-14"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting the workout list with {@code RUN} , {@code ALL}","lastModifiedDate":"2024-03-14"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"     * Verifies whether the method is able to correct retrieve the list of workouts.","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    void getWorkouts_properInput_expectRetrievalRun() {","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cRun\u003e inputList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"            inputList.add(new Run(\"40:10\", \"10.3\", \"15-03-2024\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"            inputList.add(new Run(\"30:10\", \"20.3\", \"30-03-2023\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003c? extends Workout\u003e runList \u003d WorkoutList.getWorkouts(WorkoutConstant.RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"            for(int i \u003d 0; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"                Run expected \u003d inputList.get(i);","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"                Run actual \u003d (Run) runList.get(i);","lastModifiedDate":"2024-03-14"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"                assertEquals(expected, actual);","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.OutOfBounds | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception.\");","lastModifiedDate":"2024-03-14"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting the workout list with {@code RUN} , {@code ALL}","lastModifiedDate":"2024-03-14"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"     * Verifies whether the method is able to correct retrieve the list of workouts.","lastModifiedDate":"2024-03-14"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"    void getWorkouts_improperFilters_throwInvalidInput() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cWorkout\u003e inputList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-14"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"        inputList.add(new Run(\"40:10\", \"10.3\", \"15-03-2024\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"        inputList.add(new Run(\"30:10\", \"20.3\", \"30-03-2023\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-14"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003c? extends Workout\u003e runList \u003d WorkoutList.getWorkouts(\"invalidFilter\");","lastModifiedDate":"2024-03-19"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"        });","lastModifiedDate":"2024-03-14"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting an empty run / gym list","lastModifiedDate":"2024-03-24"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"     * Expected behaviour is to raise {@code OutOfBounds} exception.","lastModifiedDate":"2024-03-14"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"    void getWorkouts_emptyList_throwOutOfBoundsForRun() {","lastModifiedDate":"2024-03-14"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e WorkoutList.getWorkouts(WorkoutConstant.GYM));","lastModifiedDate":"2024-03-24"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e WorkoutList.getWorkouts(WorkoutConstant.RUN));","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting an empty run list","lastModifiedDate":"2024-03-14"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"     * Expected behaviour is to raise {@code OutOfBounds} exception.","lastModifiedDate":"2024-03-14"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"    void getWorkouts_emptyList_throwOutOfBoundsForAll() {","lastModifiedDate":"2024-03-14"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e WorkoutList.getWorkouts(WorkoutConstant.ALL));","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting the latest run from the run list.","lastModifiedDate":"2024-03-14"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"     * Expected behavior is for {@code actual} to equal to the {@code secondRun}","lastModifiedDate":"2024-03-14"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"    void getLatestRun_properList_correctRetrieval() {","lastModifiedDate":"2024-03-14"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"            new Run(\"20:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"            Run secondRun \u003d new Run(\"20:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"            Run actual \u003d WorkoutList.getLatestRun();","lastModifiedDate":"2024-03-14"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(secondRun, actual);","lastModifiedDate":"2024-03-14"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-14"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"     * Test the behaviour when you try to get the latest run from an empty list.","lastModifiedDate":"2024-03-14"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"     * Expected behaviour is to raise {@code OutOfBounds} exception.","lastModifiedDate":"2024-03-14"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"    void getLatestRun_emptyList_throwOutOfBound() {","lastModifiedDate":"2024-03-14"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        // Call the method or code that should throw the exception","lastModifiedDate":"2024-03-14"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, WorkoutList::getLatestRun);","lastModifiedDate":"2024-03-14"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one run left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"    void deleteRun_properList_listOfSizeOne() throws CustomExceptions.InvalidInput, CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"20:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"20:11\", \"10.3\", \"15-03-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        WorkoutList.deleteRun(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, WorkoutList.getRunSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"    void deleteRun_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteRun(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"    void deleteRun_properListInvalidIndex_throwOutOfBoundsForRun() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"20:11\", \"10.3\", \"15-03-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteRun(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of gyms with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one gym left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"    void deleteGym_properList_listOfSizeOne() throws CustomExceptions.InvalidInput, CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"        Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-25"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cInteger\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1));","lastModifiedDate":"2024-03-26"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cInteger\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1,2));","lastModifiedDate":"2024-03-26"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"        gym1.addStation(\"Bench Press\", array1, 1, 50);","lastModifiedDate":"2024-03-26"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"        gym1.addStation(\"Shoulder Press\", array2, 2, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"        Gym gym2 \u003d new Gym();","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"        gym2.addStation(\"Squat Press\", array1,  1, 50);","lastModifiedDate":"2024-03-26"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"        gym2.addStation(\"Lat Press\", array2, 2, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"        gym2.addStation(\"Bicep curls\", array1, 1, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"        WorkoutList.deleteGym(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, WorkoutList.getGymSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of gym with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"    void deleteGym_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-25"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteGym(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"    void deleteGym_properListInvalidIndex_throwOutOfBoundsForRun() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"        Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-25"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cInteger\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1));","lastModifiedDate":"2024-03-26"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cInteger\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1,2));","lastModifiedDate":"2024-03-26"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"        gym1.addStation(\"Bench Press\", array1, 1, 50);","lastModifiedDate":"2024-03-26"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"        gym1.addStation(\"Shoulder Press\", array2, 2, 10);","lastModifiedDate":"2024-03-26"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteGym(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":133,"rouvinerh":95,"L5-Z":7}},{"path":"src/test/java/workouts/WorkoutTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"class WorkoutTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"rouvinerh":5}}]
