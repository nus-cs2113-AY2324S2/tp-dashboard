[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    mainClass.set(\"seedu.pulsepilot.PulsePilot\")","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    archiveBaseName.set(\"pulsepilot\")","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"JustinSoh":1,"rouvinerh":2,"-":44}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display |     Name      |             Github Profile             | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"raajamani"},"content":"--------|:-------------:|:--------------------------------------:|:---------:","lastModifiedDate":"2024-04-05"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |  Justin Soh   | [Github](https://github.com/JustinSoh) | [Portfolio](https://justinsoh.github.io/)","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |  Rouvin Erh   | [Github](https://github.com/rouvinerh) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |   Alfaatih    |   [Github](https://github.com/L5-Z)    | [Portfolio](https://l5-z.github.io)","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |    Jolene     |  [Github](https://github.com/j013n3)   | [Portfolio](docs/team/j013n3.md)","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |   Ying Jia    |   [Github](https://github.com/syj02)   | [Portfolio](docs/team/syj02.md)","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"raajamani"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | R M Raajamani | [Github](https://github.com/raajamani) | [Portfolio](docs/team/raajamani.md)","lastModifiedDate":"2024-04-05"},{"lineNumber":11,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-05"}],"authorContributionMap":{"j013n3":1,"JustinSoh":1,"rouvinerh":1,"L5-Z":1,"raajamani":3,"syj02":1,"-":3}},{"path":"docs/CS2101/UserGuide_2101.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"# User Guide","lastModifiedDate":"2024-04-06"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"## Introduction","lastModifiedDate":"2024-04-06"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"Hello! Thank you for choosing to use PulsePilot!","lastModifiedDate":"2024-04-06"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"Our team appreciates that you are giving our health application a try, and we hope that it helps you track your recovery better and bounce back from whatever injury you are facing.","lastModifiedDate":"2024-04-06"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"This document is the **User Guide** of PulsePilot, which will help you, an injured person to learn how to install and use our product.","lastModifiedDate":"2024-04-06"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"Once again, we hope our application helps you, and thank you for choosing PulsePilot!","lastModifiedDate":"2024-04-06"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"## Table of Contents","lastModifiedDate":"2024-04-06"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"* [How to use this guide](#how-to-use-this-guide)","lastModifiedDate":"2024-04-06"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"  * [Glossary Usage](#glossary-usage)","lastModifiedDate":"2024-04-06"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"  * [Blocks](#blocks)","lastModifiedDate":"2024-04-06"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"* [What is PulsePilot](#what-is-pulsepilot)","lastModifiedDate":"2024-04-06"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"* [Origin of PulsePilot](#origin-of-pulsepilot)","lastModifiedDate":"2024-04-06"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"* [Command Line Interface](#command-line-interface)","lastModifiedDate":"2024-04-06"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"* [Installation of Java and PulsePilot](#installation-of-java-and-pulsepilot)","lastModifiedDate":"2024-04-06"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"* [PulsePilot Commands](#pulsepilot-commands)","lastModifiedDate":"2024-04-06"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"* [Command Summary](#command-summary)","lastModifiedDate":"2024-04-06"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"* [Frequently Asked Questions](#frequently-asked-questions)","lastModifiedDate":"2024-04-06"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"* [Glossary](#glossary)","lastModifiedDate":"2024-04-06"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"## How to use this guide","lastModifiedDate":"2024-04-06"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"Before we delve into the content of what is PulsePilot and how to use it, we want to let you know and get familiar with the styling used in this guide, so that this guide can help you better!","lastModifiedDate":"2024-04-06"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"### Glossary Usage","lastModifiedDate":"2024-04-06"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"This guide may have difficult to understand technical jargon or terms used. Fret not! We understand that seeing such terms can be daunting to someone not familiar with it.","lastModifiedDate":"2024-04-06"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"As such, our team has created a **Glossary** for you to refer to when reading this guide! It serves as a mini-dictionary, for you to read a definition and quickly go back to wherever you were.","lastModifiedDate":"2024-04-06"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"Technical terms are marked in **italicised blue** [*like this*]()! When you click on it, it brings you to the glossary. Each term in the glossary also contains a \u0027Go back\u0027 button, and clicking on that returns you to where you originally were. This is to create a seamless reading experience for you!","lastModifiedDate":"2024-04-06"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"Give it a try with the term: [*Object-Oriented Programming*](#glossary).","lastModifiedDate":"2024-04-06"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"The blue phrases known are also known as [*hyperlinks*](#glossary). ","lastModifiedDate":"2024-04-06"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"Non-italicised hyperlinks [like this]() are used to bring you to different parts of the document. ","lastModifiedDate":"2024-04-06"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"For example, **the one below to bring you back to the table of contents on top!**","lastModifiedDate":"2024-04-06"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"### Blocks","lastModifiedDate":"2024-04-06"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"There are 3 different kinds of **blocks**, denoted using different **icons** to bring things to your attention.","lastModifiedDate":"2024-04-06"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"\u003e 💡 This is an **information** block. It is used to highlight additional details that you might be interested in!","lastModifiedDate":"2024-04-06"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"\u003e ⚠️ This is a **warning** block. It is used to highlight information about certain errors that you might encounter.","lastModifiedDate":"2024-04-06"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"\u003e ❗This is an **important** block. It contains information that you **MUST READ**! Take note of these!","lastModifiedDate":"2024-04-06"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"If you need more, add more.","lastModifiedDate":"2024-04-06"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"## What is PulsePilot","lastModifiedDate":"2024-04-06"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"Include Description of the application","lastModifiedDate":"2024-04-06"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"## Origin of PulsePilot","lastModifiedDate":"2024-04-06"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"Explain why we created the application, to include:","lastModifiedDate":"2024-04-06"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"- Who we are (athletes)","lastModifiedDate":"2024-04-06"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"- Lack of recovery stuff from our presentation","lastModifiedDate":"2024-04-06"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"I think no need to explain the NGEMR and Synapxe things here.","lastModifiedDate":"2024-04-06"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"## Command Line Interface","lastModifiedDate":"2024-04-06"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"Explain what this is for both OS ","lastModifiedDate":"2024-04-06"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"Images are included like this ","lastModifiedDate":"2024-04-06"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"![img.png](img_2101/windows_cmd.png)","lastModifiedDate":"2024-04-06"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"\u003e ❗This is an **example image** to show how images are included, and will be removed in future iterations.","lastModifiedDate":"2024-04-06"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"### Windows","lastModifiedDate":"2024-04-06"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"### MacOS","lastModifiedDate":"2024-04-06"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"## Installation of Java and PulsePilot","lastModifiedDate":"2024-04-06"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"Explain that our application can run anywhere as long as Java is installed. Can show how to install from our GitHub.","lastModifiedDate":"2024-04-06"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"## PulsePilot Commands","lastModifiedDate":"2024-04-06"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"* [Workout](#workout)","lastModifiedDate":"2024-04-06"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"  * [Add Run](#add-run)","lastModifiedDate":"2024-04-06"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"  * [Add Gym](#add-gym)","lastModifiedDate":"2024-04-06"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"* [Health](#health)","lastModifiedDate":"2024-04-06"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"  * [Add Period](#add-period)","lastModifiedDate":"2024-04-06"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"  * [Add BMI](#add-bmi)","lastModifiedDate":"2024-04-06"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"  * [Add Appointment](#add-appointment)","lastModifiedDate":"2024-04-06"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"  * [Make Period Prediction](#make-period-prediction)","lastModifiedDate":"2024-04-06"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"* [View History](#view-history)","lastModifiedDate":"2024-04-06"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"* [View Latest](#view-latest)","lastModifiedDate":"2024-04-06"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"* [Delete Item](#delete-item)","lastModifiedDate":"2024-04-06"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"* [Storage of Data](#storage-of-data)","lastModifiedDate":"2024-04-06"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"### Workout","lastModifiedDate":"2024-04-06"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"#### Add Run","lastModifiedDate":"2024-04-06"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"#### Add Gym","lastModifiedDate":"2024-04-06"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"### Health","lastModifiedDate":"2024-04-06"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"#### Add Period","lastModifiedDate":"2024-04-06"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"#### Add BMI","lastModifiedDate":"2024-04-06"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"#### Add Appointment","lastModifiedDate":"2024-04-06"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"#### Make Period Prediction","lastModifiedDate":"2024-04-06"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"### View History","lastModifiedDate":"2024-04-06"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"### View Latest","lastModifiedDate":"2024-04-06"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"### Delete Item","lastModifiedDate":"2024-04-06"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"### Storage of Data","lastModifiedDate":"2024-04-06"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"## Command Summary","lastModifiedDate":"2024-04-06"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"| Action       | Format, Examples                                                                                                                       |","lastModifiedDate":"2024-04-06"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"|--------------|----------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-04-06"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"| Print help   | `help`                                                                                                                                 |","lastModifiedDate":"2024-04-06"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"| Add new run  | `workout /e:run /d:DISTANCE /t:TIME [/date:DATE]`\u003cbr\u003e Example: `workout /e:run /d:5.24 /t:25:23 /date:19-03-2024`   \u003c/br\u003e              |","lastModifiedDate":"2024-04-06"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"| Add gym      | `workout /e:gym /n:NUMBER_OF_STATIONS [/date:DATE]`\u003cbr\u003e Example: `workout /e:gym /n:4`\u003c/br\u003e                                            |","lastModifiedDate":"2024-04-06"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"| Track BMI    | `health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE`\u003cbr\u003e Example: `health /h:bmi /height:1.70 /weight:75.42 /date:19-03-2024`\u003c/br\u003e |","lastModifiedDate":"2024-04-06"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"| Track Period | `health /h:period /start:START_DATE /end:END_DATE`\u003cbr\u003e Example: `health /h:period /start:09-03-2022 /end:16-03-2022` \u003c/br\u003e             |","lastModifiedDate":"2024-04-06"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"| View history | `history /item:TYPE`\u003cbr\u003e Example: `history /item:run` \u003c/br\u003e                                                                            |","lastModifiedDate":"2024-04-06"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"| View latest  | `latest /item:TYPE`\u003cbr\u003e  Example: `latest /item:bmi`  \u003c/br\u003e                                                                            |","lastModifiedDate":"2024-04-06"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"| Exit bot     | `exit`                                                                                                                                 |","lastModifiedDate":"2024-04-06"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"## Frequently Asked Questions","lastModifiedDate":"2024-04-06"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"## Glossary","lastModifiedDate":"2024-04-06"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"| Term                           | Definition                                                                                                                                                            |","lastModifiedDate":"2024-04-06"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"|--------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-04-06"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"| Object-Oriented Programming    | A programming paradigm aiming used to guide the the analysis and structure of solutions by programmers in a specific way. \u003cbr\u003e [*Go Back*](#glossary-usage) \u003c/br\u003e     |","lastModifiedDate":"2024-04-06"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"| Hyperlinks                     | A reference to data that a user can follow by clicking on, which can point to an entire document or specific part of document. \u003cbr\u003e[*Go Back*](#glossary-usage) \u003c/br\u003e |","lastModifiedDate":"2024-04-06"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"}],"authorContributionMap":{"rouvinerh":198}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"## Table of Contents","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"* [Acknowledgements](#acknowledgements)","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"* [Introduction](#introduction)","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"* [Design](#design)","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"* [Commands and Implementation](#commands-and-implementation)","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"* [Appendix: Requirements](#appendix-requirements)","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"* [Appendix: Manual Testing](#appendix-manual-testing)","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"* [Frequently Asked Questions](#frequently-asked-questions)","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"Our team has referenced [Address Book (Level-3)](https://github.com/se-edu/addressbook-level3) referenced for their [User Guide (UG)](https://se-education.org/addressbook-level3/UserGuide.html) and [Developer Guide (DG)](https://se-education.org/addressbook-level3/DeveloperGuide.html) to better structure our own Developer Guide.","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"- The `java.util.Scanner` class from the Java Standard Library is used for reading user input.","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"- The `JUnit 5` testing framework is used for writing and running unit tests.","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"- {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"## Introduction","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"The purpose of this guide is to provide an explanation for all the functions and internal workings in PulsePilot. This enables any technical readers to get a detailed understanding of the application\u0027s implementation, making it easier for them to contribute to the project or adapt it according to their preferences.","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"## Design","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"* [Overview of Components](#overview-of-components)","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"* [UI](#ui-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    * [Handler](#handler)","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    * [Output](#output)","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"* [Workout](#workout-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    * [WorkoutList](#workout-list)","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    * [Gym](#gym)","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"        * [GymStation](#gym-station)","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        * [GymSet](#gym-set)","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    * [Run](#run)","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"* [Health](#health-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"    * [HealthList](#health-list)","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"    * [Bmi](#bmi)","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    * [Period](#period)","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    * [Appointment](#appointment)","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"* [Utility](#utility-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    * [Parser](#parser)","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    * [Validation](#validation)","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    * [CustomExceptions](#custom-exceptions)","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    * [Filters](#filters)","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"* [Storage](#storage-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"    * [LogFile](#log-file)","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"    * [DataFile](#data-file)","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"* [PulsePilot](#pulsepilot-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"* [Constants](#constants-package)","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"### Overview of Components","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"The application follows an Object-Oriented Design approach, with separate classes for handling different components of the application, such as user input, output, exercise logging, and health data management.","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"![Architecture Diagram](img/architecture_diagram.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"The **_Architecture Diagram_** given above explains the high-level design of the PulsePilot.","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"`Main` is responsible for the initialising, processing of user input and termination of the bot. It creates a `PulsePilot` instance.","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"The application can be further broken down into the following packages:","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"- `Ui`: The user interface of PulsePilot.","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"- `Storage`: Contains the data storage components for PulsePilot.","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"- `Health`: Stores health-related information.","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"- `Workout`: Stores workout-related information.","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"- `Utility`: Contains utility functions, such as input parsing and validation.","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"- `Constants`: Contains all constants used in PulsePilot.","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"### UI Package","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"The `UI` package contains `Handler` and `Output`, which are responsible for handling user input and printing of output fo the screen respectively.","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"#### Handler","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"The main entry point of the application is the `Handler` class, used to handle user input. When the user starts the bot, the steps are as follows:","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"1. `initialiseBot()` is called, and it prompts the user to enter their name, which is used throughout the bot.","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"2. `initialiseScanner()` is used to create the singleton `Scanner` instance to read user input.","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"3. When the user enters input, it is passed to `processInput()`, which determines the type of command inputted.","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"4. Once the correct input has been determined, it is passed to the relevant handle function. For example, a `workout` command is passed to `handleWorkout()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"On termination of the bot, `destroyScanner()` is called to close the `Scanner` created, and `terminateBot()` is called to save the data stored within the bot and exit gracefully.","lastModifiedDate":"2024-04-03"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"#### Output","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"The `Output` class is responsible for printing messages, prompts, errors and other information to the terminal for the user.","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"{To include description and `Output` class diagram}","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"### Workout Package","lastModifiedDate":"2024-04-03"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"1. `Workout` is a class that stores the date of the workout.","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"2. `Run` is a subclass of Workout and stores the distance, time, pace, and date of the run.","lastModifiedDate":"2024-04-03"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"3. `Gym` is a subclass of Workout and stores the date and an array of `GymStation` objects","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"4. `GymStation` stores the name of the gym station, number of sets, and an array of `GymSet` objects.","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"5. `GymSet` stores the weight and repetitions for a particular set.","lastModifiedDate":"2024-04-03"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"6. `WorkoutList` is a class that stores an array list different `Workout` objects using ArrayList.","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"#### Workout List","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"{Include `WorkoutList` description}","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"#### Gym","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"{Include `Gym` description}","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"##### Gym Station","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"{Include `GymStation` description}","lastModifiedDate":"2024-04-03"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"##### Gym Set","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"{Include `GymSet` description}","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"#### Run","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"{Include `Run` description}","lastModifiedDate":"2024-04-03"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"### Health Package","lastModifiedDate":"2024-04-03"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"The Health component consists of `Health`, `HealthList`, `Bmi`, `Period`, and `Appointment`.","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":149,"author":{"gitId":"j013n3"},"content":"1. `Health` class stores date.","lastModifiedDate":"2024-03-28"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"2. `HealthList`class stores separate lists for different `Health` objects using ArrayList. It includes methods to add, delete, view history of the various `Health`lists.","lastModifiedDate":"2024-04-03"},{"lineNumber":151,"author":{"gitId":"j013n3"},"content":"3. `Bmi`class stores bmi attributes (i.e. height, weight, date, bmi value and bmi category).","lastModifiedDate":"2024-03-28"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"4. `Period`class stores period attributes (i.e. start date of period, end date of period, period length and cycle length).","lastModifiedDate":"2024-04-03"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"5. `Appointment`class stores appointment attributes (i.e. date, time, appointment description). Primarily, `Appointment` has all necessary getter methods to access the attributes.","lastModifiedDate":"2024-04-03"},{"lineNumber":154,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"#### Health List","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"**Attributes**","lastModifiedDate":"2024-04-03"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"1. `logFile`: Represents a log file for logging health-related activities. ","lastModifiedDate":"2024-04-03"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"2. `BMIS`: ArrayList containing BMI records. ","lastModifiedDate":"2024-04-03"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"3. `APPOINTMENTS`: ArrayList containing appointment records.","lastModifiedDate":"2024-04-03"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"4. `PERIODS`: ArrayList containing period records.","lastModifiedDate":"2024-04-03"},{"lineNumber":164,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":165,"author":{"gitId":"j013n3"},"content":"**Methods:**","lastModifiedDate":"2024-04-03"},{"lineNumber":166,"author":{"gitId":"j013n3"},"content":"1. `addBmi(Bmi bmi)`: Adds a BMI object to the list of BMIs. ","lastModifiedDate":"2024-04-03"},{"lineNumber":167,"author":{"gitId":"j013n3"},"content":"2. `showCurrentBmi()`: Prints the most recently added BMI record. ","lastModifiedDate":"2024-04-03"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"3. `showBmiHistory()`: Prints all BMI entries recorded. ","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"4. `addPeriod(Period period)`: Adds a period record to the list of periods. ","lastModifiedDate":"2024-04-03"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"5. `showLatestPeriod()`: Prints the latest period record added. ","lastModifiedDate":"2024-04-03"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"6. `showPeriodHistory()`: Prints all period entries tracked. ","lastModifiedDate":"2024-04-03"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"7. `printLatestThreeCycles()`: Prints the latest three period objects from the periods list. ","lastModifiedDate":"2024-04-03"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"8. `getPeriods()`: Retrieves the list of period records. ","lastModifiedDate":"2024-04-03"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"9. `getBmis()`: Retrieves the list of BMI records.","lastModifiedDate":"2024-04-03"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"10. `getAppointments()`: Retrieves the list of appointment records. ","lastModifiedDate":"2024-04-03"},{"lineNumber":176,"author":{"gitId":"j013n3"},"content":"11. `getPeriodSize()`: Retrieves the number of periods recorded. ","lastModifiedDate":"2024-04-03"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"12. `getPeriod(int index)`: Gets the period object at the specified index. ","lastModifiedDate":"2024-04-03"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"13. `predictNextPeriodStartDate()`: Predicts the start date of the next period based on the average cycle length of the last three cycles. ","lastModifiedDate":"2024-04-03"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"14. `clearHealthLists()`: Clears the lists of BMIs, periods, and appointments. ","lastModifiedDate":"2024-04-03"},{"lineNumber":180,"author":{"gitId":"j013n3"},"content":"15. `getPeriodsSize()`: Retrieves the size of the periods list. ","lastModifiedDate":"2024-04-03"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"16. `getBmisSize()`: Retrieves the size of the BMIs list. ","lastModifiedDate":"2024-04-03"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"17. `deleteBmi(int index)`: Deletes a BMI record based on the index. ","lastModifiedDate":"2024-04-03"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"18. `deletePeriod(int index)`: Deletes a period record based on the index. ","lastModifiedDate":"2024-04-03"},{"lineNumber":184,"author":{"gitId":"j013n3"},"content":"19. `addAppointment(Appointment appointment)`: Adds an appointment to the list of appointments. ","lastModifiedDate":"2024-04-03"},{"lineNumber":185,"author":{"gitId":"j013n3"},"content":"20. `deleteAppointment(int index)`: Deletes an appointment based on the index.","lastModifiedDate":"2024-04-03"},{"lineNumber":186,"author":{"gitId":"j013n3"},"content":"21. `showAppointmentList()`: Prints all appointment entries tracked. ","lastModifiedDate":"2024-04-03"},{"lineNumber":187,"author":{"gitId":"j013n3"},"content":"22. `showLatestAppointment()`: Prints the latest appointment record added.","lastModifiedDate":"2024-04-03"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"#### BMI","lastModifiedDate":"2024-04-02"},{"lineNumber":192,"author":{"gitId":"j013n3"},"content":"**Attributes**","lastModifiedDate":"2024-04-03"},{"lineNumber":193,"author":{"gitId":"j013n3"},"content":"1. `height`: A double value representing the height.","lastModifiedDate":"2024-04-03"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"2. `weight`: A double value representing the weight.","lastModifiedDate":"2024-04-03"},{"lineNumber":195,"author":{"gitId":"j013n3"},"content":"3. `bmiValue`: A double value representing the calculated BMI value.","lastModifiedDate":"2024-04-03"},{"lineNumber":196,"author":{"gitId":"j013n3"},"content":"4. `bmiCategory`: A String representing the BMI category","lastModifiedDate":"2024-04-03"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"5. `date`: A LocalDate object representing the date.","lastModifiedDate":"2024-04-03"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":199,"author":{"gitId":"j013n3"},"content":"**Methods:**","lastModifiedDate":"2024-04-03"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"1. `Bmi(String height, String weight, String date)`: The constructor of the Bmi class, which takes height, weight, and date as string parameters.","lastModifiedDate":"2024-04-03"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"2. `getBmiValue()`: Returns the calculated BMI value as a string.","lastModifiedDate":"2024-04-03"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"3. `getHeight()`: Returns the height value as a string.","lastModifiedDate":"2024-04-03"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"4. `getWeight()`: Returns the weight value as a string.","lastModifiedDate":"2024-04-03"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"5. `calculateBmiValue()`: Calculates the BMI value based on the provided height and weight.","lastModifiedDate":"2024-04-03"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"6. `getBmiCategory(double bmiValue)`: Determines and returns the BMI category as a string based on the calculated BMI value.","lastModifiedDate":"2024-04-03"},{"lineNumber":206,"author":{"gitId":"j013n3"},"content":"7. `toString()`: Returns a string representation of the Bmi object.","lastModifiedDate":"2024-04-03"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"#### Period","lastModifiedDate":"2024-04-02"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":212,"author":{"gitId":"j013n3"},"content":"**Attributes**","lastModifiedDate":"2024-04-03"},{"lineNumber":213,"author":{"gitId":"j013n3"},"content":"1. `startDate`: Represents the start date of the period ","lastModifiedDate":"2024-04-03"},{"lineNumber":214,"author":{"gitId":"j013n3"},"content":"2. `endDate`: Represents the end date of the period ","lastModifiedDate":"2024-04-03"},{"lineNumber":215,"author":{"gitId":"j013n3"},"content":"3. `periodLength`: Stores the length of the period in days ","lastModifiedDate":"2024-04-03"},{"lineNumber":216,"author":{"gitId":"j013n3"},"content":"4. `cycleLength`: Stores the length of the menstrual cycle.","lastModifiedDate":"2024-04-03"},{"lineNumber":217,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":218,"author":{"gitId":"j013n3"},"content":"**Methods:**","lastModifiedDate":"2024-04-03"},{"lineNumber":219,"author":{"gitId":"j013n3"},"content":"1. `Period(String stringStartDate, String stringEndDate)`: The constructor of Period class which takes start date and end date of period.","lastModifiedDate":"2024-04-03"},{"lineNumber":220,"author":{"gitId":"j013n3"},"content":"2. `getStartDate()`: Retrieves the start date of the period.","lastModifiedDate":"2024-04-03"},{"lineNumber":221,"author":{"gitId":"j013n3"},"content":"3. `getEndDate()`: Retrieves the end date of the period","lastModifiedDate":"2024-04-03"},{"lineNumber":222,"author":{"gitId":"j013n3"},"content":"4. `getPeriodLength()`: Retrieves the length of the period","lastModifiedDate":"2024-04-03"},{"lineNumber":223,"author":{"gitId":"j013n3"},"content":"5. `calculatePeriodLength()`: Calculates the length of the period in days.","lastModifiedDate":"2024-04-03"},{"lineNumber":224,"author":{"gitId":"j013n3"},"content":"6. `setCycleLength(LocalDate nextStartDate)`: Sets the cycle length of the current period based on the start date of the next period.","lastModifiedDate":"2024-04-03"},{"lineNumber":225,"author":{"gitId":"j013n3"},"content":"7. `nextCyclePrediction()`: Predicts the start date of the next period based on the average cycle length obtained from the sum of the latest three menstrual cycle lengths.","lastModifiedDate":"2024-04-03"},{"lineNumber":226,"author":{"gitId":"j013n3"},"content":"8. `printNextCyclePrediction(LocalDate nextPeriodStartDate)`: Prints a message indicating the number of days until the predicted start date of the next period, or how many days late the period is.","lastModifiedDate":"2024-04-03"},{"lineNumber":227,"author":{"gitId":"j013n3"},"content":"9. `toString()`: Returns a string representation of the Period object, including the start date, end date, and period length and cycle length if present.","lastModifiedDate":"2024-04-03"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"#### Appointment","lastModifiedDate":"2024-04-02"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":233,"author":{"gitId":"j013n3"},"content":"**Attributes**","lastModifiedDate":"2024-04-03"},{"lineNumber":234,"author":{"gitId":"syj02"},"content":"1. `date`: Represents the date of the appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":235,"author":{"gitId":"syj02"},"content":"2. `time`: Represents the time of the appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":236,"author":{"gitId":"syj02"},"content":"3. `description`: Stores a description of the appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":237,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":238,"author":{"gitId":"j013n3"},"content":"**Methods:**","lastModifiedDate":"2024-04-03"},{"lineNumber":239,"author":{"gitId":"syj02"},"content":"1. `Appointment(String stringDate, String stringTime, String description)`: The constructor of Appointment which takes date, time, and description.","lastModifiedDate":"2024-04-04"},{"lineNumber":240,"author":{"gitId":"syj02"},"content":"2. `getDate()`: Retrieves the date of the appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":241,"author":{"gitId":"syj02"},"content":"3. `getTime()`: Retrieves the time of the appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":242,"author":{"gitId":"syj02"},"content":"4. `getDescription()`: Retrieves the description of the appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":243,"author":{"gitId":"syj02"},"content":"5. `toString()`: Returns a string representation of the Appointment object, including the date, time, and description.","lastModifiedDate":"2024-04-04"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"### Utility Package","lastModifiedDate":"2024-04-03"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"The `Utility` package includes classes and methods that handle exceptions, user input parsing, user input validation, and the various filter strings using enumerations.","lastModifiedDate":"2024-04-03"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"It consists of `CustomExceptions`, `Filters`, `Parser` and `Validation` classes.","lastModifiedDate":"2024-04-03"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"{Include `Utility` class diagram}","lastModifiedDate":"2024-04-03"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"#### Parser","lastModifiedDate":"2024-04-02"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"{Include `Parser` description}","lastModifiedDate":"2024-04-03"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"#### Validation","lastModifiedDate":"2024-04-02"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"{Include `Validation` description}","lastModifiedDate":"2024-04-03"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"#### Custom Exceptions","lastModifiedDate":"2024-04-02"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"{Include `CustomException` description}","lastModifiedDate":"2024-04-03"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"#### Filters","lastModifiedDate":"2024-04-02"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"{Include `Filters` description}","lastModifiedDate":"2024-04-03"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"### Storage Package","lastModifiedDate":"2024-04-03"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"`Storage` contains `DataFile` and `LogFile`. This component handles all logging of commands used and writing of data stored within PulsePilot to an external data file. The reading of the data file is also done here.","lastModifiedDate":"2024-04-03"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"{Include `Storage` class diagram}","lastModifiedDate":"2024-04-03"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":287,"author":{"gitId":"syj02"},"content":"The Storage component consists of LogFile, DataFile, and DataType.","lastModifiedDate":"2024-04-03"},{"lineNumber":288,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"#### Log File","lastModifiedDate":"2024-04-02"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"#### Data File","lastModifiedDate":"2024-04-02"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":298,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"### PulsePilot Package","lastModifiedDate":"2024-04-03"},{"lineNumber":300,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":302,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"### Constants Package","lastModifiedDate":"2024-04-03"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"## Commands and Implementation","lastModifiedDate":"2024-04-03"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"* [Workout](#workout)","lastModifiedDate":"2024-04-02"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"    * [Add Run](#add-run)","lastModifiedDate":"2024-04-02"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"    * [Add Gym](#add-gym)","lastModifiedDate":"2024-04-02"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"* [Health](#health)","lastModifiedDate":"2024-04-02"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"    * [Add Period](#add-period)","lastModifiedDate":"2024-04-02"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"    * [Add BMI](#add-bmi)","lastModifiedDate":"2024-04-02"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"    * [Add Appointment](#add-appointment)","lastModifiedDate":"2024-04-02"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"    * [Make Period Prediction](#make-period-prediction)","lastModifiedDate":"2024-04-03"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"* [View History](#view-history)","lastModifiedDate":"2024-04-02"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"* [View Latest](#view-latest)","lastModifiedDate":"2024-04-02"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"* [Delete Item](#delete-item)","lastModifiedDate":"2024-04-02"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"* [Storage of Data](#storage-of-data)","lastModifiedDate":"2024-04-02"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"### Workout","lastModifiedDate":"2024-04-02"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"#### Add Run","lastModifiedDate":"2024-04-02"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"\u003ccode style\u003d\"color: #D85D43;\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"WORKOUT /e:run /d:[distance] /t:[time] /date:[date]","lastModifiedDate":"2024-04-03"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"\u003c/code\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"- `[distance]` is a 2 **decimal place positive number** representing the number of kilometers covered.","lastModifiedDate":"2024-04-03"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"- `[time]` is in `HH:MM:SS` or `MM:SS` format with positive integers, representing the amount of time taken for the run.","lastModifiedDate":"2024-04-03"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"    - If the time taken is **25 minutes and 20 seconds**: Use `25:20`.","lastModifiedDate":"2024-04-03"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"    - If the time taken is **1 hour, 20 minutes and 30 seconds**: Use `01:20:30`.","lastModifiedDate":"2024-04-03"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"- `[date]` is in `DD-MM-YYYY` format. **THIS IS AN OPTIONAL PARAMETER**.","lastModifiedDate":"2024-04-03"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"##### Run Sequence","lastModifiedDate":"2024-04-03"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"1. User input is passed to `Handler.processInput()`, which determines the command used is `workout`, thus passing the input to `Handler.handleWorkout()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"2. `Handler.handleWorkout()` determines the type of exercise which is `run`, and calls the `Parser.parseRunInput()` method to process the user\u0027s input.","lastModifiedDate":"2024-04-03"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"3. `Parser.parseRunInput()` splits the input using `Parser.splitRunInput()`. It then validates each input using `Validation.validateRunInput()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"    - `CustomExceptions.InsufficientInput` is thrown if either not enough parameters are specified or blank parameters are found.","lastModifiedDate":"2024-04-03"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"    - `CustomExceptions.InvalidInput` is thrown if the parameters passed in are invalid and do not follow the stipulated format.","lastModifiedDate":"2024-04-03"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"4. If valid, a new `Run` object is created with the split user input.","lastModifiedDate":"2024-04-03"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"5. The `Run` constructor adds the newly created object into `WorkoutList.WORKOUTS` and `WorkoutList.RUNS`.","lastModifiedDate":"2024-04-03"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"6. The `Run` object is passed to `Output.printAddRun()` and a message acknowledging the successful adding is printed to the screen.","lastModifiedDate":"2024-04-03"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"This is the sequence diagram for adding a run:","lastModifiedDate":"2024-04-03"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"![Run Sequence Diagram](img/run_sequence_diagram.png)","lastModifiedDate":"2024-04-03"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"`validateRunInput` uses the `Validation` class to check the parameters specified when adding a Run. It follows the sequence diagram below:","lastModifiedDate":"2024-04-04"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"![Run Validation Sequence Diagram](img/run_validation_sequence_diagram.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"#### Add Gym","lastModifiedDate":"2024-04-02"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"\u003ccode style\u003d\"color: #D85D43;\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"WORKOUT /e:gym /n:[number_of_stations] /date:[date]","lastModifiedDate":"2024-04-03"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"\u003c/code\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"- `[number_of_stations]` is a **positive integer** representing the number of gym stations done.","lastModifiedDate":"2024-04-03"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"- `[date]` is in `DD-MM-YYYY` format. **THIS IS AN OPTIONAL PARAMETER**.","lastModifiedDate":"2024-04-03"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"The bot will then prompt the user for the specific gym details in this format:","lastModifiedDate":"2024-04-03"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"\u003ccode style\u003d\"color: #D85D43;\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"[station_name] /s:[number_of_sets] /r:[number_of_repetitions] /w:[weight]","lastModifiedDate":"2024-04-03"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"\u003c/code\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"- `[station_name]` is a string containing **only alphanumeric characters and spaces**, representing the station name.","lastModifiedDate":"2024-04-03"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"- `[number_of_sets]` is a **positive integer** representing the number of sets done for the current station.","lastModifiedDate":"2024-04-03"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"- `[number_of_repetitions]` is a **positive integer** representing the number of repetitions done for the current station.","lastModifiedDate":"2024-04-03"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"- `[weight]` is a string containing **positive integers separated by commas**, representing the weight done for each set in kilograms.","lastModifiedDate":"2024-04-03"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"    - For example, if the user has done 3 sets of 10kg, 20kg and 15kg, the string entered is `10,20,15`.","lastModifiedDate":"2024-04-03"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"    - **No spaces can be present in this string**.","lastModifiedDate":"2024-04-03"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"Example of Gym Station:","lastModifiedDate":"2024-04-03"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"\u003ccode style\u003d\"color: #D85D43;\"\u003eBench Press /s:2 /r:3 /w:100,200 \u003c/code\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"- Station name is `Bench Press`.","lastModifiedDate":"2024-04-03"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"- User has done **2 sets of 3 repetitions**.","lastModifiedDate":"2024-04-03"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"- The first set was done using 100kg, and the second using 200kg.","lastModifiedDate":"2024-04-03"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"\u003e NOTE: The number of sets entered matches the number of weights added. If 4 sets have been done, the bot expects 4 positive inters separated by commas as the `weights` input.","lastModifiedDate":"2024-04-03"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"##### Gym Sequence","lastModifiedDate":"2024-04-03"},{"lineNumber":395,"author":{"gitId":"JustinSoh"},"content":"Below is the sequence diagram for adding a gym and the reference diagram","lastModifiedDate":"2024-04-04"},{"lineNumber":396,"author":{"gitId":"JustinSoh"},"content":"\u003cdiv style\u003d\"display: flex; \"\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":397,"author":{"gitId":"JustinSoh"},"content":"    \u003cimg src\u003d\"./img/gym_overall_sequence_diagram.png\" alt\u003d\"Image 1\" style\u003d\"width: 45%;\"\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":398,"author":{"gitId":"JustinSoh"},"content":"    \u003cimg src\u003d\"./img/gym_parse_gym_station_input_sequence_diagram.png\" alt\u003d\"Par\" style\u003d\"width: 55%;\"\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":399,"author":{"gitId":"JustinSoh"},"content":"\u003c/div\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"1. User input is passed to `Handler.processInput()`, which determines the command used is `workout`, thus passing the input to `Handler.handleWorkout()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"2. `Handler.handleWorkout()` determines the type of exercise which is `gym`, and calls the `Parser.parseGymInput()` method to process the user\u0027s input.","lastModifiedDate":"2024-04-03"},{"lineNumber":403,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"3. `Parser.parseGymInput()` splits the input using `Parser.splitGymInput()`. It then validates each input using `Validation.validateRunInput()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"    - `CustomExceptions.InsufficientInput` is thrown if either not enough parameters are specified or blank parameters are found.","lastModifiedDate":"2024-04-03"},{"lineNumber":406,"author":{"gitId":"rouvinerh"},"content":"    - `CustomExceptions.InvalidInput` is thrown if the parameters passed in are invalid and do not follow the stipulated format.","lastModifiedDate":"2024-04-03"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":408,"author":{"gitId":"rouvinerh"},"content":"4. If valid, a new `Gym` object is created with the split user input.","lastModifiedDate":"2024-04-03"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"5. The `Gym` constructor adds the newly created object into `WorkoutList.WORKOUTS` and `WorkoutList.GYMS`.","lastModifiedDate":"2024-04-03"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"6. `Parser.parseGymStationInput()` is then called to get the user\u0027s input for each station done.","lastModifiedDate":"2024-04-03"},{"lineNumber":413,"author":{"gitId":"rouvinerh"},"content":"    - This method calls `Output.printGymStationPrompt()` to print the details required from the user.","lastModifiedDate":"2024-04-03"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"7. `Validation.splitAndValidateGymStationInput` is called to both split and validate the user\u0027s input for the gym station.","lastModifiedDate":"2024-04-03"},{"lineNumber":416,"author":{"gitId":"rouvinerh"},"content":"    - This method calls `Validation.validateWeightsArray` to ensure the `weights` input is valid.","lastModifiedDate":"2024-04-03"},{"lineNumber":417,"author":{"gitId":"rouvinerh"},"content":"    - `CustomExceptions.InsufficientInput` is thrown if either not enough parameters are specified or blank parameters are found.","lastModifiedDate":"2024-04-03"},{"lineNumber":418,"author":{"gitId":"rouvinerh"},"content":"    - `CustomExceptions.InvalidInput` is thrown if the parameters passed in are invalid and do not follow the stipulated format.","lastModifiedDate":"2024-04-03"},{"lineNumber":419,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"8. If valid, parameters are converted into either `int` for the number of repetitions and sets, or `Arraylist\u003cInteger\u003e` for the weights array. The parameters are then passed to `gym.addStation` to add a `GymStation` object to the new `Gym` object.","lastModifiedDate":"2024-04-03"},{"lineNumber":421,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"9. `Output.printAddGym()` is then called to print the message acknowledging the successful adding of a new `Gym` object.","lastModifiedDate":"2024-04-03"},{"lineNumber":423,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":424,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":425,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":426,"author":{"gitId":"JustinSoh"},"content":"--- ","lastModifiedDate":"2024-04-04"},{"lineNumber":427,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"### Health","lastModifiedDate":"2024-04-02"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"#### Add Period","lastModifiedDate":"2024-04-02"},{"lineNumber":431,"author":{"gitId":"j013n3"},"content":"\u003ccode style\u003d\"color: #D85D43;\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":432,"author":{"gitId":"j013n3"},"content":"HEALTH /h:period /start:[start_date] /end:[end_date]","lastModifiedDate":"2024-04-03"},{"lineNumber":433,"author":{"gitId":"j013n3"},"content":"\u003c/code\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":434,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":435,"author":{"gitId":"j013n3"},"content":"- `[start_date]`  and `[end_date]` are in DD-MM-YYYY format.","lastModifiedDate":"2024-04-03"},{"lineNumber":436,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":437,"author":{"gitId":"rouvinerh"},"content":"##### Period Sequence","lastModifiedDate":"2024-04-03"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":439,"author":{"gitId":"j013n3"},"content":"The sequence diagram below illustrates the process of period prediction.","lastModifiedDate":"2024-04-03"},{"lineNumber":440,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":441,"author":{"gitId":"j013n3"},"content":"1. The Handler class receives `userInput` through `Handler.processInput()` which calls `Handler.handleHealth` to handle health-related operations.","lastModifiedDate":"2024-04-03"},{"lineNumber":442,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":443,"author":{"gitId":"j013n3"},"content":"2. `Parser.extractSubstringaFromSpecificIndex()` is then called to extract `typeOfHealth`, in this case, `prediction`.","lastModifiedDate":"2024-04-03"},{"lineNumber":444,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":445,"author":{"gitId":"j013n3"},"content":"3. The Handler class then calls `Parser.parsePredictionInput()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":446,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":447,"author":{"gitId":"j013n3"},"content":"4. `HealthList.getPeriodSize()` is then called to retrieve the size of `Periods` to ensure sufficient `Period` inputs are present for prediction.","lastModifiedDate":"2024-04-03"},{"lineNumber":448,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":449,"author":{"gitId":"j013n3"},"content":"5. `HealthList.printLatestThreeCycles()` prints the user\u0027s latest three menstrual cycles.","lastModifiedDate":"2024-04-03"},{"lineNumber":450,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":451,"author":{"gitId":"j013n3"},"content":"6. `HealthList.predictNextPeriodStartDate()` gets the predicted start date by calling `Period.nextCyclePrediction()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":452,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":453,"author":{"gitId":"j013n3"},"content":"7. `Period.getLastThreeCycleLengths()` is called to find the sum of the latest three cycle lengths before returning to `Period.nextCyclePrediction()` for necessary calculation to obtain the predicted start date.","lastModifiedDate":"2024-04-03"},{"lineNumber":454,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":455,"author":{"gitId":"j013n3"},"content":"8. The `Parser` class calls `Period.printNextCyclePrediction()` with the predicted start date as a parameter. This method prints a string indicating the number of days until the predicted start date of the next period, or how many days late the period is if the current date is after the predicted start date.","lastModifiedDate":"2024-04-03"},{"lineNumber":456,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":457,"author":{"gitId":"syj02"},"content":"![Period Sequence Diagram](img/period_sequence.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":458,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":459,"author":{"gitId":"syj02"},"content":"![Period Validation Diagram](img/period_validation.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":460,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":461,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":462,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":463,"author":{"gitId":"rouvinerh"},"content":"#### Add BMI","lastModifiedDate":"2024-04-03"},{"lineNumber":464,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":465,"author":{"gitId":"syj02"},"content":"\u003ccode style\u003d\"color: #D85D43;\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":466,"author":{"gitId":"syj02"},"content":"HEALTH /h:bmi /height:[height] /weight:[weight] /date:[date]","lastModifiedDate":"2024-04-03"},{"lineNumber":467,"author":{"gitId":"syj02"},"content":"\u003c/code\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":468,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":469,"author":{"gitId":"syj02"},"content":"- `[height]` is a 2 **decimal place positive number** representing the user\u0027s height.","lastModifiedDate":"2024-04-03"},{"lineNumber":470,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":471,"author":{"gitId":"syj02"},"content":"- `[weight]`is a 2 **decimal place positive number** representing the user\u0027s weight.","lastModifiedDate":"2024-04-03"},{"lineNumber":472,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":473,"author":{"gitId":"syj02"},"content":"- `[date]` is in `DD-MM-YYYY` format (i.e. `19-03-2024`).","lastModifiedDate":"2024-04-03"},{"lineNumber":474,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":475,"author":{"gitId":"rouvinerh"},"content":"##### BMI Sequence","lastModifiedDate":"2024-04-03"},{"lineNumber":476,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":477,"author":{"gitId":"j013n3"},"content":"The sequence diagram below shows how a `Bmi` object is added to `BMIS`.","lastModifiedDate":"2024-04-03"},{"lineNumber":478,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":479,"author":{"gitId":"j013n3"},"content":"1. Upon receiving `userInput` in `Handler.processInput()`, `Handler.handleHealth()` is called.","lastModifiedDate":"2024-04-03"},{"lineNumber":480,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":481,"author":{"gitId":"j013n3"},"content":"2. `Parser.extractSubstringaFromSpecificIndex()` is then called to extract `typeOfHealth`, in this case, `bmi`.","lastModifiedDate":"2024-04-03"},{"lineNumber":482,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":483,"author":{"gitId":"j013n3"},"content":"3. The Handler class then calls `Parser.parseBmiInput()`, passing in `userInput`.","lastModifiedDate":"2024-04-03"},{"lineNumber":484,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":485,"author":{"gitId":"j013n3"},"content":"4. `Parser.splitBmiInput` splits the input and returns `bmiDetails` which consists of height, weight and date.","lastModifiedDate":"2024-04-03"},{"lineNumber":486,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":487,"author":{"gitId":"j013n3"},"content":"5. The `Parser` class calls `Validation.validateBmiInput` to validate `bmiDetails` using `Validation.validateDataInput()` and `Validation.validateDateNotAfterToday()` methods.","lastModifiedDate":"2024-04-03"},{"lineNumber":488,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":489,"author":{"gitId":"j013n3"},"content":"6. Upon successful validation, a new `Bmi` object is created based on `bmiDetails` with `bmiValue` obtained from `Bmi.calculateBmiValue()` and the corresponding BMI category obtained from `Bmi.getBmiCategory()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":490,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":491,"author":{"gitId":"j013n3"},"content":"7. `HealthList.addBmi()` adds the newly created `Bmi` into `BMIS`.","lastModifiedDate":"2024-04-03"},{"lineNumber":492,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":493,"author":{"gitId":"j013n3"},"content":"8. `Output.printAddBmi()` prints `Bmi` string containing height, weight, date, BMI and BMI category to user.","lastModifiedDate":"2024-04-03"},{"lineNumber":494,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":495,"author":{"gitId":"j013n3"},"content":"![Bmi Sequence Diagram](img/bmi_sequence.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":496,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":497,"author":{"gitId":"j013n3"},"content":"![Bmi Validation Sequence Diagram](img/bmi_validation.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":498,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":499,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":500,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":501,"author":{"gitId":"rouvinerh"},"content":"#### Add Appointment","lastModifiedDate":"2024-04-03"},{"lineNumber":502,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":503,"author":{"gitId":"syj02"},"content":"\u003ccode style\u003d\"color: #D85D43;\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":504,"author":{"gitId":"syj02"},"content":"HEALTH /h:appointment /date:[date] /time:[time] /description:[description]","lastModifiedDate":"2024-04-03"},{"lineNumber":505,"author":{"gitId":"syj02"},"content":"\u003c/code\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":506,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":507,"author":{"gitId":"syj02"},"content":"- `[date]` is in `DD-MM-YYYY` format representing the date of the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":508,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":509,"author":{"gitId":"syj02"},"content":"- `[time]` is in `HH:mm` format representing the time of the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":510,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":511,"author":{"gitId":"syj02"},"content":"- `[description]` is a string  representing the details of the appointment. The string can only contain alphanumeric characters and spaces.","lastModifiedDate":"2024-04-03"},{"lineNumber":512,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":513,"author":{"gitId":"rouvinerh"},"content":"##### Appointment Sequence","lastModifiedDate":"2024-04-03"},{"lineNumber":514,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":515,"author":{"gitId":"syj02"},"content":"1. User input is passed to `Handler.processInput()`, which determines the command used is `health`, thus passing the input to `Handler.handleHealth()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":516,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":517,"author":{"gitId":"syj02"},"content":"2. `Handler.handleHealth()` determines the type of health which is `appointment`, and calls the `Parser.parseAppointmentInput()` method to process the user\u0027s input.","lastModifiedDate":"2024-04-03"},{"lineNumber":518,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":519,"author":{"gitId":"syj02"},"content":"3. `Parser.parseAppointmentInput()` splits the input using `Parser.splitAppointmentDetails()`. It then validates each input using `Validation.validateAppointmentDetails()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":520,"author":{"gitId":"syj02"},"content":"    - `CustomExceptions.InsufficientInput` is thrown if either not enough parameters are specified or blank parameters are found.","lastModifiedDate":"2024-04-03"},{"lineNumber":521,"author":{"gitId":"syj02"},"content":"    - `CustomExceptions.InvalidInput` is thrown if the parameters passed in are invalid and do not follow the stipulated format.","lastModifiedDate":"2024-04-03"},{"lineNumber":522,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":523,"author":{"gitId":"syj02"},"content":"4. If valid, a new `Appointment` object is created with the split user input.","lastModifiedDate":"2024-04-03"},{"lineNumber":524,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":525,"author":{"gitId":"syj02"},"content":"5. The `Appointment` constructor adds the newly created object into `HealthList.APPOINTMENTS`.","lastModifiedDate":"2024-04-03"},{"lineNumber":526,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":527,"author":{"gitId":"syj02"},"content":"6. The `Appointment` object is passed to `Output.printAddAppointment()` and a message acknowledging the successful adding is printed to the screen.","lastModifiedDate":"2024-04-03"},{"lineNumber":528,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":529,"author":{"gitId":"syj02"},"content":"![Appointment Sequence Diagram](img/appointment_sequence.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":530,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":531,"author":{"gitId":"syj02"},"content":"![Appointment Validation Diagram](img/appointment_validation.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":532,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":533,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":534,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":535,"author":{"gitId":"rouvinerh"},"content":"#### Make Period Prediction","lastModifiedDate":"2024-04-03"},{"lineNumber":536,"author":{"gitId":"j013n3"},"content":"\u003ccode style\u003d\"color: #D85D43;\"\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":537,"author":{"gitId":"j013n3"},"content":"HEALTH /h:prediction ","lastModifiedDate":"2024-04-03"},{"lineNumber":538,"author":{"gitId":"j013n3"},"content":"\u003c/code\u003e","lastModifiedDate":"2024-04-03"},{"lineNumber":539,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":540,"author":{"gitId":"j013n3"},"content":"The sequence diagram below illustrates the process of period prediction.","lastModifiedDate":"2024-04-03"},{"lineNumber":541,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":542,"author":{"gitId":"j013n3"},"content":"1. The Handler class receives `userInput` through `Handler.processInput()` which calls `Handler.handleHealth` to handle health-related operations.","lastModifiedDate":"2024-04-03"},{"lineNumber":543,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":544,"author":{"gitId":"j013n3"},"content":"2. `Parser.extractSubstringaFromSpecificIndex()` is then called to extract `typeOfHealth`, in this case, `prediction`.","lastModifiedDate":"2024-04-03"},{"lineNumber":545,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":546,"author":{"gitId":"j013n3"},"content":"3. The Handler class then calls `Parser.parsePredictionInput()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":547,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":548,"author":{"gitId":"j013n3"},"content":"4. `HealthList.getPeriodSize()` is then called to retrieve the size of `Periods` to ensure sufficient `Period` inputs are present for prediction.","lastModifiedDate":"2024-04-03"},{"lineNumber":549,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":550,"author":{"gitId":"j013n3"},"content":"5. `HealthList.printLatestThreeCycles()` prints the user\u0027s latest three menstrual cycles.","lastModifiedDate":"2024-04-03"},{"lineNumber":551,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":552,"author":{"gitId":"j013n3"},"content":"6. `HealthList.predictNextPeriodStartDate()` gets the predicted start date by calling `Period.nextCyclePrediction()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":553,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":554,"author":{"gitId":"j013n3"},"content":"7. `Period.getLastThreeCycleLengths()` is called to find the sum of the latest three cycle lengths before returning to `Period.nextCyclePrediction()` for necessary calculation to obtain the predicted start date.","lastModifiedDate":"2024-04-03"},{"lineNumber":555,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":556,"author":{"gitId":"j013n3"},"content":"8. The `Parser` class calls `Period.printNextCyclePrediction()` with the predicted start date as a parameter. This method prints a string indicating the number of days until the predicted start date of the next period, or how many days late the period is if the current date is after the predicted start date.","lastModifiedDate":"2024-04-03"},{"lineNumber":557,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":558,"author":{"gitId":"j013n3"},"content":"![Prediction Sequence Diagram](img/prediction_sequence_diagram.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":559,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":560,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":561,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":562,"author":{"gitId":"rouvinerh"},"content":"### View History","lastModifiedDate":"2024-04-02"},{"lineNumber":563,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":564,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":565,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":566,"author":{"gitId":"rouvinerh"},"content":"### View Latest","lastModifiedDate":"2024-04-02"},{"lineNumber":567,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":568,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":569,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":570,"author":{"gitId":"rouvinerh"},"content":"### Delete Item","lastModifiedDate":"2024-04-02"},{"lineNumber":571,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":572,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":573,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":574,"author":{"gitId":"rouvinerh"},"content":"### Storage of Data","lastModifiedDate":"2024-04-02"},{"lineNumber":575,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":576,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":577,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":578,"author":{"gitId":"rouvinerh"},"content":"## Appendix: Requirements","lastModifiedDate":"2024-04-02"},{"lineNumber":579,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":580,"author":{"gitId":"rouvinerh"},"content":"* [Product Scope](#product-scope)","lastModifiedDate":"2024-04-02"},{"lineNumber":581,"author":{"gitId":"rouvinerh"},"content":"    * [Target User Profile](#target-user-profile)","lastModifiedDate":"2024-04-02"},{"lineNumber":582,"author":{"gitId":"rouvinerh"},"content":"    * [Value Proposition](#value-proposition)","lastModifiedDate":"2024-04-02"},{"lineNumber":583,"author":{"gitId":"rouvinerh"},"content":"* [User Stores](#user-stories)","lastModifiedDate":"2024-04-02"},{"lineNumber":584,"author":{"gitId":"rouvinerh"},"content":"* [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2024-04-02"},{"lineNumber":585,"author":{"gitId":"rouvinerh"},"content":"* [Glossary](#glossary)","lastModifiedDate":"2024-04-02"},{"lineNumber":586,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":587,"author":{"gitId":"rouvinerh"},"content":"### Product scope","lastModifiedDate":"2024-04-02"},{"lineNumber":588,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":589,"author":{"gitId":"rouvinerh"},"content":"#### Target user profile","lastModifiedDate":"2024-04-02"},{"lineNumber":590,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":591,"author":{"gitId":"j013n3"},"content":"Outpatients who need to monitor their health activity and health parameters.","lastModifiedDate":"2024-03-28"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":593,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":594,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":595,"author":{"gitId":"rouvinerh"},"content":"#### Value proposition","lastModifiedDate":"2024-04-02"},{"lineNumber":596,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":597,"author":{"gitId":"rouvinerh"},"content":"PulsePilot is a health monitoring application designed to bridge the gap between medical professionals and patients during outpatient recovery.","lastModifiedDate":"2024-04-02"},{"lineNumber":598,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":599,"author":{"gitId":"rouvinerh"},"content":"PulsePilot offers outpatients the capability to input and track a range of health activities, encompassing both aerobic and anaerobic exercises, alongside crucial health parameters such as BMI and menstrual cycles.","lastModifiedDate":"2024-04-03"},{"lineNumber":600,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":601,"author":{"gitId":"rouvinerh"},"content":"Simultaneously, PulsePilot facilitates access to this vital data for various healthcare professionals, ensuring comprehensive and seamless support in guiding outpatient recovery processes.","lastModifiedDate":"2024-04-03"},{"lineNumber":602,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":603,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":604,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":605,"author":{"gitId":"rouvinerh"},"content":"### User Stories","lastModifiedDate":"2024-04-02"},{"lineNumber":606,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":607,"author":{"gitId":"rouvinerh"},"content":"| Version | As a ...              | So that I can ...                                     | I want to ...                         |","lastModifiedDate":"2024-04-03"},{"lineNumber":608,"author":{"gitId":"rouvinerh"},"content":"|---------|-----------------------|-------------------------------------------------------|---------------------------------------|","lastModifiedDate":"2024-04-03"},{"lineNumber":609,"author":{"gitId":"rouvinerh"},"content":"| 1.0     | gym enthusiast        | track my gym sessions                                 | enter my gym stats                    |","lastModifiedDate":"2024-04-03"},{"lineNumber":610,"author":{"gitId":"rouvinerh"},"content":"| 1.0     | runner                | see my relative speed for each run                    | see my running pace                   |","lastModifiedDate":"2024-04-03"},{"lineNumber":611,"author":{"gitId":"rouvinerh"},"content":"| 1.0     | runner                | track my running progress over time                   | log my runs                           |","lastModifiedDate":"2024-04-03"},{"lineNumber":612,"author":{"gitId":"rouvinerh"},"content":"| 1.0     | health conscious user | track change in my weight over time                   | calculate my BMI                      |","lastModifiedDate":"2024-04-03"},{"lineNumber":613,"author":{"gitId":"rouvinerh"},"content":"| 1.0     | female user           | monitor any deviations from my normal menstrual cycle | track my menstrual cycle              |","lastModifiedDate":"2024-04-03"},{"lineNumber":614,"author":{"gitId":"rouvinerh"},"content":"| 2.0     | runner                | quickly view my most recent run details               | see my latest run                     |","lastModifiedDate":"2024-04-03"},{"lineNumber":615,"author":{"gitId":"rouvinerh"},"content":"| 2.0     | gym enthusiast        | quickly view my most recent gym session               | see my latest gym session             | ","lastModifiedDate":"2024-04-03"},{"lineNumber":616,"author":{"gitId":"rouvinerh"},"content":"| 2.0     | gym enthusiast        | accurately track my progress and strength gains       | enter varying weights for sets        | ","lastModifiedDate":"2024-04-03"},{"lineNumber":617,"author":{"gitId":"rouvinerh"},"content":"| 2.0     | female user           | plan ahead and better manage my health                | p#D85D43ict my next period start date | ","lastModifiedDate":"2024-04-03"},{"lineNumber":618,"author":{"gitId":"rouvinerh"},"content":"| 2.0     | injured user          | remember the appointments I have                      | track my medical appointments         |","lastModifiedDate":"2024-04-03"},{"lineNumber":619,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":620,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":621,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":622,"author":{"gitId":"rouvinerh"},"content":"### Non-Functional Requirements","lastModifiedDate":"2024-04-02"},{"lineNumber":623,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":624,"author":{"gitId":"rouvinerh"},"content":"- **Usability**: The application should have a user-friendly command-line interface with clear instructions and prompts for user input.","lastModifiedDate":"2024-04-03"},{"lineNumber":625,"author":{"gitId":"rouvinerh"},"content":"- **Reliability**: The application should handle invalid or incomplete user input gracefully, providing appropriate error messages and prompting the user for correct input.","lastModifiedDate":"2024-04-03"},{"lineNumber":626,"author":{"gitId":"rouvinerh"},"content":"- **Maintainability**: The codebase should follow best practices for Object-Oriented Programming, including proper separation of concerns, modularization, and code documentation.","lastModifiedDate":"2024-04-03"},{"lineNumber":627,"author":{"gitId":"rouvinerh"},"content":"- **Testability**: The application should have comprehensive unit tests to  ensure correct functionality and enable easier maintenance and future enhancements.","lastModifiedDate":"2024-04-03"},{"lineNumber":628,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":629,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":630,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":631,"author":{"gitId":"rouvinerh"},"content":"### Glossary","lastModifiedDate":"2024-04-02"},{"lineNumber":632,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":633,"author":{"gitId":"L5-Z"},"content":"- **Run**: An exercise activity involving running or jogging, typically characterized by distance, duration, and date.","lastModifiedDate":"2024-03-27"},{"lineNumber":634,"author":{"gitId":"rouvinerh"},"content":"-  **Gym**: An exercise activity involving various strength training exercises or workouts performed at a gym or fitness center.","lastModifiedDate":"2024-04-03"},{"lineNumber":635,"author":{"gitId":"rouvinerh"},"content":"- **BMI (Body Mass Index)**: A measure of body fat based on height and weight, used to assess overall health and fitness.","lastModifiedDate":"2024-04-03"},{"lineNumber":636,"author":{"gitId":"L5-Z"},"content":"- **Menstrual Period**: A recurring physiological event in females, characterized by the start and end dates.","lastModifiedDate":"2024-03-27"},{"lineNumber":637,"author":{"gitId":"rouvinerh"},"content":"- **Medical Appointment**: An arrangement with a doctor, physiotherapist, or healthcare professional, to meet at a certain time and place.","lastModifiedDate":"2024-04-03"},{"lineNumber":638,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":639,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":640,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":641,"author":{"gitId":"rouvinerh"},"content":"## Appendix: Manual Testing","lastModifiedDate":"2024-04-02"},{"lineNumber":642,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":643,"author":{"gitId":"rouvinerh"},"content":"* [Launching and Termination](#launching-and-termination-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":644,"author":{"gitId":"rouvinerh"},"content":"* [Workout](#workout-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":645,"author":{"gitId":"rouvinerh"},"content":"    * [Run](#run-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":646,"author":{"gitId":"rouvinerh"},"content":"    * [Gym](#gym-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":647,"author":{"gitId":"rouvinerh"},"content":"* [Health](#health-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":648,"author":{"gitId":"rouvinerh"},"content":"    * [Period](#period-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":649,"author":{"gitId":"rouvinerh"},"content":"    * [Prediction](#prediction-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":650,"author":{"gitId":"rouvinerh"},"content":"    * [BMI](#bmi-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":651,"author":{"gitId":"rouvinerh"},"content":"    * [Appointment](#appointment-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":652,"author":{"gitId":"rouvinerh"},"content":"* [Storage](#storage-testing)","lastModifiedDate":"2024-04-03"},{"lineNumber":653,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":654,"author":{"gitId":"-"},"content":"{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}","lastModifiedDate":"2020-05-24"},{"lineNumber":655,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":656,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":657,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":658,"author":{"gitId":"rouvinerh"},"content":"### Launching and Termination Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":659,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":660,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":661,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":662,"author":{"gitId":"rouvinerh"},"content":"### Workout Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":663,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":664,"author":{"gitId":"rouvinerh"},"content":"#### Run Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":665,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":666,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":667,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":668,"author":{"gitId":"rouvinerh"},"content":"#### Gym Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":669,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":670,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":671,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":672,"author":{"gitId":"rouvinerh"},"content":"### Health Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":673,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":674,"author":{"gitId":"rouvinerh"},"content":"#### Period Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":675,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":676,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":677,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":678,"author":{"gitId":"rouvinerh"},"content":"#### Prediction Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":679,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":680,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":681,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":682,"author":{"gitId":"rouvinerh"},"content":"#### BMI Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":683,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":684,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":685,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":686,"author":{"gitId":"rouvinerh"},"content":"#### Appointment Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":687,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":688,"author":{"gitId":"JustinSoh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":689,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":690,"author":{"gitId":"rouvinerh"},"content":"### Storage Testing","lastModifiedDate":"2024-04-03"},{"lineNumber":691,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":692,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":693,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":694,"author":{"gitId":"rouvinerh"},"content":"## Frequently Asked Questions","lastModifiedDate":"2024-04-02"},{"lineNumber":695,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":696,"author":{"gitId":"raajamani"},"content":"1. **Q: How do I set up the development environment for the project?**  ","lastModifiedDate":"2024-03-31"},{"lineNumber":697,"author":{"gitId":"raajamani"},"content":"   A: You can set up the development environment by first cloning the repository to your local system. Then, load the project into your chosen IDE (we recommend IntelliJ IDEA).","lastModifiedDate":"2024-03-31"},{"lineNumber":698,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":699,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"j013n3":112,"JustinSoh":23,"rouvinerh":429,"L5-Z":9,"syj02":87,"raajamani":5,"-":34}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"# PulsePilot","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"PulsePilot is a **desktop app for tracking health-related information, optimised for users via a Command Line Interface (CLI)**. With the ability to type fast, users will be able to track their gym and run workouts, as well as their Body Mass Index (BMI), medical appointments and menstrual cycles. ","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"rouvinerh":2,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"PulsePilot is a **desktop app for tracking health-related information, optimised for users via a Command Line Interface (CLI)**. If one can type fast, you can key in and track health-related information faster than traditional GUI applications installed on your phone or computer.","lastModifiedDate":"2024-03-16"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"## Table of Contents","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"* [Quick Start](#quick-start)","lastModifiedDate":"2024-03-16"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"* [Notes About Command Format](#notes-about-command-format)","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"* [Commands](#commands)","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"  * [Workout: Run](#workout-run)","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"  * [Workout: Gym](#workout-gym)","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    * [Adding Gym Stations](#adding-gym-stations)","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"  * [Health: BMI](#health-bmi)","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"  * [Health: Period](#health-period)","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"  * [Health: Appointment](#health-appointment)","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"  * [History](#history)","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"  * [Latest](#latest)","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"  * [Delete](#delete)","lastModifiedDate":"2024-04-06"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"  * [Help](#help)","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"  * [Exit](#exit)","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"* [Logging](#logging)","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"* [Saving Data](#saving-data)","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"* [Frequently Asked Questions (FAQ)](#faq)","lastModifiedDate":"2024-03-16"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"* [Command Summary](#command-summary)","lastModifiedDate":"2024-03-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"1. Ensure that you have the latest Java 11.","lastModifiedDate":"2024-03-16"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"2. Download the latest `pulsepilot.jar`.","lastModifiedDate":"2024-03-16"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"3. Copy the file to the folder you want to use as the home folder for PulsePilot.","lastModifiedDate":"2024-03-16"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"4. Open a command terminal (either cmd.exe or bash), cd to the folder with `pulsepilot.jar` in it, and use `java -jar pulsepilot.jar` to run the application.","lastModifiedDate":"2024-03-16"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"5. The welcome message for PulsePilot should be printed to the screen.","lastModifiedDate":"2024-03-16"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"6. Type commands in the command line and press Enter to execute it. Using `help` and pressing Enter will print the help message.","lastModifiedDate":"2024-03-16"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"The bot will prompt you for your name before starting. ","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-16"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":" _              _","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"|_)    |  _  _ |_) o  |  _ _|_","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"|  |_| | _\u003e (/_|   |  | (_) |_","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"Engaging orbital thrusters...","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"PulsePilot on standby","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"What is your name, voyager?","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"Jason","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"Welcome aboard, Captain Jason","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"Tips: Enter \u0027help\u0027 to view the pilot manual!","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"Initiating FTL jump sequence...","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"FTL jump completed.","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"Terminal primed. Command inputs are now accepted...","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"## Notes About Command Format","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"* Parameters in `UPPER_CASE` are the parameters to be **supplied by the user**.","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"* Parameters in square brackets are optional.","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"  * `[/d:DATE]` means that the `DATE` parameter is **optional**.","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2024-03-16"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"---","lastModifiedDate":"2024-04-04"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"## Commands","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"### Workout: Run","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"Adds a new Run workout to track. ","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"Format: `workout /e:run /d:DISTANCE /t:TIME [/date:DATE]`","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"* `DISTANCE` is a **2 decimal point positive number** (i.e. `15.24`) representing the distance ran in **kilometers**.","lastModifiedDate":"2024-04-06"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"* `TIME` is in `[HH]:MM:SS` format (i.e. `25:30`). The `HH` representing hours is **optional**.","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"* `DATE` is in `DD-MM-YYYY` format (i.e. `19-03-2024`). The date is optional, and if not specified, defaults to `NA`.","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"Examples: `workout /e:run /d:5.15 /t:25:03 /date:25-03-2023` OR `workout /e:run /d:5.15 /t:25:03`.","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"workout /e:run /d:5.15 /t:25:03 /date:25-03-2023","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-04"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"Successfully added a new run session","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"Type\tTime\t\tDistance\tPace\t\tDate","lastModifiedDate":"2024-04-04"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"run   \t25:03     \t5.15      \t4:52/km   \t2023-03-25  ","lastModifiedDate":"2024-04-04"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-04"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"workout /e:run /d:5.15 /t:25:03","lastModifiedDate":"2024-04-04"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"Successfully added a new run session","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"Type\tTime\t\tDistance\tPace\t\tDate","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"run   \t25:03     \t5.15      \t4:52/km   \tNA          ","lastModifiedDate":"2024-04-04"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"### Workout: Gym","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"Adds a new gym session to track. ","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"Format: `workout /e:gym /n:NUMBER_OF_STATIONS [/date:DATE]`","lastModifiedDate":"2024-04-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"* `NUMBER_OF_STATIONS` is a **positive integer**  representing the number of stations for one Gym session.","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"* `DATE` is in `DD-MM-YYYY` format (i.e. `19-03-2024`). The date is optional, and if not specified, defaults to `NA`.","lastModifiedDate":"2024-04-04"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"Examples: `workout /e:gym /n:2 /date:25-03-2023` OR `workout /e:gym /n:4`","lastModifiedDate":"2024-04-04"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"#### Adding Gym Stations","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"Upon entry of the `workout /e:gym` command, the bot will prompt for further details for each station done:","lastModifiedDate":"2024-04-04"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"Format: `STATION_NAME /s:SET /r:REPS /w:WEIGHT`","lastModifiedDate":"2024-03-20"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"* All parameters must be provided in correct order as shown above.","lastModifiedDate":"2024-03-20"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"* `STATION_NAME` is a **string**  representing the name of the gym station.","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"* `SET` is a **positive integer**  representing the number of sets done for one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"* `REPS` is a **positive integer**  representing the number of repetitions done for one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"* `WEIGHT` is a **positive integer**  representing the weight used for one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"Examples: `Bench Press /s:4 /r:10 /w:75,75,75,75`","lastModifiedDate":"2024-04-06"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"workout /e:gym /n:2 /date:25-03-2023","lastModifiedDate":"2024-04-04"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"Please enter the details of station 1. (Format: e.g. Bench Press /s:2 /r:4 /w:10,20)","lastModifiedDate":"2024-04-04"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"bench press /s:2 /r:4 /w:10,20","lastModifiedDate":"2024-04-04"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"Please enter the details of station 2. (Format: e.g. Bench Press /s:2 /r:4 /w:10,20)","lastModifiedDate":"2024-04-04"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"squat /s:2 /r:4 /w:10,20","lastModifiedDate":"2024-04-04"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"Successfully added a new gym session","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"Station 1 bench press: 2 sets","lastModifiedDate":"2024-04-04"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"\t- Set 1. 4 reps at 10 KG","lastModifiedDate":"2024-04-04"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"\t- Set 2. 4 reps at 20 KG","lastModifiedDate":"2024-04-04"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"Station 2 squat: 2 sets","lastModifiedDate":"2024-04-04"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"\t- Set 1. 4 reps at 10 KG","lastModifiedDate":"2024-04-04"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"\t- Set 2. 4 reps at 20 KG","lastModifiedDate":"2024-04-04"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"\u003e Note that the number of weights must equal to the number of sets! For example, if you have done 2 sets, PulsePilot expects 2 weights specified like `10,10`. ","lastModifiedDate":"2024-04-06"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":157,"author":{"gitId":"j013n3"},"content":"___","lastModifiedDate":"2024-04-04"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"### Health: BMI","lastModifiedDate":"2024-03-20"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"Calculates user\u0027s Body Mass Index (BMI) based on height and weight from user\u0027s input.","lastModifiedDate":"2024-04-04"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"Format: `health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE`","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":165,"author":{"gitId":"j013n3"},"content":"* Parameters after `health` can be in any order. ","lastModifiedDate":"2024-04-04"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"* `HEIGHT` is a **2 decimal point number in metres** (i.e. `1.71`) representing the user\u0027s height.","lastModifiedDate":"2024-03-20"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"* `WEIGHT` is a **2 decimal point number in kilograms** (i.e. `60.50`) representing the user’s weight.","lastModifiedDate":"2024-03-20"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"* `DATE` is in `DD-MM-YYYY` format (i.e. `19-03-2024`).","lastModifiedDate":"2024-03-19"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"Examples:","lastModifiedDate":"2024-03-19"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"* `health /h:bmi /height:1.70 /weight:75.42 /date:19-03-2024`","lastModifiedDate":"2024-03-20"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"* `health /h:bmi /date:19-03-2024 /height:1.70 /weight:75.42`","lastModifiedDate":"2024-04-04"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-03-19"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"health /h:bmi /height:1.70 /weight:75.42 /date:19-03-2024","lastModifiedDate":"2024-03-20"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"Added: bmi | 1.70 | 75.42 | 19-03-2024","lastModifiedDate":"2024-03-20"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"2024-03-19","lastModifiedDate":"2024-03-19"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"Your BMI is 26.1","lastModifiedDate":"2024-03-20"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"You\u0027re overweight.","lastModifiedDate":"2024-03-20"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-03-19"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"The ranges for BMI are as follows:","lastModifiedDate":"2024-04-06"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"- BMI \u003c 18.5: Underweight","lastModifiedDate":"2024-04-06"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"- 18.5 \u003c\u003d BMI \u003c 24.9: Normal","lastModifiedDate":"2024-04-06"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"- 24.9 \u003c\u003d BMI \u003c 29.9: Overweight","lastModifiedDate":"2024-04-06"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"- 29.9 \u003c\u003d BMI \u003c 39.9: Obese","lastModifiedDate":"2024-04-06"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"- BMI \u003e\u003d 39.9: Severely Obese","lastModifiedDate":"2024-04-06"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"___","lastModifiedDate":"2024-04-04"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"### Health: Period","lastModifiedDate":"2024-03-20"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"Tracks the start and end of user\u0027s menstrual cycle.","lastModifiedDate":"2024-03-19"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"Format: `health /h:period /start:START_DATE /end:END_DATE`","lastModifiedDate":"2024-03-20"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"* Parameters after `health` can be in any order.","lastModifiedDate":"2024-04-04"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"* `START_DATE` is `DD-MM-YYYY` format (i.e. `19-03-2024`) representing the first day of period flow which is also the first day of the cycle.","lastModifiedDate":"2024-04-04"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"* `END_DATE` is `DD-MM-YYYY` format (i.e. `19-03-2024`) representing the last day of period flow.","lastModifiedDate":"2024-04-04"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"Examples:","lastModifiedDate":"2024-03-19"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"* `health /h:period /start:09-03-2022 /end:16-03-2022`","lastModifiedDate":"2024-03-20"},{"lineNumber":207,"author":{"gitId":"j013n3"},"content":"* `health /start:09-03-2022 /end:16-03-2022 /h:period`","lastModifiedDate":"2024-04-04"},{"lineNumber":208,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"health /h:period /start:09-03-2022 /end:16-03-2022","lastModifiedDate":"2024-03-20"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"Added: period | 09-03-2022 | 16-03-2022","lastModifiedDate":"2024-03-20"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"Period Start: 2022-03-09 Period End: 2022-03-16","lastModifiedDate":"2024-03-20"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"Period Length: 8 days","lastModifiedDate":"2024-03-20"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":217,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-03-19"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":219,"author":{"gitId":"j013n3"},"content":"Predicts user\u0027s next period start date. ","lastModifiedDate":"2024-04-03"},{"lineNumber":220,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":221,"author":{"gitId":"j013n3"},"content":"Format: `health /h:prediction`","lastModifiedDate":"2024-04-03"},{"lineNumber":222,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":223,"author":{"gitId":"j013n3"},"content":"* All parameters must be provided in the correct order.","lastModifiedDate":"2024-04-04"},{"lineNumber":224,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":225,"author":{"gitId":"j013n3"},"content":"Expected Output:","lastModifiedDate":"2024-04-03"},{"lineNumber":226,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-04-03"},{"lineNumber":227,"author":{"gitId":"j013n3"},"content":"health /h:prediction","lastModifiedDate":"2024-04-03"},{"lineNumber":228,"author":{"gitId":"j013n3"},"content":"Period Start: 2024-01-09 Period End: 2024-01-16","lastModifiedDate":"2024-04-03"},{"lineNumber":229,"author":{"gitId":"j013n3"},"content":"Period Length: 8 days","lastModifiedDate":"2024-04-03"},{"lineNumber":230,"author":{"gitId":"j013n3"},"content":"Cycle Length: 32 days","lastModifiedDate":"2024-04-03"},{"lineNumber":231,"author":{"gitId":"j013n3"},"content":"Period Start: 2024-02-10 Period End: 2024-02-16","lastModifiedDate":"2024-04-03"},{"lineNumber":232,"author":{"gitId":"j013n3"},"content":"Period Length: 7 days","lastModifiedDate":"2024-04-03"},{"lineNumber":233,"author":{"gitId":"j013n3"},"content":"Cycle Length: 28 days","lastModifiedDate":"2024-04-03"},{"lineNumber":234,"author":{"gitId":"j013n3"},"content":"Period Start: 2024-03-09 Period End: 2024-03-14","lastModifiedDate":"2024-04-03"},{"lineNumber":235,"author":{"gitId":"j013n3"},"content":"Period Length: 6 days","lastModifiedDate":"2024-04-03"},{"lineNumber":236,"author":{"gitId":"j013n3"},"content":"Your next cycle\u0027s predicted start date is 2024-04-08, in 4 days.","lastModifiedDate":"2024-04-04"},{"lineNumber":237,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-04-03"},{"lineNumber":238,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":240,"author":{"gitId":"syj02"},"content":"___","lastModifiedDate":"2024-04-04"},{"lineNumber":241,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":242,"author":{"gitId":"syj02"},"content":"### Health: Appointment","lastModifiedDate":"2024-04-03"},{"lineNumber":243,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":244,"author":{"gitId":"syj02"},"content":"Tracks the user\u0027s medical appointments.","lastModifiedDate":"2024-04-03"},{"lineNumber":245,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":246,"author":{"gitId":"syj02"},"content":"Format: `health /h:appointment /date:DATE /time:TIME /description:DESCRIPTION`","lastModifiedDate":"2024-04-03"},{"lineNumber":247,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":248,"author":{"gitId":"syj02"},"content":"* Parameters after `health` do not need to be in order.","lastModifiedDate":"2024-04-04"},{"lineNumber":249,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":250,"author":{"gitId":"syj02"},"content":"* `DATE` is a `DD-MM-YYYY` format (i.e. `03-04-2024`) representing the date of the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":251,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":252,"author":{"gitId":"syj02"},"content":"* `TIME` is a `HH:mm` format (i.e. `14:15`) representing the time of the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":254,"author":{"gitId":"syj02"},"content":"* `DESCRIPTION` is a string (i.e. `review checkup with surgeon`) representing the details of the appointment. The string can only contain alphanumeric characters and spaces.","lastModifiedDate":"2024-04-03"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":256,"author":{"gitId":"syj02"},"content":"Examples:","lastModifiedDate":"2024-04-03"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":258,"author":{"gitId":"syj02"},"content":"* `health /h:appointment /date:03-04-2024 /time:14:15 /description:review checkup with surgeon`","lastModifiedDate":"2024-04-03"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":260,"author":{"gitId":"syj02"},"content":"* `health /date:03-04-2024 /description:review checkup with surgeon /time:14:15 /h:appointment`","lastModifiedDate":"2024-04-04"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":262,"author":{"gitId":"syj02"},"content":"Expected Output:","lastModifiedDate":"2024-04-03"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":264,"author":{"gitId":"syj02"},"content":"```","lastModifiedDate":"2024-04-03"},{"lineNumber":265,"author":{"gitId":"syj02"},"content":"health /h:appointment /date:03-04-2024 /time:14:15 /description:review checkup with surgeon","lastModifiedDate":"2024-04-03"},{"lineNumber":266,"author":{"gitId":"syj02"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-03"},{"lineNumber":267,"author":{"gitId":"syj02"},"content":"Added: appointment | 2024-04-03 | 14:15 | review checkup with surgeon","lastModifiedDate":"2024-04-03"},{"lineNumber":268,"author":{"gitId":"syj02"},"content":"On 2024-04-03 at 14:15: review checkup with surgeon","lastModifiedDate":"2024-04-03"},{"lineNumber":269,"author":{"gitId":"syj02"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-03"},{"lineNumber":270,"author":{"gitId":"syj02"},"content":"```","lastModifiedDate":"2024-04-03"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":272,"author":{"gitId":"syj02"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-03"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":274,"author":{"gitId":"syj02"},"content":"---","lastModifiedDate":"2024-04-04"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"### History","lastModifiedDate":"2024-03-20"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":278,"author":{"gitId":"JustinSoh"},"content":"Prints all tracked instances of `run`, `gym`, `workouts`,  `bmi`, `period`, `appointment`.","lastModifiedDate":"2024-04-04"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":280,"author":{"gitId":"syj02"},"content":"Format: `history /item:TYPE`","lastModifiedDate":"2024-04-04"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":282,"author":{"gitId":"JustinSoh"},"content":"* `TYPE` is either `run`, `gym`, `workouts`, `bmi`, `period`, `appointment`.","lastModifiedDate":"2024-04-04"},{"lineNumber":283,"author":{"gitId":"JustinSoh"},"content":"  - `run` shows all entries of runs ","lastModifiedDate":"2024-04-04"},{"lineNumber":284,"author":{"gitId":"JustinSoh"},"content":"  - `gym` shows all entries of gym","lastModifiedDate":"2024-04-04"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"  - `workouts` shows all entries of gym and runs","lastModifiedDate":"2024-04-04"},{"lineNumber":286,"author":{"gitId":"JustinSoh"},"content":"  - `bmi` shows all BMI entries ","lastModifiedDate":"2024-04-04"},{"lineNumber":287,"author":{"gitId":"JustinSoh"},"content":"  - `period` shows all Period entries ","lastModifiedDate":"2024-04-04"},{"lineNumber":288,"author":{"gitId":"JustinSoh"},"content":"  - `appointment` show all Appointment entries","lastModifiedDate":"2024-04-04"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"Examples:","lastModifiedDate":"2024-03-20"},{"lineNumber":291,"author":{"gitId":"JustinSoh"},"content":"* `history /item:workouts`","lastModifiedDate":"2024-04-04"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":296,"author":{"gitId":"JustinSoh"},"content":"history /item:workouts","lastModifiedDate":"2024-04-04"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":298,"author":{"gitId":"JustinSoh"},"content":"Showing all workouts (runs and gyms):","lastModifiedDate":"2024-04-04"},{"lineNumber":299,"author":{"gitId":"JustinSoh"},"content":" Index\tType \tDate        \tDistance\tDuration       \tPace    \tStation   \tSets\tReps\tWeights   ","lastModifiedDate":"2024-04-04"},{"lineNumber":300,"author":{"gitId":"JustinSoh"},"content":"1     \tgym  \t1997-11-20  \t-       \t-              \t-       \tbench press\t2   \t4,4 \t100,120   ","lastModifiedDate":"2024-04-04"},{"lineNumber":301,"author":{"gitId":"JustinSoh"},"content":"      \t     \t            \t        \t               \t        \tsquats    \t2   \t4,4 \t50,60     ","lastModifiedDate":"2024-04-04"},{"lineNumber":302,"author":{"gitId":"JustinSoh"},"content":"2     \trun  \t2023-02-10  \t5.25    \t25:23          \t4:50/km \t-         \t-   \t-   \t-         ","lastModifiedDate":"2024-04-04"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":304,"author":{"gitId":"j013n3"},"content":"```","lastModifiedDate":"2024-03-19"},{"lineNumber":305,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":307,"author":{"gitId":"JustinSoh"},"content":"--- ","lastModifiedDate":"2024-04-04"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"### Latest","lastModifiedDate":"2024-03-20"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":310,"author":{"gitId":"JustinSoh"},"content":"Prints the latest instance of `run`, `gym`, `bmi`, `period`, `appointment`.","lastModifiedDate":"2024-04-04"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":312,"author":{"gitId":"syj02"},"content":"Format: `latest /item:TYPE`","lastModifiedDate":"2024-04-04"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":314,"author":{"gitId":"JustinSoh"},"content":"* `TYPE` is either `run`, `gym`, `bmi` or `period`.","lastModifiedDate":"2024-04-04"},{"lineNumber":315,"author":{"gitId":"JustinSoh"},"content":"  - `run` shows the latest run","lastModifiedDate":"2024-04-04"},{"lineNumber":316,"author":{"gitId":"JustinSoh"},"content":"  - `gym` shows the latest gym","lastModifiedDate":"2024-04-04"},{"lineNumber":317,"author":{"gitId":"JustinSoh"},"content":"  - `bmi` shows the latest BMI","lastModifiedDate":"2024-04-04"},{"lineNumber":318,"author":{"gitId":"JustinSoh"},"content":"  - `period` shows the latest Period","lastModifiedDate":"2024-04-04"},{"lineNumber":319,"author":{"gitId":"JustinSoh"},"content":"  - `appointment` show the latest Appointment","lastModifiedDate":"2024-04-04"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"Examples:","lastModifiedDate":"2024-03-20"},{"lineNumber":322,"author":{"gitId":"JustinSoh"},"content":"* `latest /item:appointment`","lastModifiedDate":"2024-04-04"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":327,"author":{"gitId":"syj02"},"content":"latest /item:period","lastModifiedDate":"2024-04-04"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":329,"author":{"gitId":"JustinSoh"},"content":"On 2023-11-11 at 23:24: this is a testing description","lastModifiedDate":"2024-04-04"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":334,"author":{"gitId":"JustinSoh"},"content":"--- ","lastModifiedDate":"2024-04-04"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"### Delete","lastModifiedDate":"2024-04-06"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"Deletes an item tracked within PulsePilot. ","lastModifiedDate":"2024-04-06"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"Format: `delete /item:TYPE /index:INDEX`","lastModifiedDate":"2024-04-06"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"* `TYPE` is either `run`, `gym`, `bmi` or `period`.","lastModifiedDate":"2024-04-06"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"* `INDEX` represents the index of the item to delete. ","lastModifiedDate":"2024-04-06"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"Expected output:","lastModifiedDate":"2024-04-06"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-04-06"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"history /item:run","lastModifiedDate":"2024-04-06"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-06"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"Your run history:","lastModifiedDate":"2024-04-06"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"Index \tType  \tTime      \tDistance  \tPace      \tDate        ","lastModifiedDate":"2024-04-06"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"1     \trun   \t25:20     \t5.15      \t4:55/km   \t2024-03-28  ","lastModifiedDate":"2024-04-06"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"2     \trun   \t50:20     \t12.15     \t4:09/km   \t2024-03-29  ","lastModifiedDate":"2024-04-06"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-06"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"delete /item:run /index:2","lastModifiedDate":"2024-04-06"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"Removed Run entry with 12.15km at 4:09/km.","lastModifiedDate":"2024-04-06"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"history /item:run","lastModifiedDate":"2024-04-06"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-06"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"Your run history:","lastModifiedDate":"2024-04-06"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"Index \tType  \tTime      \tDistance  \tPace      \tDate        ","lastModifiedDate":"2024-04-06"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"1     \trun   \t25:20     \t5.15      \t4:55/km   \t2024-03-28  ","lastModifiedDate":"2024-04-06"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-06"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-04-06"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-06"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"### Help","lastModifiedDate":"2024-03-20"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"Prints the `help` message. ","lastModifiedDate":"2024-03-20"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"Format: `help`","lastModifiedDate":"2024-03-20"},{"lineNumber":372,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"Expected output:","lastModifiedDate":"2024-03-20"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"help","lastModifiedDate":"2024-03-20"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"Commands List:","lastModifiedDate":"2024-03-20"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":380,"author":{"gitId":"syj02"},"content":"workout /e:run /d:DISTANCE /t:TIME [/date:DATE] - Add a new run","lastModifiedDate":"2024-04-04"},{"lineNumber":381,"author":{"gitId":"syj02"},"content":"workout /e:gym /n:NUMBER_OF_STATIONS [/date:DATE] - Add a new gym workout","lastModifiedDate":"2024-04-04"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE - Add new BMI data","lastModifiedDate":"2024-03-20"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"health /h:period /start:START_DATE /end:END_DATE - Add new period data","lastModifiedDate":"2024-03-20"},{"lineNumber":384,"author":{"gitId":"syj02"},"content":"health /h:prediction - Predicts next period\u0027s start date","lastModifiedDate":"2024-04-04"},{"lineNumber":385,"author":{"gitId":"syj02"},"content":"health /h:appointment /date:DATE /time:TIME /description:DESCRIPTION - Add new appointment data","lastModifiedDate":"2024-04-04"},{"lineNumber":386,"author":{"gitId":"syj02"},"content":"history /item:[run/gym/bmi/period] - Shows history of runs/gyms/bmi records/periods tracked/appointment records","lastModifiedDate":"2024-04-04"},{"lineNumber":387,"author":{"gitId":"syj02"},"content":"latest /item:[run/gym/bmi/period] - Shows latest entry of runs/gyms/bmi records/periods tracked/appointment records","lastModifiedDate":"2024-04-04"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"help - Show this help message","lastModifiedDate":"2024-03-20"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"exit - Exit the program","lastModifiedDate":"2024-03-20"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"### Exit","lastModifiedDate":"2024-03-20"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"Exits the bot gracefully.","lastModifiedDate":"2024-03-20"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"Format: `exit`","lastModifiedDate":"2024-03-20"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"Expected Output:","lastModifiedDate":"2024-03-20"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"exit","lastModifiedDate":"2024-03-20"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"Initiating PulsePilot landing sequence...","lastModifiedDate":"2024-03-20"},{"lineNumber":406,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":407,"author":{"gitId":"rouvinerh"},"content":"PulsePilot successful touchdown","lastModifiedDate":"2024-03-20"},{"lineNumber":408,"author":{"gitId":"rouvinerh"},"content":"See you soon, Captain!","lastModifiedDate":"2024-03-20"},{"lineNumber":409,"author":{"gitId":"rouvinerh"},"content":"____________________________________________________________","lastModifiedDate":"2024-03-20"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"```","lastModifiedDate":"2024-03-20"},{"lineNumber":411,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":413,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":414,"author":{"gitId":"rouvinerh"},"content":"## Logging","lastModifiedDate":"2024-03-20"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":416,"author":{"gitId":"L5-Z"},"content":"The latest logs are written to `pulsepilot_log.txt` once the bot exits. Each time the bot is run, the current ","lastModifiedDate":"2024-04-02"},{"lineNumber":417,"author":{"gitId":"L5-Z"},"content":"`pulsepilot_log.txt` file is overwritten with the most recent logs. The logs record both info messages and any error messages.","lastModifiedDate":"2024-04-02"},{"lineNumber":418,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":419,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":421,"author":{"gitId":"rouvinerh"},"content":"## Saving Data","lastModifiedDate":"2024-03-20"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":423,"author":{"gitId":"L5-Z"},"content":"Data is saved to `pulsepilot_data.txt` once the bot exits. Each time the bot exits, the current ","lastModifiedDate":"2024-04-02"},{"lineNumber":424,"author":{"gitId":"L5-Z"},"content":"`pulsepilot_data.txt` file is overwritten with the most recent data.","lastModifiedDate":"2024-04-02"},{"lineNumber":425,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":426,"author":{"gitId":"L5-Z"},"content":"**Warning:** Should this file be corrupted,there is a slim chance of recovery.","lastModifiedDate":"2024-04-02"},{"lineNumber":427,"author":{"gitId":"L5-Z"},"content":"**Tip:** Ensure that you always have a _backup copy stored safely_ to prevent permanent data loss.","lastModifiedDate":"2024-04-02"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":431,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-24"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":433,"author":{"gitId":"rouvinerh"},"content":"**1.** How do I transfer my data to another computer?","lastModifiedDate":"2024-03-16"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":435,"author":{"gitId":"L5-Z"},"content":"Ensure that the `pulsepilot.jar` is placed in the **same folder** as `pulsepilot_data.txt`. PulsePilot should recognise","lastModifiedDate":"2024-04-02"},{"lineNumber":436,"author":{"gitId":"L5-Z"},"content":"and synchronise your data contents from `pulsepilot_data.txt` if done correctly.","lastModifiedDate":"2024-04-02"},{"lineNumber":437,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":438,"author":{"gitId":"L5-Z"},"content":"**Tip:** Create a _backup copy_ to prior to file transfer to avoid data corruption.","lastModifiedDate":"2024-04-02"},{"lineNumber":439,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":440,"author":{"gitId":"L5-Z"},"content":"**2.** What happens if my data is corrupted?","lastModifiedDate":"2024-04-02"},{"lineNumber":441,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":442,"author":{"gitId":"L5-Z"},"content":"Depending on the severity of corruption, you may experience 2 scenarios:","lastModifiedDate":"2024-04-02"},{"lineNumber":443,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":444,"author":{"gitId":"L5-Z"},"content":"- A full corruption","lastModifiedDate":"2024-04-02"},{"lineNumber":445,"author":{"gitId":"L5-Z"},"content":"```","lastModifiedDate":"2024-04-02"},{"lineNumber":446,"author":{"gitId":"L5-Z"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-02"},{"lineNumber":447,"author":{"gitId":"L5-Z"},"content":" _              _","lastModifiedDate":"2024-04-02"},{"lineNumber":448,"author":{"gitId":"L5-Z"},"content":"|_)    |  _  _ |_) o  |  _ _|_","lastModifiedDate":"2024-04-02"},{"lineNumber":449,"author":{"gitId":"L5-Z"},"content":"|  |_| | _\u003e (/_|   |  | (_) |_","lastModifiedDate":"2024-04-02"},{"lineNumber":450,"author":{"gitId":"L5-Z"},"content":"Engaging orbital thrusters...","lastModifiedDate":"2024-04-02"},{"lineNumber":451,"author":{"gitId":"L5-Z"},"content":"PulsePilot on standby","lastModifiedDate":"2024-04-02"},{"lineNumber":452,"author":{"gitId":"L5-Z"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-02"},{"lineNumber":453,"author":{"gitId":"L5-Z"},"content":"Exception Caught!","lastModifiedDate":"2024-04-02"},{"lineNumber":454,"author":{"gitId":"L5-Z"},"content":"File is corrupted! Ceasing any further data imports...","lastModifiedDate":"2024-04-02"},{"lineNumber":455,"author":{"gitId":"L5-Z"},"content":"Consider deleting \u0027pulsepilot_data.txt\u0027 and trying again!","lastModifiedDate":"2024-04-02"},{"lineNumber":456,"author":{"gitId":"L5-Z"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-02"},{"lineNumber":457,"author":{"gitId":"L5-Z"},"content":"```","lastModifiedDate":"2024-04-02"},{"lineNumber":458,"author":{"gitId":"L5-Z"},"content":"- A partial corruption","lastModifiedDate":"2024-04-02"},{"lineNumber":459,"author":{"gitId":"L5-Z"},"content":"```","lastModifiedDate":"2024-04-02"},{"lineNumber":460,"author":{"gitId":"L5-Z"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-02"},{"lineNumber":461,"author":{"gitId":"L5-Z"},"content":" _              _","lastModifiedDate":"2024-04-02"},{"lineNumber":462,"author":{"gitId":"L5-Z"},"content":"|_)    |  _  _ |_) o  |  _ _|_","lastModifiedDate":"2024-04-02"},{"lineNumber":463,"author":{"gitId":"L5-Z"},"content":"|  |_| | _\u003e (/_|   |  | (_) |_","lastModifiedDate":"2024-04-02"},{"lineNumber":464,"author":{"gitId":"L5-Z"},"content":"Engaging orbital thrusters...","lastModifiedDate":"2024-04-02"},{"lineNumber":465,"author":{"gitId":"L5-Z"},"content":"PulsePilot on standby","lastModifiedDate":"2024-04-02"},{"lineNumber":466,"author":{"gitId":"L5-Z"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-02"},{"lineNumber":467,"author":{"gitId":"L5-Z"},"content":"Terminal primed. Command inputs are now accepted...","lastModifiedDate":"2024-04-02"},{"lineNumber":468,"author":{"gitId":"L5-Z"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-02"},{"lineNumber":469,"author":{"gitId":"L5-Z"},"content":"Exception Caught!","lastModifiedDate":"2024-04-02"},{"lineNumber":470,"author":{"gitId":"L5-Z"},"content":"Error: File is corrupted! Ceasing any further data imports...","lastModifiedDate":"2024-04-02"},{"lineNumber":471,"author":{"gitId":"L5-Z"},"content":"Some data may have been recovered. PulsePilot shall resume.","lastModifiedDate":"2024-04-02"},{"lineNumber":472,"author":{"gitId":"L5-Z"},"content":"____________________________________________________________","lastModifiedDate":"2024-04-02"},{"lineNumber":473,"author":{"gitId":"L5-Z"},"content":"```","lastModifiedDate":"2024-04-02"},{"lineNumber":474,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":475,"author":{"gitId":"rouvinerh"},"content":"In either case, you may want to overwrite/replace the current `pulsepilot_data.txt` with that of your backup in order to restore your data.","lastModifiedDate":"2024-04-04"},{"lineNumber":476,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":477,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":478,"author":{"gitId":"rouvinerh"},"content":"A full corruption indicates permanent and complete data loss. Please delete `pulsepilot_data.txt` and relaunch PulsePilot.","lastModifiedDate":"2024-04-04"},{"lineNumber":479,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":480,"author":{"gitId":"rouvinerh"},"content":"A partial corruption indicates a partial recovery of data up until the point of corruption. We recommend utilising the `history` command to review and discrepancies","lastModifiedDate":"2024-04-04"},{"lineNumber":481,"author":{"gitId":"L5-Z"},"content":"and missing data. You may choose to re-enter the corrupted data to be saved again upon `exit`.","lastModifiedDate":"2024-04-02"},{"lineNumber":482,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":483,"author":{"gitId":"L5-Z"},"content":"(hyperlink for history and exit)","lastModifiedDate":"2024-04-02"},{"lineNumber":484,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-16"},{"lineNumber":485,"author":{"gitId":"raajamani"},"content":"**3.** Is my tracking data private and confidential?","lastModifiedDate":"2024-04-05"},{"lineNumber":486,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":487,"author":{"gitId":"raajamani"},"content":"Yes, your data is secure and stored locally on your machine. PulsePilot does not have any features that would allow it to send your data elsewhere.","lastModifiedDate":"2024-04-05"},{"lineNumber":488,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":489,"author":{"gitId":"raajamani"},"content":"**4.** What Java version is required to run PulsePilot?","lastModifiedDate":"2024-04-05"},{"lineNumber":490,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":491,"author":{"gitId":"raajamani"},"content":"PulsePilot requires at least Java version 11.","lastModifiedDate":"2024-04-05"},{"lineNumber":492,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":493,"author":{"gitId":"raajamani"},"content":"**5.** Can I use the application offline?","lastModifiedDate":"2024-04-05"},{"lineNumber":494,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":495,"author":{"gitId":"raajamani"},"content":"Yes, PulsePilot works perfectly offline. All data are stored on your device for better privacy.","lastModifiedDate":"2024-04-05"},{"lineNumber":496,"author":{"gitId":"raajamani"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":497,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":498,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":499,"author":{"gitId":"-"},"content":"## Command Summary","lastModifiedDate":"2020-05-24"},{"lineNumber":500,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":501,"author":{"gitId":"rouvinerh"},"content":"| Action        | Format, Examples                                                                                      |","lastModifiedDate":"2024-03-16"},{"lineNumber":502,"author":{"gitId":"JustinSoh"},"content":"|---------------|--------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2024-04-05"},{"lineNumber":503,"author":{"gitId":"JustinSoh"},"content":"| Print help    | `help`                                                                                                   |","lastModifiedDate":"2024-04-05"},{"lineNumber":504,"author":{"gitId":"JustinSoh"},"content":"| Add new run   | `workout /e:run /d:DISTANCE /t:TIME [/date:DATE]` Example: `workout /e:run /d:5.24 /t:25:23 /date:19-03-2024` |","lastModifiedDate":"2024-04-05"},{"lineNumber":505,"author":{"gitId":"JustinSoh"},"content":"| Add gym       | `workout /e:gym /n:NUMBER_OF_STATIONS [/date:DATE]` Example: `workout /e:gym /n:4`                       |","lastModifiedDate":"2024-04-05"},{"lineNumber":506,"author":{"gitId":"JustinSoh"},"content":"| Track BMI     | `health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE` Example: `health /h:bmi /height:1.70 /weight:75.42 /date:19-03-2024` |","lastModifiedDate":"2024-04-05"},{"lineNumber":507,"author":{"gitId":"JustinSoh"},"content":"| Track Period  | `health /h:period /start:START_DATE /end:END_DATE` Example: `health /h:period /start:09-03-2022 /end:16-03-2022` |","lastModifiedDate":"2024-04-05"},{"lineNumber":508,"author":{"gitId":"JustinSoh"},"content":"| View history  | `history /item:TYPE` Example: `history /item:run`                                                          |","lastModifiedDate":"2024-04-05"},{"lineNumber":509,"author":{"gitId":"JustinSoh"},"content":"| View latest   | `latest /item:TYPE` Example: `latest /item:bmi`                                                            |","lastModifiedDate":"2024-04-05"},{"lineNumber":510,"author":{"gitId":"JustinSoh"},"content":"| Exit bot      | `exit`                                                                                                   |","lastModifiedDate":"2024-04-05"},{"lineNumber":511,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":512,"author":{"gitId":"rouvinerh"},"content":"###### [Back to table of contents](#table-of-contents)","lastModifiedDate":"2024-04-02"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"j013n3":48,"JustinSoh":35,"rouvinerh":298,"L5-Z":51,"syj02":36,"raajamani":12,"-":33}},{"path":"docs/puml/appointment_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"actor User","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"participant Handler as Handler \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"participant Output as Output \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"participant \"AppointmentList:HealthList\" as AppointmentList","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"User -\u003e Handler: userInput","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"Handler -\u003e Handler : processInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"activate Handler #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"Handler -\u003e Handler : handleHealth()","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"activate Handler #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"Handler -\u003e Parser  : extractSubstringFromSpecificIndex()","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"Parser  --\u003e Handler : typeOfHealth","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"deactivate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"Handler -\u003e Parser : parseAppointmentInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"deactivate Handler #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"Parser -\u003e Parser : splitAppointmentDetails()","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"ref over Parser: validateAppointmentDetails","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"Parser --\u003e Parser : appointmentDetails","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"deactivate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"Parser -\u003e \":Appointment\" **: new","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"activate \":Appointment\" #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"\":Appointment\" --\u003e Parser: newAppointment:Appointment","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"deactivate \":Appointment\" #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"Parser -\u003e AppointmentList : addAppointment()","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"activate AppointmentList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"AppointmentList --\u003e Parser :","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"deactivate AppointmentList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"Parser -\u003e Output : printAddAppointment()","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"Output --\u003e User:","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"deactivate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"syj02":44}},{"path":"docs/puml/appointment_validate.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"mainframe **sd** validateAppointmentDetails","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"participant Validation as Validation \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"Parser -\u003e Validation : validateAppointmentDetails()","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : isEmptyParameterPresent()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateDateInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation : ","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateTimeInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation : ","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"deactivate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"syj02":28}},{"path":"docs/puml/architecture_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"skinparam componentStyle rectangle","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"actor User","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"component {","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"[UI]","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"[Utility]","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"[Health]","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"[Workout]","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"[PulsePilot]","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"[Storage]","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"[Constants]","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"User -d-\u003e [UI]","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"[PulsePilot] -r-\u003e [UI]","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"[UI] -d-\u003e [Utility]","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"[UI] -d-\u003e [Health]","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"[UI] -d-\u003e [Workout]","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"[Utility] -l-\u003e [Health]","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"[Utility] -r-\u003e [Workout]","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"[Utility] -d-\u003e [Storage]","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"[Storage] .u.\u003e [Health]","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"[Storage] .u.\u003e [Workout]","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"[Storage] .u.\u003e [UI]","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"[Storage] .r.\u003e [Output File]","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"[Constants] -r[hidden]-\u003e [Storage]","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"syj02":34}},{"path":"docs/puml/bmi_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"actor User","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"participant Handler as Handler \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"participant HealthList as \"BmiList:HealthList\"","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"participant Output as Output \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"User -\u003e Handler: userInput","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Handler : processInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"activate Handler #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Handler : handleHealth()","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"activate Handler #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Parser  : extractSubstringFromSpecificIndex()","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"Parser  --\u003e Handler : typeOfHealth","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"deactivate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Parser : parseBmiInput","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Parser : splitBmiInput","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"ref over Parser: validateBmiInput","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"deactivate Handler  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"Parser --\u003e Parser : bmiDetails","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"deactivate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"Parser -\u003e \":Bmi\" ** : Bmi","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"activate \":Bmi\" #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"\":Bmi\" -\u003e \":Bmi\" : calculateBmiValue","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"activate \":Bmi\" #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"\":Bmi\" --\u003e \":Bmi\" : bmi","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"deactivate \":Bmi\" #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"j013n3"},"content":"\":Bmi\" -\u003e \":Bmi\" : getBmiCategory","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"activate \":Bmi\" #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"\":Bmi\" --\u003e \":Bmi\" : String","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"deactivate \":Bmi\" #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"\":Bmi\" --\u003e Parser : newBmi:Bmi","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"deactivate \":Bmi\" #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"Parser -\u003e HealthList : addBmi","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"activate HealthList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e Parser :","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"deactivate HealthList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Output : printAddBmi","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"j013n3"},"content":"Output --\u003e User :","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"j013n3"},"content":"deactivate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"j013n3"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"j013n3":56}},{"path":"docs/puml/bmi_validation.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"mainframe **sd** validateBmiInput","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"participant Validation as Validation \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Validation : validateBmiInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"Validation -\u003e Validation : isEmptyParameterPresent()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"Validation -\u003e Validation : validateDateInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"Validation -\u003e Validation : validateDateNotAfterToday()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"j013n3":26}},{"path":"docs/puml/gym_overview_sequence_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"actor User","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"participant Handler as Handler \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"participant Gym as Gym ","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"participant \":WorkoutList\" as WorkoutList","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"User -\u003e Handler: userInput","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"Handler -\u003e Handler : processInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"activate Handler #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"Handler -\u003e Handler : handleWorkout()","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"activate Handler #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"Handler -\u003e Parser  : extractSubstringFromSpecificIndex()","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"Parser  --\u003e Handler : typeOfWorkout:String","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"deactivate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"Handler -\u003e Parser : parseGymInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"Parser -\u003e Parser : splitGymInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"activate Parser #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"Parser --\u003e Parser : gymDetails","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"deactivate Parser #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"ref over Parser: validateGymInput","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"alt #LightBlue date exists","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    create Gym","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"    Parser -\u003e Gym : new(date)","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    activate Gym #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    Gym -\u003e WorkoutList : addGym()","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    activate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    WorkoutList -\u003e WorkoutList : addWorkout()","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    activate WorkoutList #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    WorkoutList --\u003e WorkoutList","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    deactivate WorkoutList #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    WorkoutList --\u003e Gym #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    deactivate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"    Gym --\u003e Parser","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"    deactivate Gym #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"else #LightPink date does not exist","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"    create Gym","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    Parser -\u003e Gym : new()","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"     activate Gym #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"    Gym -\u003e WorkoutList : addGym()","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"    activate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"    WorkoutList -\u003e WorkoutList : addWorkout()","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"    activate WorkoutList #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"    WorkoutList --\u003e WorkoutList","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"    deactivate WorkoutList #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"    WorkoutList --\u003e Gym #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"    deactivate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"    Gym --\u003e Parser","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"    deactivate Gym #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"end","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"ref over Parser : parseGymStationInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"Parser --\u003e Handler ","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"deactivate Parser #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"destroy Gym","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"@enduml","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"JustinSoh":63}},{"path":"docs/puml/gym_parseGymStationInput_sequence_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"mainframe **sd** parseGymStationInput","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"participant Output as Output \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"participant Handler as Handler \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"participant Validation as Validation \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"participant Gym as Gym","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"Parser -\u003e Parser : parseGymStationInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"    activate Parser #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"        loop until i \u003d\u003d number of stations","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"        Parser -\u003e Output : printGymStationPrompt()","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"        activate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"        Output --\u003e Parser : ","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"        deactivate Output #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"        Parser -\u003e Handler: in.nextLine()","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"        activate Handler #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"        Handler --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"        deactivate Handler #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"        Parser -\u003e Validation: splitAndValidateGymStationInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"        activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"        alt #LightBlue Valid Input","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"            Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"        else #LightPink Insufficient Input","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"            Validation --\u003e Parser: InsufficientInputException","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"        else #LightPink Invalid Input","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"            Validation --\u003e Parser: InvalidInputException","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"        end","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"        deactivate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"        Parser -\u003e Validation: validateWeightsArray()","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"        activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"        alt #LightBlue Valid Input","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"            Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"        else #LightPink Invalid Input","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"            Validation --\u003e Parser: InvalidInputException","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"        end","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"        deactivate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"        Parser -\u003e Gym: addGymStation() ","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"        note right : Using the same gym object that has been created in Parser","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"        activate Gym #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"        Gym -\u003e Gym : appendIntoStations()","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"        activate Gym #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        Gym --\u003e Gym : ","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        deactivate Gym #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"        Gym --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"        deactivate Gym #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"        end","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"    Parser --\u003e Parser :  ","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"deactivate Parser #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"JustinSoh":51}},{"path":"docs/puml/period_prediction.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"actor User","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"participant Handler as Handler \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"j013n3"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"j013n3"},"content":"participant HealthList as \"PeriodList: HealthList\"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"j013n3"},"content":"participant Period as Period \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"User -\u003e Handler : userInput","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Handler : processInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"activate Handler #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Handler : handleHealth()","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"activate Handler #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Parser  : extractSubstringFromSpecificIndex()","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"Parser  --\u003e Handler : typeOfHealth","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"deactivate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"Handler -\u003e Parser : parsePredictionInput","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"Parser -\u003e HealthList : getPeriodSize","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"j013n3"},"content":"activate HealthList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e Parser : size","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"deactivate HealthList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"deactivate Handler #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"Parser -\u003e HealthList : printLatestThreeCycles","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"j013n3"},"content":"activate HealthList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e Parser","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"deactivate HealthList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"Parser -\u003e HealthList : predictNextPeriodStartDate","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"activate HealthList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"HealthList -\u003e \":Period\" : nextCyclePrediction","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"activate \":Period\" #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"\":Period\" -\u003e \":Period\" : getLastThreeCycleLengths","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"activate \":Period\" #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"j013n3"},"content":"\":Period\" --\u003e \":Period\" : sumOfCycleLengths","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"deactivate \":Period\" #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"\":Period\" --\u003e HealthList : predicted start date","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"deactivate \":Period\" #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"HealthList --\u003e Parser : predicted start date","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"deactivate HealthList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"Parser -\u003e Period : printNextCyclePrediction","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"activate Period  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"Period --\u003e User :","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"deactivate Period #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"j013n3"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"j013n3":53}},{"path":"docs/puml/period_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"actor User","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"participant Handler as Handler \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"participant Output as Output \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"participant \"PeriodList:HealthList\" as PeriodList","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"User -\u003e Handler: userInput","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"Handler -\u003e Handler : processInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"activate Handler #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"Handler -\u003e Handler : handleHealth()","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"activate Handler #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"Handler -\u003e Parser  : extractSubstringFromSpecificIndex()","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"Parser  --\u003e Handler : typeOfHealth","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"deactivate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"Handler -\u003e Parser : parsePeriodInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"deactivate Handler #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"Parser -\u003e Parser : splitPeriodInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"ref over Parser: validatePeriodInput","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"Parser --\u003e Parser : periodDetails","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"deactivate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"Parser -\u003e \":Period\" **: new","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"activate \":Period\" #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"\":Period\" --\u003e Parser: newPeriod:Period","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"deactivate \":Period\" #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"Parser -\u003e PeriodList : addPeriod()","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"activate PeriodList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"PeriodList --\u003e Parser :","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"deactivate PeriodList  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"Parser -\u003e Output : printAddPeriod()","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"Output --\u003e User:","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"deactivate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"syj02":45}},{"path":"docs/puml/period_validate.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"mainframe **sd** validatePeriodInput","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"participant Validation as Validation \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"Parser -\u003e Validation : validatePeriodInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : isEmptyParameterPresent()","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateDateInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateDateNotAfterToday()","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"Validation -\u003e Validation : validateDateNotAfterToday()","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"deactivate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"syj02":32}},{"path":"docs/puml/run_sequence_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"skinparam sequenceReferenceBackgroundColor lightblue","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"actor User","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant Handler as Handler \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"participant Output as Output \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"participant \":Run\" as Run","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"participant \":WorkoutList\" as WorkoutList","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"User -\u003e Handler: userInput","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate Handler #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Handler : processInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"activate Handler #Salmon","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"Handler --\u003e Handler : handleWorkout()","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"activate Handler #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Parser  : extractSubstringFromSpecificIndex()","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"Parser  --\u003e Handler : typeOfWorkout()","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"deactivate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"Handler -\u003e Parser : parseRunInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"activate Parser  #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"deactivate Handler #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Parser : splitRunInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"ref over Parser: validateRunInput","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"Parser --\u003e Parser : runDetails","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"deactivate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Run: new","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"activate Run #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"Run -\u003e WorkoutList: addRun()","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"activate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"WorkoutList -\u003e WorkoutList: addWorkout()","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"activate WorkoutList #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"WorkoutList --\u003e WorkoutList","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"deactivate WorkoutList #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"WorkoutList --\u003e Run","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"deactivate WorkoutList #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"Run --\u003e Parser: newRun:Run","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"deactivate Run #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Output : printAddRun()","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"activate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"Output --\u003e User:","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"deactivate Output #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"rouvinerh":47}},{"path":"docs/puml/run_validation_sequence_diagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"mainframe **sd** validateRunInput","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"participant Parser as Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"participant Validation as Validation \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"activate Parser  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"Parser -\u003e Validation : validateRunInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"activate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation : isEmptyParameterPresent()","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation : validateRunTimeInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"activate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation  #DarkSalmon","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"alt date !\u003d null","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation : validateDateInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"activate Validation  #Red","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation  #Red","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"Validation -\u003e Validation : validateDateNotAfterToday()","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"activate Validation  #Red","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Validation :","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation  #Red","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"else date \u003d\u003d null","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"Validation --\u003e Parser:","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"deactivate Validation #FFBBBB","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"end","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"rouvinerh":36}},{"path":"src/main/java/constants/ErrorConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package constants;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":" * ErrorConstant class contains constants for various types of errors that may occur in the application.","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":" * The constants are used to provide descriptive error messages to the user when errors occur.","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"public class ErrorConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"    // General Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"    public static final String NEGATIVE_VALUE_ERROR \u003d \"Requires a positive integer!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"    public static final String INVALID_INDEX_DELETE_ERROR \u003d \"Invalid index to delete!\";","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"    // Storage Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"    public static final String SAVE_ERROR \u003d \"File save failed. Write error occurred:\";","lastModifiedDate":"2024-03-25"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"    public static final String LOAD_ERROR \u003d \"File read error:\" + \"Error at \";","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"    public static final String CREATE_FILE_ERROR \u003d \"Unable to create file.\";","lastModifiedDate":"2024-03-25"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"    public static final String CORRUPT_ERROR \u003d \"File is corrupted!\" +","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"            System.lineSeparator() + \"Deleting \u0027pulsepilot_data.txt\u0027 and \u0027pulsepilot_hash.txt\u0027. Try running again!\" +","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"            System.lineSeparator() + UiConstant.PARTITION_LINE;","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"    public static final String DATA_INTEGRITY_ERROR \u003d \"Data file integrity compromised. Exiting.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"    public static final String MISSING_INTEGRITY_ERROR \u003d \"Key files for integrity missing. Exiting.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"    public static final String HASH_ERROR \u003d \"Error occurred while processing file hash.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    // Storage Error for Gym","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"    public static final String LOAD_GYM_FORMAT_ERROR \u003d LOAD_ERROR + \"Format of gym entry is incorrect/corrupted\";","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    public static final String LOAD_GYM_TYPE_ERROR \u003d LOAD_ERROR + \"Format of gym type is incorrect/corrupted\";","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    public static final String LOAD_NUMBER_OF_STATION_ERROR \u003d LOAD_ERROR + \"Number of stations is corrupted\";","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    public static final String LOAD_NUMBER_OF_SETS_ERROR \u003d LOAD_ERROR","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"            + \"Number of weights doesn\u0027t match number of sets\";","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"    // Input Errors","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_COMMAND_ERROR \u003d \"Invalid command. Enter \u0027help\u0027 to view available commands.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    public static final String NO_DATE_SPECIFIED_ERROR \u003d \"NA\";","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_ITEM_ERROR \u003d \"Invalid item specified.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    public static final String CORRECT_FILTER_ITEM_FORMAT \u003d \"/item:run/gym/workouts/bmi/period/appointment\";","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"    // Date errors","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_DATE_ERROR \u003d \"Invalid date format. Format is DD-MM-YYYY in integers. \" +","lastModifiedDate":"2024-04-06"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"            \"Make a valida date is entered (take note of leap years)!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_YEAR_ERROR \u003d \"Year has to be after 1967!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_LEAP_YEAR_ERROR \u003d \"29 Feb does not exist in this year!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"    public static final String PARSING_DATE_ERROR \u003d\"Error parsing date!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"    // Time errors","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_ACTUAL_TIME_ERROR \u003d \"Invalid time format. Format is HH:MM in 24 hours format!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_MINUTES_ERROR \u003d \"Minutes must be a positive integer between 00 and 59.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_HOURS_ERROR \u003d \"Hours must be a positive integer between 00 and 23\";","lastModifiedDate":"2024-04-06"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"    public static final String PARSING_TIME_ERROR \u003d \"Error parsing time!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"    //Delete Errors","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    public static final String INSUFFICIENT_DELETE_PARAMETERS_ERROR \u003d \"Insufficient parameters for delete! \" +","lastModifiedDate":"2024-03-29"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"            \"Example input: /item:item /index:index\"","lastModifiedDate":"2024-04-06"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_INDEX_ERROR \u003d \"Index must be a valid positive integer.\";","lastModifiedDate":"2024-03-29"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"    // EXERCISE ERRORS","lastModifiedDate":"2024-03-25"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    // HISTORY ERRORS","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_RUN_EMPTY_ERROR \u003d \"No runs found! You need to add a run first!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_GYM_EMPTY_ERROR \u003d \"No gyms found! You need to add a gym first!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_EMPTY_ERROR \u003d \"No workouts found! You need to add \" +","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"            \"either a run or a gym first\";","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"    public static final String HISTORY_APPOINTMENT_EMPTY_ERROR \u003d \"No appointments found! You need to add an \" +","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"            \"appointment first\";","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"    public static final String HISTORY_BMI_EMPTY_ERROR \u003d \"No bmis found! You need to add a bmi first!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"    public static final String HISTORY_PERIOD_EMPTY_ERROR \u003d \"No periods found! You need to add a period first!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"    // RUN ERRORS","lastModifiedDate":"2024-03-25"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"    public static final String INSUFFICIENT_RUN_PARAMETERS_ERROR \u003d \"Insufficient parameters for run! \"","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"            + \"Example input: /e:run /d:5.25 /t:25:23 [/date:DATE]\"","lastModifiedDate":"2024-04-06"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_RUN_DISTANCE_ERROR \u003d \"Distance is a 2 decimal point positive number!\";","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_RUN_TIME_ERROR \u003d \"Invalid time format. Format is either HH:MM:SS or \" +","lastModifiedDate":"2024-04-01"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"            \"MM:SS with integers.\";","lastModifiedDate":"2024-03-31"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_SECOND_ERROR \u003d \"Seconds must be a positive integer between 00 and 59\";","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_HOUR_ERROR \u003d \"Hours cannot set to 00. Use MM:SS instead\";","lastModifiedDate":"2024-04-06"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_MINUTE_ERROR \u003d \"Minutes must be a positive integer between 01 and 59\";","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"    // GYM ERRORS","lastModifiedDate":"2024-03-25"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"    public static final String INSUFFICIENT_GYM_PARAMETERS_ERROR \u003d \"Insufficient parameters for gym! \"","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"            + \"Example input: /e:gym /n:2 [/date:DATE]\"","lastModifiedDate":"2024-04-06"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_NUMBER_OF_STATIONS_ERROR \u003d \"Number of stations is a positive number!\";","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"    public static final String EMPTY_EXERCISE_NAME_ERROR \u003d \"Exercise name cannot be blank!\";","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_EXERCISE_NAME_ERROR \u003d \"Exercise name can only have letters!\";","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    public static final String EXERCISE_NAME_LENGTH_ERROR \u003d \"Exercise name cannot be more than 40 characters!\";","lastModifiedDate":"2024-03-31"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"    public static final String GYM_STATION_FORMAT_ERROR \u003d \"Remember that you are now adding gym station input!\"","lastModifiedDate":"2024-04-06"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"            + \"Expected format: [Station Name] /s:[SETS] /r:[REPS] /w:[WEIGHTS]\";","lastModifiedDate":"2024-04-06"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_SETS_ERROR \u003d \"Number of sets must be a positive integer!\"","lastModifiedDate":"2024-04-06"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"            + GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-06"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_REPS_ERROR \u003d \"Number of reps must be a positive integer!\"","lastModifiedDate":"2024-04-06"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"            + GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-06"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_WEIGHT_VALUE_ERROR \u003d \"The weight done for each set must \"","lastModifiedDate":"2024-04-06"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"            + \"be a multiple of 0.125.\" ","lastModifiedDate":"2024-04-06"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"            + System.lineSeparator() ","lastModifiedDate":"2024-04-06"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"            + \"This is because the smallest weight increment in most gyms is 0.125kg.\"","lastModifiedDate":"2024-04-06"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator() ","lastModifiedDate":"2024-04-06"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"            + GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-06"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"    public static final String EMPTY_WEIGHTS_ARRAY_ERROR \u003d \"Weights array cannot be empty\"","lastModifiedDate":"2024-04-06"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"            + GYM_STATION_FORMAT_ERROR;","lastModifiedDate":"2024-04-06"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"    public static final String GYM_WEIGHT_POSITIVE_ERROR \u003d \"Weights specified must a positive integer! \" +","lastModifiedDate":"2024-04-06"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"            \"e.g. /w:10,20,30\";","lastModifiedDate":"2024-04-06"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"         ","lastModifiedDate":"2024-04-06"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_WEIGHT_DIGIT_ERROR \u003d \" Weights must be a number! e.g. /w:5,10,20\";","lastModifiedDate":"2024-03-26"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_WEIGHTS_INCORRECT_NUMBER_ERROR \u003d \" Number of weight values must be the same as\" +","lastModifiedDate":"2024-03-26"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"            \" the number of sets! e.g. bench press /s:2 /r:10 /w:10,20\";","lastModifiedDate":"2024-03-26"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":118,"author":{"gitId":"syj02"},"content":"    // HEALTH ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":119,"author":{"gitId":"syj02"},"content":"    public static final String INVALID_HEALTH_INPUT_ERROR \u003d \"Invalid input for health type! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"            \"Please input either /h:bmi, /h:period, /h:prediction or /h:appointment\";","lastModifiedDate":"2024-03-28"},{"lineNumber":121,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":122,"author":{"gitId":"syj02"},"content":"    // BMI ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":123,"author":{"gitId":"syj02"},"content":"    public static final String INSUFFICIENT_BMI_PARAMETERS_ERROR \u003d \"Insufficient parameters for bmi! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"            \"Example input: /h:bmi /height:height /weight:weight /date:date\"","lastModifiedDate":"2024-04-06"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":127,"author":{"gitId":"syj02"},"content":"    public static final String NEGATIVE_BMI_ERROR \u003d \"Bmi must be a positive value\";","lastModifiedDate":"2024-03-26"},{"lineNumber":128,"author":{"gitId":"syj02"},"content":"    public static final String NULL_BMI_ERROR \u003d \"Bmi object cannot be null.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":129,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_BMI_LIST_ERROR \u003d \"BMI List is empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":130,"author":{"gitId":"syj02"},"content":"    public static final String BMI_LIST_UNCLEARED_ERROR \u003d \"Bmi list is not cleared.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"    public static final String HEIGHT_WEIGHT_INPUT_ERROR \u003d","lastModifiedDate":"2024-03-28"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"            \"Height and weight should be 2 decimal place positive numbers!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":133,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":134,"author":{"gitId":"syj02"},"content":"    // PERIOD ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":135,"author":{"gitId":"syj02"},"content":"    public static final String INSUFFICIENT_PERIOD_PARAMETERS_ERROR \u003d \"Insufficient parameters for period! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"            \"Example input: /h:period /start:startDate /end:endDate\"","lastModifiedDate":"2024-04-06"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":139,"author":{"gitId":"syj02"},"content":"    public static final String NULL_PERIOD_ERROR \u003d \"Period object cannot be null.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":140,"author":{"gitId":"syj02"},"content":"    public static final String NULL_START_DATE_ERROR \u003d \"Start date of period cannot be empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"syj02"},"content":"    public static final String NULL_END_DATE_ERROR \u003d \"End date of period cannot be empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_START_DATE_ERROR \u003d \"Invalid start date!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"    public static final String INVALID_END_DATE_ERROR \u003d \"Invalid end date!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":144,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_PERIOD_LIST_ERROR \u003d \"Period List is empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":145,"author":{"gitId":"syj02"},"content":"    public static final String PERIOD_LIST_UNCLEARED_ERROR \u003d \"Period list is not cleared.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATE_IN_FUTURE_ERROR \u003d \"Date specified cannot be later than today\u0027s date.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":147,"author":{"gitId":"syj02"},"content":"    public static final String PERIOD_END_BEFORE_START_ERROR \u003d \"Start date of period must be before end date.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":148,"author":{"gitId":"syj02"},"content":"    public static final String UNABLE_TO_MAKE_PREDICTIONS_ERROR \u003d \"Insufficient period cycles to make prediction.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":149,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":150,"author":{"gitId":"syj02"},"content":"    // APPOINTMENT ERRORS","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"syj02"},"content":"    public static final String INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR \u003d \"Insufficient parameters for period! \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"            \"Example input: /h:appointment /date:date /time:time /description:description /place:place\"","lastModifiedDate":"2024-04-06"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"            + \"Only input what is required! Additional characters between flags will cause errors.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":155,"author":{"gitId":"syj02"},"content":"    public static final String NULL_APPOINTMENT_ERROR \u003d \"Appointment object cannot be null.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":156,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_APPOINTMENT_LIST_ERROR \u003d \"Appointment list is empty.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":157,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_LIST_UNCLEARED_ERROR \u003d \"Appointment list is not cleared.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":158,"author":{"gitId":"j013n3"},"content":"    public static final String START_INDEX_NEGATIVE_ERROR \u003d \"Start index for prediction must be positive\";","lastModifiedDate":"2024-03-28"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"    public static final String END_INDEX_GREATER_THAN_START_ERROR \u003d","lastModifiedDate":"2024-03-28"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"            \"End index must be greater than start index is negative\";","lastModifiedDate":"2024-03-28"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"    public static final String NULL_DATE_ERROR \u003d \"Date of appointment cannot be empty.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"    public static final String NULL_TIME_ERROR \u003d \"Time of appointment cannot be empty.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"    public static final String DESCRIPTION_LENGTH_ERROR \u003d \"Description cannot be more than 100 characters\";","lastModifiedDate":"2024-03-28"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"    public static final String INVALID_DESCRIPTION_ERROR \u003d \"Appointment description can only \" +","lastModifiedDate":"2024-03-31"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"            \"contain alphanumeric characters and spaces!\";","lastModifiedDate":"2024-03-31"},{"lineNumber":166,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":167,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_HISTORY_FILTER_ERROR \u003d \"Missing/invalid filter used!\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"            System.lineSeparator() +","lastModifiedDate":"2024-04-02"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"            \"Use /item:run/gym/workouts/period/bmi/appointment\";","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"    public static final String INVALID_LATEST_FILTER_ERROR \u003d \"Missing/invalid filter used!\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"            System.lineSeparator() +","lastModifiedDate":"2024-04-02"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"            \"Use /item:run/gym/period/bmi/appointment\";","lastModifiedDate":"2024-04-02"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"    public static final String TOO_MANY_SLASHES_ERROR \u003d \"Too many \u0027/\u0027 characters specified within input. \" +","lastModifiedDate":"2024-04-06"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"            \"Parameters cannot contain any \u0027/\u0027 characters!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"    public static final String DISTANCE_TOO_LONG_ERROR \u003d \"The world\u0027s longest foot race is the Self-Transcendence \"","lastModifiedDate":"2024-04-06"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"            + \"3100 Mile Race.\"","lastModifiedDate":"2024-04-06"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"            + \"Please enter a more realistic distance less than 5000km!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"    public static final String ZERO_HEIGHT_AND_WEIGHT_ERROR \u003d \"Height and weight must be more than 0.\";","lastModifiedDate":"2024-04-06"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"    public static final String MAX_HEIGHT_ERROR \u003d \"The tallest man Robert Wadlow was 2.72m. \"","lastModifiedDate":"2024-04-06"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"            + \"Please enter a more realistic height less than 2.75m!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"    public static final String MAX_WEIGHT_ERROR \u003d \"The heaviest human being Jon Brower Minnnoch weighed in at 635kg. \"","lastModifiedDate":"2024-04-06"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-04-06"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"            + \"Please enter a more realistic weight less than 640kg!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"    public static final String ZERO_DISTANCE_ERROR \u003d \"Distance run cannot be 0!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"    public static final String ZERO_TIME_ERROR \u003d \"Time cannot be set to 00:00!\";","lastModifiedDate":"2024-04-06"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"j013n3":22,"JustinSoh":36,"rouvinerh":81,"L5-Z":22,"syj02":33}},{"path":"src/main/java/constants/HealthConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package constants;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":" * HealthConstant class contains constants related to health-related functionalities in the application.","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":" * It includes headers, flags, parameters, thresholds, formatted strings/messages, and split indices.","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"public class HealthConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"    // Headers","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"    public static final String BMI \u003d \"bmi\";","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"    public static final String PERIOD \u003d \"period\";","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT \u003d \"appointment\";","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"    // Flags","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    public static final String HEALTH_FLAG \u003d \"/h:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    public static final String HEIGHT_FLAG \u003d \"/height:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    public static final String WEIGHT_FLAG \u003d \"/weight:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATE_FLAG \u003d \"/date:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    public static final String START_FLAG \u003d \"/start:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    public static final String END_FLAG \u003d \"/end:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    public static final String TIME_FLAG \u003d \"/time:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    public static final String DESCRIPTION_FLAG \u003d \"/description:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"    // Parameters","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer NUM_BMI_PARAMETERS \u003d 3;","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer NUM_PERIOD_PARAMETERS \u003d 2;","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer NUM_APPOINTMENT_PARAMETERS \u003d 3;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"    // Threshold","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"    public static final double UNDERWEIGHT_BMI_THRESHOLD \u003d 18.5;","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"    public static final double NORMAL_BMI_THRESHOLD \u003d 24.9;","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"    public static final double OVERWEIGHT_BMI_THRESHOLD \u003d 29.9;","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    public static final double OBESE_BMI_THRESHOLD \u003d 39.9;","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    public static final double MIN_WEIGHT \u003d 0;","lastModifiedDate":"2024-04-06"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    public static final double MIN_HEIGHT \u003d 0;","lastModifiedDate":"2024-04-06"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    public static final double MAX_HEIGHT \u003d 2.75;","lastModifiedDate":"2024-04-06"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    public static final double MAX_WEIGHT \u003d 640;","lastModifiedDate":"2024-04-06"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    // Formatted Strings/Messages","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"    // BMI","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"    public static final String LOG_DELETE_BMI_FORMAT \u003d \"Removed BMI entry of %.2f from %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"    public static final String TWO_DECIMAL_PLACE_FORMAT \u003d \"%.2f\";","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"    public static final String BMI_ADDED_MESSAGE_PREFIX \u003d \"Added: bmi | \";","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"    public static final String BMI_REMOVED_MESSAGE_PREFIX \u003d \"Removed BMI with index: \";","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"    public static final String UNDERWEIGHT_MESSAGE \u003d \"You\u0027re underweight.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"    public static final String NORMAL_WEIGHT_MESSAGE \u003d \"Great! You\u0027re within normal range.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    public static final String OVERWEIGHT_MESSAGE \u003d \"You\u0027re overweight.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"    public static final String OBESE_MESSAGE \u003d \"You\u0027re obese.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"    public static final String SEVERELY_OBESE_MESSAGE \u003d \"You\u0027re severely obese.\";","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"    public static final String BMI_HISTORY_HEADER \u003d \"Your BMI history:\";","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"    // PERIOD","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"    public static final String PRINT_PERIOD_FORMAT \u003d \"Period Start: %s Period End: %s\"","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"            + \"Period Length: %d days\";","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"    public static final String PRINT_BMI_FORMAT \u003d \"%s\"","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"            + \"Your BMI is %.2f\"","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"            + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"j013n3"},"content":"            + \"%s\";","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"    public static final String LOG_DELETE_PERIOD_FORMAT \u003d \"Removed period entry with start date: %s and end date: %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"    public static final String PERIOD_ADDED_MESSAGE_PREFIX \u003d \"Added: period | \";","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"    public static final String PERIOD_REMOVED_MESSAGE_PREFIX \u003d \"Removed period with index: \";","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"j013n3"},"content":"    public static final String PERIOD_HISTORY_HEADER \u003d \"Your Period history:\";","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"    // PREDICTION","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"    public static final String PRINT_CYCLE_FORMAT \u003d \"Cycle Length: %d days\";","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"    public static final Integer LATEST_THREE_CYCLE_LENGTHS \u003d 3;","lastModifiedDate":"2024-03-25"},{"lineNumber":70,"author":{"gitId":"j013n3"},"content":"    public static final Integer LAST_CYCLE_INDEX_OFFSET \u003d 2;","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"    public static final Integer LAST_CYCLE_OFFSET \u003d 1;","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer MIN_SIZE_FOR_PREDICTION \u003d 4;","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"j013n3"},"content":"    public static final String PREDICTED_START_DATE_MESSAGE \u003d \"Your next cycle\u0027s predicted start date is \";","lastModifiedDate":"2024-03-25"},{"lineNumber":74,"author":{"gitId":"j013n3"},"content":"    public static final String COUNT_DAYS_MESSAGE \u003d \", in \";","lastModifiedDate":"2024-03-25"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"    public static final String PERIOD_IS_LATE \u003d \". Your period is late by \";","lastModifiedDate":"2024-03-25"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"    public static final String DAYS_MESSAGE \u003d \" days.\";","lastModifiedDate":"2024-03-25"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"    // APPOINTMENT","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"    public static final String PRINT_APPOINTMENT_FORMAT \u003d \"On %s at %s: %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"    public static final String LOG_DELETE_APPOINTMENT_FORMAT \u003d \"Removed appointment on %s at %s: %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_ADDED_MESSAGE_PREFIX \u003d \"Added: appointment | \";","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_REMOVED_MESSAGE_PREFIX \u003d \"Removed appointment with index: \";","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_DESCRIPTION_LENGTH \u003d 100;","lastModifiedDate":"2024-03-28"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"    public static final String APPOINTMENT_HISTORY_HEADER \u003d \"Your Appointment history:\";","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"    // SPLIT INDEX","lastModifiedDate":"2024-04-01"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"    public static final int BMI_HEIGHT_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"    public static final int BMI_WEIGHT_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"    public static final int BMI_DATE_INDEX \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"    public static final int PERIOD_START_DATE_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    public static final int PERIOD_END_DATE_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"    public static final int APPOINTMENT_DATE_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"    public static final int APPOINTMENT_TIME_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"    public static final int APPOINTMENT_DESCRIPTION_INDEX \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_PERIOD \u003d 3;","lastModifiedDate":"2024-04-06"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_BMI \u003d 4;","lastModifiedDate":"2024-04-06"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_APPOINTMENT \u003d 4;","lastModifiedDate":"2024-04-06"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"j013n3":16,"JustinSoh":3,"rouvinerh":32,"L5-Z":23,"syj02":25}},{"path":"src/main/java/constants/UiConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package constants;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import java.io.File;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" * UiConstants class contains constants related to user-interaction-related functionalities in the application.","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":" * It includes constants for special characters, regular expressions, UI replies, storage paths,","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":" * numerical values, history management, delete operations, and split indices.","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"public class UiConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"    // Special Characters","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_SLASH \u003d \"/\";","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"    public static final String SPLIT_BY_COLON \u003d \":\";","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"    public static final String SPLIT_BY_WHITESPACE \u003d \" \";","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    public static final String SPLIT_BY_COMMAS \u003d \",\";","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    public static final String DASH \u003d \"-\";","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    public static final String COMMAS \u003d \",\";","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"    public static final String LINE \u003d \" | \";","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"    public static final String PARTITION_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"    public static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    // Regex","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_DATE_REGEX \u003d \"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_TWO_DP_NUMBER_REGEX \u003d \"^\\\\d+\\\\.\\\\d{2}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_TIME_REGEX \u003d \"^\\\\d{2}:\\\\d{2}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_TIME_WITH_HOURS_REGEX \u003d \"^\\\\d{2}:\\\\d{2}:\\\\d{2}$\";","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    public static final String VALID_POSITIVE_INTEGER_REGEX \u003d \"^[1-9]\\\\d*$\";","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_APPOINTMENT_DESCRIPTION_REGEX \u003d \"^[0-9a-zA-Z\\\\s]+$\";","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_EXERCISE_NAME_REGEX \u003d \"^[A-Za-z\\\\s]+$\";","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    public static final String VALID_WEIGHTS_ARRAY_REGEX \u003d \"^\\\\d+(,\\\\d+)*$\";","lastModifiedDate":"2024-04-01"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    // PulsePilot UI replies","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"    public static final String EXIT_MESSAGE \u003d \"Initiating PulsePilot landing sequence...\";","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"    // Storage","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"    public static final int DATA_TYPE_INDEX \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    public static final int NAME_INDEX \u003d 1;","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"    public static final String NAME_LABEL \u003d \"NAME\";","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"    public static final String LOG_FILE_PATH \u003d \"./pulsepilot_log.txt\";","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATA_FILE_PATH \u003d \"./pulsepilot_data.txt\";","lastModifiedDate":"2024-03-24"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"    public static final String HASH_FILE_PATH \u003d \"./pulsepilot_hash.txt\";","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"    public static final File SAVE_FILE \u003d new File(UiConstant.DATA_FILE_PATH);","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"    public static final int FILE_FOUND \u003d 0;","lastModifiedDate":"2024-03-25"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"    public static final int FILE_NOT_FOUND \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    public static final String MISSING_FILE \u003d \"What is your name, voyager?\";","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"    public static final String SUCCESSFUL_LOAD \u003d \"Prior data found. Orbit has been synchronised.\";","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"    // History","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"    public static final String ITEM_FLAG \u003d \"/item:\";","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    // Delete","lastModifiedDate":"2024-03-29"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    public static final String INDEX_FLAG \u003d \"/index:\";","lastModifiedDate":"2024-03-29"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"    // Numerical values","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"    public static final Integer MAX_RUNTIME_ARRAY_LENGTH \u003d 3;","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"    public static final Integer MIN_RUNTIME_ARRAY_LENGTH \u003d 2;","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_SECONDS_IN_MINUTE \u003d 60;","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_SECONDS_IN_HOUR \u003d 3600;","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"j013n3"},"content":"    public static final Integer MIN_DAY \u003d 1;","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_DAY \u003d 31;","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"j013n3"},"content":"    public static final Integer MIN_MONTH \u003d 1;","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_MONTH \u003d 12;","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"    public static final Integer MIN_MINUTES \u003d 0;","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_MINUTES \u003d 59;","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer MIN_SECONDS \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    public static final Integer MAX_SECONDS \u003d 59;","lastModifiedDate":"2024-04-01"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"    public static final Integer MIN_HOURS \u003d 0;","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"    public static final Integer MAX_HOURS \u003d 23;","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"j013n3"},"content":"    public static final double POWER_OF_TWO \u003d 2.0;","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"j013n3"},"content":"    public static final double ROUNDING_FACTOR \u003d 100.0;","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_DELETE_PARAMETERS \u003d 2;","lastModifiedDate":"2024-03-29"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    // SPLIT INDEX","lastModifiedDate":"2024-04-01"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"    public static final int DELETE_ITEM_STRING_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"    public static final int DELETE_ITEM_NUMBER_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_DELETE \u003d 2;","lastModifiedDate":"2024-04-06"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_LATEST_AND_HISTORY \u003d 1;","lastModifiedDate":"2024-04-06"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"j013n3":11,"JustinSoh":15,"rouvinerh":27,"L5-Z":26,"syj02":4}},{"path":"src/main/java/constants/WorkoutConstant.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package constants;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":" * WorkoutConstants class contains constants related to workout-related functionalities in the application.","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":" * It includes constants for workout types, flags, parameters, indices, file loading, history display,","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" * and formatted strings.","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"public class WorkoutConstant {","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"    // Workout Delimiter","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    public static final String NUMBER_OF_STATIONS_FLAG \u003d \"/n:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    public static final String EXERCISE_FLAG \u003d \"/e:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"    public static final String DISTANCE_FLAG \u003d \"/d:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    public static final String RUN_TIME_FLAG \u003d \"/t:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    public static final String DATE_FLAG \u003d \"/date:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    public static final String SETS_FLAG \u003d \"/s:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    public static final String REPS_FLAG \u003d \"/r:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    public static final String WEIGHTS_FLAG \u003d \"/w:\";","lastModifiedDate":"2024-04-01"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    // Integers","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_RUN_PARAMETERS \u003d 3;","lastModifiedDate":"2024-04-01"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_GYM_PARAMETERS \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_GYM_STATION_PARAMETERS \u003d 4;","lastModifiedDate":"2024-04-01"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_PARTS_FOR_RUN_TIME \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUMBER_OF_PARTS_FOR_RUN_TIME_WITH_HOURS \u003d 3;","lastModifiedDate":"2024-04-01"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    public static final int MAX_GYM_STATION_NAME_LENGTH \u003d 40;","lastModifiedDate":"2024-04-01"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    public static final int MIN_WEIGHT \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    public static final double MAX_RUN_DISTANCE \u003d 5000.00;","lastModifiedDate":"2024-04-06"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    public static final double MIN_RUN_DISTANCE \u003d 0;","lastModifiedDate":"2024-04-06"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    public static final double WEIGHT_MULTIPLE \u003d 0.125;","lastModifiedDate":"2024-04-06"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    // INDEX","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    public static final Integer STATION_NAME_INDEX \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    public static final int NO_HOURS_PRESENT \u003d -1;","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_NUMBER_OF_STATIONS_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_DATE_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_STATION_NAME_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_STATION_SET_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_STATION_REPS_INDEX \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    public static final int GYM_STATION_WEIGHTS_INDEX \u003d 3;","lastModifiedDate":"2024-04-01"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    public static final int MIN_GYM_STATION_WEIGHTS_ARRAY_LENGTH \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_TIME_INDEX \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_DISTANCE_INDEX \u003d 1;","lastModifiedDate":"2024-04-01"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    public static final int RUN_DATE_INDEX \u003d 2;","lastModifiedDate":"2024-04-01"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"    // KEYWORDS","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"    public static final String RUN \u003d \"run\";","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"    public static final String GYM \u003d \"gym\";","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"    public static final String ALL \u003d \"workouts\";","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    public static final String TWO_DECIMAL_PLACE_FORMAT \u003d \"%.2f\";","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    public static final String TWO_DIGIT_PLACE_FORMAT \u003d \"%02d\";","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"    // GYM FILE LOADING CONSTANTS","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"    public static final int GYM_FILE_INDEX \u003d 0;","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"    public static final int NUM_OF_STATIONS_FILE_INDEX \u003d 1;","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    public static final int DATE_FILE_INDEX \u003d 2;","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"    public static final int GYM_FILE_BASE_COUNTER \u003d 3;","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"    public static final int SETS_OFFSET \u003d 1;","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"    public static final int REPS_OFFSET \u003d 2;","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"    public static final int WEIGHTS_OFFSET \u003d 3;","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"    public static final int INCREMENT_OFFSET \u003d 4;","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"    // HISTORY (ALL WORKOUTS) CONSTANTS","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_HEADER \u003d \"Showing all workouts (runs and gyms):\";","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_DATA_FORMAT \u003d \"%-5s\\t%-12s\\t%-8s\\t%-15s\\t%-8s\\t%-10s\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"            \"\\t%-4s\\t%-4s\\t%-10s\";","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_HEADER_FORMAT \u003d String.format(","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"            \"%6s\\t%-5s\\t%-12s\\t%-8s\\t%-15s\\t%-8s\\t%-10s\\t%-4s\\t%-4s\\t%-10s\", \"Index\",","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"            \"Type\", \"Date\", \"Distance\", \"Duration\", \"Pace\", \"Station\", \"Sets\", \"Reps\", \"Weights\");","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"    public static final String HISTORY_WORKOUTS_DATA_HEADER_FORMAT \u003d \"%-6s\\t%s\";","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"    // Formatted Strings/Messages","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"    public static final String RUN_DATA_FORMAT \u003d \"%-6s\\t%-10s\\t%-10s\\t%-10s\\t%-12s\";","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"    public static final String RUN_DATA_INDEX_FORMAT \u003d \"%-6d\\t%-6s\";","lastModifiedDate":"2024-04-04"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"    public static final String RUN_HEADER_INDEX_FORMAT \u003d String.format(\"%-6s\\t%-6s\\t%-10s\\t%-10s\\t%-10s\\t%-12s\",","lastModifiedDate":"2024-04-04"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"            \"Index\", \"Type\", \"Time\", \"Distance\", \"Pace\", \"Date\");","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"    public static final String GYM_STATION_FORMAT \u003d \"%s: \";","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_SET_FORMAT \u003d \"%d reps at %.3f KG\";","lastModifiedDate":"2024-04-06"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"    public static final String GYM_SET_INDEX_FORMAT \u003d \"\\t- Set %d. %s\";","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    public static final String INDIVIDUAL_GYM_STATION_FORMAT \u003d \"%d sets\";","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"    public static final String RUN_HEADER \u003d \"Type\\tTime\\t\\tDistance\\tPace\\t\\tDate\";","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"    public static final String ADD_RUN \u003d \"Successfully added a new run session\";","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"    public static final String ADD_GYM \u003d \"Successfully added a new gym session\";","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"    public static final String STATION_GYM_FORMAT \u003d \"e.g. Bench Press /s:2 /r:4 \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"            \"/w:10,20\";","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_RUN_TIME \u003d \"Invalid run time!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_GYM_INPUT \u003d \"Invalid gym parameters!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"    public static final String INVALID_GYM_STATION_INDEX \u003d \"Invalid gym station index!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_GYM_WITH_DATE \u003d 3;","lastModifiedDate":"2024-04-06"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_GYM_WITHOUT_DATE \u003d 2;","lastModifiedDate":"2024-04-06"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_GYM_STATION \u003d 3;","lastModifiedDate":"2024-04-06"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_RUN_WITH_DATE \u003d 4;","lastModifiedDate":"2024-04-06"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"    public static final int NUM_OF_SLASHES_FOR_RUN_WITHOUT_DATE \u003d 3;","lastModifiedDate":"2024-04-06"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"JustinSoh":37,"rouvinerh":49,"L5-Z":12,"syj02":5}},{"path":"src/main/java/health/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":" * The Appointment class extends the Health class.","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":" * It contains information about the date, time, and description of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"public class Appointment extends Health {","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"     * The date of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"    protected LocalDate date;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"     * The time of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    protected LocalTime time;","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"     * The description of the appointment.","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"    protected String description;","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"     * Constructor for Appointment object.","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"     * @param stringDate A string representing the date of the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"     * @param stringTime A string representing the time of the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"     * @param description A string describing the appointment.","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"    public Appointment(String stringDate, String stringTime, String description) {","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"        this.date \u003d Parser.parseDate(stringDate);","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"        this.time \u003d Parser.parseTime(stringTime);","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"     * Retrieves the date of the appointment of LocalDate type.","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"     * @return The date of appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"        assert date !\u003d null : ErrorConstant.NULL_DATE_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"        return this.date;","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"     * Retrieves the time of the appointment of LocalTime type.","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"     * @return The time of appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"        assert time !\u003d null : ErrorConstant.NULL_TIME_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"        return this.time;","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"     * Retrieves the description of the appointment of String type.","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"     * @return The description of appointment.","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    public String getDescription() {","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"        return this.description;","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"     * Returns the string representation of an Appointment object.","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"     * @return A formatted string representing an Appointment object.","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"    @Override","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"    public String toString() {","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"        return String.format(HealthConstant.PRINT_APPOINTMENT_FORMAT,","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"                getDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"                getTime(),","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"                getDescription());","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"j013n3":2,"rouvinerh":6,"L5-Z":1,"syj02":75}},{"path":"src/main/java/health/Bmi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"package health;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"j013n3"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":" * The Bmi class extends the Health class.","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":" * It contains information about the height, weight, and bmi value of the user, and provides functionalities","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":" * to calculate and categories the bmi values.","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"j013n3"},"content":" */","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"public class Bmi extends Health {","lastModifiedDate":"2024-03-15"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"     * The height of the user in meters.","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    protected double height;","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"     * The weight of the user in kilograms.","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"    protected double weight;","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"     * The Bmi of the user.","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    protected double bmiValue;","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"     * The BMI category.","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"    protected String bmiCategory;","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"     * The date of user input.","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    protected LocalDate date;","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"     * Constructor for Bmi object.","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"     * @param height A string representing the user\u0027s height.","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"     * @param weight A string representing the user\u0027s weight.","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If height or weight values are not positive.","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"    public Bmi(String height, String weight, String date) {","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"        this.height \u003d Double.parseDouble(height);","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"j013n3"},"content":"        this.weight \u003d Double.parseDouble(weight);","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"j013n3"},"content":"        assert this.height \u003e 0 \u0026\u0026 this.weight \u003e 0 : ErrorConstant.NEGATIVE_VALUE_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":56,"author":{"gitId":"j013n3"},"content":"        this.date \u003d Parser.parseDate(date);","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"        this.bmiValue \u003d calculateBmiValue();","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"        this.bmiCategory \u003d getBmiCategory(bmiValue);","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-30"},{"lineNumber":63,"author":{"gitId":"j013n3"},"content":"     * Retrieves BMI value recorded in Bmi object of String type.","lastModifiedDate":"2024-04-04"},{"lineNumber":64,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-30"},{"lineNumber":65,"author":{"gitId":"j013n3"},"content":"     * @return The BMI value recorded in the Bmi object.","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-30"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"    public String getBmiValue() {","lastModifiedDate":"2024-03-30"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.TWO_DECIMAL_PLACE_FORMAT, bmiValue);","lastModifiedDate":"2024-03-30"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":70,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"     * Retrieves height recorded in Bmi object of String type.","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"j013n3"},"content":"     * @return The height recorded in the Bmi object.","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"    public String getHeight() {","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.TWO_DECIMAL_PLACE_FORMAT, height);","lastModifiedDate":"2024-03-28"},{"lineNumber":78,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"     * Retrieves weight recorded in Bmi object of String type.","lastModifiedDate":"2024-04-04"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"j013n3"},"content":"     * @return The weight recorded in the Bmi object.","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"    public String getWeight() {","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.TWO_DECIMAL_PLACE_FORMAT, weight);","lastModifiedDate":"2024-03-28"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"     * Retrieves date recorded in Bmi object of LocalDate type.","lastModifiedDate":"2024-04-04"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"     * @return The date recorded in the Bmi object.","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"j013n3"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"        return date;","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"     * Calculates the Bmi value based on height and weight.","lastModifiedDate":"2024-04-04"},{"lineNumber":101,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"j013n3"},"content":"     * @return The calculated Bmi value.","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If calculated value is not positive.","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"    public double calculateBmiValue() {","lastModifiedDate":"2024-03-18"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"        double bmi \u003d Math.round((weight / (Math.pow(height, UiConstant.POWER_OF_TWO))) * UiConstant.ROUNDING_FACTOR)","lastModifiedDate":"2024-03-21"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"                / UiConstant.ROUNDING_FACTOR;","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"        assert bmi \u003e 0: ErrorConstant.NEGATIVE_BMI_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":109,"author":{"gitId":"j013n3"},"content":"        return bmi;","lastModifiedDate":"2024-03-19"},{"lineNumber":110,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":111,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":112,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"     * Prints the Bmi category based on the calculated Bmi value.","lastModifiedDate":"2024-03-19"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"     * @param bmiValue The Bmi value to categorize.","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"     * @return A string presenting the Bmi category.","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If calculated value is not positive.","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"    public static String getBmiCategory(double bmiValue) {","lastModifiedDate":"2024-03-18"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"        assert bmiValue \u003e 0: ErrorConstant.NEGATIVE_BMI_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"        if (bmiValue \u003c HealthConstant.UNDERWEIGHT_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.UNDERWEIGHT_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"        } else if (bmiValue \u003c HealthConstant.NORMAL_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.NORMAL_WEIGHT_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"        } else if (bmiValue \u003c HealthConstant.OVERWEIGHT_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.OVERWEIGHT_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"        } else if (bmiValue \u003c HealthConstant.OBESE_BMI_THRESHOLD) {","lastModifiedDate":"2024-03-21"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.OBESE_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"        } else {","lastModifiedDate":"2024-03-14"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"            return HealthConstant.SEVERELY_OBESE_MESSAGE;","lastModifiedDate":"2024-03-21"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"     * Returns the string presentation of a Bmi object.","lastModifiedDate":"2024-04-04"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"     * @return A formatted string representing a Bmi object.","lastModifiedDate":"2024-04-04"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"        return String.format(HealthConstant.PRINT_BMI_FORMAT,","lastModifiedDate":"2024-03-28"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"                this.getDate(),","lastModifiedDate":"2024-04-03"},{"lineNumber":144,"author":{"gitId":"j013n3"},"content":"                this.calculateBmiValue(),","lastModifiedDate":"2024-03-28"},{"lineNumber":145,"author":{"gitId":"j013n3"},"content":"                getBmiCategory(bmiValue));","lastModifiedDate":"2024-03-28"},{"lineNumber":146,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":147,"author":{"gitId":"j013n3"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"j013n3":126,"rouvinerh":5,"L5-Z":1,"syj02":15}},{"path":"src/main/java/health/Health.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"j013n3"},"content":"package health;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":" * The Health class represents a Health object to track user\u0027s health information.","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"public class Health {","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"     * The date of Health object.","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"    protected LocalDate date \u003d null;","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"     * Constructor for Health object.","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"j013n3"},"content":"    public Health() {","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"     * Retrieves the date of Health object of LocalDate type.","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"     * @return The date of the Health object.","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"j013n3"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"j013n3"},"content":"        return date;","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"     * Returns a string containing the date of the Health object.","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"     * @return A formatted string representing a Health object.","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"    @Override","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"    public String toString(){","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"        return getDate().toString();","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"j013n3":15,"rouvinerh":2,"syj02":21}},{"path":"src/main/java/health/HealthList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-25"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"/**","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":" * The HealthList class extends the ArrayList class.","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":" * It contains the individual lists of Bmi objects, Appointment objects and Period objects, and the functionalities to","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":" * add the objects to their respective lists, get the lists, and display the latest object and lists of objects.","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":" */","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"public class HealthList extends ArrayList\u003cHealth\u003e {","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"     * LogFile for logging health-related activities.","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"    static LogFile logFile \u003d LogFile.getInstance();","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"     * The list of Bmi records.","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cBmi\u003e BMIS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"     * The list of Appointment records.","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cAppointment\u003e APPOINTMENTS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"     * The list of Period records.","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cPeriod\u003e PERIODS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":40,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"j013n3"},"content":"     * Adds a Bmi object to the bmis list.","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"j013n3"},"content":"     * @param bmi Bmi object.","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If Bmi object is null.","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"    public static void addBmi(Bmi bmi) {","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"        assert bmi !\u003d null : ErrorConstant.NULL_BMI_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"        BMIS.add(bmi);","lastModifiedDate":"2024-03-30"},{"lineNumber":50,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-22"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"     * Prints the latest Bmi object added.","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If bmis list is empty.","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"    public static void showCurrentBmi() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"        if (BMIS.isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_BMI_EMPTY_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"        assert !BMIS.isEmpty() : ErrorConstant.EMPTY_BMI_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"        int currentIndex \u003d BMIS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"        System.out.println(BMIS.get(currentIndex - 1));","lastModifiedDate":"2024-03-30"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"     * Prints all the Bmi entries recorded.","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-22"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If bmis list is empty.","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"    public static void showBmiHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"        if (BMIS.isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_BMI_EMPTY_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"        assert !BMIS.isEmpty() : ErrorConstant.EMPTY_BMI_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"        System.out.println(HealthConstant.BMI_HISTORY_HEADER);","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"        for (Bmi bmi : BMIS) {","lastModifiedDate":"2024-03-30"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"            System.out.println(bmi);","lastModifiedDate":"2024-03-19"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"     * Adds a Period object to the periods list.","lastModifiedDate":"2024-04-04"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"     * @param period Period object to be added.","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If period object is null.","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"    public static void addPeriod(Period period) {","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"        assert period !\u003d null : ErrorConstant.NULL_PERIOD_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"        if (!PERIODS.isEmpty()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"            Period previousPeriod \u003d PERIODS.get(PERIODS.size() - 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"            previousPeriod.setCycleLength(period.getStartDate());","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"        PERIODS.add(period);","lastModifiedDate":"2024-03-30"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"     * Prints the latest Period object added.","lastModifiedDate":"2024-04-04"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If periods list is empty.","lastModifiedDate":"2024-04-03"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"    public static void showLatestPeriod() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":105,"author":{"gitId":"syj02"},"content":"        if (PERIODS.isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":106,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_PERIOD_EMPTY_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":107,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":108,"author":{"gitId":"syj02"},"content":"        assert !PERIODS.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"        int currentIndex \u003d PERIODS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"        System.out.println(PERIODS.get(currentIndex - 1));","lastModifiedDate":"2024-03-30"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-22"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"     * Prints all Period entries tracked.","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If periods list is empty.","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"    public static void showPeriodHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"        if (PERIODS.isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_PERIOD_EMPTY_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":123,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":124,"author":{"gitId":"j013n3"},"content":"        assert !PERIODS.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":125,"author":{"gitId":"j013n3"},"content":"        System.out.println(HealthConstant.PERIOD_HISTORY_HEADER);","lastModifiedDate":"2024-04-04"},{"lineNumber":126,"author":{"gitId":"j013n3"},"content":"        for (Period period : PERIODS) {","lastModifiedDate":"2024-03-30"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"            System.out.println(period);","lastModifiedDate":"2024-03-19"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"     * Prints the last three Period objects added to the periods list.","lastModifiedDate":"2024-04-04"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"    public static void printLatestThreeCycles() {","lastModifiedDate":"2024-03-28"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"        int size \u003d PERIODS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"        int startIndex \u003d size - HealthConstant.LATEST_THREE_CYCLE_LENGTHS;","lastModifiedDate":"2024-03-28"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"        assert startIndex \u003e\u003d 0 : ErrorConstant.START_INDEX_NEGATIVE_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":138,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":139,"author":{"gitId":"j013n3"},"content":"        int endIndex \u003d size - HealthConstant.LAST_CYCLE_OFFSET;","lastModifiedDate":"2024-03-28"},{"lineNumber":140,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":141,"author":{"gitId":"j013n3"},"content":"        for (int i \u003d startIndex; i \u003c\u003d endIndex; i++) {","lastModifiedDate":"2024-03-28"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"            System.out.println(PERIODS.get(i));","lastModifiedDate":"2024-03-30"},{"lineNumber":143,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":147,"author":{"gitId":"j013n3"},"content":"     * Retrieves the list of periods recorded of ArrayList type.","lastModifiedDate":"2024-04-04"},{"lineNumber":148,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":149,"author":{"gitId":"j013n3"},"content":"     * @return The periods array list.","lastModifiedDate":"2024-04-03"},{"lineNumber":150,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":151,"author":{"gitId":"j013n3"},"content":"    public static ArrayList\u003cPeriod\u003e getPeriods() {","lastModifiedDate":"2024-04-03"},{"lineNumber":152,"author":{"gitId":"j013n3"},"content":"        return PERIODS;","lastModifiedDate":"2024-04-03"},{"lineNumber":153,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":154,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":155,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":156,"author":{"gitId":"j013n3"},"content":"     * Retrieves the list of bmis recorded of ArrayList type.","lastModifiedDate":"2024-04-04"},{"lineNumber":157,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":158,"author":{"gitId":"j013n3"},"content":"     * @return The bmis array list.","lastModifiedDate":"2024-04-03"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"    public static ArrayList\u003cBmi\u003e getBmis() {","lastModifiedDate":"2024-04-03"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"        return BMIS;","lastModifiedDate":"2024-04-03"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":164,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":165,"author":{"gitId":"j013n3"},"content":"     * Retrieves the list of appointments recorded of ArrayList type.","lastModifiedDate":"2024-04-04"},{"lineNumber":166,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":167,"author":{"gitId":"j013n3"},"content":"     * @return The appointments array list.","lastModifiedDate":"2024-04-03"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"    public static ArrayList\u003cAppointment\u003e getAppointments() {","lastModifiedDate":"2024-04-03"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"        return APPOINTMENTS;","lastModifiedDate":"2024-04-03"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"     * Retrieves the number of periods recorded of int type.","lastModifiedDate":"2024-04-04"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"j013n3"},"content":"     * @return The number of periods recorded.","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"    public static int getPeriodSize() {","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"        return PERIODS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":180,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"     * Retrieves the Period object at the specified index of Period type.","lastModifiedDate":"2024-04-04"},{"lineNumber":184,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"j013n3"},"content":"     * @param index The index of the Period object.","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"j013n3"},"content":"     * @return The Period object at the specified index, or null if the index is out of bounds.","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"j013n3"},"content":"    public static Period getPeriod(int index) {","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"j013n3"},"content":"        if (index \u003c 0 || index \u003e\u003d PERIODS.size()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":190,"author":{"gitId":"j013n3"},"content":"            return null;","lastModifiedDate":"2024-03-25"},{"lineNumber":191,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":192,"author":{"gitId":"j013n3"},"content":"        return PERIODS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":193,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":195,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":196,"author":{"gitId":"j013n3"},"content":"     * Predicts the start date of the next period based on the average cycle length of the last three cycles.","lastModifiedDate":"2024-03-25"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"     * @return The predicted start date of the next period.","lastModifiedDate":"2024-04-03"},{"lineNumber":199,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If periods lists is empty.","lastModifiedDate":"2024-04-03"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"    public static LocalDate predictNextPeriodStartDate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"        assert !PERIODS.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"        Period latestPeriod \u003d PERIODS.get(PERIODS.size() - 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"        return latestPeriod.nextCyclePrediction();","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":207,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":208,"author":{"gitId":"j013n3"},"content":"    //@@l5_z","lastModifiedDate":"2024-03-22"},{"lineNumber":209,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":210,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":211,"author":{"gitId":"j013n3"},"content":"     * Clears the periods, bmis, and appointments lists.","lastModifiedDate":"2024-04-04"},{"lineNumber":212,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":213,"author":{"gitId":"j013n3"},"content":"     * @throws AssertionError If periods, bmis, and appointments lists are not empty.","lastModifiedDate":"2024-04-03"},{"lineNumber":214,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":215,"author":{"gitId":"j013n3"},"content":"    public static void clearHealthLists() {","lastModifiedDate":"2024-03-27"},{"lineNumber":216,"author":{"gitId":"j013n3"},"content":"        PERIODS.clear();","lastModifiedDate":"2024-03-30"},{"lineNumber":217,"author":{"gitId":"j013n3"},"content":"        BMIS.clear();","lastModifiedDate":"2024-03-30"},{"lineNumber":218,"author":{"gitId":"j013n3"},"content":"        APPOINTMENTS.clear();","lastModifiedDate":"2024-03-30"},{"lineNumber":219,"author":{"gitId":"j013n3"},"content":"        assert BMIS.isEmpty() : ErrorConstant.BMI_LIST_UNCLEARED_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":220,"author":{"gitId":"j013n3"},"content":"        assert PERIODS.isEmpty() : ErrorConstant.PERIOD_LIST_UNCLEARED_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":221,"author":{"gitId":"j013n3"},"content":"        assert APPOINTMENTS.isEmpty() : ErrorConstant.APPOINTMENT_LIST_UNCLEARED_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":222,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":223,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":224,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":225,"author":{"gitId":"j013n3"},"content":"     * Retrieves size of periods list of int type.","lastModifiedDate":"2024-04-04"},{"lineNumber":226,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":227,"author":{"gitId":"j013n3"},"content":"     * @return Size of periods list.","lastModifiedDate":"2024-03-25"},{"lineNumber":228,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":229,"author":{"gitId":"j013n3"},"content":"    public static int getPeriodsSize() {","lastModifiedDate":"2024-03-25"},{"lineNumber":230,"author":{"gitId":"j013n3"},"content":"        return PERIODS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":231,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":232,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":233,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":234,"author":{"gitId":"j013n3"},"content":"     * Retrieves size of bmis list of int type.","lastModifiedDate":"2024-04-04"},{"lineNumber":235,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":236,"author":{"gitId":"j013n3"},"content":"     * @return Size of bmis list.","lastModifiedDate":"2024-03-25"},{"lineNumber":237,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":238,"author":{"gitId":"j013n3"},"content":"    public static int getBmisSize() {","lastModifiedDate":"2024-03-25"},{"lineNumber":239,"author":{"gitId":"j013n3"},"content":"        return BMIS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":240,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":241,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":242,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":243,"author":{"gitId":"j013n3"},"content":"     * Deletes Bmi object based on index.","lastModifiedDate":"2024-03-25"},{"lineNumber":244,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":245,"author":{"gitId":"j013n3"},"content":"     * @param index Index of the Bmi object to be deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":246,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.OutOfBounds If the index of the Bmi object given does not exist.","lastModifiedDate":"2024-04-04"},{"lineNumber":247,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":248,"author":{"gitId":"j013n3"},"content":"    public static void deleteBmi(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":249,"author":{"gitId":"j013n3"},"content":"        assert !BMIS.isEmpty() : ErrorConstant.EMPTY_BMI_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":250,"author":{"gitId":"j013n3"},"content":"        if (index \u003c 0 || index \u003e\u003d BMIS.size()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":251,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":252,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":253,"author":{"gitId":"j013n3"},"content":"        Bmi deletedBmi \u003d BMIS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":254,"author":{"gitId":"j013n3"},"content":"        System.out.printf((HealthConstant.LOG_DELETE_BMI_FORMAT) + \"%n\",","lastModifiedDate":"2024-03-27"},{"lineNumber":255,"author":{"gitId":"j013n3"},"content":"                deletedBmi.bmiValue,","lastModifiedDate":"2024-03-26"},{"lineNumber":256,"author":{"gitId":"j013n3"},"content":"                deletedBmi.date);","lastModifiedDate":"2024-03-27"},{"lineNumber":257,"author":{"gitId":"j013n3"},"content":"        BMIS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":258,"author":{"gitId":"j013n3"},"content":"        LogFile.writeLog(HealthConstant.BMI_REMOVED_MESSAGE_PREFIX + index, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":259,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":260,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":261,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":262,"author":{"gitId":"j013n3"},"content":"     * Deletes Period object based on index.","lastModifiedDate":"2024-04-04"},{"lineNumber":263,"author":{"gitId":"j013n3"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":264,"author":{"gitId":"j013n3"},"content":"     * @param index Index of the Period object to be deleted.","lastModifiedDate":"2024-04-04"},{"lineNumber":265,"author":{"gitId":"j013n3"},"content":"     * @throws CustomExceptions.OutOfBounds If the index of the Period object given does not exist.","lastModifiedDate":"2024-04-04"},{"lineNumber":266,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":267,"author":{"gitId":"j013n3"},"content":"    public static void deletePeriod(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":268,"author":{"gitId":"j013n3"},"content":"        assert !PERIODS.isEmpty() : ErrorConstant.EMPTY_PERIOD_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":269,"author":{"gitId":"j013n3"},"content":"        if (index \u003c 0 || index \u003e\u003d PERIODS.size()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":270,"author":{"gitId":"j013n3"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":271,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":272,"author":{"gitId":"j013n3"},"content":"        Period deletedPeriod \u003d PERIODS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":273,"author":{"gitId":"j013n3"},"content":"        System.out.printf((HealthConstant.LOG_DELETE_PERIOD_FORMAT) + \"%n\",","lastModifiedDate":"2024-03-27"},{"lineNumber":274,"author":{"gitId":"j013n3"},"content":"                deletedPeriod.getStartDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":275,"author":{"gitId":"j013n3"},"content":"                deletedPeriod.getEndDate());","lastModifiedDate":"2024-03-27"},{"lineNumber":276,"author":{"gitId":"j013n3"},"content":"        PERIODS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":277,"author":{"gitId":"j013n3"},"content":"        LogFile.writeLog(HealthConstant.PERIOD_REMOVED_MESSAGE_PREFIX + index, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":278,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":279,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":280,"author":{"gitId":"syj02"},"content":"    //@@author syj_02","lastModifiedDate":"2024-03-26"},{"lineNumber":281,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":282,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":283,"author":{"gitId":"syj02"},"content":"     * Adds an Appointment to the list of Appointments whenever addAppointment is called.","lastModifiedDate":"2024-03-27"},{"lineNumber":284,"author":{"gitId":"syj02"},"content":"     * Sorts all Appointment objects in the list by date and time of the appointments with","lastModifiedDate":"2024-03-27"},{"lineNumber":285,"author":{"gitId":"syj02"},"content":"     * the earliest appointment at the top.","lastModifiedDate":"2024-04-01"},{"lineNumber":286,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":287,"author":{"gitId":"syj02"},"content":"     * @param appointment Appointment object.","lastModifiedDate":"2024-04-03"},{"lineNumber":288,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If Appointment object is null.","lastModifiedDate":"2024-03-27"},{"lineNumber":289,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":290,"author":{"gitId":"syj02"},"content":"    public static void addAppointment(Appointment appointment) {","lastModifiedDate":"2024-03-26"},{"lineNumber":291,"author":{"gitId":"syj02"},"content":"        assert appointment !\u003d null : ErrorConstant.NULL_APPOINTMENT_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":292,"author":{"gitId":"syj02"},"content":"        APPOINTMENTS.add(appointment);","lastModifiedDate":"2024-03-30"},{"lineNumber":293,"author":{"gitId":"syj02"},"content":"        APPOINTMENTS.sort(Comparator.comparing(Appointment::getDate).thenComparing(Appointment::getTime));","lastModifiedDate":"2024-03-30"},{"lineNumber":294,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":295,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":296,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":297,"author":{"gitId":"syj02"},"content":"     * Deletes Appointment object based on index.","lastModifiedDate":"2024-03-27"},{"lineNumber":298,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":299,"author":{"gitId":"syj02"},"content":"     * @param index Index of the Appointment object to be deleted.","lastModifiedDate":"2024-03-27"},{"lineNumber":300,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.OutOfBounds If the index of the Appointment object given does not exist.","lastModifiedDate":"2024-04-04"},{"lineNumber":301,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":302,"author":{"gitId":"syj02"},"content":"    public static void deleteAppointment(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-26"},{"lineNumber":303,"author":{"gitId":"syj02"},"content":"        assert !APPOINTMENTS.isEmpty() : ErrorConstant.EMPTY_APPOINTMENT_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":304,"author":{"gitId":"syj02"},"content":"        if (index \u003c 1 || index \u003e APPOINTMENTS.size()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":305,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.INVALID_INDEX_DELETE_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":306,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":307,"author":{"gitId":"syj02"},"content":"        index -\u003d 1;","lastModifiedDate":"2024-03-26"},{"lineNumber":308,"author":{"gitId":"syj02"},"content":"        Appointment deletedAppointment \u003d APPOINTMENTS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":309,"author":{"gitId":"syj02"},"content":"        System.out.printf((HealthConstant.LOG_DELETE_APPOINTMENT_FORMAT) + \"%n\",","lastModifiedDate":"2024-03-27"},{"lineNumber":310,"author":{"gitId":"syj02"},"content":"                deletedAppointment.date,","lastModifiedDate":"2024-03-26"},{"lineNumber":311,"author":{"gitId":"syj02"},"content":"                deletedAppointment.time,","lastModifiedDate":"2024-03-26"},{"lineNumber":312,"author":{"gitId":"syj02"},"content":"                deletedAppointment.description);","lastModifiedDate":"2024-03-27"},{"lineNumber":313,"author":{"gitId":"syj02"},"content":"        APPOINTMENTS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":314,"author":{"gitId":"syj02"},"content":"        LogFile.writeLog(HealthConstant.APPOINTMENT_REMOVED_MESSAGE_PREFIX + index, false);","lastModifiedDate":"2024-03-26"},{"lineNumber":315,"author":{"gitId":"syj02"},"content":"        showAppointmentList();","lastModifiedDate":"2024-03-26"},{"lineNumber":316,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":317,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":318,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":319,"author":{"gitId":"syj02"},"content":"     * Prints all Appointment entries tracked.","lastModifiedDate":"2024-03-27"},{"lineNumber":320,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":321,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If appointments list is empty.","lastModifiedDate":"2024-04-03"},{"lineNumber":322,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":323,"author":{"gitId":"syj02"},"content":"    public static void showAppointmentList() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":324,"author":{"gitId":"syj02"},"content":"        if (APPOINTMENTS.isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":325,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_APPOINTMENT_EMPTY_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":326,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":327,"author":{"gitId":"syj02"},"content":"        assert !APPOINTMENTS.isEmpty() : ErrorConstant.EMPTY_APPOINTMENT_LIST_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":328,"author":{"gitId":"syj02"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-26"},{"lineNumber":329,"author":{"gitId":"syj02"},"content":"        System.out.println(HealthConstant.APPOINTMENT_HISTORY_HEADER);","lastModifiedDate":"2024-04-04"},{"lineNumber":330,"author":{"gitId":"syj02"},"content":"        for (Appointment appointment : APPOINTMENTS) {","lastModifiedDate":"2024-03-30"},{"lineNumber":331,"author":{"gitId":"syj02"},"content":"            System.out.print(index + \". \");","lastModifiedDate":"2024-03-26"},{"lineNumber":332,"author":{"gitId":"syj02"},"content":"            System.out.println(appointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":333,"author":{"gitId":"syj02"},"content":"            index +\u003d 1;","lastModifiedDate":"2024-03-26"},{"lineNumber":334,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":335,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":336,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":337,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":338,"author":{"gitId":"syj02"},"content":"     * Prints the latest Appointment object added.","lastModifiedDate":"2024-04-01"},{"lineNumber":339,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":340,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError If appointments list is empty.","lastModifiedDate":"2024-04-04"},{"lineNumber":341,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":342,"author":{"gitId":"syj02"},"content":"    public static void showLatestAppointment() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":343,"author":{"gitId":"syj02"},"content":"        if (APPOINTMENTS.isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":344,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_APPOINTMENT_EMPTY_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":345,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":346,"author":{"gitId":"syj02"},"content":"        assert !APPOINTMENTS.isEmpty() : ErrorConstant.EMPTY_APPOINTMENT_LIST_ERROR;","lastModifiedDate":"2024-04-01"},{"lineNumber":347,"author":{"gitId":"syj02"},"content":"        int currentIndex \u003d APPOINTMENTS.size();","lastModifiedDate":"2024-04-01"},{"lineNumber":348,"author":{"gitId":"syj02"},"content":"        System.out.println(APPOINTMENTS.get(currentIndex - 1));","lastModifiedDate":"2024-04-01"},{"lineNumber":349,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":350,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"j013n3":186,"JustinSoh":4,"rouvinerh":5,"L5-Z":2,"syj02":153}},{"path":"src/main/java/health/Period.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import java.util.Objects;","lastModifiedDate":"2024-03-30"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":" * The Period class extends the Health class.","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":" * It contains information about the start date, end date, time, period length, and cycle length of the period,","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":" * and the functionalities to calculate period and cycle length and predict the next period.","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"public class Period extends Health {","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"     * The start date of period i.e. the first day of period flow which is also the first day of cycle.","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"    protected LocalDate startDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"     * The end date of period i.e. the last day of period flow.","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"    protected LocalDate endDate;","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"     * The number of days between the first day and last day of period flow.","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"    protected long periodLength;","lastModifiedDate":"2024-03-25"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"     * The number of days between the first day and last day of the period cycle.","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"    protected long cycleLength;","lastModifiedDate":"2024-03-25"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-22"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"     * Constructor for Period object.","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"     * @param stringStartDate A string representing the start date of the period.","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"     * @param stringEndDate   A string representing the end date of the period.","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"    public Period(String stringStartDate, String stringEndDate) {","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"        this.startDate \u003d Parser.parseDate(stringStartDate);","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"        this.endDate \u003d Parser.parseDate(stringEndDate);","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"        this.periodLength \u003d calculatePeriodLength();","lastModifiedDate":"2024-03-25"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"        this.cycleLength \u003d 0;","lastModifiedDate":"2024-03-25"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"     * Retrieves the start date of the period of LocalDate type.","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"     * @return The start date of period.","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError if the start date is null.","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"    public LocalDate getStartDate() {","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"        assert startDate !\u003d null : ErrorConstant.NULL_START_DATE_ERROR;","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"        return startDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"     * Retrieves the end date of the period of LocalDate type.","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"     * @return The end date of period.","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"     * @throws AssertionError if the end date is null.","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"    public LocalDate getEndDate() {","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"        assert endDate !\u003d null : ErrorConstant.NULL_END_DATE_ERROR;","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"        return endDate;","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-30"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"     * Retrieves the length of the period of long type.","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-30"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"     * @return The period length.","lastModifiedDate":"2024-03-30"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-30"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"    public long getPeriodLength() {","lastModifiedDate":"2024-03-30"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"        return periodLength;","lastModifiedDate":"2024-03-30"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"     * Calculates the length of the period in days.","lastModifiedDate":"2024-03-19"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"     * @return The length of the period.","lastModifiedDate":"2024-03-19"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"    public long calculatePeriodLength() {","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"        assert getStartDate().isBefore(getEndDate()) : ErrorConstant.PERIOD_END_BEFORE_START_ERROR;","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"        // Add 1 to include both start and end dates","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"        return ChronoUnit.DAYS.between(getStartDate(), getEndDate()) + 1;","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"     * Sets the cycle length of the current period based on the start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"     * @param nextStartDate The start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"    public void setCycleLength(LocalDate nextStartDate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"        this.cycleLength \u003d ChronoUnit.DAYS.between(getStartDate(), nextStartDate);","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":105,"author":{"gitId":"syj02"},"content":"     * Calculates the sum of the cycle lengths of the latest three menstrual cycles.","lastModifiedDate":"2024-03-25"},{"lineNumber":106,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":107,"author":{"gitId":"syj02"},"content":"     * @return The sum of the cycle lengths of the latest three menstrual cycles.","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"    public long getLastThreeCycleLengths() {","lastModifiedDate":"2024-03-25"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"        int size \u003d HealthList.getPeriodSize();","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"        long sumOfCycleLengths \u003d 0;","lastModifiedDate":"2024-03-25"},{"lineNumber":113,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":114,"author":{"gitId":"syj02"},"content":"        int startIndexForPrediction \u003d size - HealthConstant.MIN_SIZE_FOR_PREDICTION;","lastModifiedDate":"2024-03-28"},{"lineNumber":115,"author":{"gitId":"syj02"},"content":"        assert startIndexForPrediction \u003e\u003d 0 : ErrorConstant.START_INDEX_NEGATIVE_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":116,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":117,"author":{"gitId":"syj02"},"content":"        int endIndexForPrediction \u003d size - HealthConstant.LAST_CYCLE_INDEX_OFFSET;","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"syj02"},"content":"        assert endIndexForPrediction \u003e\u003d startIndexForPrediction : ErrorConstant.END_INDEX_GREATER_THAN_START_ERROR;","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":120,"author":{"gitId":"syj02"},"content":"        for (int i \u003d startIndexForPrediction; i \u003c\u003d endIndexForPrediction; i++) {","lastModifiedDate":"2024-03-28"},{"lineNumber":121,"author":{"gitId":"syj02"},"content":"            sumOfCycleLengths +\u003d Objects.requireNonNull(HealthList.getPeriod(i)).cycleLength;","lastModifiedDate":"2024-03-30"},{"lineNumber":122,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":124,"author":{"gitId":"syj02"},"content":"        return sumOfCycleLengths;","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"syj02"},"content":"     * Predicts the start date of the next period based on the average cycle length.","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"syj02"},"content":"     * @return The predicted start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"syj02"},"content":"    public LocalDate nextCyclePrediction() {","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"syj02"},"content":"        long averageCycleLength \u003d getLastThreeCycleLengths() / HealthConstant.LATEST_THREE_CYCLE_LENGTHS;","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"syj02"},"content":"        return getStartDate().plusDays(averageCycleLength);","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"syj02"},"content":"     * Prints a message indicating the number of days until the predicted start date of the next period,","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"syj02"},"content":"     * or how many days late the period is if the current date is after the predicted start date.","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"syj02"},"content":"     * @param nextPeriodStartDate The predicted start date of the next period.","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"syj02"},"content":"    public static void printNextCyclePrediction(LocalDate nextPeriodStartDate) {","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"syj02"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"syj02"},"content":"        long daysUntilNextPeriod \u003d today.until(nextPeriodStartDate, ChronoUnit.DAYS);","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"syj02"},"content":"        if (today.isBefore(nextPeriodStartDate)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"syj02"},"content":"            System.out.println(HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"syj02"},"content":"                    + nextPeriodStartDate +","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"syj02"},"content":"                    HealthConstant.COUNT_DAYS_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"syj02"},"content":"                    + daysUntilNextPeriod","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"syj02"},"content":"                    + HealthConstant.DAYS_MESSAGE);","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"syj02"},"content":"        if (today.isAfter(nextPeriodStartDate)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"syj02"},"content":"            System.out.println(HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"syj02"},"content":"                    + nextPeriodStartDate","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"syj02"},"content":"                    + HealthConstant.PERIOD_IS_LATE","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"syj02"},"content":"                    + -daysUntilNextPeriod","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"syj02"},"content":"                    + HealthConstant.DAYS_MESSAGE);","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":162,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":163,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"syj02"},"content":"     * Returns the string representation of a Period object.","lastModifiedDate":"2024-04-04"},{"lineNumber":165,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":166,"author":{"gitId":"syj02"},"content":"     * @return A formatted string representing a Period object.","lastModifiedDate":"2024-03-20"},{"lineNumber":167,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":168,"author":{"gitId":"syj02"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":169,"author":{"gitId":"syj02"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":170,"author":{"gitId":"syj02"},"content":"        return String.format(HealthConstant.PRINT_PERIOD_FORMAT,","lastModifiedDate":"2024-03-26"},{"lineNumber":171,"author":{"gitId":"syj02"},"content":"                getStartDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":172,"author":{"gitId":"syj02"},"content":"                getEndDate(),","lastModifiedDate":"2024-03-26"},{"lineNumber":173,"author":{"gitId":"syj02"},"content":"                getPeriodLength())","lastModifiedDate":"2024-04-03"},{"lineNumber":174,"author":{"gitId":"syj02"},"content":"                + (this.cycleLength \u003e 0 ? System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":175,"author":{"gitId":"syj02"},"content":"                + String.format(HealthConstant.PRINT_CYCLE_FORMAT, this.cycleLength) : UiConstant.EMPTY_STRING);","lastModifiedDate":"2024-03-26"},{"lineNumber":176,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":177,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"j013n3":2,"rouvinerh":5,"L5-Z":1,"syj02":169}},{"path":"src/main/java/seedu/pulsepilot/PulsePilot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package seedu.pulsepilot;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import static ui.Handler.initialiseBot;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import static ui.Handler.processInput;","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import static ui.Handler.terminateBot;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":" * Main class representing the entry-point for PulsePilot application.","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"public class PulsePilot {","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"     * Main entry-point for PulsePilot.","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"        initialiseBot();","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"        processInput();","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"        terminateBot();","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"rouvinerh":3,"L5-Z":8,"syj02":3,"-":5}},{"path":"src/main/java/storage/DataFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"//@@author L5-Z","lastModifiedDate":"2024-03-25"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"package storage;","lastModifiedDate":"2024-03-24"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-03-24"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-24"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import java.io.File;","lastModifiedDate":"2024-03-24"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-24"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"import java.security.MessageDigest;","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import java.security.NoSuchAlgorithmException;","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"import health.Appointment;","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-25"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-30"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"import health.Period;","lastModifiedDate":"2024-03-25"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"import ui.Output;","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"import utility.Parser;","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-25"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"import workouts.Workout;","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"import utility.Filters.DataType;","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":" * Represents a DataFile object used to read and write data stored in PulsePilot to a file.","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":" *","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":" * This class handles the reading and writing of various data related to PulsePilot, including user\u0027s name,","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":" * health data like BMI, appointments, periods, and workout data like runs and gym sessions.","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":" * It provides methods to load, save, and process different types of data as well as prevent tampering.","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"public class DataFile {","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"    public static String userName \u003d null;","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"    private static DataFile instance \u003d null;","lastModifiedDate":"2024-03-24"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"     * Private constructor to prevent instantiation from outside the class.","lastModifiedDate":"2024-03-24"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"     * Initializes the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"    private DataFile() {","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"        loadDataFile();","lastModifiedDate":"2024-03-25"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"     * Retrieves the singleton instance of DataFile class.","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"     * If the instance is null, it creates a new instance.","lastModifiedDate":"2024-03-24"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-24"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"     * @return Singleton instance of DataFile class.","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"    public static DataFile getInstance() {","lastModifiedDate":"2024-03-24"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2024-03-24"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"            instance \u003d new DataFile();","lastModifiedDate":"2024-03-24"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"        return instance;","lastModifiedDate":"2024-03-24"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"     * Generates the SHA-256 hash value of the pulsepilot_data.txt file.","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"     * @param file The file for which to generate the hash.","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"     * @return A String representing the SHA-256 hash value of the pulsepilot_data.txt file.","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"     * @throws NoSuchAlgorithmException If the SHA-256 algorithm is not available.","lastModifiedDate":"2024-04-04"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs while reading the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"    private static String generateFileHash(File file) throws NoSuchAlgorithmException, IOException {","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"        MessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"        FileInputStream fis \u003d new FileInputStream(file);","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"        byte[] dataBytes \u003d new byte[1024];","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"        int bytesRead;","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"        while ((bytesRead \u003d fis.read(dataBytes)) !\u003d -1) {","lastModifiedDate":"2024-04-04"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"            md.update(dataBytes, 0, bytesRead);","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"        byte[] digest \u003d md.digest();","lastModifiedDate":"2024-04-04"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"        for (byte b : digest) {","lastModifiedDate":"2024-04-04"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"            sb.append(String.format(\"%02x\", b \u0026 0xff));","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"        fis.close();","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"        return sb.toString();","lastModifiedDate":"2024-04-04"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"     * Verifies the integrity of the data file by checking its existence and hs value.","lastModifiedDate":"2024-04-04"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"     * If the data file already exists, checks its hash value against the expected hash value.","lastModifiedDate":"2024-04-04"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"     * If the data file does not exist, creates a new file and logs the event.","lastModifiedDate":"2024-04-04"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"     * @param dataFile The data file to verify integrity.","lastModifiedDate":"2024-04-04"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"     * @return An integer representing whether the file was found (0) or not found (1).","lastModifiedDate":"2024-04-04"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileCreateError If there is an error creating the data file.","lastModifiedDate":"2024-03-24"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"    public static int verifyIntegrity(File dataFile) throws CustomExceptions.FileCreateError {","lastModifiedDate":"2024-03-25"},{"lineNumber":101,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-24"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"            if (dataFile.createNewFile()) {","lastModifiedDate":"2024-03-24"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Created new data file\", false);","lastModifiedDate":"2024-03-24"},{"lineNumber":104,"author":{"gitId":"L5-Z"},"content":"                return UiConstant.FILE_NOT_FOUND;","lastModifiedDate":"2024-03-25"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"            } else {","lastModifiedDate":"2024-03-24"},{"lineNumber":106,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Reading from existing data file\", false);","lastModifiedDate":"2024-03-24"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"                return UiConstant.FILE_FOUND;","lastModifiedDate":"2024-03-25"},{"lineNumber":108,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":109,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":110,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileCreateError(ErrorConstant.CREATE_FILE_ERROR);","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":113,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":114,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":115,"author":{"gitId":"L5-Z"},"content":"     * Initializes the data file to be used. Or loads the existing data file, verifies its integrity, and processes","lastModifiedDate":"2024-04-04"},{"lineNumber":116,"author":{"gitId":"L5-Z"},"content":"     * its content. The function exits if the file cannot be created or loaded.","lastModifiedDate":"2024-04-04"},{"lineNumber":117,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":118,"author":{"gitId":"L5-Z"},"content":"     * @return An integer representing whether the file was found (0) or not found (1).","lastModifiedDate":"2024-04-04"},{"lineNumber":119,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":120,"author":{"gitId":"L5-Z"},"content":"    public static int loadDataFile() {","lastModifiedDate":"2024-03-27"},{"lineNumber":121,"author":{"gitId":"L5-Z"},"content":"        int status \u003d UiConstant.FILE_NOT_FOUND;","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"L5-Z"},"content":"            File dataFile \u003d UiConstant.SAVE_FILE;","lastModifiedDate":"2024-04-04"},{"lineNumber":124,"author":{"gitId":"L5-Z"},"content":"            File hashFile \u003d new File(UiConstant.HASH_FILE_PATH);","lastModifiedDate":"2024-04-04"},{"lineNumber":125,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":126,"author":{"gitId":"L5-Z"},"content":"            if (dataFile.exists() \u0026\u0026 hashFile.exists()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":127,"author":{"gitId":"L5-Z"},"content":"                String expectedHash \u003d generateFileHash(dataFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":128,"author":{"gitId":"L5-Z"},"content":"                String actualHash \u003d readHashFromFile(hashFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":129,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":130,"author":{"gitId":"L5-Z"},"content":"                if (expectedHash.equals(actualHash)) {","lastModifiedDate":"2024-04-04"},{"lineNumber":131,"author":{"gitId":"L5-Z"},"content":"                    status \u003d verifyIntegrity(dataFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":132,"author":{"gitId":"L5-Z"},"content":"                } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":133,"author":{"gitId":"L5-Z"},"content":"                    LogFile.writeLog(ErrorConstant.DATA_INTEGRITY_ERROR, true);","lastModifiedDate":"2024-04-04"},{"lineNumber":134,"author":{"gitId":"L5-Z"},"content":"                    Output.printException(ErrorConstant.DATA_INTEGRITY_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":135,"author":{"gitId":"L5-Z"},"content":"                    hashFile.delete();","lastModifiedDate":"2024-04-04"},{"lineNumber":136,"author":{"gitId":"L5-Z"},"content":"                    dataFile.delete();","lastModifiedDate":"2024-04-04"},{"lineNumber":137,"author":{"gitId":"L5-Z"},"content":"                    System.exit(1);","lastModifiedDate":"2024-04-04"},{"lineNumber":138,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-04-04"},{"lineNumber":139,"author":{"gitId":"L5-Z"},"content":"            } else if (!dataFile.exists() \u0026\u0026 !hashFile.exists()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":140,"author":{"gitId":"L5-Z"},"content":"                status \u003d verifyIntegrity(dataFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":141,"author":{"gitId":"L5-Z"},"content":"            } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":142,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(ErrorConstant.MISSING_INTEGRITY_ERROR, true);","lastModifiedDate":"2024-04-04"},{"lineNumber":143,"author":{"gitId":"L5-Z"},"content":"                Output.printException(ErrorConstant.MISSING_INTEGRITY_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":144,"author":{"gitId":"L5-Z"},"content":"                hashFile.delete();","lastModifiedDate":"2024-04-04"},{"lineNumber":145,"author":{"gitId":"L5-Z"},"content":"                dataFile.delete();","lastModifiedDate":"2024-04-04"},{"lineNumber":146,"author":{"gitId":"L5-Z"},"content":"                System.exit(1);","lastModifiedDate":"2024-04-04"},{"lineNumber":147,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":148,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.FileCreateError e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":149,"author":{"gitId":"L5-Z"},"content":"            System.err.println(ErrorConstant.CREATE_FILE_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":150,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(ErrorConstant.CREATE_FILE_ERROR, true);","lastModifiedDate":"2024-03-27"},{"lineNumber":151,"author":{"gitId":"L5-Z"},"content":"            System.exit(1);","lastModifiedDate":"2024-03-27"},{"lineNumber":152,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException | NoSuchAlgorithmException e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":153,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Error occurred while processing file hash: \" + e.getMessage(), true);","lastModifiedDate":"2024-04-04"},{"lineNumber":154,"author":{"gitId":"L5-Z"},"content":"            Output.printException(ErrorConstant.HASH_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":155,"author":{"gitId":"L5-Z"},"content":"            System.exit(1);","lastModifiedDate":"2024-04-04"},{"lineNumber":156,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":158,"author":{"gitId":"L5-Z"},"content":"        Path dataFilePath \u003d Path.of(UiConstant.DATA_FILE_PATH);","lastModifiedDate":"2024-03-27"},{"lineNumber":159,"author":{"gitId":"L5-Z"},"content":"        assert Files.exists(dataFilePath) : \"Data file does not exist.\";","lastModifiedDate":"2024-03-27"},{"lineNumber":160,"author":{"gitId":"L5-Z"},"content":"        return status;","lastModifiedDate":"2024-03-27"},{"lineNumber":161,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":162,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":163,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":164,"author":{"gitId":"L5-Z"},"content":"     * Reads the hash value from a hash file.","lastModifiedDate":"2024-04-04"},{"lineNumber":165,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":166,"author":{"gitId":"L5-Z"},"content":"     * @param hashFile The hash file to read from.","lastModifiedDate":"2024-04-04"},{"lineNumber":167,"author":{"gitId":"L5-Z"},"content":"     * @return The hash value read from the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":168,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2024-04-04"},{"lineNumber":169,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":170,"author":{"gitId":"L5-Z"},"content":"    private static String readHashFromFile(File hashFile) throws IOException {","lastModifiedDate":"2024-04-04"},{"lineNumber":171,"author":{"gitId":"L5-Z"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-04-04"},{"lineNumber":172,"author":{"gitId":"L5-Z"},"content":"        Scanner scanner \u003d new Scanner(hashFile);","lastModifiedDate":"2024-04-04"},{"lineNumber":173,"author":{"gitId":"L5-Z"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":174,"author":{"gitId":"L5-Z"},"content":"            sb.append(scanner.nextLine());","lastModifiedDate":"2024-04-04"},{"lineNumber":175,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":176,"author":{"gitId":"L5-Z"},"content":"        scanner.close();","lastModifiedDate":"2024-04-04"},{"lineNumber":177,"author":{"gitId":"L5-Z"},"content":"        return sb.toString();","lastModifiedDate":"2024-04-04"},{"lineNumber":178,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":179,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":180,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":181,"author":{"gitId":"L5-Z"},"content":"     * Writes the hash value to a hash file.","lastModifiedDate":"2024-04-04"},{"lineNumber":182,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":183,"author":{"gitId":"L5-Z"},"content":"     * @param hashFile The hash file to write to.","lastModifiedDate":"2024-04-04"},{"lineNumber":184,"author":{"gitId":"L5-Z"},"content":"     * @param hash     The hash value to write.","lastModifiedDate":"2024-04-04"},{"lineNumber":185,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2024-04-04"},{"lineNumber":186,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":187,"author":{"gitId":"L5-Z"},"content":"    private static void writeHashToFile(FileWriter hashFile, String hash) throws IOException {","lastModifiedDate":"2024-04-04"},{"lineNumber":188,"author":{"gitId":"L5-Z"},"content":"        FileOutputStream fos \u003d new FileOutputStream(UiConstant.HASH_FILE_PATH);","lastModifiedDate":"2024-04-04"},{"lineNumber":189,"author":{"gitId":"L5-Z"},"content":"        fos.write(hash.getBytes());","lastModifiedDate":"2024-04-04"},{"lineNumber":190,"author":{"gitId":"L5-Z"},"content":"        fos.close();","lastModifiedDate":"2024-04-04"},{"lineNumber":191,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":192,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":193,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":194,"author":{"gitId":"L5-Z"},"content":"     * Reads data from the existing data file and processes it.","lastModifiedDate":"2024-04-04"},{"lineNumber":195,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":196,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError If there is an error reading the data file.","lastModifiedDate":"2024-03-24"},{"lineNumber":197,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":198,"author":{"gitId":"L5-Z"},"content":"    public static void readDataFile() throws CustomExceptions.FileReadError {","lastModifiedDate":"2024-03-24"},{"lineNumber":199,"author":{"gitId":"L5-Z"},"content":"        int lineNumberCount \u003d 0; // just for getting lineNumber, no other use","lastModifiedDate":"2024-03-27"},{"lineNumber":200,"author":{"gitId":"L5-Z"},"content":"        try (final Scanner readFile \u003d new Scanner(UiConstant.SAVE_FILE)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":201,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Read begins\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"L5-Z"},"content":"            try {","lastModifiedDate":"2024-04-02"},{"lineNumber":203,"author":{"gitId":"L5-Z"},"content":"                String [] input \u003d readFile.nextLine().split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-02"},{"lineNumber":204,"author":{"gitId":"L5-Z"},"content":"                String name \u003d input[UiConstant.NAME_INDEX].trim();","lastModifiedDate":"2024-04-02"},{"lineNumber":205,"author":{"gitId":"L5-Z"},"content":"                processName(name);","lastModifiedDate":"2024-04-02"},{"lineNumber":206,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":207,"author":{"gitId":"L5-Z"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-04-02"},{"lineNumber":208,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Data file is missing name, exiting.\" + e, true);","lastModifiedDate":"2024-04-02"},{"lineNumber":209,"author":{"gitId":"L5-Z"},"content":"                Output.printException(ErrorConstant.CORRUPT_ERROR);","lastModifiedDate":"2024-04-02"},{"lineNumber":210,"author":{"gitId":"L5-Z"},"content":"                File dataFile \u003d UiConstant.SAVE_FILE;","lastModifiedDate":"2024-04-04"},{"lineNumber":211,"author":{"gitId":"L5-Z"},"content":"                File hashFile \u003d new File(UiConstant.HASH_FILE_PATH);","lastModifiedDate":"2024-04-04"},{"lineNumber":212,"author":{"gitId":"L5-Z"},"content":"                dataFile.delete();","lastModifiedDate":"2024-04-04"},{"lineNumber":213,"author":{"gitId":"L5-Z"},"content":"                hashFile.delete();","lastModifiedDate":"2024-04-04"},{"lineNumber":214,"author":{"gitId":"L5-Z"},"content":"                System.exit(1);","lastModifiedDate":"2024-04-02"},{"lineNumber":215,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":216,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":217,"author":{"gitId":"L5-Z"},"content":"            while (readFile.hasNextLine()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":218,"author":{"gitId":"L5-Z"},"content":"                String rawInput \u003d readFile.nextLine();","lastModifiedDate":"2024-04-03"},{"lineNumber":219,"author":{"gitId":"L5-Z"},"content":"                String [] input \u003d rawInput.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-03"},{"lineNumber":220,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":221,"author":{"gitId":"L5-Z"},"content":"                String dataType \u003d input[UiConstant.DATA_TYPE_INDEX].trim();","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":223,"author":{"gitId":"L5-Z"},"content":"                DataType filter \u003d DataType.valueOf(dataType);","lastModifiedDate":"2024-03-26"},{"lineNumber":224,"author":{"gitId":"L5-Z"},"content":"                switch (filter){","lastModifiedDate":"2024-03-26"},{"lineNumber":225,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":226,"author":{"gitId":"L5-Z"},"content":"                case APPOINTMENT:","lastModifiedDate":"2024-03-26"},{"lineNumber":227,"author":{"gitId":"L5-Z"},"content":"                    processAppointment(input);","lastModifiedDate":"2024-03-30"},{"lineNumber":228,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-26"},{"lineNumber":229,"author":{"gitId":"L5-Z"},"content":"                ","lastModifiedDate":"2024-03-24"},{"lineNumber":230,"author":{"gitId":"L5-Z"},"content":"                case PERIOD:","lastModifiedDate":"2024-03-26"},{"lineNumber":231,"author":{"gitId":"L5-Z"},"content":"                    processPeriod(input);","lastModifiedDate":"2024-03-30"},{"lineNumber":232,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":233,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":234,"author":{"gitId":"L5-Z"},"content":"                case BMI:","lastModifiedDate":"2024-03-26"},{"lineNumber":235,"author":{"gitId":"L5-Z"},"content":"                    processBmi(input);","lastModifiedDate":"2024-03-30"},{"lineNumber":236,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":237,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":238,"author":{"gitId":"L5-Z"},"content":"                case GYM:","lastModifiedDate":"2024-03-26"},{"lineNumber":239,"author":{"gitId":"L5-Z"},"content":"                    processGym(rawInput);","lastModifiedDate":"2024-04-03"},{"lineNumber":240,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":241,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":242,"author":{"gitId":"L5-Z"},"content":"                case RUN:","lastModifiedDate":"2024-03-26"},{"lineNumber":243,"author":{"gitId":"L5-Z"},"content":"                    processRun(input);","lastModifiedDate":"2024-03-30"},{"lineNumber":244,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-24"},{"lineNumber":245,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":246,"author":{"gitId":"L5-Z"},"content":"                default:","lastModifiedDate":"2024-03-27"},{"lineNumber":247,"author":{"gitId":"L5-Z"},"content":"                    break; // valueOf results in immediate exception for non-match with enum DataType","lastModifiedDate":"2024-03-27"},{"lineNumber":248,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-03-24"},{"lineNumber":249,"author":{"gitId":"L5-Z"},"content":"                lineNumberCount +\u003d 1;","lastModifiedDate":"2024-03-27"},{"lineNumber":250,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":251,"author":{"gitId":"L5-Z"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":252,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Data file is corrupted, exiting.\" + e, true);","lastModifiedDate":"2024-04-04"},{"lineNumber":253,"author":{"gitId":"L5-Z"},"content":"            Output.printException(ErrorConstant.CORRUPT_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":254,"author":{"gitId":"L5-Z"},"content":"            File dataFile \u003d UiConstant.SAVE_FILE;","lastModifiedDate":"2024-04-04"},{"lineNumber":255,"author":{"gitId":"L5-Z"},"content":"            File hashFile \u003d new File(UiConstant.HASH_FILE_PATH);","lastModifiedDate":"2024-04-04"},{"lineNumber":256,"author":{"gitId":"L5-Z"},"content":"            dataFile.delete();","lastModifiedDate":"2024-04-04"},{"lineNumber":257,"author":{"gitId":"L5-Z"},"content":"            hashFile.delete();","lastModifiedDate":"2024-04-04"},{"lineNumber":258,"author":{"gitId":"L5-Z"},"content":"            System.exit(1);","lastModifiedDate":"2024-04-04"},{"lineNumber":259,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":260,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":261,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":262,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":263,"author":{"gitId":"L5-Z"},"content":"     * Processes the user name from the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":264,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":265,"author":{"gitId":"L5-Z"},"content":"     * @param name The user name read from the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":266,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":267,"author":{"gitId":"L5-Z"},"content":"    public static void processName(String name){","lastModifiedDate":"2024-03-27"},{"lineNumber":268,"author":{"gitId":"L5-Z"},"content":"        userName \u003d name.trim();","lastModifiedDate":"2024-03-27"},{"lineNumber":269,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":270,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":271,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":272,"author":{"gitId":"L5-Z"},"content":"     * Processes an appointment entry from the input string array and adds it to the health list.","lastModifiedDate":"2024-04-04"},{"lineNumber":273,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":274,"author":{"gitId":"L5-Z"},"content":"     * @param input The input string array containing appointment data.","lastModifiedDate":"2024-04-04"},{"lineNumber":275,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":276,"author":{"gitId":"L5-Z"},"content":"    public static void processAppointment(String[] input) {","lastModifiedDate":"2024-03-30"},{"lineNumber":277,"author":{"gitId":"L5-Z"},"content":"        String date \u003d input[1].trim(); // date","lastModifiedDate":"2024-03-30"},{"lineNumber":278,"author":{"gitId":"L5-Z"},"content":"        String time \u003d input[2].trim(); // time","lastModifiedDate":"2024-03-30"},{"lineNumber":279,"author":{"gitId":"L5-Z"},"content":"        String formattedTime \u003d time.replace(\".\", \":\");","lastModifiedDate":"2024-04-02"},{"lineNumber":280,"author":{"gitId":"L5-Z"},"content":"        String description \u003d input[3].trim(); // description","lastModifiedDate":"2024-03-30"},{"lineNumber":281,"author":{"gitId":"L5-Z"},"content":"        Appointment appointment \u003d new Appointment(date, formattedTime, description);","lastModifiedDate":"2024-04-02"},{"lineNumber":282,"author":{"gitId":"L5-Z"},"content":"        HealthList.addAppointment(appointment);","lastModifiedDate":"2024-03-30"},{"lineNumber":283,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":284,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":285,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":286,"author":{"gitId":"L5-Z"},"content":"     * Processes a period entry from the input string array and adds it to the health list.","lastModifiedDate":"2024-04-04"},{"lineNumber":287,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":288,"author":{"gitId":"L5-Z"},"content":"     * @param input The input string array containing period data.","lastModifiedDate":"2024-04-04"},{"lineNumber":289,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":290,"author":{"gitId":"L5-Z"},"content":"    public static void processPeriod(String[] input) {","lastModifiedDate":"2024-03-30"},{"lineNumber":291,"author":{"gitId":"L5-Z"},"content":"        String startDate \u003d input[1].trim(); // start","lastModifiedDate":"2024-03-30"},{"lineNumber":292,"author":{"gitId":"L5-Z"},"content":"        String endDate \u003d input[2].trim(); // end, skip 3 duration","lastModifiedDate":"2024-03-30"},{"lineNumber":293,"author":{"gitId":"L5-Z"},"content":"        Period period \u003d new Period(startDate, endDate);","lastModifiedDate":"2024-03-30"},{"lineNumber":294,"author":{"gitId":"L5-Z"},"content":"        HealthList.addPeriod(period);","lastModifiedDate":"2024-03-30"},{"lineNumber":295,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":296,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":297,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":298,"author":{"gitId":"L5-Z"},"content":"     * Processes a BMI entry from the input string array and adds it to the health list.","lastModifiedDate":"2024-04-04"},{"lineNumber":299,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":300,"author":{"gitId":"L5-Z"},"content":"     * @param input The input string array containing BMI data.","lastModifiedDate":"2024-04-04"},{"lineNumber":301,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":302,"author":{"gitId":"L5-Z"},"content":"    public static void processBmi(String[] input) {","lastModifiedDate":"2024-03-30"},{"lineNumber":303,"author":{"gitId":"L5-Z"},"content":"        String height \u003d input[1].trim(); // height","lastModifiedDate":"2024-03-30"},{"lineNumber":304,"author":{"gitId":"L5-Z"},"content":"        String weight \u003d input[2].trim(); // weight","lastModifiedDate":"2024-03-30"},{"lineNumber":305,"author":{"gitId":"L5-Z"},"content":"        String date \u003d input[4].trim();// skip 3, bmi score, 4 is date","lastModifiedDate":"2024-03-30"},{"lineNumber":306,"author":{"gitId":"L5-Z"},"content":"        Bmi bmi \u003d new Bmi(height, weight, date);","lastModifiedDate":"2024-03-30"},{"lineNumber":307,"author":{"gitId":"L5-Z"},"content":"        HealthList.addBmi(bmi);","lastModifiedDate":"2024-03-30"},{"lineNumber":308,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":309,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":310,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":311,"author":{"gitId":"L5-Z"},"content":"     * Processes a run entry from the input string array and adds it to the health list.","lastModifiedDate":"2024-04-04"},{"lineNumber":312,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":313,"author":{"gitId":"L5-Z"},"content":"     * @param input The input string array containing run data.","lastModifiedDate":"2024-04-04"},{"lineNumber":314,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput If there is an error in the input data format.","lastModifiedDate":"2024-04-04"},{"lineNumber":315,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":316,"author":{"gitId":"L5-Z"},"content":"    public static void processRun(String[] input) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-30"},{"lineNumber":317,"author":{"gitId":"L5-Z"},"content":"        String distance \u003d input[1].trim(); // distance","lastModifiedDate":"2024-03-30"},{"lineNumber":318,"author":{"gitId":"L5-Z"},"content":"        String time \u003d input[2].trim(); // time","lastModifiedDate":"2024-03-30"},{"lineNumber":319,"author":{"gitId":"L5-Z"},"content":"        String formattedTime \u003d time.replace(\".\", \":\");","lastModifiedDate":"2024-04-02"},{"lineNumber":320,"author":{"gitId":"L5-Z"},"content":"        String date \u003d input[3].trim(); // 3 is date","lastModifiedDate":"2024-04-02"},{"lineNumber":321,"author":{"gitId":"L5-Z"},"content":"        if (date.equals(ErrorConstant.NO_DATE_SPECIFIED_ERROR)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":322,"author":{"gitId":"L5-Z"},"content":"            new Run(formattedTime, distance);","lastModifiedDate":"2024-04-03"},{"lineNumber":323,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-04-03"},{"lineNumber":324,"author":{"gitId":"L5-Z"},"content":"            new Run(formattedTime, distance, date);","lastModifiedDate":"2024-04-02"},{"lineNumber":325,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":326,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":327,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":328,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":329,"author":{"gitId":"L5-Z"},"content":"     * Processes a gym entry from the raw input string and delegates parsing to Parser class.","lastModifiedDate":"2024-04-04"},{"lineNumber":330,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":331,"author":{"gitId":"L5-Z"},"content":"     * @param rawInput The raw input string containing gym data.","lastModifiedDate":"2024-04-04"},{"lineNumber":332,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput   If there is an error in the input data format.","lastModifiedDate":"2024-04-04"},{"lineNumber":333,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError If there is an error reading the gym file.","lastModifiedDate":"2024-04-04"},{"lineNumber":334,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":335,"author":{"gitId":"L5-Z"},"content":"    public static void processGym(String rawInput)","lastModifiedDate":"2024-04-03"},{"lineNumber":336,"author":{"gitId":"L5-Z"},"content":"            throws CustomExceptions.InvalidInput, CustomExceptions.FileReadError {","lastModifiedDate":"2024-04-03"},{"lineNumber":337,"author":{"gitId":"L5-Z"},"content":"        Parser.parseGymFileInput(rawInput);","lastModifiedDate":"2024-04-03"},{"lineNumber":338,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":339,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":340,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":341,"author":{"gitId":"L5-Z"},"content":"     * Saves data to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":342,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":343,"author":{"gitId":"L5-Z"},"content":"     * @param name               The user name to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":344,"author":{"gitId":"L5-Z"},"content":"     * @param bmiArrayList       List of BMI entries to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":345,"author":{"gitId":"L5-Z"},"content":"     * @param appointmentArrayList List of appointment entries to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":346,"author":{"gitId":"L5-Z"},"content":"     * @param periodArrayList    List of period entries to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":347,"author":{"gitId":"L5-Z"},"content":"     * @param workoutArrayList   List of workout entries to be saved.","lastModifiedDate":"2024-04-04"},{"lineNumber":348,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileWriteError If there is an error writing to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":349,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":350,"author":{"gitId":"L5-Z"},"content":"    public static void saveDataFile(String name,","lastModifiedDate":"2024-03-27"},{"lineNumber":351,"author":{"gitId":"L5-Z"},"content":"                                    ArrayList\u003cBmi\u003e bmiArrayList,","lastModifiedDate":"2024-03-27"},{"lineNumber":352,"author":{"gitId":"L5-Z"},"content":"                                    ArrayList\u003cAppointment\u003e appointmentArrayList,","lastModifiedDate":"2024-03-26"},{"lineNumber":353,"author":{"gitId":"L5-Z"},"content":"                                    ArrayList\u003cPeriod\u003e periodArrayList,","lastModifiedDate":"2024-03-25"},{"lineNumber":354,"author":{"gitId":"L5-Z"},"content":"                                    ArrayList\u003cWorkout\u003e workoutArrayList","lastModifiedDate":"2024-04-03"},{"lineNumber":355,"author":{"gitId":"L5-Z"},"content":"                                    ) throws CustomExceptions.FileWriteError {","lastModifiedDate":"2024-03-25"},{"lineNumber":356,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":357,"author":{"gitId":"L5-Z"},"content":"        try (FileWriter dataFile \u003d new FileWriter(UiConstant.DATA_FILE_PATH)) {","lastModifiedDate":"2024-03-25"},{"lineNumber":358,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Attempting to write data, name: \" + name, false);","lastModifiedDate":"2024-03-27"},{"lineNumber":359,"author":{"gitId":"L5-Z"},"content":"            writeName(dataFile, name);","lastModifiedDate":"2024-03-27"},{"lineNumber":360,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Written name\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":361,"author":{"gitId":"L5-Z"},"content":"            writeHealthData(dataFile, bmiArrayList,","lastModifiedDate":"2024-03-30"},{"lineNumber":362,"author":{"gitId":"L5-Z"},"content":"                    appointmentArrayList,","lastModifiedDate":"2024-03-26"},{"lineNumber":363,"author":{"gitId":"L5-Z"},"content":"                    periodArrayList);","lastModifiedDate":"2024-03-25"},{"lineNumber":364,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":365,"author":{"gitId":"L5-Z"},"content":"            writeWorkoutData(dataFile, workoutArrayList);","lastModifiedDate":"2024-04-03"},{"lineNumber":366,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":367,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Write end\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":368,"author":{"gitId":"L5-Z"},"content":"            dataFile.close();","lastModifiedDate":"2024-03-25"},{"lineNumber":369,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":370,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-25"},{"lineNumber":371,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileWriteError(ErrorConstant.SAVE_ERROR);","lastModifiedDate":"2024-03-25"},{"lineNumber":372,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":373,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":374,"author":{"gitId":"L5-Z"},"content":"        try (FileWriter hashFile \u003d new FileWriter(UiConstant.HASH_FILE_PATH)) {","lastModifiedDate":"2024-04-04"},{"lineNumber":375,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Attempting to write hash\", false);","lastModifiedDate":"2024-04-04"},{"lineNumber":376,"author":{"gitId":"L5-Z"},"content":"            File dataFile \u003d UiConstant.SAVE_FILE;","lastModifiedDate":"2024-04-04"},{"lineNumber":377,"author":{"gitId":"L5-Z"},"content":"            writeHashToFile(hashFile, generateFileHash(dataFile));","lastModifiedDate":"2024-04-04"},{"lineNumber":378,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":379,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Write end\", false);","lastModifiedDate":"2024-04-04"},{"lineNumber":380,"author":{"gitId":"L5-Z"},"content":"            hashFile.close();","lastModifiedDate":"2024-04-04"},{"lineNumber":381,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":382,"author":{"gitId":"L5-Z"},"content":"        } catch (IOException | NoSuchAlgorithmException e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":383,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileWriteError(ErrorConstant.SAVE_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":384,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":385,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":386,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":387,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":388,"author":{"gitId":"L5-Z"},"content":"     * Writes the user\u0027s name to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":389,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":390,"author":{"gitId":"L5-Z"},"content":"     * @param dataFile The FileWriter object for writing to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":391,"author":{"gitId":"L5-Z"},"content":"     * @param name     The user\u0027s name to be written to the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":392,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":393,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":394,"author":{"gitId":"L5-Z"},"content":"    public static void writeName(FileWriter dataFile, String name) throws IOException {","lastModifiedDate":"2024-03-27"},{"lineNumber":395,"author":{"gitId":"L5-Z"},"content":"        dataFile.write(UiConstant.NAME_LABEL + UiConstant.SPLIT_BY_COLON + name.trim() + System.lineSeparator());","lastModifiedDate":"2024-04-02"},{"lineNumber":396,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Wrote name to file\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":397,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":398,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":399,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":400,"author":{"gitId":"L5-Z"},"content":"     * Writes health-related data (BMI, appointments, periods) to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":401,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":402,"author":{"gitId":"L5-Z"},"content":"     * @param dataFile             The FileWriter object for writing to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":403,"author":{"gitId":"L5-Z"},"content":"     * @param bmiArrayList         The list of BMI entries to be written.","lastModifiedDate":"2024-04-04"},{"lineNumber":404,"author":{"gitId":"L5-Z"},"content":"     * @param appointmentArrayList The list of appointment entries to be written.","lastModifiedDate":"2024-04-04"},{"lineNumber":405,"author":{"gitId":"L5-Z"},"content":"     * @param periodArrayList      The list of period entries to be written.","lastModifiedDate":"2024-04-04"},{"lineNumber":406,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":407,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":408,"author":{"gitId":"L5-Z"},"content":"    public static void writeHealthData(FileWriter dataFile, ArrayList\u003cBmi\u003e bmiArrayList,","lastModifiedDate":"2024-03-30"},{"lineNumber":409,"author":{"gitId":"L5-Z"},"content":"                                       ArrayList\u003cAppointment\u003e appointmentArrayList,","lastModifiedDate":"2024-03-27"},{"lineNumber":410,"author":{"gitId":"L5-Z"},"content":"                                       ArrayList\u003cPeriod\u003e periodArrayList) throws IOException {","lastModifiedDate":"2024-03-30"},{"lineNumber":411,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":412,"author":{"gitId":"L5-Z"},"content":"        // Write each bmi entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":413,"author":{"gitId":"L5-Z"},"content":"        // bmi format: bmi:HEIGHT:WEIGHT:BMI_SCORE:DATE (NA if no date)","lastModifiedDate":"2024-03-30"},{"lineNumber":414,"author":{"gitId":"L5-Z"},"content":"        if (!bmiArrayList.isEmpty()){","lastModifiedDate":"2024-03-30"},{"lineNumber":415,"author":{"gitId":"L5-Z"},"content":"            for (Bmi bmiEntry : bmiArrayList) {","lastModifiedDate":"2024-03-30"},{"lineNumber":416,"author":{"gitId":"L5-Z"},"content":"                String formattedDate \u003d Parser.parseFormattedDate(bmiEntry.getDate());","lastModifiedDate":"2024-04-02"},{"lineNumber":417,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":418,"author":{"gitId":"L5-Z"},"content":"                dataFile.write(DataType.BMI + UiConstant.SPLIT_BY_COLON + bmiEntry.getHeight() +","lastModifiedDate":"2024-03-30"},{"lineNumber":419,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + bmiEntry.getWeight() +","lastModifiedDate":"2024-03-30"},{"lineNumber":420,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + bmiEntry.getBmiValue() +","lastModifiedDate":"2024-03-30"},{"lineNumber":421,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + formattedDate + System.lineSeparator());","lastModifiedDate":"2024-04-02"},{"lineNumber":422,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":423,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":424,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":425,"author":{"gitId":"L5-Z"},"content":"        // Write each appointment entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":426,"author":{"gitId":"L5-Z"},"content":"        // appointment format: appointment:DATE:TIME:DESCRIPTION","lastModifiedDate":"2024-03-30"},{"lineNumber":427,"author":{"gitId":"L5-Z"},"content":"        if (!appointmentArrayList.isEmpty()){","lastModifiedDate":"2024-03-30"},{"lineNumber":428,"author":{"gitId":"L5-Z"},"content":"            for (Appointment appointmentEntry : appointmentArrayList) {","lastModifiedDate":"2024-03-30"},{"lineNumber":429,"author":{"gitId":"L5-Z"},"content":"                String formattedDate \u003d Parser.parseFormattedDate(appointmentEntry.getDate());","lastModifiedDate":"2024-04-02"},{"lineNumber":430,"author":{"gitId":"L5-Z"},"content":"                String formattedTime \u003d String.valueOf(appointmentEntry.getTime());","lastModifiedDate":"2024-04-02"},{"lineNumber":431,"author":{"gitId":"L5-Z"},"content":"                formattedTime \u003d formattedTime.replace(\":\", \".\");","lastModifiedDate":"2024-04-02"},{"lineNumber":432,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":433,"author":{"gitId":"L5-Z"},"content":"                dataFile.write(DataType.APPOINTMENT + UiConstant.SPLIT_BY_COLON + formattedDate +","lastModifiedDate":"2024-04-02"},{"lineNumber":434,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + formattedTime +","lastModifiedDate":"2024-04-02"},{"lineNumber":435,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + appointmentEntry.getDescription() + System.lineSeparator());","lastModifiedDate":"2024-03-30"},{"lineNumber":436,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":437,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":438,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":439,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":440,"author":{"gitId":"L5-Z"},"content":"        // Write each period entry in a specific format","lastModifiedDate":"2024-03-27"},{"lineNumber":441,"author":{"gitId":"L5-Z"},"content":"        // period format: period:START:END:DURATION","lastModifiedDate":"2024-03-30"},{"lineNumber":442,"author":{"gitId":"L5-Z"},"content":"        if (!periodArrayList.isEmpty()){","lastModifiedDate":"2024-03-30"},{"lineNumber":443,"author":{"gitId":"L5-Z"},"content":"            for (Period periodEntry : periodArrayList) {","lastModifiedDate":"2024-03-30"},{"lineNumber":444,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Writing period to file\", false);","lastModifiedDate":"2024-03-30"},{"lineNumber":445,"author":{"gitId":"L5-Z"},"content":"                String formattedStartDate \u003d Parser.parseFormattedDate(periodEntry.getStartDate());","lastModifiedDate":"2024-04-02"},{"lineNumber":446,"author":{"gitId":"L5-Z"},"content":"                String formattedEndDate \u003d Parser.parseFormattedDate(periodEntry.getEndDate());","lastModifiedDate":"2024-04-02"},{"lineNumber":447,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":448,"author":{"gitId":"L5-Z"},"content":"                dataFile.write(DataType.PERIOD + UiConstant.SPLIT_BY_COLON + formattedStartDate +","lastModifiedDate":"2024-04-02"},{"lineNumber":449,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + formattedEndDate +","lastModifiedDate":"2024-04-02"},{"lineNumber":450,"author":{"gitId":"L5-Z"},"content":"                        UiConstant.SPLIT_BY_COLON + periodEntry.getPeriodLength() + System.lineSeparator());","lastModifiedDate":"2024-03-30"},{"lineNumber":451,"author":{"gitId":"L5-Z"},"content":"                LogFile.writeLog(\"Wrote period to file\", false);","lastModifiedDate":"2024-03-30"},{"lineNumber":452,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":453,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":454,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":455,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":456,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":457,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":458,"author":{"gitId":"L5-Z"},"content":"     * Writes workout-related data (runs and gym sessions) to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":459,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":460,"author":{"gitId":"L5-Z"},"content":"     * @param dataFile         The FileWriter object for writing to the data file.","lastModifiedDate":"2024-04-04"},{"lineNumber":461,"author":{"gitId":"L5-Z"},"content":"     * @param workoutArrayList The list of workout entries to be written.","lastModifiedDate":"2024-04-04"},{"lineNumber":462,"author":{"gitId":"L5-Z"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2024-04-04"},{"lineNumber":463,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":464,"author":{"gitId":"L5-Z"},"content":"    public static void writeWorkoutData(FileWriter dataFile,","lastModifiedDate":"2024-03-30"},{"lineNumber":465,"author":{"gitId":"L5-Z"},"content":"                                        ArrayList\u003cWorkout\u003e workoutArrayList) throws IOException {","lastModifiedDate":"2024-04-03"},{"lineNumber":466,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":467,"author":{"gitId":"L5-Z"},"content":"        // Write each run entry in a specific format","lastModifiedDate":"2024-03-30"},{"lineNumber":468,"author":{"gitId":"L5-Z"},"content":"        // run format: run:DISTANCE:TIME:DATE","lastModifiedDate":"2024-04-02"},{"lineNumber":469,"author":{"gitId":"L5-Z"},"content":"        if (!workoutArrayList.isEmpty()){","lastModifiedDate":"2024-04-03"},{"lineNumber":470,"author":{"gitId":"L5-Z"},"content":"            for (Workout workoutEntry : workoutArrayList) {","lastModifiedDate":"2024-04-03"},{"lineNumber":471,"author":{"gitId":"L5-Z"},"content":"                if (workoutEntry instanceof Run) {","lastModifiedDate":"2024-04-03"},{"lineNumber":472,"author":{"gitId":"L5-Z"},"content":"                    Run runEntry \u003d (Run) workoutEntry;","lastModifiedDate":"2024-04-03"},{"lineNumber":473,"author":{"gitId":"L5-Z"},"content":"                    String formattedDate \u003d Parser.parseFormattedDate(runEntry.getDate());","lastModifiedDate":"2024-04-02"},{"lineNumber":474,"author":{"gitId":"L5-Z"},"content":"                    String formattedTime \u003d runEntry.getTimes().replace(\":\", \".\");","lastModifiedDate":"2024-04-02"},{"lineNumber":475,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":476,"author":{"gitId":"L5-Z"},"content":"                    dataFile.write(DataType.RUN + UiConstant.SPLIT_BY_COLON + runEntry.getDistance() +","lastModifiedDate":"2024-04-02"},{"lineNumber":477,"author":{"gitId":"L5-Z"},"content":"                            UiConstant.SPLIT_BY_COLON + formattedTime +","lastModifiedDate":"2024-04-02"},{"lineNumber":478,"author":{"gitId":"L5-Z"},"content":"                            UiConstant.SPLIT_BY_COLON + formattedDate + System.lineSeparator());","lastModifiedDate":"2024-04-02"},{"lineNumber":479,"author":{"gitId":"L5-Z"},"content":"                } else if (workoutEntry instanceof Gym) {","lastModifiedDate":"2024-04-03"},{"lineNumber":480,"author":{"gitId":"L5-Z"},"content":"                    Gym gymEntry \u003d (Gym) workoutEntry;","lastModifiedDate":"2024-04-03"},{"lineNumber":481,"author":{"gitId":"L5-Z"},"content":"                    String gymString \u003d gymEntry.toFileString();","lastModifiedDate":"2024-04-03"},{"lineNumber":482,"author":{"gitId":"L5-Z"},"content":"                    dataFile.write(gymString + System.lineSeparator());","lastModifiedDate":"2024-04-04"},{"lineNumber":483,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-04-03"},{"lineNumber":484,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":485,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":486,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":487,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-24"},{"lineNumber":488,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-24"}],"authorContributionMap":{"L5-Z":488}},{"path":"src/main/java/storage/LogFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package storage;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":" * Represents a Logfile object used to write information and error logs for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"public class LogFile {","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"    protected static FileHandler logFileHandler \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"    private static LogFile instance \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"    private static final Logger logger \u003d Logger.getLogger(LogFile.class.getName());","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"     * Private constructor to prevent instantiation from outside the class.","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"    private LogFile() {","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"        initializeLogFile();","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     * Returns a singular instance of the LogFile class.","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"     * If the instance is null, it creates a new instance.","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     * @return An instance of the LogFile class.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"    public static LogFile getInstance() {","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"            instance \u003d new LogFile();","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"        return instance;","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * Initialises the log file to be used. Creates the log file if needed, then sets formatters.","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * Parent handlers are set to false to prevent printing of logs to terminal.","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    public static void initializeLogFile() {","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"            if (logFileHandler \u003d\u003d null) {","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"                logFileHandler \u003d new FileHandler(UiConstant.LOG_FILE_PATH);","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"                logFileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"                logger.addHandler(logFileHandler);","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"                logger.setUseParentHandlers(false);","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"            throw new RuntimeException(\"Error setting up log file\", e);","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        assert(logFileHandler !\u003d null);","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     * Writes information or warning logs to the log file.","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     * @param input   String representing the user\u0027s input.","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     * @param isError Boolean variable to determine if log is an error.","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"    public static void writeLog(String input, boolean isError) {","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"        if (isError) {","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"            logger.log(Level.WARNING, \"Error: \" + input);","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"            logger.log(Level.INFO, input);","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"JustinSoh":1,"rouvinerh":52,"L5-Z":16}},{"path":"src/main/java/ui/Handler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"package ui;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import storage.DataFile;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import utility.Filters.Command;","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import utility.Filters.DeleteFilters;","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import utility.Filters.HealthFilters;","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import utility.Filters.WorkoutFilters;","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import workouts.WorkoutList;","lastModifiedDate":"2024-03-25"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":" * Represents user input parsing and handling before providing feedback to the user.","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"public class Handler {","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    public static Scanner in;","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    static LogFile logFile \u003d LogFile.getInstance();","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"     * Processes user input and filters for valid command words from enum {@code Command},","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"     * then creates the relevant object based on details entered.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"     * @throws IllegalArgumentException If an error occurs during command processing.","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    public static void processInput() {","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"        while (in.hasNextLine()) {","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"            String userInput \u003d in.nextLine();","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"            String instruction \u003d userInput.toUpperCase().split(UiConstant.SPLIT_BY_WHITESPACE)[0];","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"User Input: \" + userInput, false);","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"            assert userInput !\u003d null : \"Object cannot be null\";","lastModifiedDate":"2024-03-22"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"            try {","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"                Command command \u003d Command.valueOf(instruction);","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"                switch (command) {","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"                case EXIT:","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"                    LogFile.writeLog(\"User ran command: exit\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"                    System.out.println(UiConstant.EXIT_MESSAGE);","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"                    return;","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"                case WORKOUT:","lastModifiedDate":"2024-03-25"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"                    handleWorkout(userInput);","lastModifiedDate":"2024-03-25"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"                case HEALTH:","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"                    handleHealth(userInput);","lastModifiedDate":"2024-03-19"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"                case HISTORY:","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"                    handleHistory(userInput);","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"                case LATEST:","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"                    handleLatest(userInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"                case DELETE:","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"                    handleDelete(userInput);","lastModifiedDate":"2024-03-25"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"                    break;","lastModifiedDate":"2024-03-25"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"                case HELP:","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"                    Output.printHelp();","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"                    break;","lastModifiedDate":"2024-03-11"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"                default:","lastModifiedDate":"2024-03-11"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"                    break; // valueOf results in immediate exception for non-match with enum Command","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"                }","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"            } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"                Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"                Output.printException(ErrorConstant.INVALID_COMMAND_ERROR);","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"     * Handles workout command.","lastModifiedDate":"2024-04-01"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"     * Adds a Run or Gym object to PulsePilot.","lastModifiedDate":"2024-04-01"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-04-01"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"    public static void handleWorkout(String userInput) {","lastModifiedDate":"2024-03-25"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"            String typeOfWorkout \u003d Parser.extractSubstringFromSpecificIndex(userInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.EXERCISE_FLAG);","lastModifiedDate":"2024-04-01"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"            WorkoutFilters filter \u003d WorkoutFilters.valueOf(typeOfWorkout.toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"            switch(filter) {","lastModifiedDate":"2024-03-31"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"            case RUN:","lastModifiedDate":"2024-03-31"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"                Parser.parseRunInput(userInput);","lastModifiedDate":"2024-03-31"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-31"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"            case GYM:","lastModifiedDate":"2024-03-31"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"                Parser.parseGymInput(userInput);","lastModifiedDate":"2024-03-31"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-31"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"            default:","lastModifiedDate":"2024-03-31"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-31"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"            Output.printException(\"Invalid workout type! Please input either /e:run or /e:gym!\");","lastModifiedDate":"2024-04-01"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"     * Handles history command.","lastModifiedDate":"2024-03-25"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"     * Show history of all exercises, run or gym.","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-20"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"    public static void handleHistory(String userInput) {","lastModifiedDate":"2024-03-19"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"        String filter \u003d Parser.parseHistoryAndLatestInput(userInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"        if (filter !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"            Output.printHistory(filter);","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"     * Handles the delete command.","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"     * Deletes an item stored within PulsePilot.","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If the user input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"    public static void handleDelete(String userInput) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        String[] parsedInputs \u003d Parser.parseDeleteInput(userInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        if (parsedInputs \u003d\u003d null) {","lastModifiedDate":"2024-03-26"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"            return;","lastModifiedDate":"2024-03-26"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"            DeleteFilters filter \u003d DeleteFilters.valueOf(parsedInputs[0].toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"            int index \u003d Integer.parseInt(parsedInputs[1]) - 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"            switch (filter) {","lastModifiedDate":"2024-03-31"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"            case BMI:","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"                HealthList.deleteBmi(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"                HealthList.deletePeriod(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"            case GYM:","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"                WorkoutList.deleteGym(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"            case RUN:","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"                WorkoutList.deleteRun(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"            case APPOINTMENT:","lastModifiedDate":"2024-04-01"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"                HealthList.deleteAppointment(index);","lastModifiedDate":"2024-04-01"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-04-01"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"            default:","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":173,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-31"},{"lineNumber":174,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":175,"author":{"gitId":"syj02"},"content":"     * Handles user input related to health data. Parses the user input to determine","lastModifiedDate":"2024-03-19"},{"lineNumber":176,"author":{"gitId":"syj02"},"content":"     * the type of health data and processes it accordingly.","lastModifiedDate":"2024-03-19"},{"lineNumber":177,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-19"},{"lineNumber":178,"author":{"gitId":"syj02"},"content":"     * @param userInput A string containing health data information of user.","lastModifiedDate":"2024-03-19"},{"lineNumber":179,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":180,"author":{"gitId":"syj02"},"content":"    public static void handleHealth(String userInput) {","lastModifiedDate":"2024-03-18"},{"lineNumber":181,"author":{"gitId":"syj02"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":182,"author":{"gitId":"syj02"},"content":"            String typeOfHealth \u003d Parser.extractSubstringFromSpecificIndex(userInput, HealthConstant.HEALTH_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":183,"author":{"gitId":"syj02"},"content":"            HealthFilters filter \u003d HealthFilters.valueOf(typeOfHealth.toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":184,"author":{"gitId":"syj02"},"content":"            switch(filter) {","lastModifiedDate":"2024-03-31"},{"lineNumber":185,"author":{"gitId":"syj02"},"content":"            case BMI:","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"syj02"},"content":"                Parser.parseBmiInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":189,"author":{"gitId":"syj02"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"syj02"},"content":"                Parser.parsePeriodInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":191,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":192,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":193,"author":{"gitId":"syj02"},"content":"            case PREDICTION:","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"syj02"},"content":"                Parser.parsePredictionInput();","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":197,"author":{"gitId":"syj02"},"content":"            case APPOINTMENT:","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"syj02"},"content":"                Parser.parseAppointmentInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":199,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":200,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":201,"author":{"gitId":"syj02"},"content":"            default:","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"syj02"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":203,"author":{"gitId":"syj02"},"content":"            }","lastModifiedDate":"2024-03-14"},{"lineNumber":204,"author":{"gitId":"syj02"},"content":"        } catch (CustomExceptions.InvalidInput |  CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":205,"author":{"gitId":"syj02"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":206,"author":{"gitId":"syj02"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":207,"author":{"gitId":"syj02"},"content":"            Output.printException(ErrorConstant.INVALID_HEALTH_INPUT_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":208,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":209,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":210,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-22"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"     * Prints the latest run, gym, BMI entry or Period tracked.","lastModifiedDate":"2024-03-20"},{"lineNumber":215,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":216,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput String representing user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"    public static void handleLatest(String userInput) {","lastModifiedDate":"2024-03-20"},{"lineNumber":219,"author":{"gitId":"JustinSoh"},"content":"        String filter \u003d Parser.parseHistoryAndLatestInput(userInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":220,"author":{"gitId":"JustinSoh"},"content":"        if (filter !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"            Output.printLatest(filter);","lastModifiedDate":"2024-03-20"},{"lineNumber":222,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":223,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"    //@@author","lastModifiedDate":"2024-03-22"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-22"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"     * Get user\u0027s name, and print profile induction messages.","lastModifiedDate":"2024-03-22"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-22"},{"lineNumber":230,"author":{"gitId":"L5-Z"},"content":"    public static void userInduction() {","lastModifiedDate":"2024-03-20"},{"lineNumber":231,"author":{"gitId":"L5-Z"},"content":"        String name \u003d in.nextLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":232,"author":{"gitId":"L5-Z"},"content":"        DataFile.userName \u003d name;","lastModifiedDate":"2024-03-27"},{"lineNumber":233,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Welcome aboard, Captain \" + name);","lastModifiedDate":"2024-03-20"},{"lineNumber":234,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":235,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":236,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Tips: Enter \u0027help\u0027 to view the pilot manual!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":237,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Initiating FTL jump sequence...\");","lastModifiedDate":"2024-03-20"},{"lineNumber":238,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":239,"author":{"gitId":"L5-Z"},"content":"        // DataFile.saveName(name);","lastModifiedDate":"2024-03-26"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"        LogFile.writeLog(\"Name Entered: \" + name, false);","lastModifiedDate":"2024-03-22"},{"lineNumber":241,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":242,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"FTL jump completed.\");","lastModifiedDate":"2024-03-20"},{"lineNumber":243,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":244,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-22"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"     * Initialise scanner to read user input.","lastModifiedDate":"2024-03-22"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-22"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"    public static void initialiseScanner() {","lastModifiedDate":"2024-03-20"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2024-03-20"},{"lineNumber":250,"author":{"gitId":"L5-Z"},"content":"        assert in !\u003d null : \"Object cannot be null\";","lastModifiedDate":"2024-03-22"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-22"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"     * Close scanner to stop reading user input.","lastModifiedDate":"2024-03-22"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-22"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"    public static void destroyScanner() {","lastModifiedDate":"2024-03-20"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"        if (in !\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"            assert in !\u003d null : \"Object cannot be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"            in.close();","lastModifiedDate":"2024-03-20"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":263,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":264,"author":{"gitId":"L5-Z"},"content":"     * Initializes PulsePilot by printing a welcome message, loading tasks from storage,","lastModifiedDate":"2024-03-18"},{"lineNumber":265,"author":{"gitId":"L5-Z"},"content":"     * and returning the tasks list.","lastModifiedDate":"2024-03-11"},{"lineNumber":266,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":267,"author":{"gitId":"L5-Z"},"content":"    public static void initialiseBot() {","lastModifiedDate":"2024-03-11"},{"lineNumber":268,"author":{"gitId":"L5-Z"},"content":"        Output.printWelcomeBanner();","lastModifiedDate":"2024-03-18"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"        initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":270,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Started bot\", false);","lastModifiedDate":"2024-03-18"},{"lineNumber":271,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":272,"author":{"gitId":"L5-Z"},"content":"        int status \u003d DataFile.loadDataFile();","lastModifiedDate":"2024-03-25"},{"lineNumber":273,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":274,"author":{"gitId":"L5-Z"},"content":"        if (status \u003d\u003d 0) {","lastModifiedDate":"2024-03-27"},{"lineNumber":275,"author":{"gitId":"L5-Z"},"content":"            try {","lastModifiedDate":"2024-03-27"},{"lineNumber":276,"author":{"gitId":"L5-Z"},"content":"                DataFile.readDataFile(); // File read","lastModifiedDate":"2024-03-27"},{"lineNumber":277,"author":{"gitId":"L5-Z"},"content":"                Output.printGreeting(status, DataFile.userName);","lastModifiedDate":"2024-03-27"},{"lineNumber":278,"author":{"gitId":"L5-Z"},"content":"            } catch (CustomExceptions.FileReadError e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":279,"author":{"gitId":"L5-Z"},"content":"                Output.printException(e.getMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":280,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":281,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":282,"author":{"gitId":"L5-Z"},"content":"            Output.printGreeting(status, DataFile.userName);","lastModifiedDate":"2024-03-27"},{"lineNumber":283,"author":{"gitId":"L5-Z"},"content":"            userInduction();","lastModifiedDate":"2024-03-20"},{"lineNumber":284,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":285,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":286,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Terminal primed. Command inputs are now accepted...\");","lastModifiedDate":"2024-03-20"},{"lineNumber":287,"author":{"gitId":"L5-Z"},"content":"        Output.printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":288,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":289,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":290,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":291,"author":{"gitId":"L5-Z"},"content":"     * Terminates PulsePilot by saving tasks to storage, printing a goodbye message,","lastModifiedDate":"2024-03-18"},{"lineNumber":292,"author":{"gitId":"L5-Z"},"content":"     * and indicating the filename where tasks are saved.","lastModifiedDate":"2024-03-11"},{"lineNumber":293,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":294,"author":{"gitId":"L5-Z"},"content":"    public static void terminateBot() {","lastModifiedDate":"2024-03-11"},{"lineNumber":295,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"User terminating PulsePilot\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":296,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":297,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"Attempting to save data file\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":298,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":299,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":300,"author":{"gitId":"JustinSoh"},"content":"            DataFile.saveDataFile(DataFile.userName, HealthList.getBmis(), HealthList.getAppointments(),","lastModifiedDate":"2024-04-03"},{"lineNumber":301,"author":{"gitId":"L5-Z"},"content":"                    HealthList.getPeriods(), WorkoutList.getWorkouts());","lastModifiedDate":"2024-04-03"},{"lineNumber":302,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"File saved\", false);","lastModifiedDate":"2024-03-27"},{"lineNumber":303,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.FileWriteError e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":304,"author":{"gitId":"L5-Z"},"content":"            LogFile.writeLog(\"File write error\", true);","lastModifiedDate":"2024-03-27"},{"lineNumber":305,"author":{"gitId":"L5-Z"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":306,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":307,"author":{"gitId":"L5-Z"},"content":"        Output.printGoodbyeMessage();","lastModifiedDate":"2024-03-20"},{"lineNumber":308,"author":{"gitId":"L5-Z"},"content":"        // Yet to implement : Reply.printReply(\"Saved tasks as: \" + Constant.FILE_NAME);","lastModifiedDate":"2024-03-11"},{"lineNumber":309,"author":{"gitId":"L5-Z"},"content":"        LogFile.writeLog(\"Bot exited gracefully\", false);","lastModifiedDate":"2024-03-20"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"        destroyScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":311,"author":{"gitId":"L5-Z"},"content":"        System.exit(0);","lastModifiedDate":"2024-03-11"},{"lineNumber":312,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":313,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"JustinSoh":116,"rouvinerh":44,"L5-Z":113,"syj02":40}},{"path":"src/main/java/ui/Output.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"package ui;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import workouts.GymStation;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import workouts.Workout;","lastModifiedDate":"2024-03-12"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutList;","lastModifiedDate":"2024-03-12"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"import health.Appointment;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import utility.Filters.HistoryAndLatestFilters;","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-12"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"/**","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":" * The Output class handles printing various messages, data, and ASCII art for the user interface.","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":" */","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"public class Output {","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"     * Prints a horizontal line.","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"    public static void printLine() {","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(UiConstant.PARTITION_LINE);","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"     * Prints the help message.","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"    public static void printHelp() {","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Commands List:\");","lastModifiedDate":"2024-03-14"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"        System.out.println();","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"workout /e:run /d:DISTANCE /t:TIME [/date:DATE] - Add a new run\");","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"workout /e:gym /n:NUMBER_OF_STATIONS [/date:DATE] - Add a new gym workout\");","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"health /h:bmi /height:HEIGHT /weight:WEIGHT /date:DATE - Add new BMI data\");","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"health /h:period /start:START_DATE /end:END_DATE - Add new period data\");","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"j013n3"},"content":"        System.out.println(\"health /h:prediction - Predicts next period\u0027s start date\");","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"health /h:appointment /date:DATE /time:TIME /description:DESCRIPTION\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"                \" - Add new appointment data\");","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"history /item:[run/gym/bmi/period] - \" +","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"                \"Shows history of runs/gyms/bmi records/periods tracked/appointment records\");","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"latest /item:[run/gym/bmi/period] - \" +","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"                \"Shows latest entry of runs/gyms/bmi records/periods tracked/appointment records\");","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"help - Show this help message\");","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"exit - Exit the program\");","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"     * Prints an ASCII Art depicting the word \u0027PulsePilot\u0027.","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"    public static void printArt() {","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\" _              _\");","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"|_)    |  _  _ |_) o  |  _ _|_\");","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"|  |_| | _\u003e (/_|   |  | (_) |_\");","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     * Prints the gym station prompt.","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"     * @param stationNumber Integer representing the current gym station index.","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"    public static void printGymStationPrompt(int stationNumber) {","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(\"Please enter the details of station \"","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"                + stationNumber","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"                + \". (Format: \" + WorkoutConstant.STATION_GYM_FORMAT + \")\");","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"     * Returns the formatted string for printing runs.","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"     * @param index          The index of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"     * @param currentWorkout The current Workout object within the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"     * @return A string","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"    private static String getFormattedRunWithIndex(int index, Workout currentWorkout) {","lastModifiedDate":"2024-03-14"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.RUN_DATA_INDEX_FORMAT, index, currentWorkout);","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"     * Prints the text header when adding a new Run.","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"     * @param newRun The new Run object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"    public static void printAddRun(Run newRun) {","lastModifiedDate":"2024-03-19"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-12"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"        System.out.println(WorkoutConstant.ADD_RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"        System.out.println(WorkoutConstant.RUN_HEADER);","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(newRun);","lastModifiedDate":"2024-03-12"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-12"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"     * Prints the message when a new Bmi is added.","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"     * @param newBmi The new Bmi object added.","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"    public static void printAddBmi(Bmi newBmi) {","lastModifiedDate":"2024-03-27"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(HealthConstant.BMI_ADDED_MESSAGE_PREFIX","lastModifiedDate":"2024-03-27"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"                + newBmi.getHeight()","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"                + newBmi.getWeight()","lastModifiedDate":"2024-03-27"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"                + newBmi.getDate());","lastModifiedDate":"2024-03-27"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(newBmi);","lastModifiedDate":"2024-03-27"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"     * Prints the message when a new Period is added.","lastModifiedDate":"2024-03-27"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"     * @param newPeriod The new Period object added.","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"    public static void printAddPeriod(Period newPeriod) {","lastModifiedDate":"2024-03-27"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(HealthConstant.PERIOD_ADDED_MESSAGE_PREFIX","lastModifiedDate":"2024-03-27"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"                + newPeriod.getStartDate()","lastModifiedDate":"2024-03-27"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"                + newPeriod.getEndDate());","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(newPeriod);","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"     * Prints the message when a new Appointment is added.","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"     * @param newAppointment The new Appointment object added.","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"    public static void printAddAppointment(Appointment newAppointment) {","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(HealthConstant.APPOINTMENT_ADDED_MESSAGE_PREFIX","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"                + newAppointment.getDate()","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"                + newAppointment.getTime()","lastModifiedDate":"2024-03-27"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"                + UiConstant.LINE","lastModifiedDate":"2024-03-27"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"                + newAppointment.getDescription());","lastModifiedDate":"2024-03-27"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(newAppointment);","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     * Prints the text header when adding a new Gym.","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"     * @param gym The new Gym object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"    public static void printAddGym(Gym gym) {","lastModifiedDate":"2024-03-19"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":154,"author":{"gitId":"L5-Z"},"content":"        System.out.println(WorkoutConstant.ADD_GYM);","lastModifiedDate":"2024-03-21"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"        printGymStats(gym);","lastModifiedDate":"2024-03-19"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"     * Prints all Workout objects (Run and Gym) based on the time it was added.","lastModifiedDate":"2024-03-27"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"     * The list is sorted in descending order. (Latest one first)","lastModifiedDate":"2024-03-27"},{"lineNumber":162,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":163,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.OutOfBounds  If index is out of bounds.","lastModifiedDate":"2024-04-04"},{"lineNumber":164,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InvalidInput If user input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"    protected static void printWorkoutHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.HISTORY_WORKOUTS_HEADER);","lastModifiedDate":"2024-03-27"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(WorkoutConstant.HISTORY_WORKOUTS_HEADER_FORMAT);","lastModifiedDate":"2024-03-27"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003c? extends Workout\u003e workoutList \u003d WorkoutList.getWorkouts(WorkoutConstant.ALL);","lastModifiedDate":"2024-03-27"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c workoutList.size(); i++) {","lastModifiedDate":"2024-03-27"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"            Workout workout \u003d workoutList.get(i);","lastModifiedDate":"2024-03-27"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"            if (workout instanceof Run) {","lastModifiedDate":"2024-03-27"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"                Run run \u003d (Run) workout;","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"                System.out.printf((WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT) + \"%n\",","lastModifiedDate":"2024-04-01"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"                        (i + 1), run.getFormatForAllHistory());","lastModifiedDate":"2024-04-01"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"            } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"                Gym gym \u003d (Gym) workout;","lastModifiedDate":"2024-03-27"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"                int numberOfStation \u003d gym.getStations().size();","lastModifiedDate":"2024-03-27"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"                for (int j \u003d 0; j \u003c numberOfStation; j++) {","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"                    String gymString;","lastModifiedDate":"2024-03-27"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"                    if (j \u003d\u003d 0) {","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"                        gymString \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"                                (i + 1), gym.getHistoryFormatForSpecificGymStation(j));","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"                    } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"                        gymString \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"                                \"\", gym.getHistoryFormatForSpecificGymStation(j));","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"                    }","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"                    System.out.println(gymString);","lastModifiedDate":"2024-03-27"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-03-27"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"        printLine();","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"     * Prints all the Run objects added to the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If index is out of bounds.","lastModifiedDate":"2024-03-20"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If user input is invalid.","lastModifiedDate":"2024-03-20"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"    protected static void printRunHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Your run history:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003c? extends Workout\u003e workoutList \u003d WorkoutList.getWorkouts(WorkoutConstant.RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"        String runHeader \u003d String.format(WorkoutConstant.RUN_HEADER_INDEX_FORMAT);","lastModifiedDate":"2024-04-04"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(runHeader);","lastModifiedDate":"2024-04-04"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":210,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c workoutList.size(); i++) {","lastModifiedDate":"2024-03-12"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2024-03-14"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"            Workout currentWorkout \u003d workoutList.get(i);","lastModifiedDate":"2024-03-14"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"            String output \u003d getFormattedRunWithIndex(index, currentWorkout);","lastModifiedDate":"2024-03-14"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(output);","lastModifiedDate":"2024-03-14"},{"lineNumber":215,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":217,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":218,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"     * Prints all the stations within a specified Gym object.","lastModifiedDate":"2024-03-20"},{"lineNumber":221,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"     * @param gym The Gym object containing the GymStation objects to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":224,"author":{"gitId":"JustinSoh"},"content":"    protected static void printGymStats(Gym gym) {","lastModifiedDate":"2024-03-27"},{"lineNumber":225,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cGymStation\u003e allStations \u003d gym.getStations();","lastModifiedDate":"2024-03-19"},{"lineNumber":226,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c allStations.size(); i++) {","lastModifiedDate":"2024-03-26"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"            System.out.printf(\"Station %d %s%n\", i + 1, allStations.get(i).toString());","lastModifiedDate":"2024-03-27"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":229,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":230,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"     * Prints all the information for all Gym objects within the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If index is out of bounds.","lastModifiedDate":"2024-03-20"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If user input is invalid.","lastModifiedDate":"2024-03-20"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":237,"author":{"gitId":"JustinSoh"},"content":"    protected static void printGymHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Your gym history:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":240,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003c? extends Workout\u003e workoutList \u003d WorkoutList.getWorkouts(WorkoutConstant.GYM);","lastModifiedDate":"2024-03-21"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c workoutList.size(); i++) {","lastModifiedDate":"2024-03-19"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2024-03-19"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"            Gym currentWorkout \u003d (Gym) workoutList.get(i);","lastModifiedDate":"2024-03-19"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(\"Gym Session \" + index + currentWorkout);","lastModifiedDate":"2024-03-19"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"            printGymStats(currentWorkout);","lastModifiedDate":"2024-03-19"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"            if (i !\u003d workoutList.size() - 1) {","lastModifiedDate":"2024-03-19"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"                printLine();","lastModifiedDate":"2024-03-19"},{"lineNumber":248,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-19"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"     * Prints all Bmi objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If there is access to a Bmi object that does not exist.","lastModifiedDate":"2024-03-20"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"    protected static void printBmiHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":261,"author":{"gitId":"j013n3"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"            HealthList.showBmiHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":263,"author":{"gitId":"j013n3"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":264,"author":{"gitId":"j013n3"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":265,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"     * Prints all Period objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If there is access to a Period object that does not exist.","lastModifiedDate":"2024-03-20"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":275,"author":{"gitId":"JustinSoh"},"content":"    protected static void printPeriodHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":277,"author":{"gitId":"j013n3"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"            HealthList.showPeriodHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":279,"author":{"gitId":"j013n3"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":280,"author":{"gitId":"j013n3"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":281,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"     * Prints all Appointment objects recorded.","lastModifiedDate":"2024-04-01"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds  If there is access to an Appointment object that does not exist.","lastModifiedDate":"2024-04-02"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-04-01"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"    protected static void printAppointmentHistory() throws CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-01"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-04-01"},{"lineNumber":293,"author":{"gitId":"syj02"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"            HealthList.showAppointmentList();","lastModifiedDate":"2024-04-01"},{"lineNumber":295,"author":{"gitId":"syj02"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":296,"author":{"gitId":"syj02"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":297,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-04-01"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Run recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":304,"author":{"gitId":"JustinSoh"},"content":"    protected static void printLatestRun() {","lastModifiedDate":"2024-03-27"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"            Workout latestRun \u003d WorkoutList.getLatestRun();","lastModifiedDate":"2024-03-20"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"            String latestRunString \u003d getFormattedRunWithIndex(WorkoutList.getRunSize(), latestRun);","lastModifiedDate":"2024-03-20"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(\"Your latest run:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":311,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(WorkoutConstant.RUN_HEADER_INDEX_FORMAT);","lastModifiedDate":"2024-03-27"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(latestRunString);","lastModifiedDate":"2024-03-20"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-20"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Gym recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":323,"author":{"gitId":"JustinSoh"},"content":"    protected static void printLatestGym() {","lastModifiedDate":"2024-03-27"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"            Gym latestGym \u003d WorkoutList.getLatestGym();","lastModifiedDate":"2024-03-20"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"            int index \u003d WorkoutList.getGymSize();","lastModifiedDate":"2024-03-20"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(\"Your latest gym:\");","lastModifiedDate":"2024-03-25"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(\"Gym Session \" + index + latestGym);","lastModifiedDate":"2024-03-20"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"            printGymStats(latestGym);","lastModifiedDate":"2024-03-20"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-20"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest BMI entry recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":340,"author":{"gitId":"JustinSoh"},"content":"    protected static void printLatestBmi() {","lastModifiedDate":"2024-03-27"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":342,"author":{"gitId":"j013n3"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"            HealthList.showCurrentBmi();","lastModifiedDate":"2024-03-20"},{"lineNumber":344,"author":{"gitId":"j013n3"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":345,"author":{"gitId":"j013n3"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":346,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Period entry recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":353,"author":{"gitId":"JustinSoh"},"content":"    protected static void printLatestPeriod() {","lastModifiedDate":"2024-03-27"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":355,"author":{"gitId":"j013n3"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"            HealthList.showLatestPeriod();","lastModifiedDate":"2024-03-20"},{"lineNumber":357,"author":{"gitId":"j013n3"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":358,"author":{"gitId":"j013n3"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":359,"author":{"gitId":"j013n3"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-25"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"     * Prints the latest Appointment entry recorded.","lastModifiedDate":"2024-04-01"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"    protected static void printLatestAppointment(){","lastModifiedDate":"2024-04-01"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-04-01"},{"lineNumber":368,"author":{"gitId":"syj02"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"            HealthList.showLatestAppointment();","lastModifiedDate":"2024-04-01"},{"lineNumber":370,"author":{"gitId":"syj02"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":371,"author":{"gitId":"syj02"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":372,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-04-01"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"     * Handler function to print the latest entry of Run, Gym, Period, or BMI objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"     * @param filter String used to determine the latest Run, Gym, Period, or BMI objects is to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"    public static void printLatest(String filter) {","lastModifiedDate":"2024-03-20"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"            HistoryAndLatestFilters parsedFilter \u003d HistoryAndLatestFilters.valueOf(filter.toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"            switch (parsedFilter) {","lastModifiedDate":"2024-03-20"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"            case RUN:","lastModifiedDate":"2024-03-20"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"                printLatestRun();","lastModifiedDate":"2024-03-20"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"            case GYM:","lastModifiedDate":"2024-03-20"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"                printLatestGym();","lastModifiedDate":"2024-03-20"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"            case BMI:","lastModifiedDate":"2024-03-20"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"                printLatestBmi();","lastModifiedDate":"2024-03-20"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-20"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"                printLatestPeriod();","lastModifiedDate":"2024-03-20"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"            case APPOINTMENT:","lastModifiedDate":"2024-04-01"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"                printLatestAppointment();","lastModifiedDate":"2024-04-01"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-04-01"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"            default:","lastModifiedDate":"2024-03-20"},{"lineNumber":406,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_LATEST_FILTER_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":407,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":408,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":409,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-20"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":411,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":413,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":414,"author":{"gitId":"rouvinerh"},"content":"     * Handler function to print all entries of Run, Gym, Period, or BMI objects recorded.","lastModifiedDate":"2024-03-20"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":416,"author":{"gitId":"rouvinerh"},"content":"     * @param filter String used to determine if all Run, Gym, Period, or BMI objects are to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":417,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":418,"author":{"gitId":"JustinSoh"},"content":"    public static void printHistory(String filter) {","lastModifiedDate":"2024-03-19"},{"lineNumber":419,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-19"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"            HistoryAndLatestFilters parsedFilter \u003d HistoryAndLatestFilters.valueOf(filter.toUpperCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":421,"author":{"gitId":"JustinSoh"},"content":"            switch (parsedFilter) {","lastModifiedDate":"2024-03-19"},{"lineNumber":422,"author":{"gitId":"JustinSoh"},"content":"            case WORKOUTS:","lastModifiedDate":"2024-03-27"},{"lineNumber":423,"author":{"gitId":"JustinSoh"},"content":"                printWorkoutHistory();","lastModifiedDate":"2024-03-27"},{"lineNumber":424,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-27"},{"lineNumber":425,"author":{"gitId":"JustinSoh"},"content":"            case RUN:","lastModifiedDate":"2024-03-19"},{"lineNumber":426,"author":{"gitId":"JustinSoh"},"content":"                printRunHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":427,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-19"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":429,"author":{"gitId":"JustinSoh"},"content":"            case GYM:","lastModifiedDate":"2024-03-19"},{"lineNumber":430,"author":{"gitId":"JustinSoh"},"content":"                printGymHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":431,"author":{"gitId":"JustinSoh"},"content":"                break;","lastModifiedDate":"2024-03-19"},{"lineNumber":432,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":433,"author":{"gitId":"rouvinerh"},"content":"            case BMI:","lastModifiedDate":"2024-03-20"},{"lineNumber":434,"author":{"gitId":"rouvinerh"},"content":"                printBmiHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":435,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":436,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":437,"author":{"gitId":"rouvinerh"},"content":"            case PERIOD:","lastModifiedDate":"2024-03-20"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"                printPeriodHistory();","lastModifiedDate":"2024-03-20"},{"lineNumber":439,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-20"},{"lineNumber":440,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":441,"author":{"gitId":"rouvinerh"},"content":"            case APPOINTMENT:","lastModifiedDate":"2024-04-01"},{"lineNumber":442,"author":{"gitId":"rouvinerh"},"content":"                printAppointmentHistory();","lastModifiedDate":"2024-04-01"},{"lineNumber":443,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-04-01"},{"lineNumber":444,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":445,"author":{"gitId":"JustinSoh"},"content":"            default:","lastModifiedDate":"2024-03-19"},{"lineNumber":446,"author":{"gitId":"rouvinerh"},"content":"                break;","lastModifiedDate":"2024-03-26"},{"lineNumber":447,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-19"},{"lineNumber":448,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.OutOfBounds | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-13"},{"lineNumber":449,"author":{"gitId":"rouvinerh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":450,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":451,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":452,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":453,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":454,"author":{"gitId":"rouvinerh"},"content":"     * Prints a specified message and the exception error message.","lastModifiedDate":"2024-03-20"},{"lineNumber":455,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":456,"author":{"gitId":"rouvinerh"},"content":"     * @param message The custom message to be printed.","lastModifiedDate":"2024-03-20"},{"lineNumber":457,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":458,"author":{"gitId":"JustinSoh"},"content":"    public static void printException(String message) {","lastModifiedDate":"2024-03-26"},{"lineNumber":459,"author":{"gitId":"L5-Z"},"content":"        System.err.println(\"Exception Caught!\" + System.lineSeparator() + message);","lastModifiedDate":"2024-03-26"},{"lineNumber":460,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":461,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":462,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":463,"author":{"gitId":"rouvinerh"},"content":"     * Prints the welcome banner for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":464,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":465,"author":{"gitId":"L5-Z"},"content":"    public static void printWelcomeBanner() {","lastModifiedDate":"2024-03-18"},{"lineNumber":466,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":467,"author":{"gitId":"L5-Z"},"content":"        printArt();","lastModifiedDate":"2024-03-18"},{"lineNumber":468,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"Engaging orbital thrusters...\");","lastModifiedDate":"2024-03-18"},{"lineNumber":469,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"PulsePilot on standby\");","lastModifiedDate":"2024-03-18"},{"lineNumber":470,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":471,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":472,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":473,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":474,"author":{"gitId":"rouvinerh"},"content":"     * Checks whether storage file is present, and prints corresponding message.","lastModifiedDate":"2024-03-20"},{"lineNumber":475,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":476,"author":{"gitId":"rouvinerh"},"content":"     * @param status Integer representing whether the storage file has been loaded. If set to 0, file is present. Else,","lastModifiedDate":"2024-03-20"},{"lineNumber":477,"author":{"gitId":"rouvinerh"},"content":"     *               file is not present.","lastModifiedDate":"2024-03-20"},{"lineNumber":478,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":479,"author":{"gitId":"L5-Z"},"content":"    public static void printGreeting(int status, String name) {","lastModifiedDate":"2024-03-26"},{"lineNumber":480,"author":{"gitId":"L5-Z"},"content":"        if (status \u003d\u003d 0) {","lastModifiedDate":"2024-03-18"},{"lineNumber":481,"author":{"gitId":"L5-Z"},"content":"            System.out.println(\"Welcome back, Captain \" + name);","lastModifiedDate":"2024-03-26"},{"lineNumber":482,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(UiConstant.SUCCESSFUL_LOAD);","lastModifiedDate":"2024-03-21"},{"lineNumber":483,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-03-18"},{"lineNumber":484,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(UiConstant.MISSING_FILE);","lastModifiedDate":"2024-03-21"},{"lineNumber":485,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":486,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":487,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":488,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":489,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":490,"author":{"gitId":"rouvinerh"},"content":"     * Prints the goodbye message for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":491,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":492,"author":{"gitId":"L5-Z"},"content":"    public static void printGoodbyeMessage() {","lastModifiedDate":"2024-03-20"},{"lineNumber":493,"author":{"gitId":"rouvinerh"},"content":"        printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":494,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"PulsePilot successful touchdown\");","lastModifiedDate":"2024-03-20"},{"lineNumber":495,"author":{"gitId":"L5-Z"},"content":"        System.out.println(\"See you soon, Captain!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":496,"author":{"gitId":"L5-Z"},"content":"        printLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":497,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":498,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"j013n3":17,"JustinSoh":129,"rouvinerh":269,"L5-Z":69,"syj02":14}},{"path":"src/main/java/utility/CustomExceptions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package utility;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"/**","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":" * Represents a custom exception class designed for PulsePilot to handle errors during command processing.","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":" */","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"public class CustomExceptions extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an OutOfBounds error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"    public static class OutOfBounds extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"        public OutOfBounds(String message) {","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an InvalidInput error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    public static class InvalidInput extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"        public InvalidInput(String message) {","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-14"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an FileReadError error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"    public static class FileReadError extends Exception{","lastModifiedDate":"2024-03-24"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"        public FileReadError(String message) {","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an FileWriteError error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    public static class FileWriteError extends Exception{","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        public FileWriteError(String message) {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an FileCreateError error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    public static class FileCreateError extends Exception{","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        public FileCreateError(String message) {","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"     * Prints the error for an InsufficientInput error, and logs it in the log file as an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"    public static class InsufficientInput extends Exception {","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"        public InsufficientInput(String message) {","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"            super(\"\\u001b[31mError: \" + message + \"\\u001b[0m\");","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"            LogFile.writeLog(message, true);","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"JustinSoh":22,"rouvinerh":43,"L5-Z":3}},{"path":"src/main/java/utility/Filters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package utility;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":" * Class representing the filters used for PulsePilot.","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"public class Filters {","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"    public enum Command {","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"        WORKOUT,","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"        HISTORY,","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"        LATEST,","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"        HEALTH,","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"        DELETE,","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"        HELP,","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"        EXIT","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    public enum DeleteFilters {","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"        RUN,","lastModifiedDate":"2024-03-19"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"        GYM,","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"        PERIOD,","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"        BMI,","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"        APPOINTMENT,","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    public enum HealthFilters {","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"        PERIOD,","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"        BMI,","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"        APPOINTMENT,","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"        PREDICTION,","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    public enum WorkoutFilters {","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"        RUN,","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"        GYM,","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    public enum HistoryAndLatestFilters {","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        RUN,","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"        GYM,","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"        PERIOD,","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"        BMI,","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        APPOINTMENT,","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        WORKOUTS","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    public enum DataType {","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"        BMI,","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"        APPOINTMENT,","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        PERIOD,","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"        GYM,","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        RUN","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"JustinSoh":7,"rouvinerh":47,"syj02":1}},{"path":"src/main/java/utility/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import ui.Handler;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import ui.Output;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import health.Appointment;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":" * Represents the parser used to parse and split input for PulsePilot.","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"public class Parser {","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-06"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     * Counts the number of \u0027/\u0027 characters there are in a given string.","lastModifiedDate":"2024-04-06"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-06"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-04-06"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"     * @return An integer representing the number of \u0027/\u0027 characters there are.","lastModifiedDate":"2024-04-06"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-06"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    public static int countForwardSlash(String input) {","lastModifiedDate":"2024-04-06"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"        int count \u003d 0;","lastModifiedDate":"2024-04-06"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"        for (int i \u003d 0; i \u003c input.length(); i++) {","lastModifiedDate":"2024-04-06"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"            if (input.charAt(i) \u003d\u003d \u0027/\u0027) {","lastModifiedDate":"2024-04-06"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"                count++;","lastModifiedDate":"2024-04-06"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-04-06"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"        return count;","lastModifiedDate":"2024-04-06"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-06"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"     * Parses and converts String date to a LocalDate variable.","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"     * @param date String representing the date.","lastModifiedDate":"2024-03-25"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"     * @return LocalDate variable representing the date.","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"     * @throws DateTimeParseException If there is an error parsing the date.","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"    public static LocalDate parseDate(String date) {","lastModifiedDate":"2024-03-25"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        LocalDate formattedDate \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"            formattedDate \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2024-03-25"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"            Output.printException(ErrorConstant.PARSING_DATE_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"        return formattedDate;","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"     * Converts a LocalDate object to a formatted String representation.","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"     * @param date LocalDate object representing the date.","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"     * @return Formatted String representation of the date in the format \"dd-MM-yyyy\".","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"     * @throws DateTimeParseException If there is an error parsing the date.","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"    public static String parseFormattedDate(LocalDate date) {","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"        DateTimeFormatter formatter \u003d null;","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"            formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"            Output.printException(ErrorConstant.PARSING_DATE_ERROR);","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"        if (date \u003d\u003d null || formatter \u003d\u003d null) {","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"            return \"NA\";","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"        return date.format(formatter);","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"     * Parses and converts String time to a LocalDate variable.","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"     * @param stringTime String representing the time.","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"     * @return LocalTime variable representing the time.","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"     * @throws DateTimeParseException If there is an error parsing the time.","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"    public static LocalTime parseTime(String stringTime) throws DateTimeParseException {","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"        LocalTime formattedTime \u003d null;","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"            formattedTime \u003d LocalTime.parse(stringTime, formatter);","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"            Output.printException(ErrorConstant.PARSING_TIME_ERROR);","lastModifiedDate":"2024-03-28"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"        return formattedTime;","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"     * Splits user input for Delete command into item and index.","lastModifiedDate":"2024-03-29"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-29"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"     * @return An array of strings containing the extracted delete command parameters.","lastModifiedDate":"2024-03-29"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If not enough parameters are specified.","lastModifiedDate":"2024-03-29"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"    public static String[] splitDeleteInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"        if (!input.contains(UiConstant.ITEM_FLAG) || !input.contains(UiConstant.INDEX_FLAG)) {","lastModifiedDate":"2024-03-29"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_DELETE_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-29"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        if (countForwardSlash(input) \u003e UiConstant.NUM_OF_SLASHES_FOR_DELETE) {","lastModifiedDate":"2024-04-06"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"        String[] results \u003d new String[UiConstant.NUM_DELETE_PARAMETERS];","lastModifiedDate":"2024-03-31"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        results[UiConstant.DELETE_ITEM_STRING_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.ITEM_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"        results[UiConstant.DELETE_ITEM_NUMBER_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.INDEX_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"        return results;","lastModifiedDate":"2024-03-29"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-29"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     * Parses and validates user input for the delete command. Returns a list of parsed user input","lastModifiedDate":"2024-03-29"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"     * containing the filter string and the index to delete.","lastModifiedDate":"2024-03-29"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-29"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-29"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"     * @return A list of strings containing the filter string and index to delete.","lastModifiedDate":"2024-03-29"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-29"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"    public static String[] parseDeleteInput(String userInput) {","lastModifiedDate":"2024-03-29"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-29"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"            String[] deleteDetails \u003d splitDeleteInput(userInput);","lastModifiedDate":"2024-03-29"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDeleteInput(deleteDetails);","lastModifiedDate":"2024-03-31"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"            return deleteDetails;","lastModifiedDate":"2024-03-29"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"            return null;","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-26"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"     * Function validates and parses the user input for the history and latest commands.","lastModifiedDate":"2024-03-26"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput String representing the user input.","lastModifiedDate":"2024-03-26"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"     * @return The filter string, set to either \u0027gym\u0027, \u0027run\u0027, \u0027bmi\u0027 or \u0027period\u0027.","lastModifiedDate":"2024-03-26"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"    public static String parseHistoryAndLatestInput(String userInput) {","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"            if (countForwardSlash(userInput) \u003e UiConstant.NUM_OF_SLASHES_FOR_LATEST_AND_HISTORY) {","lastModifiedDate":"2024-04-06"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-04-06"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"            String type \u003d extractSubstringFromSpecificIndex(userInput, UiConstant.ITEM_FLAG);","lastModifiedDate":"2024-03-28"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"            if (type.isBlank()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InsufficientInput(ErrorConstant.INVALID_HISTORY_FILTER_ERROR);","lastModifiedDate":"2024-03-29"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"            Validation.validateFilter(type.toLowerCase());","lastModifiedDate":"2024-03-31"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"            return type.toLowerCase();","lastModifiedDate":"2024-03-27"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"            return null;","lastModifiedDate":"2024-03-26"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"     * Parses input for Bmi command. Adds Bmi object to HealthList if valid.","lastModifiedDate":"2024-03-27"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-27"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If the height, weight or date parameters are missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"    public static void parseBmiInput(String userInput) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-29"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-29"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"        String[] bmiDetails \u003d splitBmiInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"        Validation.validateBmiInput(bmiDetails);","lastModifiedDate":"2024-03-31"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"        Bmi newBmi \u003d new Bmi(","lastModifiedDate":"2024-04-01"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"                bmiDetails[HealthConstant.BMI_HEIGHT_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"                bmiDetails[HealthConstant.BMI_WEIGHT_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"                bmiDetails[HealthConstant.BMI_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        HealthList.addBmi(newBmi);","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"        Output.printAddBmi(newBmi);","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"syj02"},"content":"    //@@author syj02","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"syj02"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"syj02"},"content":"     * Split user input for Bmi command, height, weight and date.","lastModifiedDate":"2024-03-29"},{"lineNumber":191,"author":{"gitId":"syj02"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":192,"author":{"gitId":"syj02"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"syj02"},"content":"     * @return An array of strings containing the extracted Bmi parameters.","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InsufficientInput If the height, weight or date parameters are missing.","lastModifiedDate":"2024-03-31"},{"lineNumber":195,"author":{"gitId":"syj02"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"syj02"},"content":"    public static String[] splitBmiInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":197,"author":{"gitId":"syj02"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":198,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":199,"author":{"gitId":"syj02"},"content":"        if (!input.contains(HealthConstant.HEIGHT_FLAG)","lastModifiedDate":"2024-03-28"},{"lineNumber":200,"author":{"gitId":"syj02"},"content":"                || !input.contains(HealthConstant.WEIGHT_FLAG)","lastModifiedDate":"2024-03-27"},{"lineNumber":201,"author":{"gitId":"syj02"},"content":"                || !input.contains(HealthConstant.DATE_FLAG)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-29"},{"lineNumber":203,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":204,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":205,"author":{"gitId":"syj02"},"content":"        if (countForwardSlash(input) \u003e HealthConstant.NUM_OF_SLASHES_FOR_BMI) {","lastModifiedDate":"2024-04-06"},{"lineNumber":206,"author":{"gitId":"syj02"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":207,"author":{"gitId":"syj02"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":208,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":209,"author":{"gitId":"syj02"},"content":"        String [] results \u003d new String[HealthConstant.NUM_BMI_PARAMETERS];","lastModifiedDate":"2024-03-31"},{"lineNumber":210,"author":{"gitId":"syj02"},"content":"        results[HealthConstant.BMI_HEIGHT_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":211,"author":{"gitId":"syj02"},"content":"                HealthConstant.HEIGHT_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":212,"author":{"gitId":"syj02"},"content":"        results[HealthConstant.BMI_WEIGHT_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":213,"author":{"gitId":"syj02"},"content":"                HealthConstant.WEIGHT_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":214,"author":{"gitId":"syj02"},"content":"        results[HealthConstant.BMI_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":215,"author":{"gitId":"syj02"},"content":"                HealthConstant.DATE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":216,"author":{"gitId":"syj02"},"content":"        return results;","lastModifiedDate":"2024-03-27"},{"lineNumber":217,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":218,"author":{"gitId":"syj02"},"content":"    //@@author","lastModifiedDate":"2024-03-27"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"     * Parses input for Period command. Adds Period object to HealthList if valid.","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-27"},{"lineNumber":224,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":225,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InsufficientInput If the start date or end date parameters are missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"    public static void parsePeriodInput(String userInput) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-29"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-29"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"        String[] periodDetails \u003d splitPeriodInput(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"        Validation.validatePeriodInput(periodDetails);","lastModifiedDate":"2024-03-31"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"        Period newPeriod \u003d new Period(","lastModifiedDate":"2024-04-01"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"                periodDetails[HealthConstant.PERIOD_START_DATE_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"                periodDetails[HealthConstant.PERIOD_END_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(newPeriod);","lastModifiedDate":"2024-03-27"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddPeriod(newPeriod);","lastModifiedDate":"2024-03-27"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"     * Split user input into Period command, start date and end date.","lastModifiedDate":"2024-03-27"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-27"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"     * @return An array of strings containing the extracted Period parameters.","lastModifiedDate":"2024-03-27"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If the user input is invalid or blank.","lastModifiedDate":"2024-03-29"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"    public static String[] splitPeriodInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"        if (!input.contains(HealthConstant.START_FLAG)","lastModifiedDate":"2024-03-28"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"                || !input.contains(HealthConstant.END_FLAG)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_PERIOD_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-29"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"        if (countForwardSlash(input) \u003e HealthConstant.NUM_OF_SLASHES_FOR_PERIOD) {","lastModifiedDate":"2024-04-06"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"        String [] results \u003d new String[HealthConstant.NUM_PERIOD_PARAMETERS];","lastModifiedDate":"2024-03-31"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"        results[HealthConstant.PERIOD_START_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"                HealthConstant.START_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"        results[HealthConstant.PERIOD_END_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"                HealthConstant.END_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"        return results;","lastModifiedDate":"2024-03-27"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"     * Parses input for Prediction command.","lastModifiedDate":"2024-03-27"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"     * Prints period prediction if possible.","lastModifiedDate":"2024-03-27"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If prediction cannot be made.","lastModifiedDate":"2024-03-27"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"    public static void parsePredictionInput() throws CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-27"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"        if (HealthList.getPeriodSize() \u003e\u003d HealthConstant.MIN_SIZE_FOR_PREDICTION) {","lastModifiedDate":"2024-03-27"},{"lineNumber":272,"author":{"gitId":"j013n3"},"content":"            HealthList.printLatestThreeCycles();","lastModifiedDate":"2024-03-28"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"            LocalDate nextPeriodStartDate \u003d HealthList.predictNextPeriodStartDate();","lastModifiedDate":"2024-03-27"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"            Period.printNextCyclePrediction(nextPeriodStartDate);","lastModifiedDate":"2024-03-27"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.UNABLE_TO_MAKE_PREDICTIONS_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"     * Split user input into Appointment command, date, time and description.","lastModifiedDate":"2024-03-27"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"     * @param input A user-provided string.","lastModifiedDate":"2024-03-27"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"     * @return An array of strings containing the extracted Appointment parameters.","lastModifiedDate":"2024-03-27"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If the user input is invalid or blank.","lastModifiedDate":"2024-03-29"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"    public static String[] splitAppointmentDetails(String input)","lastModifiedDate":"2024-03-27"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"            throws CustomExceptions.InsufficientInput, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"        String [] results \u003d new String[HealthConstant.NUM_APPOINTMENT_PARAMETERS];","lastModifiedDate":"2024-03-27"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"        if (!input.contains(HealthConstant.DATE_FLAG)","lastModifiedDate":"2024-03-28"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"                || !input.contains(HealthConstant.TIME_FLAG)","lastModifiedDate":"2024-03-27"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"                || !input.contains(HealthConstant.DESCRIPTION_FLAG)) {","lastModifiedDate":"2024-03-27"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-29"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"        if (countForwardSlash(input) \u003e HealthConstant.NUM_OF_SLASHES_FOR_APPOINTMENT) {","lastModifiedDate":"2024-04-06"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"        results[HealthConstant.APPOINTMENT_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"                HealthConstant.DATE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"        results[HealthConstant.APPOINTMENT_TIME_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"                HealthConstant.TIME_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"        results[HealthConstant.APPOINTMENT_DESCRIPTION_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"                HealthConstant.DESCRIPTION_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"        return results;","lastModifiedDate":"2024-03-27"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"     * Parses input for Appointment command. Adds Appointment object to HealthList if valid.","lastModifiedDate":"2024-03-27"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-27"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-27"},{"lineNumber":313,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":314,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InsufficientInput If the date, time or description parameters are missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"    public static void parseAppointmentInput(String userInput) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-29"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-29"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"        String[] appointmentDetails \u003d splitAppointmentDetails(userInput);","lastModifiedDate":"2024-03-27"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"        Validation.validateAppointmentDetails(appointmentDetails);","lastModifiedDate":"2024-03-31"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"        Appointment newAppointment \u003d new Appointment(","lastModifiedDate":"2024-04-01"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"                appointmentDetails[HealthConstant.APPOINTMENT_DATE_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"                appointmentDetails[HealthConstant.APPOINTMENT_TIME_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"                appointmentDetails[HealthConstant.APPOINTMENT_DESCRIPTION_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addAppointment(newAppointment);","lastModifiedDate":"2024-03-27"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddAppointment(newAppointment);","lastModifiedDate":"2024-03-27"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"     * Extracts a substring from the given input string based on the provided delimiter.","lastModifiedDate":"2024-03-31"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"     * @param input     The input string from which to extract the substring.","lastModifiedDate":"2024-03-31"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"     * @param delimiter The delimiter to search for in the input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"     * @return The extracted substring, or an empty string if the delimiter is not found.","lastModifiedDate":"2024-03-31"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"    public static String extractSubstringFromSpecificIndex(String input, String delimiter) {","lastModifiedDate":"2024-03-31"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d input.indexOf(delimiter);","lastModifiedDate":"2024-03-31"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"        if (index \u003d\u003d -1 || index \u003d\u003d input.length() - delimiter.length()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"            return \"\";","lastModifiedDate":"2024-03-31"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"        int startIndex \u003d index + delimiter.length();","lastModifiedDate":"2024-03-31"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"        int endIndex \u003d input.indexOf(\"/\", startIndex);","lastModifiedDate":"2024-03-31"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"        if (endIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-31"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"            endIndex \u003d input.length();","lastModifiedDate":"2024-03-31"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"        return input.substring(startIndex, endIndex).trim();","lastModifiedDate":"2024-03-31"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":348,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-31"},{"lineNumber":349,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":350,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":351,"author":{"gitId":"JustinSoh"},"content":"     * Splits the user input when adding a Gym.","lastModifiedDate":"2024-03-31"},{"lineNumber":352,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":353,"author":{"gitId":"JustinSoh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":354,"author":{"gitId":"JustinSoh"},"content":"     * @return The Gym parameters split from the user input.","lastModifiedDate":"2024-03-31"},{"lineNumber":355,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If the number of stations is missing.","lastModifiedDate":"2024-03-31"},{"lineNumber":356,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":357,"author":{"gitId":"JustinSoh"},"content":"    public static String[] splitGymInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":358,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":359,"author":{"gitId":"JustinSoh"},"content":"        if (!input.contains(WorkoutConstant.NUMBER_OF_STATIONS_FLAG)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":360,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_GYM_PARAMETERS_ERROR);","lastModifiedDate":"2024-04-01"},{"lineNumber":361,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":362,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":363,"author":{"gitId":"JustinSoh"},"content":"        if (countForwardSlash(input) !\u003d WorkoutConstant.NUM_OF_SLASHES_FOR_GYM_WITH_DATE \u0026\u0026","lastModifiedDate":"2024-04-06"},{"lineNumber":364,"author":{"gitId":"JustinSoh"},"content":"            countForwardSlash(input) !\u003d WorkoutConstant.NUM_OF_SLASHES_FOR_GYM_WITHOUT_DATE) {","lastModifiedDate":"2024-04-06"},{"lineNumber":365,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":366,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":367,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":368,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":369,"author":{"gitId":"JustinSoh"},"content":"        String[] results \u003d new String[WorkoutConstant.NUMBER_OF_GYM_PARAMETERS];","lastModifiedDate":"2024-04-01"},{"lineNumber":370,"author":{"gitId":"JustinSoh"},"content":"        results[WorkoutConstant.GYM_NUMBER_OF_STATIONS_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":371,"author":{"gitId":"JustinSoh"},"content":"                WorkoutConstant.NUMBER_OF_STATIONS_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":372,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":373,"author":{"gitId":"JustinSoh"},"content":"        if (input.contains(WorkoutConstant.DATE_FLAG)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":374,"author":{"gitId":"JustinSoh"},"content":"            results[WorkoutConstant.GYM_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":375,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.DATE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":376,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":377,"author":{"gitId":"JustinSoh"},"content":"        return results;","lastModifiedDate":"2024-03-31"},{"lineNumber":378,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":379,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":380,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":381,"author":{"gitId":"JustinSoh"},"content":"     * Parses input for the Gym command. Adds Gym object if valid.","lastModifiedDate":"2024-03-31"},{"lineNumber":382,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":383,"author":{"gitId":"JustinSoh"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":384,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":385,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If number of station parameter is missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":386,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":387,"author":{"gitId":"JustinSoh"},"content":"    public static void parseGymInput(String userInput) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":388,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":389,"author":{"gitId":"JustinSoh"},"content":"        String[] gymDetails \u003d splitGymInput(userInput);","lastModifiedDate":"2024-03-31"},{"lineNumber":390,"author":{"gitId":"JustinSoh"},"content":"        Validation.validateGymInput(gymDetails);","lastModifiedDate":"2024-03-31"},{"lineNumber":391,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym;","lastModifiedDate":"2024-03-31"},{"lineNumber":392,"author":{"gitId":"JustinSoh"},"content":"        if (gymDetails[WorkoutConstant.GYM_DATE_INDEX] \u003d\u003d null) {","lastModifiedDate":"2024-04-01"},{"lineNumber":393,"author":{"gitId":"JustinSoh"},"content":"            newGym \u003d new Gym();","lastModifiedDate":"2024-03-31"},{"lineNumber":394,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-31"},{"lineNumber":395,"author":{"gitId":"JustinSoh"},"content":"            newGym \u003d new Gym(gymDetails[WorkoutConstant.GYM_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":396,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":397,"author":{"gitId":"JustinSoh"},"content":"        int numberOfStations \u003d Integer.parseInt(gymDetails[WorkoutConstant.GYM_NUMBER_OF_STATIONS_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":398,"author":{"gitId":"JustinSoh"},"content":"        parseGymStationInput(numberOfStations, newGym);","lastModifiedDate":"2024-03-31"},{"lineNumber":399,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":400,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":401,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":402,"author":{"gitId":"JustinSoh"},"content":"     * Splits the user input for adding a run.","lastModifiedDate":"2024-03-31"},{"lineNumber":403,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":404,"author":{"gitId":"JustinSoh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":405,"author":{"gitId":"JustinSoh"},"content":"     * @return The Run parameters split from the user input.","lastModifiedDate":"2024-03-31"},{"lineNumber":406,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If the distance and time taken for the run are missing.","lastModifiedDate":"2024-03-31"},{"lineNumber":407,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":408,"author":{"gitId":"JustinSoh"},"content":"    public static String[] splitRunInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":409,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":410,"author":{"gitId":"JustinSoh"},"content":"        if (!input.contains(WorkoutConstant.DISTANCE_FLAG) ||","lastModifiedDate":"2024-04-01"},{"lineNumber":411,"author":{"gitId":"JustinSoh"},"content":"            !input.contains(WorkoutConstant.RUN_TIME_FLAG)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":412,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_RUN_PARAMETERS_ERROR);","lastModifiedDate":"2024-04-01"},{"lineNumber":413,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":414,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":415,"author":{"gitId":"JustinSoh"},"content":"        if (countForwardSlash(input) !\u003d WorkoutConstant.NUM_OF_SLASHES_FOR_RUN_WITH_DATE \u0026\u0026","lastModifiedDate":"2024-04-06"},{"lineNumber":416,"author":{"gitId":"JustinSoh"},"content":"                countForwardSlash(input) !\u003d WorkoutConstant.NUM_OF_SLASHES_FOR_RUN_WITHOUT_DATE) {","lastModifiedDate":"2024-04-06"},{"lineNumber":417,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":418,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":419,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":420,"author":{"gitId":"JustinSoh"},"content":"        String[] results \u003d new String[WorkoutConstant.NUMBER_OF_RUN_PARAMETERS];","lastModifiedDate":"2024-04-01"},{"lineNumber":421,"author":{"gitId":"JustinSoh"},"content":"        results[WorkoutConstant.RUN_TIME_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":422,"author":{"gitId":"JustinSoh"},"content":"                WorkoutConstant.RUN_TIME_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":423,"author":{"gitId":"JustinSoh"},"content":"        results[WorkoutConstant.RUN_DISTANCE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":424,"author":{"gitId":"JustinSoh"},"content":"                WorkoutConstant.DISTANCE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":425,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":426,"author":{"gitId":"JustinSoh"},"content":"        if (input.contains(WorkoutConstant.DATE_FLAG)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":427,"author":{"gitId":"JustinSoh"},"content":"            results[WorkoutConstant.RUN_DATE_INDEX] \u003d extractSubstringFromSpecificIndex(input,","lastModifiedDate":"2024-04-01"},{"lineNumber":428,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.DATE_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":429,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":430,"author":{"gitId":"JustinSoh"},"content":"        return results;","lastModifiedDate":"2024-03-31"},{"lineNumber":431,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":432,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":433,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":434,"author":{"gitId":"JustinSoh"},"content":"     * Parses input for the Run command. Adds a Run object if valid.","lastModifiedDate":"2024-03-31"},{"lineNumber":435,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":436,"author":{"gitId":"JustinSoh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":437,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput      If input is invalid.","lastModifiedDate":"2024-04-04"},{"lineNumber":438,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If the run time or run distance parameters are missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":439,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":440,"author":{"gitId":"JustinSoh"},"content":"    public static void parseRunInput(String input) throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":441,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":442,"author":{"gitId":"JustinSoh"},"content":"        String[] runDetails \u003d splitRunInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":443,"author":{"gitId":"JustinSoh"},"content":"        Validation.validateRunInput(runDetails);","lastModifiedDate":"2024-03-31"},{"lineNumber":444,"author":{"gitId":"JustinSoh"},"content":"        Run newRun;","lastModifiedDate":"2024-03-31"},{"lineNumber":445,"author":{"gitId":"JustinSoh"},"content":"        if (runDetails[WorkoutConstant.RUN_DATE_INDEX] \u003d\u003d null) {","lastModifiedDate":"2024-04-01"},{"lineNumber":446,"author":{"gitId":"JustinSoh"},"content":"            newRun \u003d new Run(","lastModifiedDate":"2024-04-01"},{"lineNumber":447,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_TIME_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":448,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_DISTANCE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":449,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-31"},{"lineNumber":450,"author":{"gitId":"JustinSoh"},"content":"            newRun \u003d new Run(","lastModifiedDate":"2024-04-01"},{"lineNumber":451,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_TIME_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":452,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_DISTANCE_INDEX],","lastModifiedDate":"2024-04-01"},{"lineNumber":453,"author":{"gitId":"JustinSoh"},"content":"                    runDetails[WorkoutConstant.RUN_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":454,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":455,"author":{"gitId":"JustinSoh"},"content":"        Output.printAddRun(newRun);","lastModifiedDate":"2024-03-31"},{"lineNumber":456,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":457,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":458,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":459,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the gym station details and adds a GymStation object to Gym.","lastModifiedDate":"2024-03-31"},{"lineNumber":460,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":461,"author":{"gitId":"JustinSoh"},"content":"     * @param numberOfStations The number of stations in one gym session.","lastModifiedDate":"2024-03-31"},{"lineNumber":462,"author":{"gitId":"JustinSoh"},"content":"     * @param gym              The Gym object.","lastModifiedDate":"2024-03-31"},{"lineNumber":463,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":464,"author":{"gitId":"JustinSoh"},"content":"    public static void parseGymStationInput(int numberOfStations, Gym gym) {","lastModifiedDate":"2024-03-31"},{"lineNumber":465,"author":{"gitId":"JustinSoh"},"content":"        int i \u003d 0;","lastModifiedDate":"2024-03-31"},{"lineNumber":466,"author":{"gitId":"JustinSoh"},"content":"        while (i \u003c numberOfStations) {","lastModifiedDate":"2024-03-31"},{"lineNumber":467,"author":{"gitId":"JustinSoh"},"content":"            try {","lastModifiedDate":"2024-03-31"},{"lineNumber":468,"author":{"gitId":"JustinSoh"},"content":"                Output.printGymStationPrompt(i + 1);","lastModifiedDate":"2024-03-31"},{"lineNumber":469,"author":{"gitId":"JustinSoh"},"content":"                String userInput \u003d Handler.in.nextLine();","lastModifiedDate":"2024-03-31"},{"lineNumber":470,"author":{"gitId":"JustinSoh"},"content":"                if (countForwardSlash(userInput) \u003e WorkoutConstant.NUM_OF_SLASHES_FOR_GYM_STATION) {","lastModifiedDate":"2024-04-06"},{"lineNumber":471,"author":{"gitId":"JustinSoh"},"content":"                    throw new CustomExceptions.InvalidInput(ErrorConstant.TOO_MANY_SLASHES_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":472,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-04-06"},{"lineNumber":473,"author":{"gitId":"JustinSoh"},"content":"                String[] validGymStationInput \u003d Validation.splitAndValidateGymStationInput(userInput);","lastModifiedDate":"2024-03-31"},{"lineNumber":474,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":475,"author":{"gitId":"JustinSoh"},"content":"                int numberOfSets \u003d Integer.parseInt(validGymStationInput[WorkoutConstant.GYM_STATION_SET_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":476,"author":{"gitId":"JustinSoh"},"content":"                int numberOfRepetitions \u003d Integer.parseInt(","lastModifiedDate":"2024-04-01"},{"lineNumber":477,"author":{"gitId":"JustinSoh"},"content":"                        validGymStationInput[WorkoutConstant.GYM_STATION_REPS_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":478,"author":{"gitId":"JustinSoh"},"content":"                ArrayList\u003cDouble\u003e weightsArray \u003d Validation.validateWeightsArray(","lastModifiedDate":"2024-04-06"},{"lineNumber":479,"author":{"gitId":"JustinSoh"},"content":"                        validGymStationInput[WorkoutConstant.GYM_STATION_WEIGHTS_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":480,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":481,"author":{"gitId":"JustinSoh"},"content":"                gym.addStation(validGymStationInput[WorkoutConstant.GYM_STATION_NAME_INDEX], numberOfSets,","lastModifiedDate":"2024-04-01"},{"lineNumber":482,"author":{"gitId":"JustinSoh"},"content":"                        numberOfRepetitions, weightsArray);","lastModifiedDate":"2024-04-01"},{"lineNumber":483,"author":{"gitId":"JustinSoh"},"content":"                i++;","lastModifiedDate":"2024-03-31"},{"lineNumber":484,"author":{"gitId":"JustinSoh"},"content":"            } catch (CustomExceptions.InsufficientInput | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":485,"author":{"gitId":"JustinSoh"},"content":"                Output.printException(e.getMessage());","lastModifiedDate":"2024-03-31"},{"lineNumber":486,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-31"},{"lineNumber":487,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":488,"author":{"gitId":"JustinSoh"},"content":"        Output.printAddGym(gym);","lastModifiedDate":"2024-03-31"},{"lineNumber":489,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":490,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":491,"author":{"gitId":"L5-Z"},"content":"    //@@author L5-Z","lastModifiedDate":"2024-03-31"},{"lineNumber":492,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":493,"author":{"gitId":"L5-Z"},"content":"     * Splits the Gym File Input that comes from Storage.","lastModifiedDate":"2024-03-31"},{"lineNumber":494,"author":{"gitId":"L5-Z"},"content":"     * Validates the numberOfStation and Date input.","lastModifiedDate":"2024-03-31"},{"lineNumber":495,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":496,"author":{"gitId":"L5-Z"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-04-02"},{"lineNumber":497,"author":{"gitId":"L5-Z"},"content":"     * @return String[] containing the gym details","lastModifiedDate":"2024-03-31"},{"lineNumber":498,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError If the file cannot be read.","lastModifiedDate":"2024-04-02"},{"lineNumber":499,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":500,"author":{"gitId":"L5-Z"},"content":"    private static String[] splitGymFileInput (String input) throws CustomExceptions.FileReadError {","lastModifiedDate":"2024-03-31"},{"lineNumber":501,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":502,"author":{"gitId":"L5-Z"},"content":"        String [] gymDetails \u003d input.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-31"},{"lineNumber":503,"author":{"gitId":"L5-Z"},"content":"        String gymType;","lastModifiedDate":"2024-03-31"},{"lineNumber":504,"author":{"gitId":"L5-Z"},"content":"        String numOfStationStr;","lastModifiedDate":"2024-03-31"},{"lineNumber":505,"author":{"gitId":"L5-Z"},"content":"        int numOfStation;","lastModifiedDate":"2024-03-31"},{"lineNumber":506,"author":{"gitId":"L5-Z"},"content":"        String date;","lastModifiedDate":"2024-03-31"},{"lineNumber":507,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":508,"author":{"gitId":"L5-Z"},"content":"        // checks if there are enough parameters in the gym file + if numOfStation is a digit","lastModifiedDate":"2024-03-31"},{"lineNumber":509,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":510,"author":{"gitId":"L5-Z"},"content":"            gymType \u003d gymDetails[WorkoutConstant.GYM_FILE_INDEX].toLowerCase();","lastModifiedDate":"2024-04-03"},{"lineNumber":511,"author":{"gitId":"L5-Z"},"content":"            numOfStationStr \u003d gymDetails[WorkoutConstant.NUM_OF_STATIONS_FILE_INDEX];","lastModifiedDate":"2024-03-31"},{"lineNumber":512,"author":{"gitId":"L5-Z"},"content":"            numOfStation \u003d Integer.parseInt(numOfStationStr);","lastModifiedDate":"2024-03-31"},{"lineNumber":513,"author":{"gitId":"L5-Z"},"content":"            date \u003d gymDetails[WorkoutConstant.DATE_FILE_INDEX];","lastModifiedDate":"2024-03-31"},{"lineNumber":514,"author":{"gitId":"L5-Z"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":515,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_GYM_FORMAT_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":516,"author":{"gitId":"L5-Z"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":517,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_NUMBER_OF_STATION_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":518,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":519,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":520,"author":{"gitId":"L5-Z"},"content":"        // Check if the gym type is correct (e.g. storage starts with gym| ...)","lastModifiedDate":"2024-03-31"},{"lineNumber":521,"author":{"gitId":"L5-Z"},"content":"        if (!gymType.equals(WorkoutConstant.GYM)) {","lastModifiedDate":"2024-04-03"},{"lineNumber":522,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_GYM_TYPE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":523,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":524,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":525,"author":{"gitId":"L5-Z"},"content":"        // Check if the number of station is blank","lastModifiedDate":"2024-03-31"},{"lineNumber":526,"author":{"gitId":"L5-Z"},"content":"        if (numOfStationStr.isBlank()){","lastModifiedDate":"2024-03-31"},{"lineNumber":527,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_NUMBER_OF_STATION_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":528,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":529,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":530,"author":{"gitId":"L5-Z"},"content":"        // Check if the date is correct","lastModifiedDate":"2024-03-31"},{"lineNumber":531,"author":{"gitId":"L5-Z"},"content":"        if (date.isBlank()){","lastModifiedDate":"2024-03-31"},{"lineNumber":532,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.INVALID_DATE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":533,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":534,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":535,"author":{"gitId":"L5-Z"},"content":"        // if the date is not NA, then validate and make sure it is correct","lastModifiedDate":"2024-03-31"},{"lineNumber":536,"author":{"gitId":"L5-Z"},"content":"        try{","lastModifiedDate":"2024-03-31"},{"lineNumber":537,"author":{"gitId":"L5-Z"},"content":"            if (!date.equals(ErrorConstant.NO_DATE_SPECIFIED_ERROR)){","lastModifiedDate":"2024-03-31"},{"lineNumber":538,"author":{"gitId":"L5-Z"},"content":"                Validation.validateDateInput(date);","lastModifiedDate":"2024-03-31"},{"lineNumber":539,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-31"},{"lineNumber":540,"author":{"gitId":"L5-Z"},"content":"        } catch (CustomExceptions.InvalidInput e){","lastModifiedDate":"2024-03-31"},{"lineNumber":541,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.INVALID_DATE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":542,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":543,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":544,"author":{"gitId":"L5-Z"},"content":"        return gymDetails;","lastModifiedDate":"2024-03-31"},{"lineNumber":545,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":546,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":547,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":548,"author":{"gitId":"L5-Z"},"content":"     * Adds a station to the gym object based of the file input.","lastModifiedDate":"2024-03-31"},{"lineNumber":549,"author":{"gitId":"L5-Z"},"content":"     * This method is used in the {@code parseGymFileInput} method.","lastModifiedDate":"2024-03-31"},{"lineNumber":550,"author":{"gitId":"L5-Z"},"content":"     * How the method works is that it will check if the station details are valid","lastModifiedDate":"2024-03-31"},{"lineNumber":551,"author":{"gitId":"L5-Z"},"content":"     * and then add the station to the gym.","lastModifiedDate":"2024-03-31"},{"lineNumber":552,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":553,"author":{"gitId":"L5-Z"},"content":"     * @param gym the gym object that the station will be added to","lastModifiedDate":"2024-03-31"},{"lineNumber":554,"author":{"gitId":"L5-Z"},"content":"     * @param gymDetails the array of strings containing the gym details","lastModifiedDate":"2024-03-31"},{"lineNumber":555,"author":{"gitId":"L5-Z"},"content":"     * @param baseCounter the base counter to start adding the station","lastModifiedDate":"2024-03-31"},{"lineNumber":556,"author":{"gitId":"L5-Z"},"content":"     * @return the new base counter after adding the station","lastModifiedDate":"2024-03-31"},{"lineNumber":557,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError if there is an error in the file input","lastModifiedDate":"2024-03-31"},{"lineNumber":558,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput if the input is invalid","lastModifiedDate":"2024-03-31"},{"lineNumber":559,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":560,"author":{"gitId":"L5-Z"},"content":"    private static int addStationFromFile(Gym gym, String[] gymDetails, int baseCounter)","lastModifiedDate":"2024-03-31"},{"lineNumber":561,"author":{"gitId":"L5-Z"},"content":"            throws CustomExceptions.FileReadError,","lastModifiedDate":"2024-03-31"},{"lineNumber":562,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":563,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":564,"author":{"gitId":"L5-Z"},"content":"        String currentStationName;","lastModifiedDate":"2024-03-31"},{"lineNumber":565,"author":{"gitId":"L5-Z"},"content":"        String numberOfSetsStr;","lastModifiedDate":"2024-03-31"},{"lineNumber":566,"author":{"gitId":"L5-Z"},"content":"        String repsStr;","lastModifiedDate":"2024-03-31"},{"lineNumber":567,"author":{"gitId":"L5-Z"},"content":"        String weightStrings;","lastModifiedDate":"2024-03-31"},{"lineNumber":568,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":569,"author":{"gitId":"L5-Z"},"content":"        int numberOfSets;","lastModifiedDate":"2024-03-31"},{"lineNumber":570,"author":{"gitId":"L5-Z"},"content":"        int reps;","lastModifiedDate":"2024-03-31"},{"lineNumber":571,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cDouble\u003e weights \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-06"},{"lineNumber":572,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":573,"author":{"gitId":"L5-Z"},"content":"            currentStationName \u003d gymDetails[baseCounter];","lastModifiedDate":"2024-03-31"},{"lineNumber":574,"author":{"gitId":"L5-Z"},"content":"            numberOfSetsStr \u003d gymDetails[baseCounter + WorkoutConstant.SETS_OFFSET];","lastModifiedDate":"2024-03-31"},{"lineNumber":575,"author":{"gitId":"L5-Z"},"content":"            repsStr \u003d gymDetails[baseCounter + WorkoutConstant.REPS_OFFSET];","lastModifiedDate":"2024-03-31"},{"lineNumber":576,"author":{"gitId":"L5-Z"},"content":"            weightStrings \u003d gymDetails[baseCounter + WorkoutConstant.WEIGHTS_OFFSET];","lastModifiedDate":"2024-03-31"},{"lineNumber":577,"author":{"gitId":"L5-Z"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":578,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_GYM_FORMAT_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":579,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":580,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":581,"author":{"gitId":"L5-Z"},"content":"        if(currentStationName.isBlank() ||","lastModifiedDate":"2024-03-31"},{"lineNumber":582,"author":{"gitId":"L5-Z"},"content":"                numberOfSetsStr.isBlank() ||","lastModifiedDate":"2024-03-31"},{"lineNumber":583,"author":{"gitId":"L5-Z"},"content":"                repsStr.isBlank() ||","lastModifiedDate":"2024-03-31"},{"lineNumber":584,"author":{"gitId":"L5-Z"},"content":"                weightStrings.isBlank()){","lastModifiedDate":"2024-03-31"},{"lineNumber":585,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_GYM_FORMAT_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":586,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":587,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":588,"author":{"gitId":"L5-Z"},"content":"        // Check if valid numbers","lastModifiedDate":"2024-03-31"},{"lineNumber":589,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":590,"author":{"gitId":"L5-Z"},"content":"            numberOfSets \u003d Integer.parseInt(numberOfSetsStr);","lastModifiedDate":"2024-03-31"},{"lineNumber":591,"author":{"gitId":"L5-Z"},"content":"            reps \u003d Integer.parseInt(repsStr);","lastModifiedDate":"2024-03-31"},{"lineNumber":592,"author":{"gitId":"L5-Z"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":593,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_GYM_FORMAT_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":594,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":595,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":596,"author":{"gitId":"L5-Z"},"content":"        // Check if weights able to split","lastModifiedDate":"2024-03-31"},{"lineNumber":597,"author":{"gitId":"L5-Z"},"content":"        String[] weight \u003d weightStrings.split(UiConstant.SPLIT_BY_COMMAS);","lastModifiedDate":"2024-03-31"},{"lineNumber":598,"author":{"gitId":"L5-Z"},"content":"        if (weight.length !\u003d numberOfSets){","lastModifiedDate":"2024-03-31"},{"lineNumber":599,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_NUMBER_OF_SETS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":600,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":601,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":602,"author":{"gitId":"L5-Z"},"content":"        // Check if weights are valid numbers","lastModifiedDate":"2024-03-31"},{"lineNumber":603,"author":{"gitId":"L5-Z"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":604,"author":{"gitId":"L5-Z"},"content":"            for (String weightString : weight) {","lastModifiedDate":"2024-03-31"},{"lineNumber":605,"author":{"gitId":"L5-Z"},"content":"                weights.add(Double.parseDouble(weightString));","lastModifiedDate":"2024-04-06"},{"lineNumber":606,"author":{"gitId":"L5-Z"},"content":"            }","lastModifiedDate":"2024-03-31"},{"lineNumber":607,"author":{"gitId":"L5-Z"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":608,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.FileReadError(ErrorConstant.LOAD_GYM_FORMAT_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":609,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":610,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":611,"author":{"gitId":"L5-Z"},"content":"        gym.addStation(currentStationName, numberOfSets, reps, weights);","lastModifiedDate":"2024-04-01"},{"lineNumber":612,"author":{"gitId":"L5-Z"},"content":"        baseCounter +\u003d WorkoutConstant.INCREMENT_OFFSET;","lastModifiedDate":"2024-03-31"},{"lineNumber":613,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":614,"author":{"gitId":"L5-Z"},"content":"        return baseCounter;","lastModifiedDate":"2024-03-31"},{"lineNumber":615,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":616,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":617,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":618,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":619,"author":{"gitId":"L5-Z"},"content":"     * Parses the gym input from the storage file and returns a Gym object.","lastModifiedDate":"2024-03-31"},{"lineNumber":620,"author":{"gitId":"L5-Z"},"content":"     * The input of the storage file needs to be in the following format","lastModifiedDate":"2024-03-31"},{"lineNumber":621,"author":{"gitId":"L5-Z"},"content":"     * gym:NUM_STATIONS:DATE:STATION1_NAME:NUM_SETS:REPS:WEIGHT1,WEIGHT2,WEIGHT3,WEIGHT4","lastModifiedDate":"2024-03-31"},{"lineNumber":622,"author":{"gitId":"L5-Z"},"content":"     * :STATION2_NAME:NUM_SETS:REPS:WEIGHT1,WEIGHT2,WEIGHT3,WEIGHT4 ....","lastModifiedDate":"2024-03-31"},{"lineNumber":623,"author":{"gitId":"L5-Z"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":624,"author":{"gitId":"L5-Z"},"content":"     * @param input in the format specified above","lastModifiedDate":"2024-03-31"},{"lineNumber":625,"author":{"gitId":"L5-Z"},"content":"     * @return gym object created from the input","lastModifiedDate":"2024-03-31"},{"lineNumber":626,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input from the file.","lastModifiedDate":"2024-04-02"},{"lineNumber":627,"author":{"gitId":"L5-Z"},"content":"     * @throws CustomExceptions.FileReadError If the file cannot be read.","lastModifiedDate":"2024-04-02"},{"lineNumber":628,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":629,"author":{"gitId":"L5-Z"},"content":"    public static Gym parseGymFileInput(String input)","lastModifiedDate":"2024-03-31"},{"lineNumber":630,"author":{"gitId":"L5-Z"},"content":"            throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":631,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.FileReadError {","lastModifiedDate":"2024-03-31"},{"lineNumber":632,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":633,"author":{"gitId":"L5-Z"},"content":"        // does initial round of input checking","lastModifiedDate":"2024-03-31"},{"lineNumber":634,"author":{"gitId":"L5-Z"},"content":"        String[] gymDetails \u003d splitGymFileInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":635,"author":{"gitId":"L5-Z"},"content":"        Gym gym;","lastModifiedDate":"2024-03-31"},{"lineNumber":636,"author":{"gitId":"L5-Z"},"content":"        String date \u003d gymDetails[WorkoutConstant.DATE_FILE_INDEX];","lastModifiedDate":"2024-03-31"},{"lineNumber":637,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":638,"author":{"gitId":"L5-Z"},"content":"        if (date.equals(ErrorConstant.NO_DATE_SPECIFIED_ERROR)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":639,"author":{"gitId":"L5-Z"},"content":"            gym \u003d new Gym();","lastModifiedDate":"2024-03-31"},{"lineNumber":640,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-03-31"},{"lineNumber":641,"author":{"gitId":"L5-Z"},"content":"            gym \u003d new Gym(date);","lastModifiedDate":"2024-03-31"},{"lineNumber":642,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":643,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":644,"author":{"gitId":"L5-Z"},"content":"        int counter \u003d WorkoutConstant.GYM_FILE_BASE_COUNTER;","lastModifiedDate":"2024-03-31"},{"lineNumber":645,"author":{"gitId":"L5-Z"},"content":"        while (counter \u003c gymDetails.length) {","lastModifiedDate":"2024-03-31"},{"lineNumber":646,"author":{"gitId":"L5-Z"},"content":"            counter \u003d addStationFromFile(gym , gymDetails, counter);","lastModifiedDate":"2024-03-31"},{"lineNumber":647,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":648,"author":{"gitId":"L5-Z"},"content":"        return gym;","lastModifiedDate":"2024-03-31"},{"lineNumber":649,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":650,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":651,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"j013n3":3,"JustinSoh":190,"rouvinerh":224,"L5-Z":181,"syj02":53}},{"path":"src/main/java/utility/Validation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-04-06"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":" * Represents the validation class used to validate all inputs for PulsePilot.","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"public class Validation {","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"     * Validates that the input date string is correctly formatted in DD-MM-YYYY.","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"     * @param date The string date from user input.","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid date inputs.","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    public static void validateDateInput(String date) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"        if (!date.matches(UiConstant.VALID_DATE_REGEX)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_DATE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"        String[] parts \u003d date.split(UiConstant.DASH);","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        int day \u003d Integer.parseInt(parts[0]);","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"        int month \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"        int year \u003d Integer.parseInt(parts[2]);","lastModifiedDate":"2024-04-06"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        boolean isLeapYear \u003d (year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) || (year % 400 \u003d\u003d 0);","lastModifiedDate":"2024-04-06"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        if (month \u003d\u003d 2 \u0026\u0026 day \u003d\u003d 29 \u0026\u0026 !isLeapYear) {","lastModifiedDate":"2024-04-06"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_LEAP_YEAR_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"        if (year \u003c 1967) {","lastModifiedDate":"2024-04-06"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_YEAR_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-04-06"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"            LocalDate check \u003d LocalDate.of(year, month, day);","lastModifiedDate":"2024-04-06"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2024-04-06"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_DATE_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"     * Validates the delete input details.","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"     * @param deleteDetails A list containing the details for the delete command.","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the details specified are invalid.","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If empty strings are used.","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    public static void validateDeleteInput(String[] deleteDetails) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"        if (isEmptyParameterPresent(deleteDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_DELETE_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"        validateFilter(deleteDetails[UiConstant.DELETE_ITEM_STRING_INDEX].toLowerCase());","lastModifiedDate":"2024-04-01"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        if (!deleteDetails[UiConstant.DELETE_ITEM_NUMBER_INDEX].matches(UiConstant.VALID_POSITIVE_INTEGER_REGEX)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_INDEX_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"     * Validates whether the filter string is either \u0027run\u0027, \u0027gym\u0027, \u0027bmi\u0027, \u0027period\u0027 or \u0027appointment\u0027.","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"     * @param filter The filter string to be checked.","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the filter string is none of them.","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"    public static void validateFilter(String filter) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        if (filter.equals(WorkoutConstant.RUN)","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"                || filter.equals(WorkoutConstant.GYM)","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"                || filter.equals(HealthConstant.BMI)","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"                || filter.equals(HealthConstant.PERIOD)","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"                || filter.equals(HealthConstant.APPOINTMENT)","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"                || filter.equals(WorkoutConstant.ALL)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"            return;","lastModifiedDate":"2024-03-31"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"        throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_ITEM_ERROR","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"                + ErrorConstant.CORRECT_FILTER_ITEM_FORMAT);","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"     * Validates Bmi details entered.","lastModifiedDate":"2024-03-31"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"     * @param bmiDetails List of strings representing BMI details.","lastModifiedDate":"2024-03-31"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are any errors in the details entered.","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    public static void validateBmiInput(String[] bmiDetails) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"        if (isEmptyParameterPresent(bmiDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"        if (!bmiDetails[HealthConstant.BMI_HEIGHT_INDEX].matches(UiConstant.VALID_TWO_DP_NUMBER_REGEX)","lastModifiedDate":"2024-04-01"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"                || !bmiDetails[HealthConstant.BMI_WEIGHT_INDEX].matches(UiConstant.VALID_TWO_DP_NUMBER_REGEX)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.HEIGHT_WEIGHT_INPUT_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"        double height \u003d Double.parseDouble(bmiDetails[HealthConstant.BMI_HEIGHT_INDEX]);","lastModifiedDate":"2024-04-06"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"        double weight \u003d Double.parseDouble(bmiDetails[HealthConstant.BMI_WEIGHT_INDEX]);","lastModifiedDate":"2024-04-06"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"        if (height \u003c\u003d HealthConstant.MIN_HEIGHT || weight \u003c\u003d HealthConstant.MIN_WEIGHT) {","lastModifiedDate":"2024-04-06"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.ZERO_HEIGHT_AND_WEIGHT_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"        if (height \u003e HealthConstant.MAX_HEIGHT) {","lastModifiedDate":"2024-04-06"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.MAX_HEIGHT_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        if (weight \u003e HealthConstant.MAX_WEIGHT) {","lastModifiedDate":"2024-04-06"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.MAX_WEIGHT_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"        validateDateInput(bmiDetails[HealthConstant.BMI_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        validateDateNotAfterToday(bmiDetails[HealthConstant.BMI_DATE_INDEX]);","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     * Validates Period details entered.","lastModifiedDate":"2024-03-31"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     * @param periodDetails List of strings representing Period details.","lastModifiedDate":"2024-03-31"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are any errors in the details entered.","lastModifiedDate":"2024-03-31"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"    public static void validatePeriodInput(String[] periodDetails) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"        if (isEmptyParameterPresent(periodDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_PERIOD_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"            validateDateInput(periodDetails[HealthConstant.PERIOD_START_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_START_DATE_ERROR","lastModifiedDate":"2024-03-31"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"                    + e.getMessage());","lastModifiedDate":"2024-03-31"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-31"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"            validateDateInput(periodDetails[HealthConstant.PERIOD_END_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_END_DATE_ERROR","lastModifiedDate":"2024-03-31"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"                    + e.getMessage());","lastModifiedDate":"2024-03-31"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"        validateDateNotAfterToday(periodDetails[HealthConstant.PERIOD_START_DATE_INDEX]);","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"        validateDateNotAfterToday(periodDetails[HealthConstant.PERIOD_END_DATE_INDEX]);","lastModifiedDate":"2024-04-02"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"        LocalDate startDate \u003d Parser.parseDate(periodDetails[HealthConstant.PERIOD_START_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        LocalDate endDate \u003d Parser.parseDate(periodDetails[HealthConstant.PERIOD_END_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        if (startDate.isAfter(endDate)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.PERIOD_END_BEFORE_START_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-31"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"     * Validates the details for adding a Run.","lastModifiedDate":"2024-03-31"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"     * @param runDetails A list containing Run details.","lastModifiedDate":"2024-03-31"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If the details specified are invalid.","lastModifiedDate":"2024-03-31"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If empty strings are used.","lastModifiedDate":"2024-03-31"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"    public static void validateRunInput(String[] runDetails) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"        if (isEmptyParameterPresent(runDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_RUN_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"        validateRunTimeInput(runDetails[WorkoutConstant.RUN_TIME_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"        if (!runDetails[WorkoutConstant.RUN_DISTANCE_INDEX].matches(UiConstant.VALID_TWO_DP_NUMBER_REGEX)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_RUN_DISTANCE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"        double runDistance \u003d Double.parseDouble(runDetails[WorkoutConstant.RUN_DISTANCE_INDEX]);","lastModifiedDate":"2024-04-06"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"        if (runDistance \u003e WorkoutConstant.MAX_RUN_DISTANCE) {","lastModifiedDate":"2024-04-06"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.DISTANCE_TOO_LONG_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"        if (runDistance \u003c\u003d WorkoutConstant.MIN_RUN_DISTANCE) {","lastModifiedDate":"2024-04-06"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.ZERO_DISTANCE_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        if (runDetails[WorkoutConstant.RUN_DATE_INDEX] !\u003d null) {","lastModifiedDate":"2024-04-01"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"            validateDateInput(runDetails[WorkoutConstant.RUN_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"            validateDateNotAfterToday(runDetails[WorkoutConstant.RUN_DATE_INDEX]);","lastModifiedDate":"2024-04-02"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"     * Validates the details for adding a Gym.","lastModifiedDate":"2024-03-31"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"     * @param gymDetails A list containing Gym details.","lastModifiedDate":"2024-03-31"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If the details specified are invalid.","lastModifiedDate":"2024-03-31"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If empty strings are used.","lastModifiedDate":"2024-03-31"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"    public static void validateGymInput(String[] gymDetails) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"        if (isEmptyParameterPresent(gymDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.INSUFFICIENT_GYM_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":203,"author":{"gitId":"JustinSoh"},"content":"        if (!gymDetails[WorkoutConstant.GYM_NUMBER_OF_STATIONS_INDEX]","lastModifiedDate":"2024-04-01"},{"lineNumber":204,"author":{"gitId":"JustinSoh"},"content":"                .matches(UiConstant.VALID_POSITIVE_INTEGER_REGEX)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":205,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_NUMBER_OF_STATIONS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":206,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":207,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":208,"author":{"gitId":"JustinSoh"},"content":"        if (gymDetails[WorkoutConstant.GYM_DATE_INDEX] !\u003d null) {","lastModifiedDate":"2024-04-01"},{"lineNumber":209,"author":{"gitId":"JustinSoh"},"content":"            validateDateInput(gymDetails[WorkoutConstant.GYM_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":210,"author":{"gitId":"JustinSoh"},"content":"            validateDateNotAfterToday(gymDetails[WorkoutConstant.GYM_DATE_INDEX]);","lastModifiedDate":"2024-04-02"},{"lineNumber":211,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":212,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":213,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":214,"author":{"gitId":"JustinSoh"},"content":"    //@@author","lastModifiedDate":"2024-03-31"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"     * Validates the time used in HH:MM format.","lastModifiedDate":"2024-03-31"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"     * @param time String representing the time to check.","lastModifiedDate":"2024-03-31"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If time is formatted wrongly.","lastModifiedDate":"2024-03-31"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"    public static void validateTimeInput(String time) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"        if (!time.matches(UiConstant.VALID_TIME_REGEX)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_ACTUAL_TIME_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"        String [] parts \u003d time.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-31"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"        int hours \u003d Integer.parseInt(parts[0]);","lastModifiedDate":"2024-03-31"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"        int minutes \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-03-31"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"        if (hours \u003c UiConstant.MIN_HOURS || hours \u003e UiConstant.MAX_HOURS) {","lastModifiedDate":"2024-03-31"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_HOURS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"        if (minutes \u003c UiConstant.MIN_MINUTES || minutes \u003e UiConstant.MAX_MINUTES) {","lastModifiedDate":"2024-03-31"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_MINUTES_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":238,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-31"},{"lineNumber":239,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":240,"author":{"gitId":"JustinSoh"},"content":"     * Validates the time used in HH:MM format.","lastModifiedDate":"2024-03-31"},{"lineNumber":241,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":242,"author":{"gitId":"JustinSoh"},"content":"     * @param time String representing the time to check.","lastModifiedDate":"2024-03-31"},{"lineNumber":243,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If time is formatted wrongly.","lastModifiedDate":"2024-03-31"},{"lineNumber":244,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":245,"author":{"gitId":"JustinSoh"},"content":"    public static void validateRunTimeInput(String time) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":246,"author":{"gitId":"JustinSoh"},"content":"        if (!time.matches(UiConstant.VALID_TIME_REGEX) \u0026\u0026","lastModifiedDate":"2024-03-31"},{"lineNumber":247,"author":{"gitId":"JustinSoh"},"content":"                !time.matches(UiConstant.VALID_TIME_WITH_HOURS_REGEX)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":248,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_RUN_TIME_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":249,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":250,"author":{"gitId":"JustinSoh"},"content":"        String [] parts \u003d time.split(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-31"},{"lineNumber":251,"author":{"gitId":"JustinSoh"},"content":"        int hours \u003d WorkoutConstant.NO_HOURS_PRESENT;","lastModifiedDate":"2024-03-31"},{"lineNumber":252,"author":{"gitId":"JustinSoh"},"content":"        int minutes;","lastModifiedDate":"2024-03-31"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"        int seconds;","lastModifiedDate":"2024-03-31"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"        boolean isHoursPresent \u003d false;","lastModifiedDate":"2024-04-04"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"        if (parts.length \u003d\u003d WorkoutConstant.NUMBER_OF_PARTS_FOR_RUN_TIME) {","lastModifiedDate":"2024-04-01"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"            minutes \u003d Integer.parseInt(parts[0]);","lastModifiedDate":"2024-03-31"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"            seconds \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-03-31"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"        } else if (parts.length \u003d\u003d WorkoutConstant.NUMBER_OF_PARTS_FOR_RUN_TIME_WITH_HOURS) {","lastModifiedDate":"2024-04-01"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"            hours \u003d Integer.parseInt(parts[0]);","lastModifiedDate":"2024-03-31"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"            minutes \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-03-31"},{"lineNumber":262,"author":{"gitId":"JustinSoh"},"content":"            seconds \u003d Integer.parseInt(parts[2]);","lastModifiedDate":"2024-03-31"},{"lineNumber":263,"author":{"gitId":"JustinSoh"},"content":"            isHoursPresent \u003d true;","lastModifiedDate":"2024-04-04"},{"lineNumber":264,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-31"},{"lineNumber":265,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_RUN_TIME_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":266,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":267,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":268,"author":{"gitId":"JustinSoh"},"content":"        if (hours \u003d\u003d UiConstant.MIN_HOURS) {","lastModifiedDate":"2024-04-04"},{"lineNumber":269,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_HOUR_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"        if (isHoursPresent) {","lastModifiedDate":"2024-04-04"},{"lineNumber":273,"author":{"gitId":"JustinSoh"},"content":"            if (minutes \u003e UiConstant.MAX_MINUTES) {","lastModifiedDate":"2024-04-04"},{"lineNumber":274,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_MINUTE_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":275,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-31"},{"lineNumber":276,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":277,"author":{"gitId":"JustinSoh"},"content":"            if (seconds \u003e UiConstant.MAX_SECONDS) {","lastModifiedDate":"2024-04-04"},{"lineNumber":278,"author":{"gitId":"JustinSoh"},"content":"                throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_SECOND_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":279,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-31"},{"lineNumber":280,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":281,"author":{"gitId":"JustinSoh"},"content":"        // hour is not present","lastModifiedDate":"2024-04-04"},{"lineNumber":282,"author":{"gitId":"JustinSoh"},"content":"        if (minutes \u003e UiConstant.MAX_MINUTES) {","lastModifiedDate":"2024-04-04"},{"lineNumber":283,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_MINUTE_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":284,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":286,"author":{"gitId":"JustinSoh"},"content":"        if (seconds \u003c UiConstant.MIN_SECONDS || seconds \u003e UiConstant.MAX_SECONDS) {","lastModifiedDate":"2024-04-04"},{"lineNumber":287,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_SECOND_ERROR);","lastModifiedDate":"2024-04-04"},{"lineNumber":288,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":289,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":290,"author":{"gitId":"JustinSoh"},"content":"        if (minutes \u003d\u003d 0 \u0026\u0026 seconds \u003d\u003d 0) {","lastModifiedDate":"2024-04-06"},{"lineNumber":291,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.ZERO_TIME_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":292,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-06"},{"lineNumber":293,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":294,"author":{"gitId":"JustinSoh"},"content":"    //@@author","lastModifiedDate":"2024-03-31"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"     * Validates Appointment details entered.","lastModifiedDate":"2024-03-31"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"     * @param appointmentDetails List of strings representing Appointment details.","lastModifiedDate":"2024-03-31"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are any errors in the details entered.","lastModifiedDate":"2024-03-31"},{"lineNumber":300,"author":{"gitId":"syj02"},"content":"     * @throws CustomExceptions.InsufficientInput If date, time, or description parameters are missing.","lastModifiedDate":"2024-04-04"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"    public static void validateAppointmentDetails(String[] appointmentDetails)","lastModifiedDate":"2024-03-31"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"            throws CustomExceptions.InvalidInput, CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"        if (isEmptyParameterPresent(appointmentDetails)) {","lastModifiedDate":"2024-04-02"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InsufficientInput( ErrorConstant","lastModifiedDate":"2024-03-31"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"                    .INSUFFICIENT_APPOINTMENT_PARAMETERS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"        validateDateInput(appointmentDetails[HealthConstant.APPOINTMENT_DATE_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"        validateTimeInput(appointmentDetails[HealthConstant.APPOINTMENT_TIME_INDEX]);","lastModifiedDate":"2024-04-01"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"        if (appointmentDetails[HealthConstant.APPOINTMENT_DESCRIPTION_INDEX].length()","lastModifiedDate":"2024-04-01"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"                \u003e HealthConstant.MAX_DESCRIPTION_LENGTH) {","lastModifiedDate":"2024-04-01"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.DESCRIPTION_LENGTH_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"        if (!appointmentDetails[HealthConstant.APPOINTMENT_DESCRIPTION_INDEX]","lastModifiedDate":"2024-04-01"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"                .matches(UiConstant.VALID_APPOINTMENT_DESCRIPTION_REGEX)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_DESCRIPTION_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"     * Validates the string for an exercise name, and that it has no special characters.","lastModifiedDate":"2024-03-31"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"     * Only alphanumeric and space characters can be in the name.","lastModifiedDate":"2024-03-31"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"     * @param exerciseName The exercise name string.","lastModifiedDate":"2024-03-31"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the details specified are invalid.","lastModifiedDate":"2024-03-31"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If empty strings are used.","lastModifiedDate":"2024-03-31"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":330,"author":{"gitId":"JustinSoh"},"content":"    //@@author JustinSoh","lastModifiedDate":"2024-03-31"},{"lineNumber":331,"author":{"gitId":"JustinSoh"},"content":"    public static void validateExerciseName(String exerciseName) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":332,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":333,"author":{"gitId":"JustinSoh"},"content":"        if (exerciseName.isEmpty()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":334,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InsufficientInput(ErrorConstant.EMPTY_EXERCISE_NAME_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":335,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":336,"author":{"gitId":"JustinSoh"},"content":"        if (!exerciseName.matches(UiConstant.VALID_EXERCISE_NAME_REGEX)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":337,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_EXERCISE_NAME_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":338,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":339,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":340,"author":{"gitId":"JustinSoh"},"content":"        if (exerciseName.length() \u003e WorkoutConstant.MAX_GYM_STATION_NAME_LENGTH) {","lastModifiedDate":"2024-04-01"},{"lineNumber":341,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.EXERCISE_NAME_LENGTH_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":342,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":343,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":344,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":345,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":346,"author":{"gitId":"JustinSoh"},"content":"     * Validates the weight string such that it only has numbers.","lastModifiedDate":"2024-04-01"},{"lineNumber":347,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":348,"author":{"gitId":"JustinSoh"},"content":"     * @param weightsString The string representing the weights in the format \"weight1,weight2,weight3...\"","lastModifiedDate":"2024-04-01"},{"lineNumber":349,"author":{"gitId":"JustinSoh"},"content":"     * @return ArrayList of integers representing the weights in the format [weight1, weight2, weight3 ...]","lastModifiedDate":"2024-04-01"},{"lineNumber":350,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If an invalid weights string is passed in.","lastModifiedDate":"2024-04-01"},{"lineNumber":351,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":352,"author":{"gitId":"JustinSoh"},"content":"    public static ArrayList\u003cDouble\u003e validateWeightsArray(String weightsString)","lastModifiedDate":"2024-04-06"},{"lineNumber":353,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-01"},{"lineNumber":354,"author":{"gitId":"JustinSoh"},"content":"        String[] weightsArray \u003d weightsString.split(UiConstant.SPLIT_BY_COMMAS);","lastModifiedDate":"2024-04-01"},{"lineNumber":355,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e validatedWeightsArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-06"},{"lineNumber":356,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-04-01"},{"lineNumber":357,"author":{"gitId":"JustinSoh"},"content":"            for(String weight: weightsArray){","lastModifiedDate":"2024-04-01"},{"lineNumber":358,"author":{"gitId":"JustinSoh"},"content":"                double weightDouble \u003d Double.parseDouble(weight);","lastModifiedDate":"2024-04-06"},{"lineNumber":359,"author":{"gitId":"JustinSoh"},"content":"                if (weightDouble \u003c WorkoutConstant.MIN_WEIGHT){","lastModifiedDate":"2024-04-06"},{"lineNumber":360,"author":{"gitId":"JustinSoh"},"content":"                    throw new CustomExceptions.InvalidInput(ErrorConstant.GYM_WEIGHT_POSITIVE_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":361,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-04-06"},{"lineNumber":362,"author":{"gitId":"JustinSoh"},"content":"                if (weightDouble % WorkoutConstant.WEIGHT_MULTIPLE !\u003d 0 ){","lastModifiedDate":"2024-04-06"},{"lineNumber":363,"author":{"gitId":"JustinSoh"},"content":"                    throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_WEIGHT_VALUE_ERROR);","lastModifiedDate":"2024-04-06"},{"lineNumber":364,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-04-01"},{"lineNumber":365,"author":{"gitId":"JustinSoh"},"content":"                validatedWeightsArray.add(weightDouble);","lastModifiedDate":"2024-04-06"},{"lineNumber":366,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-04-01"},{"lineNumber":367,"author":{"gitId":"JustinSoh"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2024-04-01"},{"lineNumber":368,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.GYM_WEIGHT_DIGIT_ERROR);","lastModifiedDate":"2024-04-01"},{"lineNumber":369,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":370,"author":{"gitId":"JustinSoh"},"content":"        return validatedWeightsArray;","lastModifiedDate":"2024-04-01"},{"lineNumber":371,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":372,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":373,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":374,"author":{"gitId":"JustinSoh"},"content":"     * Splits and validates the user input for adding a station to a Gym object.","lastModifiedDate":"2024-03-31"},{"lineNumber":375,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":376,"author":{"gitId":"JustinSoh"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-03-31"},{"lineNumber":377,"author":{"gitId":"JustinSoh"},"content":"     * @return A list of validated parameters for adding a GymStation.","lastModifiedDate":"2024-03-31"},{"lineNumber":378,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InvalidInput If the details specified are invalid.","lastModifiedDate":"2024-03-31"},{"lineNumber":379,"author":{"gitId":"JustinSoh"},"content":"     * @throws CustomExceptions.InsufficientInput If empty strings are used.","lastModifiedDate":"2024-03-31"},{"lineNumber":380,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":381,"author":{"gitId":"JustinSoh"},"content":"    public static String[] splitAndValidateGymStationInput(String input) throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":382,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":383,"author":{"gitId":"JustinSoh"},"content":"        String exerciseName \u003d input.split(UiConstant.SPLIT_BY_SLASH)[WorkoutConstant.STATION_NAME_INDEX].trim();","lastModifiedDate":"2024-03-31"},{"lineNumber":384,"author":{"gitId":"JustinSoh"},"content":"        validateExerciseName(exerciseName);","lastModifiedDate":"2024-03-31"},{"lineNumber":385,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":386,"author":{"gitId":"JustinSoh"},"content":"        String sets \u003d Parser.extractSubstringFromSpecificIndex(input, WorkoutConstant.SETS_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":387,"author":{"gitId":"JustinSoh"},"content":"        if (!sets.matches(UiConstant.VALID_POSITIVE_INTEGER_REGEX)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":388,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_SETS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":389,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":390,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":391,"author":{"gitId":"JustinSoh"},"content":"        String reps \u003d Parser.extractSubstringFromSpecificIndex(input, WorkoutConstant.REPS_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":392,"author":{"gitId":"JustinSoh"},"content":"        if (!reps.matches(UiConstant.VALID_POSITIVE_INTEGER_REGEX)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":393,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_REPS_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":394,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":395,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":396,"author":{"gitId":"JustinSoh"},"content":"        String weights \u003d Parser.extractSubstringFromSpecificIndex(input, WorkoutConstant.WEIGHTS_FLAG).trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":397,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":398,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":399,"author":{"gitId":"JustinSoh"},"content":"        String[] weightsArray \u003d weights.split(UiConstant.SPLIT_BY_COMMAS);","lastModifiedDate":"2024-03-31"},{"lineNumber":400,"author":{"gitId":"JustinSoh"},"content":"        if (weightsArray.length \u003c WorkoutConstant.MIN_GYM_STATION_WEIGHTS_ARRAY_LENGTH) {","lastModifiedDate":"2024-04-01"},{"lineNumber":401,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.EMPTY_WEIGHTS_ARRAY_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":402,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":403,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":404,"author":{"gitId":"JustinSoh"},"content":"        if (weightsArray.length !\u003d Integer.parseInt(sets)) {","lastModifiedDate":"2024-03-31"},{"lineNumber":405,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.GYM_WEIGHTS_INCORRECT_NUMBER_ERROR);","lastModifiedDate":"2024-03-31"},{"lineNumber":406,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":407,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":408,"author":{"gitId":"JustinSoh"},"content":"        String[] results \u003d new String[WorkoutConstant.NUMBER_OF_GYM_STATION_PARAMETERS];","lastModifiedDate":"2024-04-01"},{"lineNumber":409,"author":{"gitId":"JustinSoh"},"content":"        results[WorkoutConstant.GYM_STATION_NAME_INDEX] \u003d exerciseName;","lastModifiedDate":"2024-04-01"},{"lineNumber":410,"author":{"gitId":"JustinSoh"},"content":"        results[WorkoutConstant.GYM_STATION_SET_INDEX] \u003d sets;","lastModifiedDate":"2024-04-01"},{"lineNumber":411,"author":{"gitId":"JustinSoh"},"content":"        results[WorkoutConstant.GYM_STATION_REPS_INDEX] \u003d reps;","lastModifiedDate":"2024-04-01"},{"lineNumber":412,"author":{"gitId":"JustinSoh"},"content":"        results[WorkoutConstant.GYM_STATION_WEIGHTS_INDEX] \u003d weights;","lastModifiedDate":"2024-04-01"},{"lineNumber":413,"author":{"gitId":"JustinSoh"},"content":"        return results;","lastModifiedDate":"2024-03-31"},{"lineNumber":414,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":415,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":416,"author":{"gitId":"rouvinerh"},"content":"    //@@author rouvinerh","lastModifiedDate":"2024-04-02"},{"lineNumber":417,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":418,"author":{"gitId":"rouvinerh"},"content":"     * Validates whether the list of input details contains any empty strings. If it does, return false.","lastModifiedDate":"2024-04-02"},{"lineNumber":419,"author":{"gitId":"rouvinerh"},"content":"     * Otherwise, return true.","lastModifiedDate":"2024-04-02"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":421,"author":{"gitId":"rouvinerh"},"content":"     * @param input A list of strings representing command inputs.","lastModifiedDate":"2024-04-02"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"     * @return False if it contains empty strings. Otherwise, returns true.","lastModifiedDate":"2024-04-02"},{"lineNumber":423,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":424,"author":{"gitId":"rouvinerh"},"content":"    public static boolean isEmptyParameterPresent(String[] input) {","lastModifiedDate":"2024-04-02"},{"lineNumber":425,"author":{"gitId":"rouvinerh"},"content":"        for (String s : input) {","lastModifiedDate":"2024-04-02"},{"lineNumber":426,"author":{"gitId":"rouvinerh"},"content":"            if (s !\u003d null \u0026\u0026 s.isEmpty()) {","lastModifiedDate":"2024-04-02"},{"lineNumber":427,"author":{"gitId":"rouvinerh"},"content":"                return true;","lastModifiedDate":"2024-04-02"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"        return false;","lastModifiedDate":"2024-04-02"},{"lineNumber":431,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":432,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":433,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":434,"author":{"gitId":"rouvinerh"},"content":"     * Validates whether the date specified is after today. Throws an error if it is.","lastModifiedDate":"2024-04-02"},{"lineNumber":435,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":436,"author":{"gitId":"rouvinerh"},"content":"     * @param dateString A string representing the date.","lastModifiedDate":"2024-04-02"},{"lineNumber":437,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If the date specified is after today.","lastModifiedDate":"2024-04-02"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":439,"author":{"gitId":"rouvinerh"},"content":"    public static void validateDateNotAfterToday(String dateString) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-02"},{"lineNumber":440,"author":{"gitId":"rouvinerh"},"content":"        LocalDate date \u003d Parser.parseDate(dateString);","lastModifiedDate":"2024-04-02"},{"lineNumber":441,"author":{"gitId":"rouvinerh"},"content":"        if (date.isAfter(LocalDate.now())) {","lastModifiedDate":"2024-04-02"},{"lineNumber":442,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.DATE_IN_FUTURE_ERROR);","lastModifiedDate":"2024-04-02"},{"lineNumber":443,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":444,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":445,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"JustinSoh":202,"rouvinerh":242,"syj02":1}},{"path":"src/main/java/workouts/Gym.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":" * Represents a Gym object that contains an ArrayList of GymStation objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"public class Gym extends Workout {","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    protected LocalDate date \u003d null;","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    protected ArrayList\u003cGymStation\u003e stations \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     * Constructor that adds a Gym object to WorkoutList.","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    public Gym() {","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.addGym(this);","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     * Overloaded constructor that adds a Gym object to WorkoutList, and also takes the optional date parameter.","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDate String representing the date parameter specified.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    public Gym(String stringDate) {","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        this.date \u003d Parser.parseDate(stringDate);","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.addGym(this);","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"     * Adds station to an ArrayList of GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * @param name        Name of the gym station.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * @param numberOfSet Number of sets done.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     * @param numberOfRepetitions Number of repetitions done.","lastModifiedDate":"2024-04-01"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"     * @param weightsList Weights used for the station.","lastModifiedDate":"2024-04-01"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input in any parameter.","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    public void addStation(String name, int numberOfSet, int numberOfRepetitions,","lastModifiedDate":"2024-04-01"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"                           ArrayList\u003cDouble\u003e weightsList) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"            GymStation newStation \u003d new GymStation(name, numberOfSet, numberOfRepetitions, weightsList);","lastModifiedDate":"2024-04-01"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"            appendIntoStations(newStation);","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.InvalidInput(WorkoutConstant.INVALID_GYM_INPUT);","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     * Get specific station as part of Gym object based on workout.","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     * @return The desired GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"    public ArrayList\u003cGymStation\u003e getStations() {","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"        return stations;","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"    public void appendIntoStations(GymStation station) {","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"        stations.add(station);","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"    public GymStation getStationByIndex(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"        if (index \u003e\u003d stations.size() || index \u003c 0) {","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.OutOfBounds(WorkoutConstant.INVALID_GYM_STATION_INDEX);","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"        return stations.get(index);","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        return date;","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"    public void setDate(LocalDate date) {","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the string representation of a Gym object.","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing the Gym object, inclusive of the date and gym stations done.","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    @Override","lastModifiedDate":"2024-03-14"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-14"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"        String printedDate;","lastModifiedDate":"2024-03-19"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-03-19"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"            printedDate \u003d date.toString();","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"            return String.format(\" (Date: %s)\", printedDate);","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"            return \" (Date: NA)\";","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a Gym object.","lastModifiedDate":"2024-04-01"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"     * Used for the formatting of the Gym Object before writing into a file.","lastModifiedDate":"2024-04-01"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-30"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"     * @return StringBuilder Object that contains the formatted string.","lastModifiedDate":"2024-04-01"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-30"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"    private StringBuilder formatFileString(){","lastModifiedDate":"2024-04-01"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder fileString \u003d new StringBuilder();","lastModifiedDate":"2024-03-30"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"        String type \u003d WorkoutConstant.GYM.toUpperCase();","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"        String numOfStation \u003d String.valueOf(stations.size());","lastModifiedDate":"2024-03-30"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        String date;","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"        if(this.getDate() \u003d\u003d null){","lastModifiedDate":"2024-03-30"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"            date \u003d ErrorConstant.NO_DATE_SPECIFIED_ERROR;","lastModifiedDate":"2024-03-30"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-30"},{"lineNumber":117,"author":{"gitId":"L5-Z"},"content":"            date \u003d Parser.parseFormattedDate(this.getDate());","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(type);","lastModifiedDate":"2024-03-30"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-31"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(numOfStation);","lastModifiedDate":"2024-03-30"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-31"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(date);","lastModifiedDate":"2024-03-30"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-31"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"        return fileString;","lastModifiedDate":"2024-04-01"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"     * Converts the Gym Object into the String format for writing into a file.","lastModifiedDate":"2024-04-01"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"     * The format that this output is","lastModifiedDate":"2024-04-01"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"     *  gym:NUM_STATIONS:DATE:STATION1_NAME:NUM_SETS:REPS:WEIGHT1,WEIGHT2,WEIGHT3,WEIGHT4","lastModifiedDate":"2024-04-01"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"     *  :STATION2_NAME:NUM_SETS:REPS:WEIGHT1,WEIGHT2,WEIGHT3,WEIGHT4 ....","lastModifiedDate":"2024-04-01"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"     *  Example: \"gym:2:1997-11-11:bench press:4:4,4,4,4:10,20,30,40:squats:4:3,3,3,3:20,30,40,50\"","lastModifiedDate":"2024-04-01"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"     *  Can refer to GymTest {@code toFileString_correctInput_expectedCorrectString()} for more examples","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string in the format specified above.","lastModifiedDate":"2024-04-01"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"    public String toFileString(){","lastModifiedDate":"2024-04-01"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder fileString \u003d formatFileString();","lastModifiedDate":"2024-04-01"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cGymStation\u003e stations \u003d getStations();","lastModifiedDate":"2024-04-01"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"        for (GymStation station : stations) {","lastModifiedDate":"2024-03-30"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"            fileString.append(station.toFileString());","lastModifiedDate":"2024-04-01"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"            if (stations.indexOf(station) !\u003d stations.size() - 1) {","lastModifiedDate":"2024-03-30"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"                fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-03-31"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-30"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"        return fileString.toString();","lastModifiedDate":"2024-03-30"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"     * Used when printing all the workouts. This method takes in two parameters {@code isFirstIteration} and {@code i}","lastModifiedDate":"2024-03-27"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"     * @param index indicates which particular gymStation is being queried.","lastModifiedDate":"2024-03-27"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"     * @return A string representing the history format for gym.","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"    public String getHistoryFormatForSpecificGymStation(int index) {","lastModifiedDate":"2024-03-27"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder gymDate \u003d new StringBuilder();","lastModifiedDate":"2024-03-27"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"            gymDate.append(date);","lastModifiedDate":"2024-03-27"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"            gymDate.append(ErrorConstant.NO_DATE_SPECIFIED_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"        // Get the string format for a specific gym station","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"        GymStation station \u003d getStations().get(index);","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"        String gymStationString \u003d station.getStationName();","lastModifiedDate":"2024-03-27"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"        String gymSetString \u003d String.valueOf(station.getNumberOfSets());","lastModifiedDate":"2024-03-27"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"        // Process the reps and weights into string format","lastModifiedDate":"2024-03-27"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        String gymRepString \u003d station.toRepString(UiConstant.COMMAS);","lastModifiedDate":"2024-04-01"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"        String gymWeightString \u003d station.toWeightString(UiConstant.COMMAS);","lastModifiedDate":"2024-04-01"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"        // If it is first iteration, includes dashes for irrelevant field","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"JustinSoh"},"content":"        if (index \u003d\u003d 0){","lastModifiedDate":"2024-03-27"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"            return String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.GYM, gymDate,","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"                    gymStationString,","lastModifiedDate":"2024-03-27"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"                    gymSetString,","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"                    gymRepString,","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"                    gymWeightString);","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"            // if it is not, then leave it blank","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"            return String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"                    gymStationString,","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"                    gymSetString,","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"                    gymRepString,","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"                    gymWeightString","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"            );","lastModifiedDate":"2024-03-27"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":201,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":202,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":125,"rouvinerh":74,"L5-Z":4}},{"path":"src/main/java/workouts/GymSet.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":" * Represents a GymSet object.","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"public class GymSet {","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"    private double weight;","lastModifiedDate":"2024-04-06"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"    private int numberOfRepetitions;","lastModifiedDate":"2024-04-06"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"     * Constructs a new GymSet object using the weight and reps for 1 set of a gym station.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"     * @param weight The weight done for the set.","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"     * @param numberOfRepetitions The number of reps done for the set.","lastModifiedDate":"2024-04-01"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    public GymSet(Double weight, int numberOfRepetitions){","lastModifiedDate":"2024-04-06"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"        this.numberOfRepetitions \u003d numberOfRepetitions;","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"    public double getWeight() {","lastModifiedDate":"2024-04-06"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"        return weight;","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    public void setWeight(int weight) {","lastModifiedDate":"2024-03-24"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    public int getNumberOfRepetitions() {","lastModifiedDate":"2024-04-01"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        return numberOfRepetitions;","lastModifiedDate":"2024-04-01"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves a string representation of a GymSet object.","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing a GymSet, inclusive of the number of repetitions and weight done.","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"        return String.format(WorkoutConstant.GYM_SET_FORMAT, this.numberOfRepetitions, this.weight);","lastModifiedDate":"2024-04-01"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":18,"rouvinerh":27}},{"path":"src/main/java/workouts/GymStation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":" * Represents a GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"public class GymStation {","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    protected String stationName;","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    protected ArrayList\u003cGymSet\u003e sets \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"    protected int numberOfSets;","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"     * Constructs a new GymStation object that contains the name, weight, number of repetitions and number of sets done","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"     * in one station.","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"     * @param name                String name of the station","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     * @param numberOfSets        Number of sets done.","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     * @param numberOfRepetitions Number of reps done.","lastModifiedDate":"2024-04-01"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"     * @param weightsList         Weight used.","lastModifiedDate":"2024-04-01"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    protected GymStation(String name, int numberOfSets, int numberOfRepetitions, ArrayList\u003cDouble\u003e weightsList) {","lastModifiedDate":"2024-04-06"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"        this.stationName \u003d name;","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        this.numberOfSets \u003d numberOfSets;","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"        processSets(weightsList, numberOfRepetitions);","lastModifiedDate":"2024-04-01"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     * Function which adds a GymSet object to GymStation.","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"     * @param weightsList     The weight done for the particular set.","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"     * @param numberOfRepetitions The number of repetitions done for the particular set.","lastModifiedDate":"2024-04-01"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    public void processSets(ArrayList\u003cDouble\u003e weightsList, int numberOfRepetitions) {","lastModifiedDate":"2024-04-06"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        for (int i \u003d 0; i \u003c numberOfSets; i++) {","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"            GymSet newSet \u003d new GymSet(weightsList.get(i), numberOfRepetitions);","lastModifiedDate":"2024-04-01"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"            sets.add(newSet);","lastModifiedDate":"2024-03-14"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the station name for the GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"     * @return String representing the name for the station.","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    public String getStationName() {","lastModifiedDate":"2024-03-14"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"        return stationName;","lastModifiedDate":"2024-03-14"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves an ArrayList of gym sets for the GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"     * @return The ArrayList of GymSet objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    public ArrayList\u003cGymSet\u003e getSets() {","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"        return sets;","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the number sets within the GymStation.","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"     * @return The number of sets done.","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"    public int getNumberOfSets() {","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        return numberOfSets;","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the string representation of a GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing a GymStation object.","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder returnString \u003d new StringBuilder(String.format(WorkoutConstant.GYM_STATION_FORMAT,","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"                this.getStationName()) + String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT,","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"                this.getNumberOfSets()));","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c this.getNumberOfSets(); i++) {","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"            returnString.append(System.lineSeparator());","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"            returnString.append(String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, i+1 ,","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"                    this.getSets().get(i).toString()));","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"        return returnString.toString();","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a GymStation object with a specified delimiter","lastModifiedDate":"2024-04-01"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"     * E.g. toRepString(\",\") returns \"1,2,3\"","lastModifiedDate":"2024-04-01"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"     * E.g. toRepString(\":\") returns \"1:2:3\"","lastModifiedDate":"2024-04-01"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"     * @param delimiter The delimiter to separate the repetitions.","lastModifiedDate":"2024-04-01"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a GymStation object with the specified delimiter.","lastModifiedDate":"2024-04-01"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"    public String toRepString(String delimiter) {","lastModifiedDate":"2024-04-01"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder repString \u003d new StringBuilder();","lastModifiedDate":"2024-04-01"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c sets.size(); i++) {","lastModifiedDate":"2024-04-01"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"            String currentRep \u003d String.valueOf(sets.get(i).getNumberOfRepetitions());","lastModifiedDate":"2024-04-01"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"            repString.append(currentRep);","lastModifiedDate":"2024-04-01"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"            if (i !\u003d sets.size() - 1) {","lastModifiedDate":"2024-04-01"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"                repString.append(delimiter);","lastModifiedDate":"2024-04-01"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-04-01"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        return repString.toString();","lastModifiedDate":"2024-04-01"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a GymStation object with a specified delimiter","lastModifiedDate":"2024-04-01"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"     * E.g. toWeightString(\",\") returns \"10,20,30\"","lastModifiedDate":"2024-04-01"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"     * E.g. toWeightString(\":\") returns \"10:20:30\"","lastModifiedDate":"2024-04-01"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"     * @param delimiter The delimiter to separate the weights.","lastModifiedDate":"2024-04-01"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a GymStation object with the specified delimiter.","lastModifiedDate":"2024-04-01"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"    public String toWeightString(String delimiter){","lastModifiedDate":"2024-04-01"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder weightString \u003d new StringBuilder();","lastModifiedDate":"2024-04-01"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c sets.size(); i++) {","lastModifiedDate":"2024-04-01"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"            String currentRep \u003d String.valueOf(sets.get(i).getWeight());","lastModifiedDate":"2024-04-01"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"            weightString.append(currentRep);","lastModifiedDate":"2024-04-01"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"            if (i !\u003d sets.size() - 1) {","lastModifiedDate":"2024-04-01"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"                weightString.append(delimiter);","lastModifiedDate":"2024-04-01"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"        return weightString.toString();","lastModifiedDate":"2024-04-01"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"     * Retrieves the string representation of a GymStation object for writing into a file.","lastModifiedDate":"2024-04-01"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"     * Formats the string in the following format","lastModifiedDate":"2024-04-01"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"     * \"[Exercise Name]:[Number of Sets]:[Repetitions]:[Weights1, Weight2,Weight3 ...]\"","lastModifiedDate":"2024-04-01"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"     * @return A formatted string representing a GymStation object with the format above.","lastModifiedDate":"2024-04-01"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"    public String toFileString(){","lastModifiedDate":"2024-04-01"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"        StringBuilder fileString \u003d new StringBuilder();","lastModifiedDate":"2024-04-01"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"        String stationName \u003d getStationName();","lastModifiedDate":"2024-04-01"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"        String numOfSets \u003d String.valueOf(getNumberOfSets());","lastModifiedDate":"2024-04-01"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        String gymRepString \u003d toRepString(UiConstant.SPLIT_BY_COMMAS).split(UiConstant.SPLIT_BY_COMMAS)[0];","lastModifiedDate":"2024-04-01"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        String gymWeightString \u003d toWeightString(UiConstant.SPLIT_BY_COMMAS);","lastModifiedDate":"2024-04-01"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(stationName);","lastModifiedDate":"2024-04-01"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-01"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(numOfSets);","lastModifiedDate":"2024-04-01"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-01"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(gymRepString);","lastModifiedDate":"2024-04-01"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(UiConstant.SPLIT_BY_COLON);","lastModifiedDate":"2024-04-01"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"        fileString.append(gymWeightString);","lastModifiedDate":"2024-04-01"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"        return fileString.toString();","lastModifiedDate":"2024-04-01"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-26"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"JustinSoh":83,"rouvinerh":68,"L5-Z":1}},{"path":"src/main/java/workouts/Run.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":" * Represents a Run object.","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"public class Run extends Workout {","lastModifiedDate":"2024-03-10"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    protected Integer[] times;","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    protected double distance;","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    protected LocalDate date \u003d null;","lastModifiedDate":"2024-03-12"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    protected String pace;","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    protected boolean isHourPresent;","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"     * Constructs a new Run object with the time and distance from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"     * @param stringTime     The time taken for the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDistance The distance of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"    public Run(String stringTime, String stringDistance) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"        times \u003d splitRunTime(stringTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        distance \u003d Double.parseDouble(stringDistance);","lastModifiedDate":"2024-03-10"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        pace \u003d calculatePace();","lastModifiedDate":"2024-03-10"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.addRun(this);","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"     * Overloaded constructor that takes in time, distance and the optional date parameter from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"     * @param stringTime     The time taken for the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDistance The distance of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDate     The date of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    public Run(String stringTime, String stringDistance, String stringDate) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"        times \u003d splitRunTime(stringTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        distance \u003d Double.parseDouble(stringDistance);","lastModifiedDate":"2024-03-10"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        date \u003d Parser.parseDate(stringDate);","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        pace \u003d calculatePace();","lastModifiedDate":"2024-03-10"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.addRun(this);","lastModifiedDate":"2024-03-11"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"     * Returns string format of time taken for run.","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"     * @return Formatted string of the time for the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    public String getTimes() {","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"        if (isHourPresent) {","lastModifiedDate":"2024-03-11"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"            return String.format(WorkoutConstant.TWO_DIGIT_PLACE_FORMAT, times[0])","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"                    + \":\"","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"                    + String.format(WorkoutConstant.TWO_DIGIT_PLACE_FORMAT, times[1])","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"                    + \":\"","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"                    + String.format(WorkoutConstant.TWO_DIGIT_PLACE_FORMAT, times[2]);","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"            return String.format(WorkoutConstant.TWO_DIGIT_PLACE_FORMAT, times[0])","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"                    + \":\"","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"                    + String.format(WorkoutConstant.TWO_DIGIT_PLACE_FORMAT, times[1]);","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-10"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves run distance.","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"     * @return Run distance.","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"    public String getDistance() {","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"        return String.format(WorkoutConstant.TWO_DECIMAL_PLACE_FORMAT, distance);","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves run pace.","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"     * @return Run pace.","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"    public String getPace() {","lastModifiedDate":"2024-03-10"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"        return pace;","lastModifiedDate":"2024-03-10"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-27"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"        return date;","lastModifiedDate":"2024-03-27"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"    public void setDate(LocalDate date) {","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"    public boolean isHourPresent() {","lastModifiedDate":"2024-04-04"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"        return isHourPresent;","lastModifiedDate":"2024-04-04"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"     * Method parses the time format in either hh:mm:ss or mm:ss.","lastModifiedDate":"2024-03-11"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"     * Sets {@code isHourPresent} variable to true if hours have been specified.","lastModifiedDate":"2024-03-11"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"     * Otherwise, set to false.","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"     * @param inputTime String variable representing time taken in either hh:mm:ss or mm:ss format","lastModifiedDate":"2024-03-11"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"     * @return A list of integers representing the hours (if present), minutes and seconds.","lastModifiedDate":"2024-03-11"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"    public Integer[] splitRunTime(String inputTime) throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"        String[] stringTimeParts \u003d inputTime.split(\":\");","lastModifiedDate":"2024-03-10"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"        int inputLength \u003d stringTimeParts.length;","lastModifiedDate":"2024-03-10"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"        Integer[] integerTimes \u003d new Integer[inputLength];","lastModifiedDate":"2024-03-11"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"        if (inputLength \u003d\u003d UiConstant.MAX_RUNTIME_ARRAY_LENGTH) {","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"            this.isHourPresent \u003d true;","lastModifiedDate":"2024-03-14"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[0] \u003d Integer.parseInt(stringTimeParts[0]);","lastModifiedDate":"2024-03-10"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[1] \u003d Integer.parseInt(stringTimeParts[1]);","lastModifiedDate":"2024-03-10"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[2] \u003d Integer.parseInt(stringTimeParts[2]);","lastModifiedDate":"2024-03-10"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"        } else if (inputLength \u003d\u003d UiConstant.MIN_RUNTIME_ARRAY_LENGTH) {","lastModifiedDate":"2024-03-21"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"            this.isHourPresent \u003d false;","lastModifiedDate":"2024-03-14"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[0] \u003d Integer.parseInt(stringTimeParts[0]);","lastModifiedDate":"2024-03-10"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"            integerTimes[1] \u003d Integer.parseInt(stringTimeParts[1]);","lastModifiedDate":"2024-03-10"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":124,"author":{"gitId":"L5-Z"},"content":"            throw new CustomExceptions.InvalidInput(WorkoutConstant.INVALID_RUN_TIME);","lastModifiedDate":"2024-03-21"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-10"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"        return integerTimes;","lastModifiedDate":"2024-03-10"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"     * Method checks if hour has been specified, then returns total seconds.","lastModifiedDate":"2024-03-11"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"     * @return The total number of seconds in the run.","lastModifiedDate":"2024-03-11"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"    public int calculateTotalSeconds() {","lastModifiedDate":"2024-03-14"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"        int totalSeconds;","lastModifiedDate":"2024-03-10"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"        if (this.isHourPresent) {","lastModifiedDate":"2024-03-14"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"            totalSeconds \u003d this.times[0] * UiConstant.NUM_SECONDS_IN_HOUR","lastModifiedDate":"2024-03-21"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"                    + this.times[1] * UiConstant.NUM_SECONDS_IN_MINUTE","lastModifiedDate":"2024-03-21"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"                    + this.times[2];","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"            totalSeconds \u003d this.times[0] * 60 + this.times[1];","lastModifiedDate":"2024-03-14"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-10"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"        return totalSeconds;","lastModifiedDate":"2024-03-10"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     * Method calculates the pace of the run, and formats it into M:SS/km.","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"     * @return Formatted string the pace of the run.","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"    public String calculatePace() {","lastModifiedDate":"2024-03-14"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        int totalSeconds \u003d calculateTotalSeconds();","lastModifiedDate":"2024-03-10"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"        double paceInDecimal \u003d ((double) totalSeconds / this.distance) / UiConstant.NUM_SECONDS_IN_MINUTE;","lastModifiedDate":"2024-03-21"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"        int minutes \u003d (int) paceInDecimal;","lastModifiedDate":"2024-03-10"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"        double remainingSeconds \u003d paceInDecimal - minutes;","lastModifiedDate":"2024-03-10"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"        int seconds \u003d (int) Math.round(remainingSeconds * UiConstant.NUM_SECONDS_IN_MINUTE);","lastModifiedDate":"2024-03-21"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"        return String.format(\"%d:%02d/km\", minutes, seconds);","lastModifiedDate":"2024-03-10"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the string representation of a Run object.","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing a Run object.","lastModifiedDate":"2024-03-20"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"    public String toString() {","lastModifiedDate":"2024-03-11"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"        String printedDate;","lastModifiedDate":"2024-03-14"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-03-12"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"            printedDate \u003d date.toString();","lastModifiedDate":"2024-03-14"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"        } else {","lastModifiedDate":"2024-03-12"},{"lineNumber":173,"author":{"gitId":"L5-Z"},"content":"            printedDate \u003d ErrorConstant.NO_DATE_SPECIFIED_ERROR;","lastModifiedDate":"2024-03-21"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":175,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.RUN_DATA_FORMAT, WorkoutConstant.RUN,","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"L5-Z"},"content":"                getTimes(), getDistance(), getPace(), printedDate);","lastModifiedDate":"2024-03-21"},{"lineNumber":177,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":178,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"JustinSoh"},"content":"    public String getFormatForAllHistory() {","lastModifiedDate":"2024-03-27"},{"lineNumber":180,"author":{"gitId":"JustinSoh"},"content":"        String printedDate;","lastModifiedDate":"2024-03-27"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"JustinSoh"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":183,"author":{"gitId":"JustinSoh"},"content":"            printedDate \u003d date.toString();","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"            printedDate \u003d ErrorConstant.NO_DATE_SPECIFIED_ERROR;","lastModifiedDate":"2024-03-27"},{"lineNumber":186,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":187,"author":{"gitId":"JustinSoh"},"content":"        return String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"JustinSoh"},"content":"                WorkoutConstant.RUN,","lastModifiedDate":"2024-03-27"},{"lineNumber":189,"author":{"gitId":"JustinSoh"},"content":"                printedDate,","lastModifiedDate":"2024-03-27"},{"lineNumber":190,"author":{"gitId":"JustinSoh"},"content":"                getDistance(),","lastModifiedDate":"2024-03-27"},{"lineNumber":191,"author":{"gitId":"JustinSoh"},"content":"                getTimes(),","lastModifiedDate":"2024-03-27"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"                getPace(),","lastModifiedDate":"2024-03-27"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"                \"-\", // Placeholder for gym sets (NA)","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"                \"-\", // Placeholder for gym reps (NA)","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"JustinSoh"},"content":"                \"-\", // Placeholder for gym weight (NA)","lastModifiedDate":"2024-03-27"},{"lineNumber":196,"author":{"gitId":"JustinSoh"},"content":"                \"-\"  // Placeholder for gym station (NA)","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"        );","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":199,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":200,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-10"}],"authorContributionMap":{"JustinSoh":56,"rouvinerh":139,"L5-Z":6}},{"path":"src/main/java/workouts/Workout.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import utility.Parser;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":" * Represents a Workout object for PulsePilot.","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"public abstract class Workout {","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"    protected LocalDate date \u003d null;","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"     * Overloaded constructor that uses the optional date parameter from user input.","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"     * @param stringDate String representing the date of the workout.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    public Workout(String stringDate) {","lastModifiedDate":"2024-03-10"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"        this.date \u003d Parser.parseDate(stringDate);","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"     * Constructor that builds a new Workout object.","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    public Workout() {","lastModifiedDate":"2024-03-10"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     * Returns the date of the workout.","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     * @return LocalDate variable representing the date of the workout.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-11"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        return date;","lastModifiedDate":"2024-03-10"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-10"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"     * Retrieves the string representation of a Workout object.","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * @return A formatted string representing a Workout object.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"    @Override","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"    public String toString(){","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"        return getDate().toString();","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-10"}],"authorContributionMap":{"JustinSoh":8,"rouvinerh":37}},{"path":"src/main/java/workouts/WorkoutList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import storage.LogFile;","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-10"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-10"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":" * Represents the WorkoutList object.","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"public class WorkoutList extends ArrayList\u003cWorkout\u003e {","lastModifiedDate":"2024-03-10"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cWorkout\u003e WORKOUTS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cRun\u003e RUNS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"    private static final ArrayList\u003cGym\u003e GYMS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"     * Adds a workout to the list of workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"     * @param workout Workout object to be added.","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"    private static void addWorkout(Workout workout) {","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"        WORKOUTS.add(workout);","lastModifiedDate":"2024-03-30"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"     * Adds a run to the list of runs and workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"     * @param run Run object to be added.","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    protected static void addRun(Run run) {","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"        RUNS.add(run);","lastModifiedDate":"2024-03-30"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"        addWorkout(run);","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     * Adds a gym to the list of gyms and workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"     * @param gym Gym object to be added.","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    public static void addGym(Gym gym) {","lastModifiedDate":"2024-03-19"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"        GYMS.add(gym);","lastModifiedDate":"2024-03-30"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        addWorkout(gym);","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    public static ArrayList\u003cWorkout\u003e getWorkouts(){","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"        return WORKOUTS;","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"     * Returns a list of workouts based on the filter.","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"     * @param filter can be \"all\", \"run\" or \"gym\".","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     *               \"all\" returns all workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     *               \"run\" returns only runs.","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"     *               \"gym\" returns only gym workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"     * @return ArrayList of workouts.","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"    public static ArrayList\u003c? extends Workout\u003e getWorkouts(String filter)","lastModifiedDate":"2024-03-19"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"            throws CustomExceptions.OutOfBounds,","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"        filter \u003d filter.toLowerCase();","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"        if(!filter.equals(WorkoutConstant.ALL) \u0026\u0026 !filter.equals(WorkoutConstant.RUN)","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"                \u0026\u0026 !filter.equals(WorkoutConstant.GYM)) {","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.InvalidInput(ErrorConstant.INVALID_HISTORY_FILTER_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"        if(filter.equals(WorkoutConstant.RUN) \u0026\u0026 RUNS.isEmpty()){","lastModifiedDate":"2024-03-30"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_RUN_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"        if(filter.equals(WorkoutConstant.ALL) \u0026\u0026 WORKOUTS.isEmpty()){","lastModifiedDate":"2024-03-30"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_WORKOUTS_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"        if(filter.equals(WorkoutConstant.GYM) \u0026\u0026 GYMS.isEmpty()){","lastModifiedDate":"2024-03-30"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_GYM_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"        if(filter.equals(WorkoutConstant.RUN)){","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"            return RUNS;","lastModifiedDate":"2024-03-30"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"        } else if (filter.equals(WorkoutConstant.GYM)) {","lastModifiedDate":"2024-03-21"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"            return GYMS;","lastModifiedDate":"2024-03-30"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"        } else {","lastModifiedDate":"2024-03-11"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"            return WORKOUTS;","lastModifiedDate":"2024-03-30"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"    public static ArrayList\u003cGym\u003e getGyms() {","lastModifiedDate":"2024-04-03"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"        return GYMS;","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"    public static ArrayList\u003cRun\u003e getRuns() {","lastModifiedDate":"2024-04-03"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"        return RUNS;","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"     * Returns latest run.","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"     * @return The latest Run object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If no runs are found in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"    public static Run getLatestRun() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-14"},{"lineNumber":109,"author":{"gitId":"L5-Z"},"content":"        if (RUNS.isEmpty()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_RUN_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-12"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"        return RUNS.get(RUNS.size() - 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"    public static Gym getLatestGym() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"L5-Z"},"content":"        if (GYMS.isEmpty()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"            throw new CustomExceptions.OutOfBounds(ErrorConstant.HISTORY_GYM_EMPTY_ERROR);","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"L5-Z"},"content":"        return GYMS.get(GYMS.size() - 1);","lastModifiedDate":"2024-03-30"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     * Returns the number of runs in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     * @return The number of runs.","lastModifiedDate":"2024-03-20"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"    public static int getRunSize() {","lastModifiedDate":"2024-03-14"},{"lineNumber":128,"author":{"gitId":"L5-Z"},"content":"        return RUNS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"     * Returns the number of gyms in the list.","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"     * @return The number of gyms.","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"    public static int getGymSize() {","lastModifiedDate":"2024-03-20"},{"lineNumber":137,"author":{"gitId":"L5-Z"},"content":"        return GYMS.size();","lastModifiedDate":"2024-03-30"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"     * Deletes Gym object based on index.","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"     * @param index Index of the Gym object to be deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"    public static void deleteGym(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"L5-Z"},"content":"        assert !GYMS.isEmpty() : \"Gym list is empty.\";","lastModifiedDate":"2024-03-30"},{"lineNumber":146,"author":{"gitId":"L5-Z"},"content":"        if (index \u003c 0 || index \u003e\u003d GYMS.size()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.OutOfBounds(\"Invalid index to delete!\");","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"L5-Z"},"content":"        Gym deletedGym \u003d GYMS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Removed Gym entry with \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"                deletedGym.stations.size() +","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"                \" stations.\");","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"L5-Z"},"content":"        WORKOUTS.remove(deletedGym);","lastModifiedDate":"2024-03-30"},{"lineNumber":154,"author":{"gitId":"L5-Z"},"content":"        GYMS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"        LogFile.writeLog(\"Removed gym with index: \" + index, false);","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"     * Deletes Run object based on index.","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"     * @param index Index of the Run object to be deleted.","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"    public static void deleteRun(int index) throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"L5-Z"},"content":"        assert !RUNS.isEmpty() : \"Run list is empty.\";","lastModifiedDate":"2024-03-30"},{"lineNumber":164,"author":{"gitId":"L5-Z"},"content":"        if (index \u003c 0 || index \u003e\u003d RUNS.size()) {","lastModifiedDate":"2024-03-30"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"            throw new CustomExceptions.OutOfBounds(\"Invalid index to delete!\");","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"L5-Z"},"content":"        Run deletedRun \u003d RUNS.get(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"        System.out.println(\"Removed Run entry with \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"                deletedRun.distance +","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"                \"km at \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"                deletedRun.getPace() +","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"                \".\");","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"L5-Z"},"content":"        WORKOUTS.remove(deletedRun);","lastModifiedDate":"2024-03-30"},{"lineNumber":174,"author":{"gitId":"L5-Z"},"content":"        RUNS.remove(index);","lastModifiedDate":"2024-03-30"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"        LogFile.writeLog(\"Removed run with index: \" + index, false);","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"     * Clears the workouts, runs and gyms ArrayLists.","lastModifiedDate":"2024-03-20"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":181,"author":{"gitId":"JustinSoh"},"content":"    public static void clearWorkoutsRunGym() {","lastModifiedDate":"2024-03-24"},{"lineNumber":182,"author":{"gitId":"L5-Z"},"content":"        WORKOUTS.clear();","lastModifiedDate":"2024-03-30"},{"lineNumber":183,"author":{"gitId":"L5-Z"},"content":"        RUNS.clear();","lastModifiedDate":"2024-03-30"},{"lineNumber":184,"author":{"gitId":"L5-Z"},"content":"        GYMS.clear();","lastModifiedDate":"2024-03-30"},{"lineNumber":185,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-10"}],"authorContributionMap":{"JustinSoh":67,"rouvinerh":82,"L5-Z":37}},{"path":"src/test/java/health/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"syj02"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"syj02"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"public class AppointmentTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"syj02"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"    void setUpStreams() {","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"    @AfterEach","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"    void showAppointmentList_printCorrectAppointmentList() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"        Appointment firstAppointment \u003d new Appointment(\"25-03-2024\", \"16:30\", \"Physiotherapy session\");","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"syj02"},"content":"        Appointment secondAppointment \u003d new Appointment(\"22-03-2024\", \"16:00\", \"Wound dressing change\");","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"syj02"},"content":"        Appointment thirdAppointment \u003d new Appointment(\"22-03-2024\", \"11:00\", \"Doctor consultation\");","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(firstAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(secondAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(thirdAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Your Appointment history:\"","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"                + \"1. On \"","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"                + \"2. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"syj02"},"content":"                + \"3. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"        HealthList.showAppointmentList();","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"    void deleteAppointment_deleteCorrectAppointment_printCorrectList() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"        Appointment firstAppointment \u003d new Appointment(\"25-03-2024\", \"16:30\", \"Physiotherapy session\");","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"        Appointment secondAppointment \u003d new Appointment(\"22-03-2024\", \"16:00\", \"Wound dressing change\");","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"        Appointment thirdAppointment \u003d new Appointment(\"22-03-2024\", \"11:00\", \"Doctor consultation\");","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(firstAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(secondAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"        HealthList.addAppointment(thirdAppointment);","lastModifiedDate":"2024-03-26"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Removed appointment on \"","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"syj02"},"content":"                + secondAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"syj02"},"content":"                + \"Your Appointment history:\"","lastModifiedDate":"2024-04-04"},{"lineNumber":87,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"syj02"},"content":"                + \"1. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"                + thirdAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":94,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"syj02"},"content":"                + \"2. On \"","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDate()","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"syj02"},"content":"                + \" at \"","lastModifiedDate":"2024-03-26"},{"lineNumber":98,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getTime()","lastModifiedDate":"2024-03-26"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"                + \": \"","lastModifiedDate":"2024-03-26"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"                + firstAppointment.getDescription()","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":102,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"        HealthList.deleteAppointment(2);","lastModifiedDate":"2024-03-26"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":105,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"rouvinerh":1,"syj02":106}},{"path":"src/test/java/health/BmiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-15"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":7,"author":{"gitId":"j013n3"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"j013n3"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"syj02"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"j013n3"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-19"},{"lineNumber":13,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"class BmiTest {","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"j013n3"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-25"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"syj02"},"content":"    void setUpStreams() {","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"syj02"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-25"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"j013n3"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-25"},{"lineNumber":28,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of toString in Bmi class.","lastModifiedDate":"2024-03-19"},{"lineNumber":32,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"j013n3"},"content":"    void toString_heightWeight_printsCorrectBMIAndCategory() {","lastModifiedDate":"2024-03-19"},{"lineNumber":35,"author":{"gitId":"j013n3"},"content":"        Bmi bmi \u003d new Bmi(\"1.75\", \"70.0\", \"19-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":36,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"2024-03-19\"","lastModifiedDate":"2024-03-19"},{"lineNumber":37,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 22.86\"","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"                + \"Great! You\u0027re within normal range.\"","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"        System.out.println(bmi);","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within underweight range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"    void printBMICategory_underweight_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"You\u0027re underweight.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(17.5));","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":56,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":57,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":58,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within normal range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":60,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":61,"author":{"gitId":"syj02"},"content":"    void printBMICategory_normal_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Great! You\u0027re within normal range.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(22.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within overweight range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":70,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"    void printBMICategory_overweight_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"You\u0027re overweight.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(27.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":77,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within obese range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"    void printBMICategory_obese_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"You\u0027re obese.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":83,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(32.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":86,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a BMI within severely obese range being passed into printsCorrectCategory.","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"    void printBMICategory_severelyObese_printsCorrectCategory() {","lastModifiedDate":"2024-03-15"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"You\u0027re severely obese.\" + System.lineSeparator();","lastModifiedDate":"2024-03-15"},{"lineNumber":93,"author":{"gitId":"syj02"},"content":"        System.out.println(Bmi.getBmiCategory(40.0));","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":97,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of showCurrentBmi.","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":100,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":101,"author":{"gitId":"j013n3"},"content":"    void showCurrentBmi_bmiObject_printsCorrectCurrentBmi() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":102,"author":{"gitId":"j013n3"},"content":"        Bmi bmi \u003d new Bmi(\"1.75\", \"70.00\", \"19-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":103,"author":{"gitId":"syj02"},"content":"        HealthList.addBmi(bmi);","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"2024-03-19\"","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 22.86\"","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"                + \"Great! You\u0027re within normal range.\"","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"syj02"},"content":"        HealthList.showCurrentBmi();","lastModifiedDate":"2024-03-18"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"     * Test the behaviour of printing Bmi history.","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":120,"author":{"gitId":"j013n3"},"content":"    void showBmiHistory_twoBmiObjects_printsCorrectBmiHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":121,"author":{"gitId":"j013n3"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"80.0\", \"20-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":122,"author":{"gitId":"j013n3"},"content":"        Bmi secondBmi \u003d new Bmi(\"1.80\", \"74.0\", \"21-03-2024\");","lastModifiedDate":"2024-03-19"},{"lineNumber":123,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":124,"author":{"gitId":"syj02"},"content":"        HealthList.addBmi(firstBmi);","lastModifiedDate":"2024-03-19"},{"lineNumber":125,"author":{"gitId":"syj02"},"content":"        HealthList.addBmi(secondBmi);","lastModifiedDate":"2024-03-19"},{"lineNumber":126,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":127,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"Your BMI history:\"","lastModifiedDate":"2024-04-04"},{"lineNumber":128,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-04-04"},{"lineNumber":129,"author":{"gitId":"j013n3"},"content":"                + \"2024-03-20\"","lastModifiedDate":"2024-04-04"},{"lineNumber":130,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":131,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 26.12\"","lastModifiedDate":"2024-03-19"},{"lineNumber":132,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":133,"author":{"gitId":"j013n3"},"content":"                + \"You\u0027re overweight.\"","lastModifiedDate":"2024-03-19"},{"lineNumber":134,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":135,"author":{"gitId":"j013n3"},"content":"                + \"2024-03-21\"","lastModifiedDate":"2024-03-19"},{"lineNumber":136,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":137,"author":{"gitId":"j013n3"},"content":"                + \"Your BMI is 22.84\"","lastModifiedDate":"2024-03-19"},{"lineNumber":138,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":139,"author":{"gitId":"syj02"},"content":"                + \"Great! You\u0027re within normal range.\"","lastModifiedDate":"2024-03-19"},{"lineNumber":140,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":141,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":142,"author":{"gitId":"syj02"},"content":"        HealthList.showBmiHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":143,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":144,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of bmi with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one bmi entry left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"    void deleteBmi_properList_listOfSizeOne() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"80.0\", \"20-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"        Bmi secondBmi \u003d new Bmi(\"1.80\", \"74.0\", \"21-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(firstBmi);","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(secondBmi);","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"        HealthList.deleteBmi(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, HealthList.getBmisSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of bmi with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"    void deleteBmi_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deleteBmi(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of bmi with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"    void deleteBmi_properListInvalidIndex_throwOutOfBoundsForBmi() {","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"80.0\", \"20-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(firstBmi);","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deleteBmi(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"j013n3":77,"rouvinerh":44,"syj02":65}},{"path":"src/test/java/health/PeriodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"syj02"},"content":"package health;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"syj02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-25"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import constants.HealthConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"j013n3"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-25"},{"lineNumber":13,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":14,"author":{"gitId":"syj02"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-19"},{"lineNumber":15,"author":{"gitId":"syj02"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"j013n3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":18,"author":{"gitId":"syj02"},"content":"class PeriodTest {","lastModifiedDate":"2024-03-19"},{"lineNumber":19,"author":{"gitId":"j013n3"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-25"},{"lineNumber":20,"author":{"gitId":"j013n3"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-25"},{"lineNumber":21,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":22,"author":{"gitId":"syj02"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-19"},{"lineNumber":23,"author":{"gitId":"syj02"},"content":"    void setUpStreams() {","lastModifiedDate":"2024-03-19"},{"lineNumber":24,"author":{"gitId":"syj02"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-19"},{"lineNumber":25,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":26,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":27,"author":{"gitId":"syj02"},"content":"    @AfterEach","lastModifiedDate":"2024-03-19"},{"lineNumber":28,"author":{"gitId":"j013n3"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-25"},{"lineNumber":29,"author":{"gitId":"syj02"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-19"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"j013n3"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-25"},{"lineNumber":32,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":33,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of toString in Period class.","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":38,"author":{"gitId":"syj02"},"content":"    void calculatePeriodLength_printsCorrectPeriod() {","lastModifiedDate":"2024-03-19"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        Period period \u003d new Period(\"09-03-2022\", \"16-03-2022\");","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"syj02"},"content":"                + period.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":42,"author":{"gitId":"syj02"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":43,"author":{"gitId":"syj02"},"content":"                + period.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":45,"author":{"gitId":"syj02"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":46,"author":{"gitId":"syj02"},"content":"                + period.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"syj02"},"content":"                + \" days\"","lastModifiedDate":"2024-03-19"},{"lineNumber":48,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":49,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":50,"author":{"gitId":"syj02"},"content":"        System.out.println(period);","lastModifiedDate":"2024-03-19"},{"lineNumber":51,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":52,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":53,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the showLatestPeriod method and whether it prints","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     * the last Period object added.","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"syj02"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":59,"author":{"gitId":"j013n3"},"content":"    void showLatestPeriod_twoPeriodInputs_printCorrectPeriod() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"09-02-2023\", \"16-02-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        Period secondPeriod \u003d new Period(\"09-03-2023\", \"16-03-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":63,"author":{"gitId":"syj02"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-19"},{"lineNumber":64,"author":{"gitId":"syj02"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-19"},{"lineNumber":65,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":66,"author":{"gitId":"syj02"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":67,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":68,"author":{"gitId":"syj02"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":69,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":71,"author":{"gitId":"syj02"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":72,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"syj02"},"content":"                + \" days\"","lastModifiedDate":"2024-03-19"},{"lineNumber":74,"author":{"gitId":"syj02"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":75,"author":{"gitId":"syj02"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":76,"author":{"gitId":"syj02"},"content":"        HealthList.showLatestPeriod();","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"syj02"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":78,"author":{"gitId":"syj02"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the showPeriodHistory method and whether it prints","lastModifiedDate":"2024-03-28"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"     * the period history correctly.","lastModifiedDate":"2024-03-28"},{"lineNumber":83,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"j013n3"},"content":"    void showPeriodHistory_twoInputs_printCorrectPeriodHistory() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-04-04"},{"lineNumber":86,"author":{"gitId":"j013n3"},"content":"        Period firstPeriod \u003d new Period(\"10-04-2023\", \"16-04-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":87,"author":{"gitId":"j013n3"},"content":"        Period secondPeriod \u003d new Period(\"09-05-2023\", \"16-05-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-19"},{"lineNumber":89,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-19"},{"lineNumber":90,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":91,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"Your Period history:\"","lastModifiedDate":"2024-04-04"},{"lineNumber":92,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator() +","lastModifiedDate":"2024-04-04"},{"lineNumber":93,"author":{"gitId":"j013n3"},"content":"                \"Period Start: \"","lastModifiedDate":"2024-04-04"},{"lineNumber":94,"author":{"gitId":"j013n3"},"content":"                + firstPeriod.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":95,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":96,"author":{"gitId":"syj02"},"content":"                + firstPeriod.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":98,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":99,"author":{"gitId":"syj02"},"content":"                + firstPeriod.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-25"},{"lineNumber":101,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-25"},{"lineNumber":102,"author":{"gitId":"j013n3"},"content":"                + \"Cycle Length: \"","lastModifiedDate":"2024-03-25"},{"lineNumber":103,"author":{"gitId":"j013n3"},"content":"                + firstPeriod.cycleLength","lastModifiedDate":"2024-03-25"},{"lineNumber":104,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-19"},{"lineNumber":105,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":106,"author":{"gitId":"j013n3"},"content":"                + \"Period Start: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":107,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.getStartDate()","lastModifiedDate":"2024-03-19"},{"lineNumber":108,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":109,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-19"},{"lineNumber":111,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-19"},{"lineNumber":112,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-19"},{"lineNumber":114,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-19"},{"lineNumber":115,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":116,"author":{"gitId":"j013n3"},"content":"        HealthList.showPeriodHistory();","lastModifiedDate":"2024-03-19"},{"lineNumber":117,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":118,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of periods with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one periods entry left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"    void deletePeriod_properList_listOfSizeOne() throws CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"10-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"        Period secondPeriod \u003d new Period(\"09-05-2024\", \"16-05-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(secondPeriod);;","lastModifiedDate":"2024-03-25"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"        HealthList.deletePeriod(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, HealthList.getPeriodsSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of period with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"j013n3"},"content":"    void deletePeriod_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-28"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deletePeriod(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of period with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"j013n3"},"content":"    void deletePeriod_properListInvalidIndex_throwOutOfBoundsForBmi() {","lastModifiedDate":"2024-03-28"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"10-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"                HealthList.deletePeriod(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the predictNextPeriodStartDate function and whether it prints","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"j013n3"},"content":"     * correct predicted start date.","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"j013n3"},"content":"    void predictNextPeriodStartDate_sufficientInputs_printCorrectPredictedDate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"j013n3"},"content":"        Period firstPeriod \u003d new Period(\"09-01-2024\", \"16-01-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"j013n3"},"content":"        Period secondPeriod \u003d new Period(\"10-02-2024\", \"16-02-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"j013n3"},"content":"        Period thirdPeriod \u003d new Period(\"09-03-2024\", \"14-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"j013n3"},"content":"        Period fourthPeriod \u003d new Period(\"09-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(thirdPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(fourthPeriod);","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"j013n3"},"content":"        long expectedCycleLength \u003d (32 + 28 + 31) / HealthConstant.LATEST_THREE_CYCLE_LENGTHS;","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"j013n3"},"content":"        LocalDate expected \u003d fourthPeriod.getStartDate().plusDays(expectedCycleLength);","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"j013n3"},"content":"        LocalDate result \u003d HealthList.predictNextPeriodStartDate();","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the printNextCyclePrediction function and whether it prints","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"j013n3"},"content":"     * the predicted date with period is late message.","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"j013n3"},"content":"    void printNextCyclePrediction_afterToday_printPeriodIsLate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"j013n3"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"j013n3"},"content":"        LocalDate predictedDate \u003d today.minusDays(5);","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":190,"author":{"gitId":"j013n3"},"content":"        String expected \u003d HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":191,"author":{"gitId":"j013n3"},"content":"                + predictedDate","lastModifiedDate":"2024-03-25"},{"lineNumber":192,"author":{"gitId":"j013n3"},"content":"                + HealthConstant.PERIOD_IS_LATE","lastModifiedDate":"2024-03-25"},{"lineNumber":193,"author":{"gitId":"j013n3"},"content":"                + \"5\"","lastModifiedDate":"2024-03-25"},{"lineNumber":194,"author":{"gitId":"j013n3"},"content":"                + HealthConstant.DAYS_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":195,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-25"},{"lineNumber":196,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":197,"author":{"gitId":"j013n3"},"content":"        Period.printNextCyclePrediction(predictedDate);","lastModifiedDate":"2024-03-25"},{"lineNumber":198,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":200,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":202,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the printNextCyclePrediction function and whether it prints","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"j013n3"},"content":"     * the predicted date and the number of days to predicted date.","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"j013n3"},"content":"    void printNextCyclePrediction_beforeToday_printNumberOfDaysToPredictedDate() {","lastModifiedDate":"2024-03-25"},{"lineNumber":207,"author":{"gitId":"j013n3"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2024-03-25"},{"lineNumber":208,"author":{"gitId":"j013n3"},"content":"        LocalDate predictedDate \u003d today.plusDays(10);","lastModifiedDate":"2024-03-25"},{"lineNumber":209,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":210,"author":{"gitId":"j013n3"},"content":"        String expected \u003d HealthConstant.PREDICTED_START_DATE_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":211,"author":{"gitId":"j013n3"},"content":"                + predictedDate","lastModifiedDate":"2024-03-25"},{"lineNumber":212,"author":{"gitId":"j013n3"},"content":"                + \", in 10\"","lastModifiedDate":"2024-03-25"},{"lineNumber":213,"author":{"gitId":"j013n3"},"content":"                + HealthConstant.DAYS_MESSAGE","lastModifiedDate":"2024-03-25"},{"lineNumber":214,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-25"},{"lineNumber":215,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":216,"author":{"gitId":"j013n3"},"content":"        Period.printNextCyclePrediction(predictedDate);","lastModifiedDate":"2024-03-25"},{"lineNumber":217,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-25"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":219,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":220,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":221,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of the printLatestThreeCycles method and whether it prints","lastModifiedDate":"2024-03-28"},{"lineNumber":222,"author":{"gitId":"j013n3"},"content":"     * the latest three period objects only.","lastModifiedDate":"2024-03-28"},{"lineNumber":223,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":224,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":225,"author":{"gitId":"j013n3"},"content":"    void printLatestThreeCycles_fourInputs_printsThreePeriodObjectsOnly() {","lastModifiedDate":"2024-03-28"},{"lineNumber":226,"author":{"gitId":"j013n3"},"content":"        Period firstPeriod \u003d new Period(\"09-01-2024\", \"16-01-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":227,"author":{"gitId":"j013n3"},"content":"        Period secondPeriod \u003d new Period(\"10-02-2024\", \"16-02-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":228,"author":{"gitId":"j013n3"},"content":"        Period thirdPeriod \u003d new Period(\"09-03-2024\", \"14-03-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":229,"author":{"gitId":"j013n3"},"content":"        Period fourthPeriod \u003d new Period(\"09-04-2024\", \"16-04-2024\");","lastModifiedDate":"2024-03-28"},{"lineNumber":230,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":231,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-28"},{"lineNumber":232,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-28"},{"lineNumber":233,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(thirdPeriod);","lastModifiedDate":"2024-03-28"},{"lineNumber":234,"author":{"gitId":"j013n3"},"content":"        HealthList.addPeriod(fourthPeriod);","lastModifiedDate":"2024-03-28"},{"lineNumber":235,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":236,"author":{"gitId":"j013n3"},"content":"        String expected \u003d \"Period Start: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":237,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.getStartDate()","lastModifiedDate":"2024-03-28"},{"lineNumber":238,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":239,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":240,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":241,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":242,"author":{"gitId":"syj02"},"content":"                + secondPeriod.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":243,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":244,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":245,"author":{"gitId":"j013n3"},"content":"                + \"Cycle Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":246,"author":{"gitId":"j013n3"},"content":"                + secondPeriod.cycleLength","lastModifiedDate":"2024-03-28"},{"lineNumber":247,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":248,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":249,"author":{"gitId":"j013n3"},"content":"                + \"Period Start: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":250,"author":{"gitId":"j013n3"},"content":"                + thirdPeriod.getStartDate()","lastModifiedDate":"2024-03-28"},{"lineNumber":251,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":252,"author":{"gitId":"syj02"},"content":"                + thirdPeriod.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":253,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":254,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":255,"author":{"gitId":"syj02"},"content":"                + thirdPeriod.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":256,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":257,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":258,"author":{"gitId":"j013n3"},"content":"                + \"Cycle Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":259,"author":{"gitId":"j013n3"},"content":"                + thirdPeriod.cycleLength","lastModifiedDate":"2024-03-28"},{"lineNumber":260,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":261,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":262,"author":{"gitId":"j013n3"},"content":"                + \"Period Start: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":263,"author":{"gitId":"j013n3"},"content":"                + fourthPeriod.getStartDate()","lastModifiedDate":"2024-03-28"},{"lineNumber":264,"author":{"gitId":"j013n3"},"content":"                + \" Period End: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":265,"author":{"gitId":"syj02"},"content":"                + fourthPeriod.getEndDate()","lastModifiedDate":"2024-04-03"},{"lineNumber":266,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator()","lastModifiedDate":"2024-03-28"},{"lineNumber":267,"author":{"gitId":"j013n3"},"content":"                + \"Period Length: \"","lastModifiedDate":"2024-03-28"},{"lineNumber":268,"author":{"gitId":"syj02"},"content":"                + fourthPeriod.getPeriodLength()","lastModifiedDate":"2024-04-03"},{"lineNumber":269,"author":{"gitId":"j013n3"},"content":"                + \" days\"","lastModifiedDate":"2024-03-28"},{"lineNumber":270,"author":{"gitId":"j013n3"},"content":"                + System.lineSeparator();","lastModifiedDate":"2024-03-28"},{"lineNumber":271,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":272,"author":{"gitId":"j013n3"},"content":"        HealthList.printLatestThreeCycles();","lastModifiedDate":"2024-03-28"},{"lineNumber":273,"author":{"gitId":"j013n3"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":274,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":275,"author":{"gitId":"syj02"},"content":"}","lastModifiedDate":"2024-03-19"}],"authorContributionMap":{"j013n3":154,"rouvinerh":54,"syj02":67}},{"path":"src/test/java/seedu/pulsepilot/PulsePilotTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package seedu.pulsepilot;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"class PulsePilotTest {","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"rouvinerh":2,"-":10}},{"path":"src/test/java/storage/DataFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"L5-Z"},"content":"//@@author L5-Z","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"L5-Z"},"content":"package storage;","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import health.Appointment;","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import health.Bmi;","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"L5-Z"},"content":"import health.Period;","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"import workouts.Gym;","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"L5-Z"},"content":"import workouts.Run;","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"import workouts.Workout;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"import java.io.IOException;","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"L5-Z"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"L5-Z"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"L5-Z"},"content":"import java.util.List;","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"public class DataFileTest {","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"    void saveDataFile_validData_writesCorrectly() throws IOException, CustomExceptions.FileWriteError,","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"        String name \u003d \"John Doe\";","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cBmi\u003e bmiArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.7\", \"70.0\", \"01-04-2023\"),","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"                new Bmi(\"1.8\", \"80.0\", \"15-04-2023\")","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"01-05-2023\", \"10:00\", \"Dentist Appointment\"),","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"                new Appointment(\"15-05-2023\", \"14:30\", \"Doctor\u0027s Checkup\")","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cPeriod\u003e periodArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"                new Period(\"01-03-2023\", \"05-03-2023\"),","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"L5-Z"},"content":"                new Period(\"01-04-2023\", \"04-04-2023\")","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cDouble\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(10.0,20.0,30.0,40.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":45,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cDouble\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(20.0,30.0,40.0,50.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":46,"author":{"gitId":"L5-Z"},"content":"        Gym newGym \u003d new Gym(\"11-11-1997\");","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"L5-Z"},"content":"        Gym newGym2 \u003d new Gym();","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"        newGym.addStation(\"bench press\", 4, 4, array1);","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"        newGym.addStation(\"squats\", 4, 3, array2);","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"L5-Z"},"content":"        newGym2.addStation(\"bench press\", 4, 4, array1);","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"L5-Z"},"content":"        newGym2.addStation(\"squats\", 4, 3, array2);","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cWorkout\u003e workoutArrayList \u003d new ArrayList\u003c\u003e(List.of(","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"L5-Z"},"content":"                new Run(\"00:30:00\", \"5.0\", \"01-04-2023\"),","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"L5-Z"},"content":"                newGym,","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"L5-Z"},"content":"                newGym2","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"L5-Z"},"content":"        ));","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"L5-Z"},"content":"        // Act","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"L5-Z"},"content":"        if (Files.exists(Path.of(UiConstant.DATA_FILE_PATH))) {","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"L5-Z"},"content":"            Files.delete(Path.of(UiConstant.DATA_FILE_PATH));","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"        Files.createFile(Path.of(UiConstant.DATA_FILE_PATH));","lastModifiedDate":"2024-04-04"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"        DataFile.saveDataFile(name, bmiArrayList, appointmentArrayList, periodArrayList, workoutArrayList);","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"L5-Z"},"content":"        // Assert","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"L5-Z"},"content":"        List\u003cString\u003e lines \u003d Files.readAllLines(Path.of(UiConstant.DATA_FILE_PATH));","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"        if (!lines.isEmpty()) {","lastModifiedDate":"2024-04-04"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"NAME:John Doe\", lines.get(0));","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"BMI:1.70:70.00:24.22:01-04-2023\", lines.get(1));","lastModifiedDate":"2024-04-04"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"BMI:1.80:80.00:24.69:15-04-2023\", lines.get(2));","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"APPOINTMENT:01-05-2023:10.00:Dentist Appointment\", lines.get(3));","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"APPOINTMENT:15-05-2023:14.30:Doctor\u0027s Checkup\", lines.get(4));","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"PERIOD:01-03-2023:05-03-2023:5\", lines.get(5));","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"PERIOD:01-04-2023:04-04-2023:4\", lines.get(6));","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"RUN:5.00:00.30.00:01-04-2023\", lines.get(7));","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"GYM:2:11-11-1997:bench press:4:4:10.0,20.0,30.0,\" +","lastModifiedDate":"2024-04-06"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"                    \"40.0:squats:4:3:20.0,30.0,40.0,50.0\", lines.get(8));","lastModifiedDate":"2024-04-06"},{"lineNumber":79,"author":{"gitId":"L5-Z"},"content":"            assertEquals(\"GYM:2:NA:bench press:4:4:10.0,20.0,30.0,40.0:squats:4:3:20.0,30.0,40.0,50.0\", lines.get(9));","lastModifiedDate":"2024-04-06"},{"lineNumber":80,"author":{"gitId":"L5-Z"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"L5-Z"},"content":"            fail(\"Data file is empty\");","lastModifiedDate":"2024-04-04"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":84,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"    /*","lastModifiedDate":"2024-04-04"},{"lineNumber":86,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-04-04"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"    void saveDataFile_emptyData_writesCorrectly() throws IOException, CustomExceptions.FileWriteError {","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"        // Arrange","lastModifiedDate":"2024-04-04"},{"lineNumber":89,"author":{"gitId":"L5-Z"},"content":"        String name \u003d \"Jane Doe\";","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cBmi\u003e bmiArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-04"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-04"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cPeriod\u003e periodArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-04"},{"lineNumber":93,"author":{"gitId":"L5-Z"},"content":"        ArrayList\u003cWorkout\u003e workoutArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-04"},{"lineNumber":94,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":95,"author":{"gitId":"L5-Z"},"content":"        Path dataFilePath \u003d tempDir.resolve(\"data.txt\");","lastModifiedDate":"2024-04-04"},{"lineNumber":96,"author":{"gitId":"L5-Z"},"content":"        File dataFile \u003d dataFilePath.toFile();","lastModifiedDate":"2024-04-04"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"        // Act","lastModifiedDate":"2024-04-04"},{"lineNumber":99,"author":{"gitId":"L5-Z"},"content":"        DataFile.saveDataFile(name, bmiArrayList, appointmentArrayList, periodArrayList, workoutArrayList);","lastModifiedDate":"2024-04-04"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":101,"author":{"gitId":"L5-Z"},"content":"        // Assert","lastModifiedDate":"2024-04-04"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"        List\u003cString\u003e lines \u003d Files.readAllLines(dataFilePath);","lastModifiedDate":"2024-04-04"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"        assertEquals(\"name:Jane Doe\", lines.get(0));","lastModifiedDate":"2024-04-04"},{"lineNumber":104,"author":{"gitId":"L5-Z"},"content":"        assertEquals(1, lines.size());","lastModifiedDate":"2024-04-04"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":106,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":108,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"L5-Z":108}},{"path":"src/test/java/storage/LogFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package storage;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"class LogFileTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"    static LogFile logTest \u003d LogFile.getInstance();","lastModifiedDate":"2024-03-19"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the getInstance function in the LogFile class, and whether","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"     * it returns a non-null instance.","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    void initializeLogFile_noInput_logFileHandlerNotNull() {","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"        assertNotNull(LogFile.logFileHandler);","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"rouvinerh":17,"L5-Z":1}},{"path":"src/test/java/ui/HandlerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"L5-Z"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"L5-Z"},"content":"import workouts.WorkoutList;","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"L5-Z"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"L5-Z"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"L5-Z"},"content":"import java.io.InputStream;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"L5-Z"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-22"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"L5-Z"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"class HandlerTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"L5-Z"},"content":"    private final ByteArrayInputStream inContent \u003d new ByteArrayInputStream(\"\".getBytes());","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"L5-Z"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"L5-Z"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"L5-Z"},"content":"    private final InputStream originalIn \u003d System.in;","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"L5-Z"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"L5-Z"},"content":"    private final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"L5-Z"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"L5-Z"},"content":"    public void setUpStreams() {","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"L5-Z"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"L5-Z"},"content":"        System.setIn(inContent);","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"L5-Z"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"L5-Z"},"content":"    @AfterEach","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"L5-Z"},"content":"    public void restoreStreams() {","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-14"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"        System.setIn(originalIn);","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"L5-Z"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"        Handler.destroyScanner();","lastModifiedDate":"2024-03-22"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"        if (Handler.in \u003d\u003d null) {","lastModifiedDate":"2024-03-25"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"            return;","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-25"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        assert isScannerClosed(Handler.in) : \"Scanner is not closed\";","lastModifiedDate":"2024-03-22"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-22"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"     * Checks whether the Scanner has been closed after each JUnit test to prevent overwriting of test input for each","lastModifiedDate":"2024-03-22"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"     * test.","lastModifiedDate":"2024-03-22"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-22"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"     * @param in Scanner object from Handler.","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"     * @return True if the scanner is closed. Otherwise, return false.","lastModifiedDate":"2024-03-22"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-22"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"    public static boolean isScannerClosed(Scanner in) {","lastModifiedDate":"2024-03-22"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"            in.hasNext();","lastModifiedDate":"2024-03-22"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"            return false;","lastModifiedDate":"2024-03-22"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        } catch (IllegalStateException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"            return true;","lastModifiedDate":"2024-03-22"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":63,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the EXIT command.","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":69,"author":{"gitId":"L5-Z"},"content":"    void processInput_exitCommand_terminatesProgram() {","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"EXIT\";","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Initiating PulsePilot landing sequence...\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the NEW command to add a Run","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"     * object.","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":83,"author":{"gitId":"L5-Z"},"content":"    void processInput_workoutCommand_addRunExercise() {","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"WORKOUT /e:run /d:10.30 /t:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":85,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"        System.out.println(output);","lastModifiedDate":"2024-03-25"},{"lineNumber":90,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Successfully added a new run session\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the HEALTH command to add","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"     * a BMI object.","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"L5-Z"},"content":"    void processInput_healthCommand_addBMIHealthData() {","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"HEALTH /h:bmi /height:1.70 /weight:65.00 /date:15-03-2024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(output.contains(\"Added: bmi | 1.70 | 65.00 | 2024-03-15\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the HISTORY command to print","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"     * all run objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":113,"author":{"gitId":"L5-Z"},"content":"    void processInput_historyCommand_printsHistoryRun() {","lastModifiedDate":"2024-03-20"},{"lineNumber":114,"author":{"gitId":"L5-Z"},"content":"        String inputRun \u003d \"WORKOUT /e:run /d:10.3 /t:00:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-25"},{"lineNumber":115,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(inputRun.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-25"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-25"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        Handler.destroyScanner();","lastModifiedDate":"2024-03-25"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"        String inputHistory \u003d \"HISTORY /item:run\";","lastModifiedDate":"2024-03-26"},{"lineNumber":121,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(inputHistory.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":123,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"        assertTrue(output.contains(\"Your run history\"));","lastModifiedDate":"2024-03-26"},{"lineNumber":126,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the LATEST command to print","lastModifiedDate":"2024-03-20"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"     * the latest run object.","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":132,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"L5-Z"},"content":"    void processInput_latestCommand_printsLatestRun() {","lastModifiedDate":"2024-03-20"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        String inputRun \u003d \"WORKOUT /e:run /d:10.30 /t:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":135,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(inputRun.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-25"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-25"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"        Handler.destroyScanner();","lastModifiedDate":"2024-03-25"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"        String inputLatest \u003d \"LATEST /item:run\";","lastModifiedDate":"2024-03-26"},{"lineNumber":141,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(inputLatest.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":143,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":145,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":146,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Your latest run:\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":147,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":148,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to the HELP command to print","lastModifiedDate":"2024-03-20"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"     * the help message.","lastModifiedDate":"2024-03-20"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":153,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":154,"author":{"gitId":"L5-Z"},"content":"    void processInput_helpCommand_printsHelp() {","lastModifiedDate":"2024-03-20"},{"lineNumber":155,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"HELP\";","lastModifiedDate":"2024-03-20"},{"lineNumber":156,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":158,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":159,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":160,"author":{"gitId":"L5-Z"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2024-03-20"},{"lineNumber":161,"author":{"gitId":"L5-Z"},"content":"        assertTrue(output.contains(\"Commands List\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":162,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":163,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"     * Tests the processInput function\u0027s behaviour to an invalid command, which prints","lastModifiedDate":"2024-03-20"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"     * an error.","lastModifiedDate":"2024-03-20"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":169,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":170,"author":{"gitId":"L5-Z"},"content":"    void processInput_invalidCommand_printsInvalidCommandException() {","lastModifiedDate":"2024-03-20"},{"lineNumber":171,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"INVALID\";","lastModifiedDate":"2024-03-20"},{"lineNumber":172,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-20"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-20"},{"lineNumber":174,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-20"},{"lineNumber":175,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":176,"author":{"gitId":"L5-Z"},"content":"        String expected \u003d \"Exception Caught!\" +","lastModifiedDate":"2024-03-26"},{"lineNumber":177,"author":{"gitId":"L5-Z"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":178,"author":{"gitId":"L5-Z"},"content":"                ErrorConstant.INVALID_COMMAND_ERROR +","lastModifiedDate":"2024-03-26"},{"lineNumber":179,"author":{"gitId":"L5-Z"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":180,"author":{"gitId":"L5-Z"},"content":"        assertEquals(expected, errContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":181,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":182,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":183,"author":{"gitId":"L5-Z"},"content":"    /**","lastModifiedDate":"2024-03-26"},{"lineNumber":184,"author":{"gitId":"L5-Z"},"content":"     * Tests the processInput function\u0027s behaviour when the HEALTH command is given with invalid parameters.","lastModifiedDate":"2024-03-26"},{"lineNumber":185,"author":{"gitId":"L5-Z"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":186,"author":{"gitId":"L5-Z"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":187,"author":{"gitId":"L5-Z"},"content":"    void processInput_healthCommand_insufficientParameters() {","lastModifiedDate":"2024-03-26"},{"lineNumber":188,"author":{"gitId":"L5-Z"},"content":"        String input \u003d \"HEALTH /h:bmi /height:1.70\";","lastModifiedDate":"2024-03-26"},{"lineNumber":189,"author":{"gitId":"L5-Z"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));","lastModifiedDate":"2024-03-26"},{"lineNumber":190,"author":{"gitId":"L5-Z"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-03-26"},{"lineNumber":191,"author":{"gitId":"L5-Z"},"content":"        Handler.processInput();","lastModifiedDate":"2024-03-26"},{"lineNumber":192,"author":{"gitId":"syj02"},"content":"        assertTrue(errContent.toString().contains(ErrorConstant.INSUFFICIENT_BMI_PARAMETERS_ERROR));","lastModifiedDate":"2024-03-26"},{"lineNumber":193,"author":{"gitId":"L5-Z"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":194,"author":{"gitId":"L5-Z"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"JustinSoh":12,"rouvinerh":72,"L5-Z":109,"syj02":1}},{"path":"src/test/java/ui/IntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package ui;","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import health.HealthList;","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import utility.Parser;","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import workouts.Run;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutList;","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"import java.io.InputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import java.util.List;","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"public class IntegrationTest {","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayInputStream inContent \u003d new ByteArrayInputStream(\"\".getBytes());","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    private static final InputStream originalIn \u003d System.in;","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    @BeforeAll","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    public static void setUpStreams() {","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"        System.setIn(inContent);","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"    @AfterEach","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    public void cleanup() {","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"        outContent.reset();","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        errContent.reset();","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"        Handler.destroyScanner();","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"        if (Handler.in \u003d\u003d null) {","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"            return;","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"        assert HandlerTest.isScannerClosed(Handler.in) : \"Scanner is not closed\";","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"    @AfterAll","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"    public static void restoreStreams() {","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"        System.setIn(originalIn);","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behaviour of having the same expected output when saving and loading a Gym object.","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"     * This is tested by ensuring the print history of the Gym object is the same before and after saving and loading.","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"    void testSaveAndLoadGym_gymObjectInput_expectSamePrintHistory(){","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym \u003d new Gym();","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cDouble\u003e array1 \u003d new ArrayList\u003c\u003e(List.of(1.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cDouble\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0, 2.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"Exercise 1\", 1, 10, array1);","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"            newGym.addStation(\"Exercise 2\", 2, 20 , array2);","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"            // Save the expected output","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"            Output.printAddGym(newGym);","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"            String expectedString \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"            // Save the string, clear the static list, and then simulate load","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"            String saveString \u003d newGym.toFileString();","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"            cleanup();","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"            Gym loadedGym \u003d Parser.parseGymFileInput(saveString);","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"            Output.printAddGym(loadedGym);","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"            String output \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"            // Expect the same value","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expectedString, output);","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput | CustomExceptions.FileReadError e){","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"     * Tests if the output of the bot when adding runs and gyms, using history and latest commands is correct.","lastModifiedDate":"2024-04-02"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"     * Two gyms and runs are added, followed by the history and latest commands to view it.","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"    void testLatestDisplay_userInputsTwoGymAndRuns_expectsLatestGymAndRun(){","lastModifiedDate":"2024-04-02"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        String run1 \u003d \"WORKOUT /e:run /d:10.30 /t:40:10 /date:15-03-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"        String run2 \u003d \"WORKOUT /e:run /d:40.30 /t:30:10 /date:17-03-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"        String gym1 \u003d \"WORKOUT /e:gym /n:2 /date:18-03-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"        String gym1Station1 \u003d \"benchpress /s:2 /r:4 /w:40,60\";","lastModifiedDate":"2024-04-02"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"        String gym1Station2 \u003d \"squats /s:3 /r:4 /w:10,20,30\";","lastModifiedDate":"2024-04-02"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"        String gym2 \u003d \"WORKOUT /e:gym /n:1 /date:22-03-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        String gym2Station1 \u003d \"deadlift /s:4 /r:4 /w:120,130,140,160\";","lastModifiedDate":"2024-04-02"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"        String showLatestGym \u003d \"LATEST /item:gym\";","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"        String showLatestRun \u003d \"LATEST /item:run\";","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"        String showHistoryGym \u003d \"HISTORY /item:gym\";","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"        String showHistoryRun \u003d \"HISTORY /item:run\";","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"        String showHistoryAll \u003d \"HISTORY /item:workouts\";","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"        String inputString \u003d run1 +System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"                + run2 +System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"                + gym1 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"                + gym1Station1 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"                + gym1Station2 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"                + gym2 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"                + gym2Station1 + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"                + showLatestGym + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"                + showLatestRun + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"                + showHistoryGym + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"                + showHistoryRun + System.lineSeparator() ","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"                + showHistoryAll + System.lineSeparator();","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"        System.setIn(new ByteArrayInputStream(inputString.getBytes()));","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"        Handler.processInput();","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        cleanup();","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"        // Craft expected output","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-04-02"},{"lineNumber":141,"author":{"gitId":"JustinSoh"},"content":"            Run run1Expected \u003d new Run(\"40:10\", \"10.30\", \"15-03-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":142,"author":{"gitId":"JustinSoh"},"content":"            Run run2Expected \u003d new Run(\"30:10\", \"40.30\", \"17-03-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"JustinSoh"},"content":"            Gym gym1expected \u003d new Gym(\"18-03-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":145,"author":{"gitId":"JustinSoh"},"content":"            gym1expected.addStation(\"benchpress\", 2, 4,","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"JustinSoh"},"content":"                    new ArrayList\u003c\u003e(Arrays.asList(40.0,60.0)));","lastModifiedDate":"2024-04-06"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"            gym1expected.addStation(\"squats\", 3, 4,","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"                    new ArrayList\u003c\u003e(Arrays.asList(10.0,20.0,30.0)));","lastModifiedDate":"2024-04-06"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":150,"author":{"gitId":"JustinSoh"},"content":"            Gym gym2expected \u003d new Gym(\"22-03-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":151,"author":{"gitId":"JustinSoh"},"content":"            gym2expected.addStation(\"deadlift\",  4, 4,","lastModifiedDate":"2024-04-02"},{"lineNumber":152,"author":{"gitId":"JustinSoh"},"content":"                    new ArrayList\u003c\u003e(Arrays.asList(120.0,130.0,140.0,160.0)));","lastModifiedDate":"2024-04-06"},{"lineNumber":153,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":154,"author":{"gitId":"JustinSoh"},"content":"            Output.printAddRun(run1Expected);","lastModifiedDate":"2024-04-02"},{"lineNumber":155,"author":{"gitId":"JustinSoh"},"content":"            Output.printAddRun(run2Expected);","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"            Output.printGymStationPrompt(1);","lastModifiedDate":"2024-04-02"},{"lineNumber":157,"author":{"gitId":"JustinSoh"},"content":"            Output.printGymStationPrompt(2);","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"JustinSoh"},"content":"            Output.printAddGym(gym1expected);","lastModifiedDate":"2024-04-02"},{"lineNumber":159,"author":{"gitId":"JustinSoh"},"content":"            Output.printGymStationPrompt(1);","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"JustinSoh"},"content":"            Output.printAddGym(gym2expected);","lastModifiedDate":"2024-04-02"},{"lineNumber":161,"author":{"gitId":"JustinSoh"},"content":"            Output.printLatestGym();","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"JustinSoh"},"content":"            Output.printLatestRun();","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"JustinSoh"},"content":"            Output.printHistory(WorkoutConstant.GYM);","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"            Output.printHistory(WorkoutConstant.RUN);","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"            Output.printHistory(WorkoutConstant.ALL);","lastModifiedDate":"2024-04-02"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"            String expected \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(expected, result);","lastModifiedDate":"2024-04-02"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-04-02"},{"lineNumber":171,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Shouldn\u0027t have failed\");","lastModifiedDate":"2024-04-02"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the bot when 4 Period objects are added, expects the four periods to be reflected","lastModifiedDate":"2024-04-02"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"     * accordingly with a valid prediction on when the next cycle is.","lastModifiedDate":"2024-04-02"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"    void testPrediction_userInputsFourPeriods_expectPrediction() throws CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-04-02"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"        String period1 \u003d \"health /h:period /start:18-12-2023 /end:26-12-2023\";","lastModifiedDate":"2024-04-02"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"        String period2 \u003d \"health /h:period /start:18-01-2024 /end:26-01-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"        String period3 \u003d \"health /h:period /start:21-02-2024 /end:28-02-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"        String period4 \u003d \"health /h:period /start:22-03-2024 /end:29-03-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"        String prediction \u003d \"health /h:prediction\";","lastModifiedDate":"2024-04-02"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"        String inputString \u003d period1 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"                + period2 +System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"                + period3 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"                + period4 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"                + prediction + System.lineSeparator();","lastModifiedDate":"2024-04-02"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"        ","lastModifiedDate":"2024-04-02"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"        System.setIn(new ByteArrayInputStream(inputString.getBytes()));","lastModifiedDate":"2024-04-02"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-04-02"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"        Handler.processInput();","lastModifiedDate":"2024-04-02"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"        cleanup();","lastModifiedDate":"2024-04-02"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod1 \u003d new Period(\"18-12-2023\" , \"26-12-2023\");","lastModifiedDate":"2024-04-02"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod2 \u003d new Period(\"18-01-2024\" , \"26-01-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod3 \u003d new Period(\"21-02-2024\", \"28-02-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod4 \u003d new Period(\"22-03-2024\", \"29-03-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(expectedPeriod1);","lastModifiedDate":"2024-04-02"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddPeriod(expectedPeriod1);","lastModifiedDate":"2024-04-02"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(expectedPeriod2);","lastModifiedDate":"2024-04-02"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddPeriod(expectedPeriod2);","lastModifiedDate":"2024-04-02"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(expectedPeriod3);","lastModifiedDate":"2024-04-02"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddPeriod(expectedPeriod3);","lastModifiedDate":"2024-04-02"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(expectedPeriod4);","lastModifiedDate":"2024-04-02"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddPeriod(expectedPeriod4);","lastModifiedDate":"2024-04-02"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"        Parser.parsePredictionInput();","lastModifiedDate":"2024-04-02"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-04-02"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the bot when 3 Period objects are added and a prediction is attempted.","lastModifiedDate":"2024-04-02"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"     * Expects an exception thrown for prediction since there are insufficient Period objects added.","lastModifiedDate":"2024-04-02"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"    void testPrediction_userInputsThreePeriods_expectNoPredictionPrintedAndErrorMessagePrinted() {","lastModifiedDate":"2024-04-02"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"        String period1 \u003d \"health /h:period /start:18-12-2023 /end:26-12-2023\";","lastModifiedDate":"2024-04-02"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"        String period2 \u003d \"health /h:period /start:18-01-2024 /end:26-01-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"        String period3 \u003d \"health /h:period /start:21-02-2024 /end:28-02-2024\";","lastModifiedDate":"2024-04-02"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"        String prediction \u003d \"health /h:prediction\";","lastModifiedDate":"2024-04-02"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"        String inputString \u003d period1 +System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"                + period2 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"                + period3 + System.lineSeparator()","lastModifiedDate":"2024-04-02"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"                + prediction + System.lineSeparator();","lastModifiedDate":"2024-04-02"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"        System.setIn(new ByteArrayInputStream(inputString.getBytes()));","lastModifiedDate":"2024-04-02"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"        Handler.initialiseScanner();","lastModifiedDate":"2024-04-02"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"        Handler.processInput();","lastModifiedDate":"2024-04-02"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"        String resultErr \u003d errContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"        cleanup();","lastModifiedDate":"2024-04-02"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod1 \u003d new Period(\"18-12-2023\" , \"26-12-2023\");","lastModifiedDate":"2024-04-02"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod2 \u003d new Period(\"18-01-2024\" , \"26-01-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"        Period expectedPeriod3 \u003d new Period(\"21-02-2024\", \"28-02-2024\");","lastModifiedDate":"2024-04-02"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(expectedPeriod1);","lastModifiedDate":"2024-04-02"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddPeriod(expectedPeriod1);","lastModifiedDate":"2024-04-02"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(expectedPeriod2);","lastModifiedDate":"2024-04-02"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddPeriod(expectedPeriod2);","lastModifiedDate":"2024-04-02"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(expectedPeriod3);","lastModifiedDate":"2024-04-02"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"        Output.printAddPeriod(expectedPeriod3);","lastModifiedDate":"2024-04-02"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d outContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-04-02"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"        // expect error message","lastModifiedDate":"2024-04-02"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"        try {","lastModifiedDate":"2024-04-02"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"            Parser.parsePredictionInput();","lastModifiedDate":"2024-04-02"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.InsufficientInput e) {","lastModifiedDate":"2024-04-02"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"            Output.printException(e.getMessage());","lastModifiedDate":"2024-04-02"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"        String expectedErr \u003d errContent.toString();","lastModifiedDate":"2024-04-02"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expectedErr, resultErr);","lastModifiedDate":"2024-04-02"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"JustinSoh":155,"rouvinerh":115}},{"path":"src/test/java/ui/OutputTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import health.Appointment;","lastModifiedDate":"2024-04-01"},{"lineNumber":4,"author":{"gitId":"L5-Z"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-11"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import java.io.InputStream;","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"import constants.ErrorConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-19"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"import workouts.Run;","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"import workouts.WorkoutList;","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"import health.Bmi;","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"import health.Period;","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"import health.HealthList;","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-12"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-19"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"class OutputTest {","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayInputStream inContent \u003d new ByteArrayInputStream(\"\".getBytes());","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"    private static final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"    private static final InputStream originalIn \u003d System.in;","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-11"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"    private static final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2024-03-11"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"    @BeforeAll","lastModifiedDate":"2024-03-11"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"    public static void setUpStreams() {","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"        System.setIn(inContent);","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2024-03-11"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":48,"author":{"gitId":"L5-Z"},"content":"    @AfterEach","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"L5-Z"},"content":"    public void cleanup() {","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"        HealthList.clearHealthLists();","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"        outContent.reset();","lastModifiedDate":"2024-03-11"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"        Handler.destroyScanner();","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"        if (Handler.in \u003d\u003d null) {","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"            return;","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"        assert HandlerTest.isScannerClosed(Handler.in) : \"Scanner is not closed\";","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    @AfterAll","lastModifiedDate":"2024-03-11"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"    public static void restoreStreams() {","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-11"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2024-03-11"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"        System.setIn(originalIn);","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printHistory function for Run objects.","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid parameters specified.","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"    void printHistory_runsOnly_expectAllRunsPrinted() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"        Run run1 \u003d new Run(\"40:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"        Run run2 \u003d new Run(\"01:59:10\", \"15.3\");","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"L5-Z"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"L5-Z"},"content":"                \"Your run history:\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_HEADER_INDEX_FORMAT) +","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_DATA_INDEX_FORMAT, 1, run1) +","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_DATA_INDEX_FORMAT, 2, run2) +","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"L5-Z"},"content":"        Output.printHistory(WorkoutConstant.RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-12"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-12"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printHistory function when an invalid filter is used.","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"    void printHistory_invalidHistoryFilter_throwError() {","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"invalidFilter\";","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Output.printHistory(input));","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestRun function after a Run object is added.","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid parameters specified.","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-12"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"    void printLatestRun_oneRun_expectOneRunPrinted() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"        Run newRun \u003d new Run(\"40:10\", \"10.3\");","lastModifiedDate":"2024-04-04"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"                \"Your latest run:\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_HEADER_INDEX_FORMAT) +","lastModifiedDate":"2024-04-04"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"                String.format(WorkoutConstant.RUN_DATA_INDEX_FORMAT, 1, newRun) +","lastModifiedDate":"2024-04-04"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"        Output.printLatestRun();","lastModifiedDate":"2024-03-12"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-12"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-12"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestRun function when no Runs are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"    void printLatestRun_noRun_expectNoRunMessage() {","lastModifiedDate":"2024-03-13"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001B[31mError: \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.HISTORY_RUN_EMPTY_ERROR +","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001B[0m\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"        Output.printLatestRun();","lastModifiedDate":"2024-03-13"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-13"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestGym function when two Gyms are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"    void printLatestGym_twoGyms_expectOneGymPrinted() {","lastModifiedDate":"2024-03-20"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"        try{","lastModifiedDate":"2024-03-20"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"            Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-20"},{"lineNumber":147,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cDouble\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":148,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cDouble\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0,2.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":149,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"            gym1.addStation(\"Bench Press\", 1, 10, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"            gym1.addStation(\"Shoulder Press\", 2, 10, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"            Gym gym2 \u003d new Gym();","lastModifiedDate":"2024-03-20"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"            gym2.addStation(\"Squat Press\", 1, 50, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"            gym2.addStation(\"Lat Press\", 2, 10, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":156,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"            String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"                    \"Your latest gym:\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"                    \"Gym Session 2 (Date: NA)\" +","lastModifiedDate":"2024-03-26"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 1 Squat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":165,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 1) +","lastModifiedDate":"2024-03-26"},{"lineNumber":166,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":167,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"50 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":168,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":169,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 2 Lat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":170,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 2) +","lastModifiedDate":"2024-03-26"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":172,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"10 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":173,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":174,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 2, \"10 reps at 2.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"                    UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"            Output.printLatestGym();","lastModifiedDate":"2024-03-20"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"        }  catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-20"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestGym function when no Gyms are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"    void printLatestGym_noGym_expectNoGymMessage() {","lastModifiedDate":"2024-03-20"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001B[31mError: \" +","lastModifiedDate":"2024-03-25"},{"lineNumber":197,"author":{"gitId":"JustinSoh"},"content":"                ErrorConstant.HISTORY_GYM_EMPTY_ERROR +","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"                \"\\u001B[0m\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"        Output.printLatestGym();","lastModifiedDate":"2024-03-20"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"        cleanup();","lastModifiedDate":"2024-03-20"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when two Bmi objects are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"    void printLatestBmi_twoBmis_expectOneBmiPrinted() {","lastModifiedDate":"2024-04-01"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"70.0\", \"18-03-2024\");","lastModifiedDate":"2024-03-20"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"        Bmi secondBmi \u003d new Bmi(\"1.55\", \"55.0\", \"20-03-2024\");","lastModifiedDate":"2024-03-20"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(firstBmi);","lastModifiedDate":"2024-03-20"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(secondBmi);","lastModifiedDate":"2024-03-20"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"        Output.printLatestBmi();","lastModifiedDate":"2024-03-20"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"                \"2024-03-20\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator()+","lastModifiedDate":"2024-03-20"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"                \"Your BMI is 22.89\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"                \"Great! You\u0027re within normal range.\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when two Period objects are added.","lastModifiedDate":"2024-03-20"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-20"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"    void printLatestPeriod_twoPeriods_expectOnePeriodPrinted() {","lastModifiedDate":"2024-03-25"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"09-02-2023\", \"16-02-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"        Period secondPeriod \u003d new Period(\"09-03-2023\", \"16-03-2023\");","lastModifiedDate":"2024-03-20"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-03-20"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-03-20"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"        Output.printLatestPeriod();","lastModifiedDate":"2024-03-20"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"                \"Period Start: 2023-03-09 Period End: 2023-03-16\" +","lastModifiedDate":"2024-03-25"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"                \"Period Length: 8 days\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-03-25"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-25"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestAppointment function when two Appointment objects are added.","lastModifiedDate":"2024-04-01"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"    void printLatestAppointment_twoAppointments_expectOneAppointmentPrinted() {","lastModifiedDate":"2024-04-01"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"        Appointment firstAppointment \u003d new Appointment(\"29-03-2024\", \"17:00\", \"test\");","lastModifiedDate":"2024-04-01"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"        Appointment secondAppointment \u003d new Appointment(\"24-01-2026\", \"12:00\", \"test2\");","lastModifiedDate":"2024-04-01"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addAppointment(firstAppointment);","lastModifiedDate":"2024-04-01"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addAppointment(secondAppointment);","lastModifiedDate":"2024-04-01"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"        Output.printLatestAppointment();","lastModifiedDate":"2024-04-01"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"                \"On 2026-01-24 at 12:00: test2\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-01"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-01"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of printAppointmentHistory when two Appointment objects are added.","lastModifiedDate":"2024-04-01"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"     * Expects two Appointment objects to be pritned.","lastModifiedDate":"2024-04-01"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-04-01"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If there is out of bounds access.","lastModifiedDate":"2024-04-01"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there is invalid input.","lastModifiedDate":"2024-04-01"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"    void printAppointmentHistory_twoAppointments_expectTwoAppointmentsPrinted() throws","lastModifiedDate":"2024-04-01"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-01"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"        Appointment firstAppointment \u003d new Appointment(\"29-03-2024\", \"17:00\", \"test\");","lastModifiedDate":"2024-04-01"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"        Appointment secondAppointment \u003d new Appointment(\"24-01-2026\", \"12:00\", \"test2\");","lastModifiedDate":"2024-04-01"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addAppointment(firstAppointment);","lastModifiedDate":"2024-04-01"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addAppointment(secondAppointment);","lastModifiedDate":"2024-04-01"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"        Output.printAppointmentHistory();","lastModifiedDate":"2024-04-01"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"                \"Your Appointment history:\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"                \"1. On 2024-03-29 at 17:00: test\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"                \"2. On 2026-01-24 at 12:00: test2\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-01"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-01"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printPeriodHistory function when two Period objects are added.","lastModifiedDate":"2024-04-01"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"    void printPeriodHistory_twoPeriods_expectTwoPeriodsPrinted() throws","lastModifiedDate":"2024-04-01"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.OutOfBounds, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-01"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"        Period firstPeriod \u003d new Period(\"09-02-2023\", \"16-02-2023\");","lastModifiedDate":"2024-04-01"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"        Period secondPeriod \u003d new Period(\"09-03-2023\", \"16-03-2023\");","lastModifiedDate":"2024-04-01"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(firstPeriod);","lastModifiedDate":"2024-04-01"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addPeriod(secondPeriod);","lastModifiedDate":"2024-04-01"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"        Output.printPeriodHistory();","lastModifiedDate":"2024-04-01"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"                \"Your Period history:\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"                \"Period Start: 2023-02-09 Period End: 2023-02-16\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"                \"Period Length: 8 days\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"                \"Cycle Length: 28 days\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"                \"Period Start: 2023-03-09 Period End: 2023-03-16\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"                \"Period Length: 8 days\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-01"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-01"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printLatestBmi function when two Bmi objects are added.","lastModifiedDate":"2024-04-01"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"    void printBmiHistory_twoBmis_expectTwoBmisPrinted() throws CustomExceptions.OutOfBounds,","lastModifiedDate":"2024-04-01"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-01"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"        Bmi firstBmi \u003d new Bmi(\"1.75\", \"70.0\", \"18-03-2024\");","lastModifiedDate":"2024-04-01"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"        Bmi secondBmi \u003d new Bmi(\"1.55\", \"55.0\", \"20-03-2024\");","lastModifiedDate":"2024-04-01"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(firstBmi);","lastModifiedDate":"2024-04-01"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"        HealthList.addBmi(secondBmi);","lastModifiedDate":"2024-04-01"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"        Output.printBmiHistory();","lastModifiedDate":"2024-04-01"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"                \"Your BMI history:\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"                \"2024-03-18\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"                \"Your BMI is 22.86\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"                \"Great! You\u0027re within normal range.\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"                \"2024-03-20\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"                \"Your BMI is 22.89\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"                \"Great! You\u0027re within normal range.\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator() +","lastModifiedDate":"2024-04-01"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"                UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-04-01"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"                System.lineSeparator();","lastModifiedDate":"2024-04-01"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-04-01"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the printGymHistory function, which should print both Gyms","lastModifiedDate":"2024-03-20"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"     * added.","lastModifiedDate":"2024-03-20"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":368,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-19"},{"lineNumber":369,"author":{"gitId":"JustinSoh"},"content":"    void printGymHistory_correctInput_expectPrintGymHistory(){","lastModifiedDate":"2024-03-19"},{"lineNumber":370,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-03-19"},{"lineNumber":371,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":372,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cDouble\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":373,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cDouble\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0,2.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":374,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":375,"author":{"gitId":"JustinSoh"},"content":"            Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-19"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"            gym1.addStation(\"Bench Press\", 1, 50, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"            gym1.addStation(\"Shoulder Press\", 2, 10, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":378,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":379,"author":{"gitId":"JustinSoh"},"content":"            Gym gym2 \u003d new Gym();","lastModifiedDate":"2024-03-19"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"            gym2.addStation(\"Squat Press\", 1, 50, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"            gym2.addStation(\"Lat Press\", 2, 10, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":382,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-19"},{"lineNumber":383,"author":{"gitId":"JustinSoh"},"content":"            String expected \u003d UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":384,"author":{"gitId":"L5-Z"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":385,"author":{"gitId":"L5-Z"},"content":"                    \"Your gym history:\" +","lastModifiedDate":"2024-03-20"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"                    \"Gym Session 1 (Date: NA)\"+","lastModifiedDate":"2024-03-26"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":389,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 1 Bench Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":390,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 1) +","lastModifiedDate":"2024-03-26"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":392,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"50 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":393,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":394,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 2 Shoulder Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":395,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 2) +","lastModifiedDate":"2024-03-26"},{"lineNumber":396,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":397,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"10 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":398,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":399,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 2, \"10 reps at 2.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":401,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"                    \"Gym Session 2 (Date: NA)\" +","lastModifiedDate":"2024-03-26"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":405,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 1 Squat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":406,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 1) +","lastModifiedDate":"2024-03-26"},{"lineNumber":407,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":408,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"50 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":409,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":410,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_STATION_FORMAT, \"Station 2 Lat Press\") +","lastModifiedDate":"2024-03-26"},{"lineNumber":411,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.INDIVIDUAL_GYM_STATION_FORMAT, 2) +","lastModifiedDate":"2024-03-26"},{"lineNumber":412,"author":{"gitId":"JustinSoh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-26"},{"lineNumber":413,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 1, \"10 reps at 1.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":414,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":415,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.GYM_SET_INDEX_FORMAT, 2, \"10 reps at 2.000 KG\") +","lastModifiedDate":"2024-04-06"},{"lineNumber":416,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator() +","lastModifiedDate":"2024-03-20"},{"lineNumber":417,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.PARTITION_LINE +","lastModifiedDate":"2024-03-21"},{"lineNumber":418,"author":{"gitId":"rouvinerh"},"content":"                    System.lineSeparator();","lastModifiedDate":"2024-03-20"},{"lineNumber":419,"author":{"gitId":"L5-Z"},"content":"            Output.printHistory(WorkoutConstant.GYM);","lastModifiedDate":"2024-03-21"},{"lineNumber":420,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-19"},{"lineNumber":421,"author":{"gitId":"JustinSoh"},"content":"        }  catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-19"},{"lineNumber":422,"author":{"gitId":"JustinSoh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-19"},{"lineNumber":423,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-19"},{"lineNumber":424,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-19"},{"lineNumber":425,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":426,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":427,"author":{"gitId":"JustinSoh"},"content":"     * Test the behaviour of the printRunHistory function, which should print both Runs and Gyms","lastModifiedDate":"2024-03-27"},{"lineNumber":428,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":429,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":430,"author":{"gitId":"JustinSoh"},"content":"    void printWorkoutHistory() {","lastModifiedDate":"2024-03-27"},{"lineNumber":431,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":432,"author":{"gitId":"JustinSoh"},"content":"            Run run1 \u003d new Run(\"11:11:12\", \"10.24\", \"19-12-1923\");","lastModifiedDate":"2024-03-27"},{"lineNumber":433,"author":{"gitId":"JustinSoh"},"content":"            Gym gym1 \u003d new Gym(\"11-11-1992\");","lastModifiedDate":"2024-03-27"},{"lineNumber":434,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Bench Press\", 2, 4,","lastModifiedDate":"2024-04-06"},{"lineNumber":435,"author":{"gitId":"JustinSoh"},"content":"                    new ArrayList\u003c\u003e(Arrays.asList(10.0,20.0)));","lastModifiedDate":"2024-04-06"},{"lineNumber":436,"author":{"gitId":"JustinSoh"},"content":"            gym1.addStation(\"Squat Press\", 2, 4,","lastModifiedDate":"2024-04-06"},{"lineNumber":437,"author":{"gitId":"JustinSoh"},"content":"                    new ArrayList\u003c\u003e(Arrays.asList(100.0,200.0)));","lastModifiedDate":"2024-04-06"},{"lineNumber":438,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":439,"author":{"gitId":"JustinSoh"},"content":"            String expectedRun1 \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":440,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.RUN,","lastModifiedDate":"2024-03-27"},{"lineNumber":441,"author":{"gitId":"JustinSoh"},"content":"                    \"1923-12-19\",","lastModifiedDate":"2024-03-27"},{"lineNumber":442,"author":{"gitId":"JustinSoh"},"content":"                    \"10.24\",","lastModifiedDate":"2024-03-27"},{"lineNumber":443,"author":{"gitId":"JustinSoh"},"content":"                    \"11:11:12\",","lastModifiedDate":"2024-03-27"},{"lineNumber":444,"author":{"gitId":"JustinSoh"},"content":"                    \"65:33/km\",","lastModifiedDate":"2024-03-27"},{"lineNumber":445,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":446,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":447,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":448,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH","lastModifiedDate":"2024-03-27"},{"lineNumber":449,"author":{"gitId":"JustinSoh"},"content":"                    );","lastModifiedDate":"2024-03-27"},{"lineNumber":450,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":451,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":452,"author":{"gitId":"JustinSoh"},"content":"            String expectedGym1Set1 \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":453,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.GYM,","lastModifiedDate":"2024-03-27"},{"lineNumber":454,"author":{"gitId":"JustinSoh"},"content":"                    \"1992-11-11\",","lastModifiedDate":"2024-03-27"},{"lineNumber":455,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":456,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":457,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.DASH,","lastModifiedDate":"2024-03-27"},{"lineNumber":458,"author":{"gitId":"JustinSoh"},"content":"                    \"Bench Press\",","lastModifiedDate":"2024-03-27"},{"lineNumber":459,"author":{"gitId":"JustinSoh"},"content":"                    \"2\",","lastModifiedDate":"2024-03-27"},{"lineNumber":460,"author":{"gitId":"JustinSoh"},"content":"                    \"4,4\",","lastModifiedDate":"2024-03-27"},{"lineNumber":461,"author":{"gitId":"JustinSoh"},"content":"                    \"10.0,20.0\"","lastModifiedDate":"2024-04-06"},{"lineNumber":462,"author":{"gitId":"JustinSoh"},"content":"            );","lastModifiedDate":"2024-03-27"},{"lineNumber":463,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":464,"author":{"gitId":"JustinSoh"},"content":"            String expectedGym1Set2 \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_FORMAT,","lastModifiedDate":"2024-03-27"},{"lineNumber":465,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":466,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":467,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":468,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":469,"author":{"gitId":"JustinSoh"},"content":"                    UiConstant.EMPTY_STRING,","lastModifiedDate":"2024-03-27"},{"lineNumber":470,"author":{"gitId":"JustinSoh"},"content":"                    \"Squat Press\",","lastModifiedDate":"2024-03-27"},{"lineNumber":471,"author":{"gitId":"JustinSoh"},"content":"                    \"2\",","lastModifiedDate":"2024-03-27"},{"lineNumber":472,"author":{"gitId":"JustinSoh"},"content":"                    \"4,4\",","lastModifiedDate":"2024-03-27"},{"lineNumber":473,"author":{"gitId":"JustinSoh"},"content":"                    \"100.0,200.0\"","lastModifiedDate":"2024-04-06"},{"lineNumber":474,"author":{"gitId":"JustinSoh"},"content":"            );","lastModifiedDate":"2024-03-27"},{"lineNumber":475,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":476,"author":{"gitId":"JustinSoh"},"content":"            String expected2 \u003d String.format(","lastModifiedDate":"2024-03-27"},{"lineNumber":477,"author":{"gitId":"JustinSoh"},"content":"                    WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT, \"2\", expectedGym1Set1)","lastModifiedDate":"2024-03-27"},{"lineNumber":478,"author":{"gitId":"JustinSoh"},"content":"                    + System.lineSeparator() +","lastModifiedDate":"2024-03-27"},{"lineNumber":479,"author":{"gitId":"JustinSoh"},"content":"                    String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT, \"\", expectedGym1Set2);","lastModifiedDate":"2024-03-27"},{"lineNumber":480,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":481,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":482,"author":{"gitId":"JustinSoh"},"content":"            String expected1 \u003d String.format(WorkoutConstant.HISTORY_WORKOUTS_DATA_HEADER_FORMAT, \"1\", expectedRun1);","lastModifiedDate":"2024-03-27"},{"lineNumber":483,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":484,"author":{"gitId":"JustinSoh"},"content":"            String expected \u003d UiConstant.PARTITION_LINE + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":485,"author":{"gitId":"JustinSoh"},"content":"                    + WorkoutConstant.HISTORY_WORKOUTS_HEADER + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":486,"author":{"gitId":"JustinSoh"},"content":"                    + WorkoutConstant.HISTORY_WORKOUTS_HEADER_FORMAT + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":487,"author":{"gitId":"JustinSoh"},"content":"                    + expected1 + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":488,"author":{"gitId":"JustinSoh"},"content":"                    + expected2 + System.lineSeparator()","lastModifiedDate":"2024-03-27"},{"lineNumber":489,"author":{"gitId":"JustinSoh"},"content":"                    + UiConstant.PARTITION_LINE + System.lineSeparator();","lastModifiedDate":"2024-03-27"},{"lineNumber":490,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":491,"author":{"gitId":"JustinSoh"},"content":"            Output.printHistory(WorkoutConstant.ALL);","lastModifiedDate":"2024-03-27"},{"lineNumber":492,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expected, outContent.toString());","lastModifiedDate":"2024-03-27"},{"lineNumber":493,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":494,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Shouldn\u0027t have failed\");","lastModifiedDate":"2024-03-27"},{"lineNumber":495,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":496,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":497,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":498,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":499,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"JustinSoh":195,"rouvinerh":295,"L5-Z":9}},{"path":"src/test/java/utility/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import workouts.Gym;","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-25"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"class ParserTest {","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the parseDate function with a correctly formatted string.","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"    void parseDate_correctDateInput_returnDate() {","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"        LocalDate result \u003d Parser.parseDate(\"08-03-2024\");","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"        LocalDate expected \u003d LocalDate.of(2024, 3, 8);","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the parseDate function with an incorrectly formatted string.","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     * Expects null to be returned.","lastModifiedDate":"2024-03-29"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    void parseDate_incorrectDateInput_returnNull () {","lastModifiedDate":"2024-03-29"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"2024-03-08\";","lastModifiedDate":"2024-03-29"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        LocalDate result \u003d Parser.parseDate(input);","lastModifiedDate":"2024-03-29"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(null, result);","lastModifiedDate":"2024-03-29"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-29"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed to validateDate.","lastModifiedDate":"2024-03-29"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"     * Expects the correct details to be returned as a list of strings.","lastModifiedDate":"2024-03-29"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-29"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-29"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"    public void splitDeleteInput_correctInput_returnsCorrectDeleteValues() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:appointment /index:1\";","lastModifiedDate":"2024-03-29"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"appointment\", \"1\"};","lastModifiedDate":"2024-03-29"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Parser.splitDeleteInput(input);","lastModifiedDate":"2024-03-29"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-29"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-29"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of insufficient parameters being passed to validateDate.","lastModifiedDate":"2024-03-29"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-29"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-29"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-29"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    public void splitDeleteInput_missingParameter_throwsInsufficientParameterException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:appointment\";","lastModifiedDate":"2024-03-29"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Parser.splitDeleteInput(input));","lastModifiedDate":"2024-03-29"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":60,"author":{"gitId":"j013n3"},"content":"    //@@author j013n3","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a correctly formatted user input being passed into splitBmi.","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"j013n3"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"j013n3"},"content":"    void splitBmiInput_correctInput_returnsCorrectBmiValues() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":67,"author":{"gitId":"j013n3"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":68,"author":{"gitId":"j013n3"},"content":"        String input \u003d \"/h:bmi /height:1.71 /weight:60.50 /date:19-03-2024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"j013n3"},"content":"        String[] expected \u003d {\"1.71\", \"60.50\", \"19-03-2024\"};","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"j013n3"},"content":"        String[] result \u003d Parser.splitBmiInput(input);","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"j013n3"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"j013n3"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":75,"author":{"gitId":"j013n3"},"content":"    /**","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"j013n3"},"content":"     * Tests the behaviour of a string with missing parameter being passed into splitBmi.","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"j013n3"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-29"},{"lineNumber":78,"author":{"gitId":"j013n3"},"content":"     */","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"j013n3"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"j013n3"},"content":"    void splitBmiInput_missingParameter_throwsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"j013n3"},"content":"        String input \u003d \"/h:bmi /height:1.71 /date:19-03-2024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"j013n3"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Parser.splitBmiInput(input));","lastModifiedDate":"2024-03-29"},{"lineNumber":83,"author":{"gitId":"j013n3"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"j013n3"},"content":"    //@@author","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being passed into splitPeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"    void splitPeriodInput_correctInput_noExceptionThrown() throws CustomExceptions.InvalidInput,","lastModifiedDate":"2024-03-31"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InsufficientInput {","lastModifiedDate":"2024-03-29"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/h:period /start:29-04-2023 /end:30-04-2023\";","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"29-04-2023\", \"30-04-2023\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Parser.splitPeriodInput(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-28"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a string with a missing parameter being passed into splitPeriod.","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-29"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"    void splitPeriodInput_missingParameter_throwsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/h:period /start:29-04-2023\";","lastModifiedDate":"2024-03-28"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Parser.splitPeriodInput(input));","lastModifiedDate":"2024-03-29"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being passed into splitAppointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-28"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"    void splitAppointmentInput_correctInput_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/h:appointment /date:30-03-2024 /time:19:30 /description:test\";","lastModifiedDate":"2024-03-28"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"30-03-2024\", \"19:30\", \"test\"};","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Parser.splitAppointmentDetails(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-28"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being passed into splitAppointment.","lastModifiedDate":"2024-03-28"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-29"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"    void splitAppointmentInput_missingParameter_throwsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/h:appointment /date:30-03-2024 /description:test\";","lastModifiedDate":"2024-03-28"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Parser.splitAppointmentDetails(input));","lastModifiedDate":"2024-03-29"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being","lastModifiedDate":"2024-03-31"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"     * passed into parseHistoryAndLatestInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"     * Expects no error thrown, and correct filter string returned.","lastModifiedDate":"2024-03-31"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"    void parseHistoryAndDeleteInput_correctInput_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:appointment\";","lastModifiedDate":"2024-03-31"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d Parser.parseHistoryAndLatestInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"appointment\";","lastModifiedDate":"2024-03-31"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an empty string being passed into parseHistoryAndLatestInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * Expects null to be returned.","lastModifiedDate":"2024-03-31"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"    void parseHistoryAndDeleteInput_emptyString_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/item:\";","lastModifiedDate":"2024-03-31"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(Parser.parseDeleteInput(input), null);","lastModifiedDate":"2024-03-31"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string without","lastModifiedDate":"2024-03-31"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"     * dates being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"     * Expects the list of strings to contain the correct parameters.","lastModifiedDate":"2024-03-31"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If there is insufficient input.","lastModifiedDate":"2024-03-31"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"    void splitGymInput_correctInputWithoutDate_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/e:gym /n:3\";","lastModifiedDate":"2024-03-31"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"3\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Parser.splitGymInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"     * Expects the list of strings to contain the correct parameters.","lastModifiedDate":"2024-03-31"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If there is insufficient input.","lastModifiedDate":"2024-03-31"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"    void splitGymInput_correctInputWithDate_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/e:gym /n:3 /date:29-03-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"3\", \"29-03-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Parser.splitGymInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrectly formatted string with insufficient parameters","lastModifiedDate":"2024-03-31"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"     * being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"     * Expects an InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"    void splitGymInput_incorrectInput_expectInsufficientInputExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/e:gym\";","lastModifiedDate":"2024-03-31"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"                Parser.splitGymInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string without","lastModifiedDate":"2024-03-31"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"     * dates being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"     * Expects the list of strings to contain the correct parameters.","lastModifiedDate":"2024-03-31"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If there is insufficient input.","lastModifiedDate":"2024-03-31"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"    void splitRunInput_correctInputWithoutDate_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/e:run /t:25:24 /d:5.15\";","lastModifiedDate":"2024-04-06"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"25:24\", \"5.15\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Parser.splitRunInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted string being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"     * Expects the list of strings to contain the correct parameters.","lastModifiedDate":"2024-03-31"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If there is insufficient input.","lastModifiedDate":"2024-03-31"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"    void splitRunInput_correctInputWithDate_noExceptionThrown() throws CustomExceptions.InsufficientInput,","lastModifiedDate":"2024-04-06"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-06"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/e:run /d:5.15 /t:25:24 /date:29-04-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"25:24\", \"5.15\", \"29-04-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Parser.splitRunInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrectly formatted string with insufficient parameters","lastModifiedDate":"2024-03-31"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"     * being passed to splitGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"     * Expects an InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"    void splitRunInput_incorrectInput_expectInsufficientInputExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"/e:run /d:5.10\";","lastModifiedDate":"2024-03-31"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"                Parser.splitRunInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-28"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the extractSubstringFromSpecificIndex with a correct flag.","lastModifiedDate":"2024-03-28"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"     * Expects the \u0027bmi\u0027 string to be extracted.","lastModifiedDate":"2024-03-28"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-28"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-28"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"    void extractSubstringFromSpecificIndex_correctFlag_returnsCorrectSubstring() {","lastModifiedDate":"2024-03-28"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"        String test \u003d \"/h:bmi\";","lastModifiedDate":"2024-03-28"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"        String testDelimiter \u003d \"/h:\";","lastModifiedDate":"2024-03-28"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d Parser.extractSubstringFromSpecificIndex(test, testDelimiter);","lastModifiedDate":"2024-03-28"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d \"bmi\";","lastModifiedDate":"2024-03-28"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2024-03-28"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":253,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":254,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":255,"author":{"gitId":"JustinSoh"},"content":"    void parseGymFileInput_correctInput_returnsGymObject() {","lastModifiedDate":"2024-03-31"},{"lineNumber":256,"author":{"gitId":"JustinSoh"},"content":"        String input \u003d \"gym:2:11-11-1997:bench press:4:10:10,20,30,40:squats:2:5:20,30\";","lastModifiedDate":"2024-03-31"},{"lineNumber":257,"author":{"gitId":"JustinSoh"},"content":"        String input2 \u003d \"gym:2:NA:bench press:4:10:10,20,30,40:squats:2:5:20,30\";","lastModifiedDate":"2024-03-31"},{"lineNumber":258,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":259,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-03-31"},{"lineNumber":260,"author":{"gitId":"JustinSoh"},"content":"            Gym gymOutput \u003d Parser.parseGymFileInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":261,"author":{"gitId":"JustinSoh"},"content":"            Gym gymOutput2 \u003d Parser.parseGymFileInput(input2);","lastModifiedDate":"2024-03-31"},{"lineNumber":262,"author":{"gitId":"JustinSoh"},"content":"            // make sure that there is two gym station created","lastModifiedDate":"2024-03-31"},{"lineNumber":263,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(2, gymOutput.getStations().size());","lastModifiedDate":"2024-03-31"},{"lineNumber":264,"author":{"gitId":"JustinSoh"},"content":"            // make sure that the date is correct","lastModifiedDate":"2024-03-31"},{"lineNumber":265,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(\"1997-11-11\", gymOutput.getDate().toString());","lastModifiedDate":"2024-03-31"},{"lineNumber":266,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(null, gymOutput2.getDate());","lastModifiedDate":"2024-03-31"},{"lineNumber":267,"author":{"gitId":"JustinSoh"},"content":"            // make sure the gym exercise names are correct","lastModifiedDate":"2024-03-31"},{"lineNumber":268,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(\"bench press\", gymOutput.getStationByIndex(0).getStationName());","lastModifiedDate":"2024-03-31"},{"lineNumber":269,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(\"squats\", gymOutput.getStationByIndex(1).getStationName());","lastModifiedDate":"2024-03-31"},{"lineNumber":270,"author":{"gitId":"JustinSoh"},"content":"            // make sure the number of sets are correct","lastModifiedDate":"2024-03-31"},{"lineNumber":271,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(4, gymOutput.getStationByIndex(0).getNumberOfSets());","lastModifiedDate":"2024-03-31"},{"lineNumber":272,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(2, gymOutput.getStationByIndex(1).getNumberOfSets());","lastModifiedDate":"2024-03-31"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"            // make sure the reps of each station are correct","lastModifiedDate":"2024-03-31"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(10, gymOutput.getStationByIndex(0).getSets().get(0).getNumberOfRepetitions());","lastModifiedDate":"2024-04-01"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(5, gymOutput.getStationByIndex(1).getSets().get(0).getNumberOfRepetitions());","lastModifiedDate":"2024-04-01"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"            // make sure the weights of each station are correct","lastModifiedDate":"2024-03-31"},{"lineNumber":277,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(10, gymOutput.getStationByIndex(0).getSets().get(0).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":278,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(20, gymOutput.getStationByIndex(0).getSets().get(1).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":279,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(30, gymOutput.getStationByIndex(0).getSets().get(2).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":280,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(40, gymOutput.getStationByIndex(0).getSets().get(3).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":281,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(20, gymOutput.getStationByIndex(1).getSets().get(0).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":282,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(30, gymOutput.getStationByIndex(1).getSets().get(1).getWeight());","lastModifiedDate":"2024-03-31"},{"lineNumber":283,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":284,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":285,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":286,"author":{"gitId":"JustinSoh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-31"},{"lineNumber":287,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-31"},{"lineNumber":288,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":289,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":290,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":291,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":292,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"j013n3":25,"JustinSoh":39,"rouvinerh":229}},{"path":"src/test/java/utility/ValidationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package utility;","lastModifiedDate":"2024-03-31"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-31"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-31"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-03-31"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"public class ValidationTest {","lastModifiedDate":"2024-03-31"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateDateInput function with a correctly formatted string.","lastModifiedDate":"2024-03-31"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":15,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_validDate_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"        String validDate \u003d \"09-11-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(validDate);","lastModifiedDate":"2024-03-31"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateDateInput function when invalid inputs","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"rouvinerh"},"content":"     * are passed to it.","lastModifiedDate":"2024-03-31"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"    public void validateDateInput_invalidDateInput_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"        // invalid day format","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"9-11-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input1);","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        // invalid month format","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"09-1-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input2);","lastModifiedDate":"2024-03-31"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"        // invalid year format","lastModifiedDate":"2024-03-31"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"09-01-24\";","lastModifiedDate":"2024-03-31"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input3);","lastModifiedDate":"2024-03-31"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-31"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"        // illegal day number","lastModifiedDate":"2024-03-31"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"32-01-24\";","lastModifiedDate":"2024-03-31"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input4);","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"        // day zero","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"        String input5 \u003d \"00-11-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input5);","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        // illegal month number","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"        String input6 \u003d \"09-13-2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input6);","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"        // invalid delimiter","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"        String input7 \u003d \"09/12/2024\";","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input7);","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-31"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"        // missing year","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"        String input8 \u003d \"09-12\";","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input8);","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-03-31"},{"lineNumber":78,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":79,"author":{"gitId":"rouvinerh"},"content":"        // leap year","lastModifiedDate":"2024-04-06"},{"lineNumber":80,"author":{"gitId":"rouvinerh"},"content":"        String input9 \u003d \"29-02-2023\";","lastModifiedDate":"2024-04-06"},{"lineNumber":81,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-04-06"},{"lineNumber":82,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input9);","lastModifiedDate":"2024-04-06"},{"lineNumber":83,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-04-06"},{"lineNumber":84,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"        // year before 1967","lastModifiedDate":"2024-04-06"},{"lineNumber":86,"author":{"gitId":"rouvinerh"},"content":"        String input10 \u003d \"29-02-0000\";","lastModifiedDate":"2024-04-06"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-04-06"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"            Validation.validateDateInput(input10);","lastModifiedDate":"2024-04-06"},{"lineNumber":89,"author":{"gitId":"rouvinerh"},"content":"        });","lastModifiedDate":"2024-04-06"},{"lineNumber":90,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":92,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":93,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed to validateDate.","lastModifiedDate":"2024-03-31"},{"lineNumber":94,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":95,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":96,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":97,"author":{"gitId":"rouvinerh"},"content":"    void validateDeleteInput_correctInput_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":98,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"appointment\", \"2\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":99,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e Validation.validateDeleteInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":100,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":101,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":102,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":103,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateDeleteInput function when invalid inputs","lastModifiedDate":"2024-03-31"},{"lineNumber":104,"author":{"gitId":"rouvinerh"},"content":"     * are passed to it.","lastModifiedDate":"2024-03-31"},{"lineNumber":105,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":106,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":107,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":108,"author":{"gitId":"rouvinerh"},"content":"    void validateDeleteInput_invalidInput_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":109,"author":{"gitId":"rouvinerh"},"content":"        // invalid item","lastModifiedDate":"2024-03-31"},{"lineNumber":110,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"free!\", \"2\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":111,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateDeleteInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"        // invalid index","lastModifiedDate":"2024-03-31"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"item\", \"-a\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateDeleteInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":116,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":117,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":118,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":119,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an empty string being passed to validateDeleteInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":120,"author":{"gitId":"rouvinerh"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":123,"author":{"gitId":"rouvinerh"},"content":"    void validateDeleteInput_emptyString_expectsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":124,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"item\", \"\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":125,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Validation.validateDeleteInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":127,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":128,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":129,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed into validateBmi.","lastModifiedDate":"2024-03-31"},{"lineNumber":130,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":131,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":132,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":133,"author":{"gitId":"rouvinerh"},"content":"    void validateBmiInput_correctParameters_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":134,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"1.71\", \"70.00\", \"22-02-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":135,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e Validation.validateBmiInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":136,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":137,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":138,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":139,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateBmiInput function when invalid inputs","lastModifiedDate":"2024-03-31"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"     * are passed to it.","lastModifiedDate":"2024-03-31"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"    void validateBmiInput_oneDecimalPointWeight_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"        // 1 decimal point weight","lastModifiedDate":"2024-03-31"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"1.71\", \"70.0\", \"29-04-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateBmiInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"        // 1 decimal point height","lastModifiedDate":"2024-03-31"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"1.7\", \"70.03\", \"29-04-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateBmiInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        // date in future","lastModifiedDate":"2024-03-31"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        String[] input3 \u003d {\"1.70\", \"70.03\", \"28-03-2025\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateBmiInput(input3));","lastModifiedDate":"2024-03-31"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an empty string being passed to validateBmiInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"    void validateBmiInput_emptyString_expectsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"\", \"\", \"\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Validation.validateBmiInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed into validatePeriod.","lastModifiedDate":"2024-03-31"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"    void validatePeriodInput_correctParameters_noExceptionThrown()  {","lastModifiedDate":"2024-03-31"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"        String [] input \u003d {\"23-03-2024\", \"30-03-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e Validation.validatePeriodInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a string with an empty string being passed into validatePeriod.","lastModifiedDate":"2024-03-31"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"    void validatePeriodInput_emptyString_expectsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"        String [] input \u003d {\"\", \"29-03-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Validation.validatePeriodInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validatePeriodInput function when invalid inputs","lastModifiedDate":"2024-03-31"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"     * are passed to it.","lastModifiedDate":"2024-03-31"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":192,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":193,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":194,"author":{"gitId":"rouvinerh"},"content":"    void validatePeriodInput_invalidParameters_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"        // date after Today","lastModifiedDate":"2024-03-31"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"        String [] input1 \u003d {\"28-04-2025\", \"29-13-2025\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validatePeriodInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"        // end date before start date","lastModifiedDate":"2024-03-31"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"        String [] input2 \u003d {\"28-03-2024\", \"22-03-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validatePeriodInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed into validateAppointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointmentInput_correctParameters_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"29-04-2024\", \"19:30\", \"test description\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e Validation.validateAppointmentDetails(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an empty string being passed into validateAppointment.","lastModifiedDate":"2024-03-31"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointmentInput_emptyParameters_expectsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"29-04-2024\", \"19:30\", \"\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Validation.validateAppointmentDetails(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateAppointmentInput function when","lastModifiedDate":"2024-03-31"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"     * invalid inputs are passed to it.","lastModifiedDate":"2024-03-31"},{"lineNumber":227,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":228,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"    void validateAppointmentInput_invalidDescriptions_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"        // description too long","lastModifiedDate":"2024-03-31"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"28-04-2024\", \"22:30\",","lastModifiedDate":"2024-03-31"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"                           \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +","lastModifiedDate":"2024-03-31"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"                           \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":235,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateAppointmentDetails(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":236,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":237,"author":{"gitId":"rouvinerh"},"content":"        // description contains non-alphanumeric characters","lastModifiedDate":"2024-03-31"},{"lineNumber":238,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"28-04-2024\", \"22:30\", \"doctor | ; whoami\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":239,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateAppointmentDetails(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":240,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":241,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":242,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":243,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of a correctly formatted time string being passed into validateTimeInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":244,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":245,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":246,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":247,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_correctInput_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":248,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"23:50\";","lastModifiedDate":"2024-03-31"},{"lineNumber":249,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow(() -\u003e Validation.validateTimeInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":250,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":251,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":252,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":253,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of the validateTimeInput function when","lastModifiedDate":"2024-03-31"},{"lineNumber":254,"author":{"gitId":"rouvinerh"},"content":"     * invalid inputs are passed to it.","lastModifiedDate":"2024-03-31"},{"lineNumber":255,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":256,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":257,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":258,"author":{"gitId":"rouvinerh"},"content":"    void validateTimeInput_invalidInput_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":259,"author":{"gitId":"rouvinerh"},"content":"        // invalid delimiter","lastModifiedDate":"2024-03-31"},{"lineNumber":260,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"23-50\";","lastModifiedDate":"2024-03-31"},{"lineNumber":261,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateTimeInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":262,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":263,"author":{"gitId":"rouvinerh"},"content":"        // illegal hours","lastModifiedDate":"2024-03-31"},{"lineNumber":264,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"24:50\";","lastModifiedDate":"2024-03-31"},{"lineNumber":265,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateTimeInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":266,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":267,"author":{"gitId":"rouvinerh"},"content":"        // illegal minutes","lastModifiedDate":"2024-03-31"},{"lineNumber":268,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"21:60\";","lastModifiedDate":"2024-03-31"},{"lineNumber":269,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateTimeInput(input3));","lastModifiedDate":"2024-03-31"},{"lineNumber":270,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":271,"author":{"gitId":"rouvinerh"},"content":"        // time contains letters","lastModifiedDate":"2024-03-31"},{"lineNumber":272,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"12:2a\";","lastModifiedDate":"2024-03-31"},{"lineNumber":273,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateTimeInput(input4));","lastModifiedDate":"2024-03-31"},{"lineNumber":274,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":275,"author":{"gitId":"rouvinerh"},"content":"        // invalid format","lastModifiedDate":"2024-03-31"},{"lineNumber":276,"author":{"gitId":"rouvinerh"},"content":"        String input5 \u003d \"21:55:44\";","lastModifiedDate":"2024-03-31"},{"lineNumber":277,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateTimeInput(input5));","lastModifiedDate":"2024-03-31"},{"lineNumber":278,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":279,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":280,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":281,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct filter strings being passed to validateFilter.","lastModifiedDate":"2024-03-31"},{"lineNumber":282,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":283,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":284,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":285,"author":{"gitId":"rouvinerh"},"content":"    void validateDeleteFilter_correctFilters_expectsNoExceptionsThrown () {","lastModifiedDate":"2024-03-31"},{"lineNumber":286,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"run\";","lastModifiedDate":"2024-03-31"},{"lineNumber":287,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateFilter(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":288,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":289,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"gym\";","lastModifiedDate":"2024-03-31"},{"lineNumber":290,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateFilter(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":291,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":292,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"bmi\";","lastModifiedDate":"2024-03-31"},{"lineNumber":293,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateFilter(input3));","lastModifiedDate":"2024-03-31"},{"lineNumber":294,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":295,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"period\";","lastModifiedDate":"2024-03-31"},{"lineNumber":296,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateFilter(input4));","lastModifiedDate":"2024-03-31"},{"lineNumber":297,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":298,"author":{"gitId":"rouvinerh"},"content":"        String input5 \u003d \"appointment\";","lastModifiedDate":"2024-03-31"},{"lineNumber":299,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateFilter(input5));","lastModifiedDate":"2024-03-31"},{"lineNumber":300,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":301,"author":{"gitId":"rouvinerh"},"content":"        String input6 \u003d \"workouts\";","lastModifiedDate":"2024-03-31"},{"lineNumber":302,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateFilter(input6));","lastModifiedDate":"2024-03-31"},{"lineNumber":303,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":304,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":305,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":306,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of an incorrect filter string being passed to validateFilter.","lastModifiedDate":"2024-03-31"},{"lineNumber":307,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":308,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":309,"author":{"gitId":"rouvinerh"},"content":"    void validateDeleteFilter_incorrectFilter_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":310,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"fake\";","lastModifiedDate":"2024-03-31"},{"lineNumber":311,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":312,"author":{"gitId":"rouvinerh"},"content":"                Validation.validateFilter(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":313,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":314,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":315,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":316,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct parameters being passed to validateRunInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":317,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":318,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":319,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":320,"author":{"gitId":"rouvinerh"},"content":"    void validateRunInput_correctInput_expectsNoExceptionsThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":321,"author":{"gitId":"rouvinerh"},"content":"        // with dates","lastModifiedDate":"2024-03-31"},{"lineNumber":322,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"20:25\", \"5.15\", \"29-03-2024\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":323,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateRunInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":324,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":325,"author":{"gitId":"rouvinerh"},"content":"        // without dates","lastModifiedDate":"2024-03-31"},{"lineNumber":326,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"20:25\", \"5.15\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":327,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateRunInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":328,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":329,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":330,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":331,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of empty strings being passed to validateRunInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":332,"author":{"gitId":"rouvinerh"},"content":"     * Expects an InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":333,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":334,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":335,"author":{"gitId":"rouvinerh"},"content":"    void validateRunInput_emptyStrings_expectsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":336,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"20:25\", \"\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":337,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":338,"author":{"gitId":"rouvinerh"},"content":"                Validation.validateRunInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":339,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":340,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":341,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":342,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of invalid parameters being passed to validateRunInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":343,"author":{"gitId":"rouvinerh"},"content":"     * Expects an InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":344,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":345,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":346,"author":{"gitId":"rouvinerh"},"content":"    void validateRunInput_invalidInputs_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":347,"author":{"gitId":"rouvinerh"},"content":"        // invalid distance","lastModifiedDate":"2024-03-31"},{"lineNumber":348,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"20:25\", \"5\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":349,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":350,"author":{"gitId":"rouvinerh"},"content":"                Validation.validateRunInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":351,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":352,"author":{"gitId":"rouvinerh"},"content":"        // date in future","lastModifiedDate":"2024-03-31"},{"lineNumber":353,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"20:25\", \"5.25\", \"31-3-2025\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":354,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":355,"author":{"gitId":"rouvinerh"},"content":"                Validation.validateRunInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":356,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":357,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":358,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":359,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of valid parameters being passed to validateRunTimeInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":360,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":361,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":362,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":363,"author":{"gitId":"rouvinerh"},"content":"    void validateRunTimeInput_correctTimeInput_expectsNoExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":364,"author":{"gitId":"rouvinerh"},"content":"        // without hours","lastModifiedDate":"2024-03-31"},{"lineNumber":365,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"25:03\";","lastModifiedDate":"2024-03-31"},{"lineNumber":366,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateRunTimeInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":367,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":368,"author":{"gitId":"rouvinerh"},"content":"        // with hours","lastModifiedDate":"2024-03-31"},{"lineNumber":369,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"01:25:03\";","lastModifiedDate":"2024-03-31"},{"lineNumber":370,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateRunTimeInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":371,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":372,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":373,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":374,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of invalid parameters being passed to validateRunTimeInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":375,"author":{"gitId":"rouvinerh"},"content":"     * Expects an InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":376,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":377,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":378,"author":{"gitId":"rouvinerh"},"content":"    void validateRunTimeInput_invalidTimeInput_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":379,"author":{"gitId":"rouvinerh"},"content":"        // has non integer characters","lastModifiedDate":"2024-03-31"},{"lineNumber":380,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"2a:03\";","lastModifiedDate":"2024-03-31"},{"lineNumber":381,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateRunTimeInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":382,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":383,"author":{"gitId":"rouvinerh"},"content":"        // invalid delimiter","lastModifiedDate":"2024-03-31"},{"lineNumber":384,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"25-03\";","lastModifiedDate":"2024-03-31"},{"lineNumber":385,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateRunTimeInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":386,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":387,"author":{"gitId":"rouvinerh"},"content":"        // too many parts","lastModifiedDate":"2024-03-31"},{"lineNumber":388,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"25:03:04:22\";","lastModifiedDate":"2024-03-31"},{"lineNumber":389,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateRunTimeInput(input3));","lastModifiedDate":"2024-03-31"},{"lineNumber":390,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":391,"author":{"gitId":"rouvinerh"},"content":"        // invalid format","lastModifiedDate":"2024-03-31"},{"lineNumber":392,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"1:2:3\";","lastModifiedDate":"2024-03-31"},{"lineNumber":393,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateRunTimeInput(input4));","lastModifiedDate":"2024-03-31"},{"lineNumber":394,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":395,"author":{"gitId":"rouvinerh"},"content":"        // invalid format","lastModifiedDate":"2024-03-31"},{"lineNumber":396,"author":{"gitId":"rouvinerh"},"content":"        String input5 \u003d \"1:2:3\";","lastModifiedDate":"2024-03-31"},{"lineNumber":397,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateRunTimeInput(input5));","lastModifiedDate":"2024-03-31"},{"lineNumber":398,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":399,"author":{"gitId":"rouvinerh"},"content":"        // invalid minutes","lastModifiedDate":"2024-03-31"},{"lineNumber":400,"author":{"gitId":"rouvinerh"},"content":"        String input6 \u003d \"01:65:03\";","lastModifiedDate":"2024-03-31"},{"lineNumber":401,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateRunTimeInput(input6));","lastModifiedDate":"2024-03-31"},{"lineNumber":402,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":403,"author":{"gitId":"rouvinerh"},"content":"        // invalid seconds","lastModifiedDate":"2024-03-31"},{"lineNumber":404,"author":{"gitId":"rouvinerh"},"content":"        String input7 \u003d \"01:55:83\";","lastModifiedDate":"2024-03-31"},{"lineNumber":405,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateRunTimeInput(input7));","lastModifiedDate":"2024-03-31"},{"lineNumber":406,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":407,"author":{"gitId":"rouvinerh"},"content":"        // invalid hours","lastModifiedDate":"2024-03-31"},{"lineNumber":408,"author":{"gitId":"rouvinerh"},"content":"        String input8 \u003d \"00:12:34\";","lastModifiedDate":"2024-03-31"},{"lineNumber":409,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateRunTimeInput(input8));","lastModifiedDate":"2024-03-31"},{"lineNumber":410,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":411,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":412,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":413,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of valid exercise names being passed to validateExerciseName.","lastModifiedDate":"2024-03-31"},{"lineNumber":414,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":415,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":416,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":417,"author":{"gitId":"rouvinerh"},"content":"    void validateExerciseName_correctName_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":418,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"Bench Press\";","lastModifiedDate":"2024-03-31"},{"lineNumber":419,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateExerciseName(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":420,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":421,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"squat\";","lastModifiedDate":"2024-03-31"},{"lineNumber":422,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateExerciseName(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":423,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":424,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":425,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":426,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of invalid exercise names being passed to validateExerciseName.","lastModifiedDate":"2024-03-31"},{"lineNumber":427,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":428,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":429,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":430,"author":{"gitId":"rouvinerh"},"content":"    void validateExerciseName_invalidNames_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":431,"author":{"gitId":"rouvinerh"},"content":"        // numbers in name","lastModifiedDate":"2024-03-31"},{"lineNumber":432,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"bench1\";","lastModifiedDate":"2024-03-31"},{"lineNumber":433,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateExerciseName(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":434,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":435,"author":{"gitId":"rouvinerh"},"content":"        // special characters in name","lastModifiedDate":"2024-03-31"},{"lineNumber":436,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"bench-;\";","lastModifiedDate":"2024-03-31"},{"lineNumber":437,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateExerciseName(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":438,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":439,"author":{"gitId":"rouvinerh"},"content":"        // special characters in name","lastModifiedDate":"2024-03-31"},{"lineNumber":440,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"bench-;\";","lastModifiedDate":"2024-03-31"},{"lineNumber":441,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e Validation.validateExerciseName(input3));","lastModifiedDate":"2024-03-31"},{"lineNumber":442,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":443,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":444,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":445,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of empty exercise names being passed to validateExerciseName.","lastModifiedDate":"2024-03-31"},{"lineNumber":446,"author":{"gitId":"rouvinerh"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":447,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":448,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":449,"author":{"gitId":"rouvinerh"},"content":"    void validateExerciseName_emptyNames_expectsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":450,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class, () -\u003e Validation.validateExerciseName(\"\"));","lastModifiedDate":"2024-03-31"},{"lineNumber":451,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":452,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":453,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":454,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of valid input being passed to validateGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":455,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":456,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":457,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":458,"author":{"gitId":"rouvinerh"},"content":"    void validateGymInput_correctInput_noExceptionThrown() {","lastModifiedDate":"2024-03-31"},{"lineNumber":459,"author":{"gitId":"rouvinerh"},"content":"        String[] input1 \u003d {\"4\", \"29-04-2023\"};","lastModifiedDate":"2024-03-31"},{"lineNumber":460,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateGymInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":461,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":462,"author":{"gitId":"rouvinerh"},"content":"        String[] input2 \u003d {\"4\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":463,"author":{"gitId":"rouvinerh"},"content":"        assertDoesNotThrow( () -\u003e Validation.validateGymInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":464,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":465,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":466,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":467,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of empty strings being passed to validateGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":468,"author":{"gitId":"rouvinerh"},"content":"     * Expects InsufficientInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":469,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":470,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":471,"author":{"gitId":"rouvinerh"},"content":"    void validateGymInput_emptyString_expectsInsufficientInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":472,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":473,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InsufficientInput.class , () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":474,"author":{"gitId":"rouvinerh"},"content":"                Validation.validateGymInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":475,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":476,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":477,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":478,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of invalid parameters being passed to validateGymInput.","lastModifiedDate":"2024-03-31"},{"lineNumber":479,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":480,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":481,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":482,"author":{"gitId":"rouvinerh"},"content":"    void validateGymInput_invalidInput_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":483,"author":{"gitId":"rouvinerh"},"content":"        String[] input \u003d {\"a\", null};","lastModifiedDate":"2024-03-31"},{"lineNumber":484,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class , () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":485,"author":{"gitId":"rouvinerh"},"content":"                Validation.validateGymInput(input));","lastModifiedDate":"2024-03-31"},{"lineNumber":486,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":487,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":488,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":489,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of correct inputs being passed to splitAndValidateGymStationInput","lastModifiedDate":"2024-03-31"},{"lineNumber":490,"author":{"gitId":"rouvinerh"},"content":"     * Expects no exceptions thrown.","lastModifiedDate":"2024-03-31"},{"lineNumber":491,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":492,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InsufficientInput If there are not enough parameters.","lastModifiedDate":"2024-03-31"},{"lineNumber":493,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid parameters specified.","lastModifiedDate":"2024-03-31"},{"lineNumber":494,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":495,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":496,"author":{"gitId":"rouvinerh"},"content":"    void splitAndValidateGymStationInput_validInput_correctParametersReturned() throws","lastModifiedDate":"2024-03-31"},{"lineNumber":497,"author":{"gitId":"rouvinerh"},"content":"            CustomExceptions.InsufficientInput, CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-31"},{"lineNumber":498,"author":{"gitId":"rouvinerh"},"content":"        String input \u003d \"Bench Press /s:2 /r:4 /w:10,20\";","lastModifiedDate":"2024-03-31"},{"lineNumber":499,"author":{"gitId":"rouvinerh"},"content":"        String[] expected \u003d {\"Bench Press\", \"2\", \"4\", \"10,20\"};","lastModifiedDate":"2024-04-01"},{"lineNumber":500,"author":{"gitId":"rouvinerh"},"content":"        String[] result \u003d Validation.splitAndValidateGymStationInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":501,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected, result);","lastModifiedDate":"2024-03-31"},{"lineNumber":502,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":503,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":504,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":505,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect inputs being passed to","lastModifiedDate":"2024-04-01"},{"lineNumber":506,"author":{"gitId":"rouvinerh"},"content":"     * splitAndValidateGymStationInput.","lastModifiedDate":"2024-04-01"},{"lineNumber":507,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-01"},{"lineNumber":508,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":509,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-31"},{"lineNumber":510,"author":{"gitId":"rouvinerh"},"content":"    void splitAndValidateGymStationInput_invalidInput_expectsInvalidInputException() {","lastModifiedDate":"2024-03-31"},{"lineNumber":511,"author":{"gitId":"rouvinerh"},"content":"        // number of sets is not a positive integer","lastModifiedDate":"2024-03-31"},{"lineNumber":512,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"Bench Press /s:a /r:4 /w:1020\";","lastModifiedDate":"2024-03-31"},{"lineNumber":513,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":514,"author":{"gitId":"rouvinerh"},"content":"                Validation.splitAndValidateGymStationInput(input1));","lastModifiedDate":"2024-03-31"},{"lineNumber":515,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":516,"author":{"gitId":"rouvinerh"},"content":"        // number of reps is not a positive integer","lastModifiedDate":"2024-03-31"},{"lineNumber":517,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"Bench Press /s:2 /r:a /w:1020\";","lastModifiedDate":"2024-03-31"},{"lineNumber":518,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":519,"author":{"gitId":"rouvinerh"},"content":"                Validation.splitAndValidateGymStationInput(input2));","lastModifiedDate":"2024-03-31"},{"lineNumber":520,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":521,"author":{"gitId":"rouvinerh"},"content":"        // weights does not have comma","lastModifiedDate":"2024-04-01"},{"lineNumber":522,"author":{"gitId":"rouvinerh"},"content":"        String input3 \u003d \"Bench Press /s:2 /r:a /w:1020\";","lastModifiedDate":"2024-03-31"},{"lineNumber":523,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":524,"author":{"gitId":"rouvinerh"},"content":"                Validation.splitAndValidateGymStationInput(input3));","lastModifiedDate":"2024-03-31"},{"lineNumber":525,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":526,"author":{"gitId":"rouvinerh"},"content":"        // weights specified exceed number of sets","lastModifiedDate":"2024-03-31"},{"lineNumber":527,"author":{"gitId":"rouvinerh"},"content":"        String input4 \u003d \"Bench Press /s:1 /r:a /w:10,20\";","lastModifiedDate":"2024-03-31"},{"lineNumber":528,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-03-31"},{"lineNumber":529,"author":{"gitId":"rouvinerh"},"content":"                Validation.splitAndValidateGymStationInput(input4));","lastModifiedDate":"2024-03-31"},{"lineNumber":530,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":531,"author":{"gitId":"rouvinerh"},"content":"        // weights array has letters","lastModifiedDate":"2024-04-01"},{"lineNumber":532,"author":{"gitId":"rouvinerh"},"content":"        String input5 \u003d \"Bench Press /s:2 /r:a /w:10,a\";","lastModifiedDate":"2024-04-01"},{"lineNumber":533,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-01"},{"lineNumber":534,"author":{"gitId":"rouvinerh"},"content":"                Validation.splitAndValidateGymStationInput(input5));","lastModifiedDate":"2024-04-01"},{"lineNumber":535,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":536,"author":{"gitId":"rouvinerh"},"content":"        // weights array has spaces","lastModifiedDate":"2024-04-01"},{"lineNumber":537,"author":{"gitId":"rouvinerh"},"content":"        String input6 \u003d \"Bench Press /s:2 /r:a /w:10, 20\";","lastModifiedDate":"2024-04-01"},{"lineNumber":538,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-01"},{"lineNumber":539,"author":{"gitId":"rouvinerh"},"content":"                Validation.splitAndValidateGymStationInput(input6));","lastModifiedDate":"2024-04-01"},{"lineNumber":540,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":541,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":542,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":543,"author":{"gitId":"rouvinerh"},"content":"    * Tests the behaviour of a correct weights array being passed to validateWeightsArray.","lastModifiedDate":"2024-04-01"},{"lineNumber":544,"author":{"gitId":"rouvinerh"},"content":"    * Expects no exception to be thrown, and the correct ArrayList of integers to be","lastModifiedDate":"2024-04-01"},{"lineNumber":545,"author":{"gitId":"rouvinerh"},"content":"    * returned.","lastModifiedDate":"2024-04-01"},{"lineNumber":546,"author":{"gitId":"rouvinerh"},"content":"    * @throws CustomExceptions.InvalidInput If the input string does not have the right format.","lastModifiedDate":"2024-04-01"},{"lineNumber":547,"author":{"gitId":"rouvinerh"},"content":"    */","lastModifiedDate":"2024-04-01"},{"lineNumber":548,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":549,"author":{"gitId":"rouvinerh"},"content":"    void validateWeightsArray_correctInput_returnCorrectArrayList() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-04-01"},{"lineNumber":550,"author":{"gitId":"JustinSoh"},"content":"        String input \u003d \"1.0,2.25,50.5,60.75, 0.0\";","lastModifiedDate":"2024-04-06"},{"lineNumber":551,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-06"},{"lineNumber":552,"author":{"gitId":"JustinSoh"},"content":"        expected.add(1.0);","lastModifiedDate":"2024-04-06"},{"lineNumber":553,"author":{"gitId":"JustinSoh"},"content":"        expected.add(2.25);","lastModifiedDate":"2024-04-06"},{"lineNumber":554,"author":{"gitId":"JustinSoh"},"content":"        expected.add(50.5);","lastModifiedDate":"2024-04-06"},{"lineNumber":555,"author":{"gitId":"JustinSoh"},"content":"        expected.add(60.75);","lastModifiedDate":"2024-04-06"},{"lineNumber":556,"author":{"gitId":"JustinSoh"},"content":"        expected.add(0.0);","lastModifiedDate":"2024-04-06"},{"lineNumber":557,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e result \u003d Validation.validateWeightsArray(input);","lastModifiedDate":"2024-04-06"},{"lineNumber":558,"author":{"gitId":"rouvinerh"},"content":"        assertArrayEquals(expected.toArray(), result.toArray());","lastModifiedDate":"2024-04-01"},{"lineNumber":559,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":560,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":561,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-04-01"},{"lineNumber":562,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of incorrect weights array being passed to validateWeightsArray.","lastModifiedDate":"2024-04-01"},{"lineNumber":563,"author":{"gitId":"rouvinerh"},"content":"     * Expects InvalidInput exception to be thrown.","lastModifiedDate":"2024-04-01"},{"lineNumber":564,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-04-01"},{"lineNumber":565,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-04-01"},{"lineNumber":566,"author":{"gitId":"rouvinerh"},"content":"    void validateWeightsArray_invalidInput_expectInvalidInputException() {","lastModifiedDate":"2024-04-01"},{"lineNumber":567,"author":{"gitId":"rouvinerh"},"content":"        // negative weights","lastModifiedDate":"2024-04-01"},{"lineNumber":568,"author":{"gitId":"rouvinerh"},"content":"        String input1 \u003d \"-1,2\";","lastModifiedDate":"2024-04-01"},{"lineNumber":569,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-01"},{"lineNumber":570,"author":{"gitId":"rouvinerh"},"content":"                Validation.validateWeightsArray(input1));","lastModifiedDate":"2024-04-01"},{"lineNumber":571,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":572,"author":{"gitId":"rouvinerh"},"content":"        // non integer weights","lastModifiedDate":"2024-04-01"},{"lineNumber":573,"author":{"gitId":"rouvinerh"},"content":"        String input2 \u003d \"1,a\";","lastModifiedDate":"2024-04-01"},{"lineNumber":574,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-01"},{"lineNumber":575,"author":{"gitId":"rouvinerh"},"content":"                Validation.validateWeightsArray(input2));","lastModifiedDate":"2024-04-01"},{"lineNumber":576,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":577,"author":{"gitId":"JustinSoh"},"content":"        // incorrect multiple of weights","lastModifiedDate":"2024-04-06"},{"lineNumber":578,"author":{"gitId":"JustinSoh"},"content":"        String input3 \u003d \"1.3333, 1.444, 0.998\";","lastModifiedDate":"2024-04-06"},{"lineNumber":579,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e","lastModifiedDate":"2024-04-06"},{"lineNumber":580,"author":{"gitId":"JustinSoh"},"content":"                Validation.validateWeightsArray(input3));","lastModifiedDate":"2024-04-06"},{"lineNumber":581,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-04-06"},{"lineNumber":582,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":583,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-31"}],"authorContributionMap":{"JustinSoh":14,"rouvinerh":569}},{"path":"src/test/java/workouts/GymTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package workouts;","lastModifiedDate":"2024-03-24"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-24"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-24"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-24"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-30"},{"lineNumber":7,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":8,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-24"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-24"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-24"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"class GymTest {","lastModifiedDate":"2024-03-24"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-24"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    void setUp() {","lastModifiedDate":"2024-03-24"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-24"},{"lineNumber":23,"author":{"gitId":"JustinSoh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-24"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of adding a new station to the gym.","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"     * Verifies whether the newly added station is correctly reflected in {@Code GymSet}.","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"JustinSoh"},"content":"     * Expected Behaviour is to add stations and sets to the gym.","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    void addStation_validInput_expectAddedStation() {","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym \u003d new Gym();","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cDouble\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":37,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cDouble\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0,2.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":38,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cDouble\u003e array3 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0,2.0,3.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"rouvinerh"},"content":"            newGym.addStation(\"Exercise 1\", 1, 10, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"            newGym.addStation(\"Exercise 2\", 2, 20, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(2, newGym.getStations().size());","lastModifiedDate":"2024-03-24"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"            newGym.addStation(\"Exercise 3\", 3, 30, array3);","lastModifiedDate":"2024-04-01"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cGymStation\u003e stations \u003d newGym.getStations();","lastModifiedDate":"2024-03-24"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(3, stations.size());","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"            for(int i \u003d 0; i \u003c stations.size(); i++){","lastModifiedDate":"2024-03-24"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"                String stationName \u003d stations.get(i).getStationName();","lastModifiedDate":"2024-03-24"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"                ArrayList\u003cGymSet\u003e sets \u003d stations.get(i).getSets();","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"                int numberOfSets \u003d sets.size();","lastModifiedDate":"2024-03-24"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"                if (i \u003d\u003d 0){","lastModifiedDate":"2024-03-24"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(\"Exercise 1\", stationName);","lastModifiedDate":"2024-03-24"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(1, numberOfSets );","lastModifiedDate":"2024-03-24"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"                    for(int j \u003d 0; j \u003c sets.size(); j++){","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"                        assertEquals(array1.get(j), sets.get(j).getWeight());","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"                        assertEquals(10, sets.get(j).getNumberOfRepetitions());","lastModifiedDate":"2024-04-01"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"                    }","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"                } else if (i \u003d\u003d 1){","lastModifiedDate":"2024-03-24"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(\"Exercise 2\", stationName);","lastModifiedDate":"2024-03-24"},{"lineNumber":64,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(2, numberOfSets );","lastModifiedDate":"2024-03-24"},{"lineNumber":65,"author":{"gitId":"JustinSoh"},"content":"                    for(int j \u003d 0; j \u003c sets.size(); j++){","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"                        assertEquals(array2.get(j), sets.get(j).getWeight());","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"                        assertEquals(20, sets.get(j).getNumberOfRepetitions());","lastModifiedDate":"2024-04-01"},{"lineNumber":68,"author":{"gitId":"JustinSoh"},"content":"                    }","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"                } else if (i \u003d\u003d 2){","lastModifiedDate":"2024-03-24"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(\"Exercise 3\", stationName);","lastModifiedDate":"2024-03-24"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"                    assertEquals(3, numberOfSets );","lastModifiedDate":"2024-03-24"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"                    for(int j \u003d 0; j \u003c sets.size(); j++){","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"                        assertEquals(array3.get(j), sets.get(j).getWeight());","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"                        assertEquals(30, sets.get(j).getNumberOfRepetitions());","lastModifiedDate":"2024-04-01"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"                    }","lastModifiedDate":"2024-03-26"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"                }","lastModifiedDate":"2024-03-24"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-24"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-24"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":85,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":87,"author":{"gitId":"JustinSoh"},"content":"    void getStations() {","lastModifiedDate":"2024-03-24"},{"lineNumber":88,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"    void getStationByIndex() {","lastModifiedDate":"2024-03-24"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"    void addGymStationInput() {","lastModifiedDate":"2024-03-24"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-24"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    void checkGymStationInput() {","lastModifiedDate":"2024-03-24"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":102,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-30"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"    void toFileString_correctInput_expectedCorrectString(){","lastModifiedDate":"2024-03-30"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"        String expected1 \u003d \"GYM:2:11-11-1997:bench press:4:4:10.0,20.0,30.0,40.0:squats:4:3:20.0,30.0,40.0,50.0\";","lastModifiedDate":"2024-04-06"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"        String expected2WithNoDate \u003d \"GYM:2:NA:bench press:4:4:10.0,20.0,30.0,40.0:squats:4:3:20.0,30.0,40.0,50.0\";","lastModifiedDate":"2024-04-06"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(10.0,20.0,30.0,40.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(20.0,30.0,40.0,50.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym \u003d new Gym(\"11-11-1997\");","lastModifiedDate":"2024-03-30"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"        Gym newGym2 \u003d new Gym();","lastModifiedDate":"2024-03-30"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":111,"author":{"gitId":"JustinSoh"},"content":"        try{","lastModifiedDate":"2024-03-30"},{"lineNumber":112,"author":{"gitId":"rouvinerh"},"content":"            newGym.addStation(\"bench press\", 4, 4, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":113,"author":{"gitId":"rouvinerh"},"content":"            newGym.addStation(\"squats\", 4, 3, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":114,"author":{"gitId":"rouvinerh"},"content":"            newGym2.addStation(\"bench press\", 4, 4, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":115,"author":{"gitId":"rouvinerh"},"content":"            newGym2.addStation(\"squats\", 4, 3, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"            String output \u003d newGym.toFileString();","lastModifiedDate":"2024-03-30"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"            String output2 \u003d newGym2.toFileString();","lastModifiedDate":"2024-03-30"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expected1, output);","lastModifiedDate":"2024-03-30"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(expected2WithNoDate, output2);","lastModifiedDate":"2024-03-30"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-30"},{"lineNumber":121,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput e){","lastModifiedDate":"2024-03-30"},{"lineNumber":122,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-30"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-30"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-30"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":126,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-24"}],"authorContributionMap":{"JustinSoh":117,"rouvinerh":10}},{"path":"src/test/java/workouts/RunTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"import constants.UiConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":6,"author":{"gitId":"rouvinerh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":8,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"rouvinerh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"rouvinerh"},"content":"class RunTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"rouvinerh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":16,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of parsing a time string with hours into an integer array.","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"rouvinerh"},"content":"    void parseTime_correctInputWithHours_returnListOfTimes() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"rouvinerh"},"content":"        String testTime \u003d \"01:59:10\";","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"        Run runTest \u003d new Run(testTime, \"15.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result \u003d runTest.splitRunTime(testTime);","lastModifiedDate":"2024-03-31"},{"lineNumber":25,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected \u003d {1, 59, 10};","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c UiConstant.MAX_RUNTIME_ARRAY_LENGTH; i++) {","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(result[i], expected[i]);","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of parsing a time string without hours into an integer array.","lastModifiedDate":"2024-03-14"},{"lineNumber":33,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"    void parseTime_correctInputWithOutHours_returnListOfTimes() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"        String testTime \u003d \"50:52\";","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"rouvinerh"},"content":"        Run runTest \u003d new Run(testTime, \"15.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":38,"author":{"gitId":"rouvinerh"},"content":"        Integer[] result \u003d runTest.splitRunTime(\"50:52\");","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"rouvinerh"},"content":"        Integer[] expected \u003d {50, 52};","lastModifiedDate":"2024-03-14"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"        for (int i \u003d 0; i \u003c UiConstant.MIN_RUNTIME_ARRAY_LENGTH; i++) {","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"rouvinerh"},"content":"            assertEquals(result[i], expected[i]);","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"rouvinerh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":46,"author":{"gitId":"rouvinerh"},"content":"     * Test the behaviour of an incorrect time string being passed in for the run.","lastModifiedDate":"2024-03-14"},{"lineNumber":47,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":48,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":49,"author":{"gitId":"rouvinerh"},"content":"    void parseTime_wrongInput_throwInvalidInputForRun() {","lastModifiedDate":"2024-03-14"},{"lineNumber":50,"author":{"gitId":"rouvinerh"},"content":"        String testTime \u003d \"50\";","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"rouvinerh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e new Run(testTime, \"15.3\"));","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":53,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":54,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of calculating the total seconds taken for the run.","lastModifiedDate":"2024-03-14"},{"lineNumber":56,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"rouvinerh"},"content":"    void calculateSeconds_correctInput_returnTotalSeconds() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"rouvinerh"},"content":"        Run testRun \u003d new Run(\"01:05:42\", \"10.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"rouvinerh"},"content":"        int result \u003d testRun.calculateTotalSeconds();","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"rouvinerh"},"content":"        int expected \u003d 3942;","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(result, expected);","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":66,"author":{"gitId":"rouvinerh"},"content":"     * Tests the behaviour of calculating and returning a string representing the pace for the run.","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":69,"author":{"gitId":"rouvinerh"},"content":"    void calculatePace_correctInput_returnPace() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"rouvinerh"},"content":"        Run testRun \u003d new Run(\"1:20:10\", \"10.3\");","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"rouvinerh"},"content":"        String result \u003d testRun.calculatePace();","lastModifiedDate":"2024-03-14"},{"lineNumber":72,"author":{"gitId":"rouvinerh"},"content":"        String expected \u003d\"7:47/km\";","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(result, expected);","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":75,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":3,"rouvinerh":72}},{"path":"src/test/java/workouts/WorkoutListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JustinSoh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":4,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"JustinSoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"JustinSoh"},"content":"import utility.CustomExceptions;","lastModifiedDate":"2024-03-14"},{"lineNumber":7,"author":{"gitId":"rouvinerh"},"content":"import constants.WorkoutConstant;","lastModifiedDate":"2024-03-31"},{"lineNumber":8,"author":{"gitId":"L5-Z"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"JustinSoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-14"},{"lineNumber":10,"author":{"gitId":"JustinSoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"JustinSoh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"JustinSoh"},"content":"class WorkoutListTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"JustinSoh"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"JustinSoh"},"content":"    void setUp() {","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":21,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"JustinSoh"},"content":"    @AfterEach","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"rouvinerh"},"content":"    void cleanup() {","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"JustinSoh"},"content":"        WorkoutList.clearWorkoutsRunGym();","lastModifiedDate":"2024-03-24"},{"lineNumber":25,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":29,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of adding a new run to the run list.","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"rouvinerh"},"content":"     * Verifies whether the newly added run is correctly reflected in the run and WorkoutList.","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":33,"author":{"gitId":"JustinSoh"},"content":"    void addRun_normalInput_expectAppend()  {","lastModifiedDate":"2024-03-14"},{"lineNumber":34,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"rouvinerh"},"content":"            Run inputRun \u003d new Run(\"40:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":36,"author":{"gitId":"rouvinerh"},"content":"            WorkoutList.addRun(inputRun);","lastModifiedDate":"2024-03-14"},{"lineNumber":37,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003c? extends Workout\u003e runList \u003d WorkoutList.getWorkouts(WorkoutConstant.RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003c? extends Workout\u003e workoutList \u003d WorkoutList.getWorkouts(WorkoutConstant.ALL);","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":40,"author":{"gitId":"JustinSoh"},"content":"            Workout expectedRun \u003d runList.get(runList.size() - 1);","lastModifiedDate":"2024-03-14"},{"lineNumber":41,"author":{"gitId":"JustinSoh"},"content":"            Workout expectedWorkout \u003d workoutList.get(runList.size() - 1);","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":43,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(inputRun, expectedRun);","lastModifiedDate":"2024-03-14"},{"lineNumber":44,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(inputRun, expectedWorkout);","lastModifiedDate":"2024-03-14"},{"lineNumber":45,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":46,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.OutOfBounds e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":47,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-14"},{"lineNumber":48,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":49,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception.\");","lastModifiedDate":"2024-03-14"},{"lineNumber":50,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":51,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":53,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":54,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":55,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting the workout list with {@code RUN} , {@code ALL}","lastModifiedDate":"2024-03-14"},{"lineNumber":56,"author":{"gitId":"JustinSoh"},"content":"     * Verifies whether the method is able to correct retrieve the list of workouts.","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"JustinSoh"},"content":"     *","lastModifiedDate":"2024-03-14"},{"lineNumber":58,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":59,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":60,"author":{"gitId":"JustinSoh"},"content":"    void getWorkouts_properInput_expectRetrievalRun() {","lastModifiedDate":"2024-03-14"},{"lineNumber":61,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":62,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":63,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003cRun\u003e inputList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-14"},{"lineNumber":64,"author":{"gitId":"rouvinerh"},"content":"            inputList.add(new Run(\"40:10\", \"10.3\", \"15-03-2024\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":65,"author":{"gitId":"rouvinerh"},"content":"            inputList.add(new Run(\"30:10\", \"20.3\", \"30-03-2023\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":66,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":67,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"L5-Z"},"content":"            ArrayList\u003c? extends Workout\u003e runList \u003d WorkoutList.getWorkouts(WorkoutConstant.RUN);","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"JustinSoh"},"content":"            for(int i \u003d 0; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"JustinSoh"},"content":"                Run expected \u003d inputList.get(i);","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"JustinSoh"},"content":"                Run actual \u003d (Run) runList.get(i);","lastModifiedDate":"2024-03-14"},{"lineNumber":72,"author":{"gitId":"JustinSoh"},"content":"                assertEquals(expected, actual);","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"JustinSoh"},"content":"            }","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":75,"author":{"gitId":"JustinSoh"},"content":"        } catch (CustomExceptions.OutOfBounds | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":76,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception.\");","lastModifiedDate":"2024-03-14"},{"lineNumber":77,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":78,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":79,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":80,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":81,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting the workout list with {@code RUN} , {@code ALL}","lastModifiedDate":"2024-03-14"},{"lineNumber":82,"author":{"gitId":"JustinSoh"},"content":"     * Verifies whether the method is able to correct retrieve the list of workouts.","lastModifiedDate":"2024-03-14"},{"lineNumber":83,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":84,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":85,"author":{"gitId":"rouvinerh"},"content":"    void getWorkouts_improperFilters_throwInvalidInput() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-14"},{"lineNumber":86,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cWorkout\u003e inputList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-14"},{"lineNumber":87,"author":{"gitId":"rouvinerh"},"content":"        inputList.add(new Run(\"40:10\", \"10.3\", \"15-03-2024\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":88,"author":{"gitId":"rouvinerh"},"content":"        inputList.add(new Run(\"30:10\", \"20.3\", \"30-03-2023\"));","lastModifiedDate":"2024-03-25"},{"lineNumber":89,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":90,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.InvalidInput.class, () -\u003e {","lastModifiedDate":"2024-03-14"},{"lineNumber":91,"author":{"gitId":"JustinSoh"},"content":"            ArrayList\u003c? extends Workout\u003e runList \u003d WorkoutList.getWorkouts(\"invalidFilter\");","lastModifiedDate":"2024-03-19"},{"lineNumber":92,"author":{"gitId":"JustinSoh"},"content":"        });","lastModifiedDate":"2024-03-14"},{"lineNumber":93,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":94,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":95,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":96,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting an empty run / gym list","lastModifiedDate":"2024-03-24"},{"lineNumber":97,"author":{"gitId":"JustinSoh"},"content":"     * Expected behaviour is to raise {@code OutOfBounds} exception.","lastModifiedDate":"2024-03-14"},{"lineNumber":98,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":99,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":100,"author":{"gitId":"JustinSoh"},"content":"    void getWorkouts_emptyList_throwOutOfBoundsForRun() {","lastModifiedDate":"2024-03-14"},{"lineNumber":101,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e WorkoutList.getWorkouts(WorkoutConstant.GYM));","lastModifiedDate":"2024-03-24"},{"lineNumber":102,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e WorkoutList.getWorkouts(WorkoutConstant.RUN));","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":104,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":105,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":106,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting an empty run list","lastModifiedDate":"2024-03-14"},{"lineNumber":107,"author":{"gitId":"JustinSoh"},"content":"     * Expected behaviour is to raise {@code OutOfBounds} exception.","lastModifiedDate":"2024-03-14"},{"lineNumber":108,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":109,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":110,"author":{"gitId":"JustinSoh"},"content":"    void getWorkouts_emptyList_throwOutOfBoundsForAll() {","lastModifiedDate":"2024-03-14"},{"lineNumber":111,"author":{"gitId":"L5-Z"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, () -\u003e WorkoutList.getWorkouts(WorkoutConstant.ALL));","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":113,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":114,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":115,"author":{"gitId":"JustinSoh"},"content":"     * Tests the behavior of getting the latest run from the run list.","lastModifiedDate":"2024-03-14"},{"lineNumber":116,"author":{"gitId":"JustinSoh"},"content":"     * Expected behavior is for {@code actual} to equal to the {@code secondRun}","lastModifiedDate":"2024-03-14"},{"lineNumber":117,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":118,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":119,"author":{"gitId":"JustinSoh"},"content":"    void getLatestRun_properList_correctRetrieval() {","lastModifiedDate":"2024-03-14"},{"lineNumber":120,"author":{"gitId":"JustinSoh"},"content":"        try {","lastModifiedDate":"2024-03-14"},{"lineNumber":121,"author":{"gitId":"rouvinerh"},"content":"            new Run(\"20:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":122,"author":{"gitId":"rouvinerh"},"content":"            Run secondRun \u003d new Run(\"20:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":123,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":124,"author":{"gitId":"JustinSoh"},"content":"            Run actual \u003d WorkoutList.getLatestRun();","lastModifiedDate":"2024-03-14"},{"lineNumber":125,"author":{"gitId":"JustinSoh"},"content":"            assertEquals(secondRun, actual);","lastModifiedDate":"2024-03-14"},{"lineNumber":126,"author":{"gitId":"rouvinerh"},"content":"        } catch (CustomExceptions.OutOfBounds | CustomExceptions.InvalidInput e) {","lastModifiedDate":"2024-03-14"},{"lineNumber":127,"author":{"gitId":"JustinSoh"},"content":"            fail(\"Should not throw an exception\");","lastModifiedDate":"2024-03-14"},{"lineNumber":128,"author":{"gitId":"JustinSoh"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":129,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":130,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":131,"author":{"gitId":"JustinSoh"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":132,"author":{"gitId":"JustinSoh"},"content":"     * Test the behaviour when you try to get the latest run from an empty list.","lastModifiedDate":"2024-03-14"},{"lineNumber":133,"author":{"gitId":"JustinSoh"},"content":"     * Expected behaviour is to raise {@code OutOfBounds} exception.","lastModifiedDate":"2024-03-14"},{"lineNumber":134,"author":{"gitId":"JustinSoh"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":135,"author":{"gitId":"JustinSoh"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":136,"author":{"gitId":"JustinSoh"},"content":"    void getLatestRun_emptyList_throwOutOfBound() {","lastModifiedDate":"2024-03-14"},{"lineNumber":137,"author":{"gitId":"JustinSoh"},"content":"        // Call the method or code that should throw the exception","lastModifiedDate":"2024-03-14"},{"lineNumber":138,"author":{"gitId":"JustinSoh"},"content":"        assertThrows(CustomExceptions.OutOfBounds.class, WorkoutList::getLatestRun);","lastModifiedDate":"2024-03-14"},{"lineNumber":139,"author":{"gitId":"JustinSoh"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":140,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":141,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":142,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":143,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":144,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one run left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":145,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":146,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":147,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":148,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":149,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":150,"author":{"gitId":"rouvinerh"},"content":"    void deleteRun_properList_listOfSizeOne() throws CustomExceptions.InvalidInput, CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":151,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"20:10\", \"10.3\", \"15-03-2024\");","lastModifiedDate":"2024-03-25"},{"lineNumber":152,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"20:11\", \"10.3\", \"15-03-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":153,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":154,"author":{"gitId":"rouvinerh"},"content":"        WorkoutList.deleteRun(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":155,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, WorkoutList.getRunSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":156,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":157,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":158,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":159,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":160,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":161,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":162,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":163,"author":{"gitId":"rouvinerh"},"content":"    void deleteRun_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-25"},{"lineNumber":164,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":165,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteRun(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":166,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":167,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":168,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":169,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":170,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":171,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":172,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":173,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":174,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":175,"author":{"gitId":"rouvinerh"},"content":"    void deleteRun_properListInvalidIndex_throwOutOfBoundsForRun() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":176,"author":{"gitId":"rouvinerh"},"content":"        new Run(\"20:11\", \"10.3\", \"15-03-2023\");","lastModifiedDate":"2024-03-25"},{"lineNumber":177,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":178,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":179,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteRun(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":180,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":181,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":182,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":183,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of gyms with valid list and valid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":184,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is to have one gym left in the list.","lastModifiedDate":"2024-03-25"},{"lineNumber":185,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":186,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":187,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.OutOfBounds If the index is invalid.","lastModifiedDate":"2024-03-25"},{"lineNumber":188,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":189,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":190,"author":{"gitId":"rouvinerh"},"content":"    void deleteGym_properList_listOfSizeOne() throws CustomExceptions.InvalidInput, CustomExceptions.OutOfBounds {","lastModifiedDate":"2024-03-25"},{"lineNumber":191,"author":{"gitId":"rouvinerh"},"content":"        Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-25"},{"lineNumber":192,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":193,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0,2.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":194,"author":{"gitId":"JustinSoh"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":195,"author":{"gitId":"rouvinerh"},"content":"        gym1.addStation(\"Bench Press\", 1, 50, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":196,"author":{"gitId":"rouvinerh"},"content":"        gym1.addStation(\"Shoulder Press\", 2, 10, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":197,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":198,"author":{"gitId":"rouvinerh"},"content":"        Gym gym2 \u003d new Gym();","lastModifiedDate":"2024-03-25"},{"lineNumber":199,"author":{"gitId":"rouvinerh"},"content":"        gym2.addStation(\"Squat Press\", 1, 50, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":200,"author":{"gitId":"rouvinerh"},"content":"        gym2.addStation(\"Lat Press\", 2, 10, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":201,"author":{"gitId":"rouvinerh"},"content":"        gym2.addStation(\"Bicep curls\", 1, 10, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":202,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":203,"author":{"gitId":"rouvinerh"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-25"},{"lineNumber":204,"author":{"gitId":"rouvinerh"},"content":"        WorkoutList.deleteGym(index);","lastModifiedDate":"2024-03-25"},{"lineNumber":205,"author":{"gitId":"rouvinerh"},"content":"        assertEquals(1, WorkoutList.getGymSize());","lastModifiedDate":"2024-03-25"},{"lineNumber":206,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":207,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":208,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":209,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of gym with empty list.","lastModifiedDate":"2024-03-25"},{"lineNumber":210,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an AssertionError to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":211,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":212,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":213,"author":{"gitId":"rouvinerh"},"content":"    void deleteGym_emptyList_throwsAssertionError() {","lastModifiedDate":"2024-03-25"},{"lineNumber":214,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (AssertionError.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":215,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteGym(0));","lastModifiedDate":"2024-03-25"},{"lineNumber":216,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":217,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":218,"author":{"gitId":"rouvinerh"},"content":"    /**","lastModifiedDate":"2024-03-25"},{"lineNumber":219,"author":{"gitId":"rouvinerh"},"content":"     * Test deleting of runs with invalid index.","lastModifiedDate":"2024-03-25"},{"lineNumber":220,"author":{"gitId":"rouvinerh"},"content":"     * Expected behaviour is for an OutOfBounds error to be thrown.","lastModifiedDate":"2024-03-25"},{"lineNumber":221,"author":{"gitId":"rouvinerh"},"content":"     *","lastModifiedDate":"2024-03-25"},{"lineNumber":222,"author":{"gitId":"rouvinerh"},"content":"     * @throws CustomExceptions.InvalidInput If there are invalid Run input parameters.","lastModifiedDate":"2024-03-25"},{"lineNumber":223,"author":{"gitId":"rouvinerh"},"content":"     */","lastModifiedDate":"2024-03-25"},{"lineNumber":224,"author":{"gitId":"rouvinerh"},"content":"    @Test","lastModifiedDate":"2024-03-25"},{"lineNumber":225,"author":{"gitId":"rouvinerh"},"content":"    void deleteGym_properListInvalidIndex_throwOutOfBoundsForRun() throws CustomExceptions.InvalidInput {","lastModifiedDate":"2024-03-25"},{"lineNumber":226,"author":{"gitId":"rouvinerh"},"content":"        Gym gym1 \u003d new Gym();","lastModifiedDate":"2024-03-25"},{"lineNumber":227,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e array1 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":228,"author":{"gitId":"JustinSoh"},"content":"        ArrayList\u003cDouble\u003e array2 \u003d new ArrayList\u003c\u003e(Arrays.asList(1.0,2.0));","lastModifiedDate":"2024-04-06"},{"lineNumber":229,"author":{"gitId":"rouvinerh"},"content":"        gym1.addStation(\"Bench Press\", 1, 50, array1);","lastModifiedDate":"2024-04-01"},{"lineNumber":230,"author":{"gitId":"rouvinerh"},"content":"        gym1.addStation(\"Shoulder Press\", 2, 10, array2);","lastModifiedDate":"2024-04-01"},{"lineNumber":231,"author":{"gitId":"rouvinerh"},"content":"        int invalidIndex \u003d 5;","lastModifiedDate":"2024-03-25"},{"lineNumber":232,"author":{"gitId":"rouvinerh"},"content":"        assertThrows (CustomExceptions.OutOfBounds.class, () -\u003e","lastModifiedDate":"2024-03-25"},{"lineNumber":233,"author":{"gitId":"rouvinerh"},"content":"                WorkoutList.deleteGym(invalidIndex));","lastModifiedDate":"2024-03-25"},{"lineNumber":234,"author":{"gitId":"rouvinerh"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":235,"author":{"gitId":"JustinSoh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"JustinSoh":126,"rouvinerh":103,"L5-Z":6}},{"path":"src/test/java/workouts/WorkoutTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rouvinerh"},"content":"package workouts;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rouvinerh"},"content":"class WorkoutTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":4,"author":{"gitId":"rouvinerh"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"rouvinerh"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"rouvinerh":5}}]
