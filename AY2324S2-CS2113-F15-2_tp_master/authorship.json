[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"    mainClass.set(\"seedu.lifetrack.LifeTrack\")","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"    archiveBaseName.set(\"lifetrack\")","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"rexyyong":2,"-":44,"paturikarthik":1}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display |      Name      |               Github Profile               | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"--------|:--------------:|:------------------------------------------:|:---------:","lastModifiedDate":"2024-03-08"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"![](https://avatars.githubusercontent.com/u/64789669?v\u003d4) | Paturi Karthik | [Github](https://github.com/paturikarthik) | [Portfolio](docs/team/paturikarthik.md)","lastModifiedDate":"2024-03-08"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"![](https://avatars.githubusercontent.com/u/110764881?s\u003d400\u0026u\u003df41e3f40315f394bd71538063882c06bcfa2b624\u0026v\u003d4) | Shawn Pong | [Github](https://github.com/shawnpong) | [Portfolio](docs/team/shawnpong.md)","lastModifiedDate":"2024-03-08"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"![](https://drive.google.com/file/d/1BM0lQP13brp_vlVJsgHYzQHSWaREHrnP/view?usp\u003ddrive_link) | Rex Yong Jin Xiang | [Github](https://github.com/rexyyong) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2024-03-08"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yanyu | [Github](https://github.com/a-wild-chocolate/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"rexyyong":1,"a-wild-chocolate":1,"shawnpong":1,"-":3,"paturikarthik":2}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"# LifeTrack","lastModifiedDate":"2024-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"{Give product intro here}","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"-":6,"paturikarthik":1}},{"path":"docs/team/paturikarthik.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"# Paturi Karthik - Project Portfolio Page","lastModifiedDate":"2024-03-08"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"## Overview","lastModifiedDate":"2024-03-08"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"Hello","lastModifiedDate":"2024-03-08"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"### Summary of Contributions","lastModifiedDate":"2024-03-08"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"Hello","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"paturikarthik":7}},{"path":"docs/team/shawnpong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"this is my profile :D","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"shawnpong":1}},{"path":"src/main/java/seedu/lifetrack/LifeTrack.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.liquids.liquidlist.LiquidList;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.ui.Ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-11"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"public class LifeTrack {","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"     * Main entry-point for the java.lifetrack.LifeTrack application.","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2024-03-14"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"        Ui.sayHello();","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"        Ui.readUserInput(calorieList,liquidList);","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"        Ui.byeMessage();","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"rexyyong":3,"owx0130":3,"shawnpong":3,"paturikarthik":14}},{"path":"src/main/java/seedu/lifetrack/calories/Activity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.calories;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"public class Activity {","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"    public Activity(){","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"owx0130":8}},{"path":"src/main/java/seedu/lifetrack/calories/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.calories;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"public class Food {","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"    private int carbohydrates;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"    private int proteins;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    private int fats;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"    public Food(int carbohydrates, int proteins, int fats) {","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"        this.carbohydrates \u003d carbohydrates;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"owx0130":14}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/CalorieList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.parser.ParserCalories.parseCaloriesInput;","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.CalorieListUi.emptyListMessage;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.CalorieListUi.successfulDeletedMessage;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.CalorieListUi.printNewCalorieEntry;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.CalorieListUi.calorieListHeader;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-19"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"public class CalorieList {","lastModifiedDate":"2024-03-11"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"    private static Logger logr \u003d Logger.getLogger(CalorieList.class.getName());","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"    private ArrayList\u003cEntry\u003e calorieArrayList;","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    private final int SIZE_OF_DELETE \u003d 16;","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    public CalorieList() {","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"        calorieArrayList\u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"    public Entry getEntry(int index) {","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"        return calorieArrayList.get(index);","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"     * Index should be in an integer from 1 to size of the list.","lastModifiedDate":"2024-03-11"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"     * @param line the string containing the index of calorie record user want to delete","lastModifiedDate":"2024-03-15"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    public void deleteEntry(String line) {","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"        assert (line.startsWith(\"calories delete\") ) : \"ensures that input is correct\";","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-11"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"            int index \u003d Integer.parseInt(line.substring(SIZE_OF_DELETE).trim());","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"            Entry toDelete \u003d calorieArrayList.get(index-1);","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"            calorieArrayList.remove((index-1));  // transfer to scope 0 to size-1","lastModifiedDate":"2024-03-13"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"            successfulDeletedMessage(toDelete);","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-13"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"            logr.log(Level.WARNING, \"Sorry, this index is invalid. Please enter a positive integer \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"                    \"within the size of the list.\", e);","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-19"},{"lineNumber":41,"author":{"gitId":"a-wild-chocolate"},"content":"            logr.log(Level.WARNING, \"Please enter a valid index!\", e);","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"     * Parses a string input representing calorie intake and adds it to the calorie list.","lastModifiedDate":"2024-03-13"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"     * This method takes a string input representing calorie intake information and","lastModifiedDate":"2024-03-13"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"     * attempts to parse it using the parseCaloriesIn method from the Parser class.","lastModifiedDate":"2024-03-13"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"     * If the input format is incorrect or contains missing components, it catches","lastModifiedDate":"2024-03-13"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"     * the InvalidInputException and prints an error message. Otherwise, it adds","lastModifiedDate":"2024-03-13"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"     * the parsed Entry object to the calorieArrayList.","lastModifiedDate":"2024-03-13"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"     * @param input the input string containing date, time, activity, and calorie count","lastModifiedDate":"2024-03-13"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"    public void addEntry(String input) {","lastModifiedDate":"2024-03-14"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"        assert (input.startsWith(\"calories in\") || input.startsWith(\"calories out\")) : \"ensures that input is correct\";","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"        logr.setLevel(Level.WARNING);","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-13"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"            Entry newEntry \u003d parseCaloriesInput(input);","lastModifiedDate":"2024-03-15"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"            calorieArrayList.add(newEntry);","lastModifiedDate":"2024-03-13"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"            printNewCalorieEntry(newEntry);","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-13"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"            logr.log(Level.WARNING, e.getMessage(), e);","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"     * Prints the list of calorie entries along with its activity description.","lastModifiedDate":"2024-03-14"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"     * If the list is empty, it prints a message indicating that the list is empty.","lastModifiedDate":"2024-03-14"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"     * Otherwise, it prints each entry\u0027s activity description and calorie count.","lastModifiedDate":"2024-03-14"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"    public void printCalorieList() {","lastModifiedDate":"2024-03-14"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"        if (calorieArrayList.isEmpty()) {","lastModifiedDate":"2024-03-14"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"            emptyListMessage();","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-03-14"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"            calorieListHeader();","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"            for (int i \u003d 0; i \u003c calorieArrayList.size(); i++) {","lastModifiedDate":"2024-03-14"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"                System.out.println(\"\\t \" + (i + 1) + \". \" + calorieArrayList.get(i).toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-03-14"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"    public int getSize() {","lastModifiedDate":"2024-03-14"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"        return calorieArrayList.size();","lastModifiedDate":"2024-03-14"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"rexyyong":23,"a-wild-chocolate":19,"owx0130":8,"shawnpong":12,"paturikarthik":25}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/Entry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"public abstract class Entry {","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"    private String description;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"    private int calories;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    private String date;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"    public Entry(String description, int calories, String date){","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    public String getDescription() {","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"        return description;","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    public int getCalories() {","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"        return calories;","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    public String getDate() {","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"        return date;","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    public String toString() {","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"        return String.format(\"\\t Date: \" + date + \", Description: \" + description + \", Calories: \" + calories);","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"owx0130":20,"paturikarthik":10}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/InputEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"public class InputEntry extends Entry {","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    private Food food;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"    public InputEntry(String description, int calories, String date) {","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"        super(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    public InputEntry(String description, int calories, String date, Food food) {","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"        super(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"        this.food \u003d food;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"owx0130":17}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/OutputEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Activity;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"public class OutputEntry extends Entry {","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    private Activity activity;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"    public OutputEntry(String description, int calories, String date) {","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"        super(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    public OutputEntry(String description, int calories, String date, Activity activity) {","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"        super(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"        this.activity \u003d activity;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"owx0130":17}},{"path":"src/main/java/seedu/lifetrack/liquids/Beverage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.liquids;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"public class Beverage {","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"    private String beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"    private int volume;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"    public Beverage(String beverage, int volume){","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"        this.beverage \u003d beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"        this.volume \u003d volume;","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"    public String getBeverage() {","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"        return beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"    public int getVolume() {","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"        return volume;","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"owx0130":1,"shawnpong":19}},{"path":"src/main/java/seedu/lifetrack/liquids/Liquid.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack.liquids;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"public class Liquid {","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"    private int liquids;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"    private String beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"    public Liquid (int liquids, String beverage){","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"        this.liquids \u003d liquids;","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"        this.beverage \u003d beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"    public int getVolume() {","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"        return liquids;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"    public String getBeverage() {","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"        return beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"shawnpong":20}},{"path":"src/main/java/seedu/lifetrack/liquids/liquidlist/LiquidEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack.liquids.liquidlist;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.liquids.Beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"public class LiquidEntry {","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"    private Beverage beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"    public LiquidEntry(Beverage beverage){","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"        this.beverage\u003d beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"    public Beverage getBeverage() {","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"        return beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"owx0130":3,"shawnpong":13}},{"path":"src/main/java/seedu/lifetrack/liquids/liquidlist/LiquidList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack.liquids.liquidlist;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.liquids.Beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.system.parser.ParserLiquid;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":" * Represents a list of liquid entries.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":" * Provides methods to add, delete, and print liquid entries.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"public class LiquidList {","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"    private static Logger logr \u003d Logger.getLogger(CalorieList.class.getName());","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"    private ArrayList\u003cLiquidEntry\u003e liquidArrayList;","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"    private final int SIZE_OF_DELETE \u003d 15;","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"     * Constructs an empty LiquidList.","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"    public LiquidList() {","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"        liquidArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the liquid entry at the specified index.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"     * @param index the index of the liquid entry to retrieve","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"     * @return the liquid entry at the specified index","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    public LiquidEntry getEntry(int index) {","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c liquidArrayList.size() : \"Index out of bounds\";","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"        return liquidArrayList.get(index);","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"     * Deletes the liquid entry indicated by the provided line.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"     * @param line the string containing the index of the liquid record to delete","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"    public void deleteEntry(String line) {","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"            int index \u003d Integer.parseInt(line.substring(SIZE_OF_DELETE).trim());","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"            liquidArrayList.remove(index - 1);","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(\"\\t Successfully delete the liquid record.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"            logr.log(Level.WARNING, \"Sorry, this index is invalid. Please enter a positive integer \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"                    \"within the size of the list.\", e);","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"            logr.log(Level.WARNING, \"Please enter a valid index!\", e);","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"     * Adds a new liquid entry based on the provided input.","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"     * @param input the input string containing liquid entry information","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"    public void addEntry(String input) {","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"            LiquidEntry newEntry \u003d ParserLiquid.parseLiquidInput(input);","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"            liquidArrayList.add(newEntry);","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"            System.out.println(\"Beverage has been successfully added\");","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"            logr.log(Level.WARNING, e.getMessage(), e);","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"     * Prints the list of liquid entries.","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"     * If the list is empty, prints a message indicating that the list is empty.","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"    public void printLiquidList() {","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"        if (liquidArrayList.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(\"\\t Your liquid list is empty.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(\"\\t Liquid List:\");","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"            for (int i \u003d 0; i \u003c liquidArrayList.size(); i++) {","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"                LiquidEntry entry \u003d liquidArrayList.get(i);","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"                Beverage beverage \u003d entry.getBeverage();","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"paturikarthik"},"content":"                System.out.println(\"\\t \" + (i + 1) + \". Beverage: \" + beverage.getBeverage()","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"                        + \", Volume: \" + beverage.getVolume());","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the size of the liquid list.","lastModifiedDate":"2024-03-20"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"     * @return the number of liquid entries in the list","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"    public int getSize() {","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"        return liquidArrayList.size();","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":1,"a-wild-chocolate":9,"owx0130":4,"shawnpong":80,"paturikarthik":4}},{"path":"src/main/java/seedu/lifetrack/system/exceptions/ErrorMessages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.system.exceptions;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"public class ErrorMessages {","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"    public static void printIndexOutOfBoundsError(){","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Sorry, this index is invalid. Please enter a positive integer \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"                \"within the size of the list.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"    public static void printNumberFormatError(){","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Please enter a valid number within the command\");","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"paturikarthik":13}},{"path":"src/main/java/seedu/lifetrack/system/exceptions/InvalidInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.system.exceptions;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"    public InvalidInputException(){","lastModifiedDate":"2024-03-13"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"        super(\"\\t Please ensure that you have keyed in the correct format!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"    public InvalidInputException(String exception) {","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"        super(exception);","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"rexyyong":5,"owx0130":1,"paturikarthik":8}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserCalories.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.Entry;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Activity;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"public class ParserCalories {","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"    private static final int CARBS_IDX \u003d 0;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    private static final int PROTEINS_IDX \u003d 1;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    private static final int FATS_IDX \u003d 2;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"    private static final int CALORIES_OUT_PADDING \u003d 12;","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"     * Parses a string input to create an Entry object representing calorie intake.","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"     * This method expects the input string to follow a specific format, where the","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"     * description, calorie count, date and macronutrients are separated by the","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"     * delimiters \u0027desc/\u0027, \u0027c/\u0027, \u0027date/\u0027, and \u0027m/\u0027. The method extracts these components","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"     * and creates either an InputEntry or OutputEntry object depending on the user command.","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"     * If required inputs are missing or empty, an InvalidInputException is thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"     * @param input the input string to be parsed, containing date, time, activity,","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"     *              and calorie count information","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"     * @return an Entry object representing calorie intake","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"     * @throws InvalidInputException if the input string is missing components or contains empty fields","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    public static Entry parseCaloriesInput(String input) throws InvalidInputException {","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"        int caloriesIndex \u003d input.indexOf(\"c/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"        int dateIndex \u003d input.indexOf(\"date/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"        int macrosIndex \u003d input.indexOf(\"m/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"        checkKeywordsExist(caloriesIndex, dateIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"        assert caloriesIndex !\u003d -1 : \"The c/ keyword should exist!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"        assert dateIndex !\u003d -1 : \"The date/ keyword should exist!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        checkKeywordsCorrectlyOrdered(caloriesIndex, dateIndex, macrosIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        assert caloriesIndex \u003c dateIndex : \"The c/ keyword must appear before date/ in the input!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"        //extract command, description, calories, date from input","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"        String[] parts \u003d input.split(\"c/|date/|m/\");","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"        String command \u003d parts[0].substring(0, CALORIES_OUT_PADDING).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"        String description \u003d getDescriptionFromInput(input, command, caloriesIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"        String strCalories \u003d parts[1].trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"        String date \u003d parts[2].trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"        ","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        checkInputsAreNonEmpty(description, strCalories, date);","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"        assert description !\u003d \"\" : \"The description field should be a non-empty string!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"        assert strCalories !\u003d \"\" : \"The calories field should be a non-empty string!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"        assert date !\u003d \"\" : \"The date field should be a non-empty string!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"        //extract macronutrients if user provided it in their input, otherwise initialise it as null","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"        int[] macros \u003d null;","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"        if (macrosIndex !\u003d -1) {","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"            if (command.equals(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"                throw new InvalidInputException(\"Invalid input exception: Calorie output entry cannot have macros\");","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"            String macroString \u003d parts[3].trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"            try {","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"                macros \u003d getMacrosFromInput(macroString);","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"            } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"                throw new InvalidInputException(e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"        //convert calories from string to integer","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"        int calories \u003d getIntegerCaloriesFromInput(strCalories);","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"        checkCaloriesIsPositiveInteger(calories);","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"        assert calories \u003e 0 : \"Calories value must be a positive integer!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"rexyyong"},"content":"        if (command.equals(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"            return makeNewOutputEntry(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"        } else if (macros \u003d\u003d null) {","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"            return makeNewInputEntry(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"            return makeNewInputEntry(description, calories, date, macros);","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"    private static int getIntegerCaloriesFromInput(String strCalories) {","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"        int calories \u003d 0;","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"            calories \u003d Integer.parseInt(strCalories);","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"            System.out.println(\"Please input only positive integers into the calories field!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"        return calories;","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"    private static String getDescriptionFromInput(String inputString, String command, int caloriesIndex) {","lastModifiedDate":"2024-03-21"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"        String description;","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"        if (command.equals(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"            description \u003d inputString.substring(CALORIES_OUT_PADDING, caloriesIndex).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"owx0130"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"            command \u003d inputString.substring(0, CALORIES_OUT_PADDING - 1).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"            description \u003d inputString.substring(CALORIES_OUT_PADDING - 1, caloriesIndex).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"owx0130"},"content":"        return description;","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"    private static int[] getMacrosFromInput(String macroString) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"        int[] macros \u003d new int[3];","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"            String[] macroParts \u003d macroString.split(\",\");","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"            int idx \u003d 0;","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"            for (String macro: macroParts) {","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"                //throw exception if user inputs whitespace in the macros field i.e. m/123, ,123","lastModifiedDate":"2024-03-21"},{"lineNumber":111,"author":{"gitId":"rexyyong"},"content":"                if (macro.trim().isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"rexyyong"},"content":"                    throw new InvalidInputException(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"rexyyong"},"content":"                            \"Please ensure that all macronutrients fields are filled up. \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":114,"author":{"gitId":"rexyyong"},"content":"                            \"For example: ....... m/CARBS_INT, PROTEIN_INT, FATS_INT\");","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"rexyyong"},"content":"                }","lastModifiedDate":"2024-03-21"},{"lineNumber":116,"author":{"gitId":"rexyyong"},"content":"                macros[idx] \u003d Integer.parseInt(macro.trim());","lastModifiedDate":"2024-03-21"},{"lineNumber":117,"author":{"gitId":"owx0130"},"content":"                idx++;","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"owx0130"},"content":"            //throw exception if there are missing values in the macros field","lastModifiedDate":"2024-03-21"},{"lineNumber":120,"author":{"gitId":"rexyyong"},"content":"            if (idx !\u003d 3) {","lastModifiedDate":"2024-03-21"},{"lineNumber":121,"author":{"gitId":"rexyyong"},"content":"                throw new InvalidInputException(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":122,"author":{"gitId":"rexyyong"},"content":"                        \"Please ensure that all macronutrients fields are filled up. \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":123,"author":{"gitId":"rexyyong"},"content":"                        \"For example: ....... m/CARBS_INT, PROTEIN_INT, FATS_INT\");","lastModifiedDate":"2024-03-21"},{"lineNumber":124,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":125,"author":{"gitId":"owx0130"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":126,"author":{"gitId":"owx0130"},"content":"            System.out.println(\"Please input only numbers into the macronutrients field!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":128,"author":{"gitId":"owx0130"},"content":"        return macros;","lastModifiedDate":"2024-03-20"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":130,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"owx0130"},"content":"    private static void checkCaloriesIsPositiveInteger(int calories) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":132,"author":{"gitId":"owx0130"},"content":"        if (calories \u003c\u003d 0) {","lastModifiedDate":"2024-03-21"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(\"Please input only positive integers into the calories field!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":134,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":137,"author":{"gitId":"owx0130"},"content":"    private static void checkInputsAreNonEmpty(String description, String strCalories, String date)","lastModifiedDate":"2024-03-21"},{"lineNumber":138,"author":{"gitId":"owx0130"},"content":"            throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":139,"author":{"gitId":"owx0130"},"content":"        //check if the description, calories or date fields are empty","lastModifiedDate":"2024-03-21"},{"lineNumber":140,"author":{"gitId":"owx0130"},"content":"        if (description.isEmpty() || strCalories.isEmpty() || date.isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":141,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(\"Please ensure that input parameters are not empty!\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":142,"author":{"gitId":"owx0130"},"content":"                    \"Example input: \" + \"calories in DESCRIPTION c/INTEGER_CALORIES date/DATE\");","lastModifiedDate":"2024-03-21"},{"lineNumber":143,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":144,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":145,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":146,"author":{"gitId":"owx0130"},"content":"    private static void checkKeywordsExist(int caloriesIndex, int dateIndex) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":147,"author":{"gitId":"owx0130"},"content":"        //check that c/ and date/ keywords exist in the input, else throw exception","lastModifiedDate":"2024-03-21"},{"lineNumber":148,"author":{"gitId":"owx0130"},"content":"        if (caloriesIndex \u003d\u003d -1 || dateIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-21"},{"lineNumber":149,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(\"\\t Invalid input! \\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":150,"author":{"gitId":"owx0130"},"content":"            \"\\t Please ensure that you have keyed in the correct format\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":151,"author":{"gitId":"owx0130"},"content":"            \" in the correct order!\\n\" + \"\\t Example input: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":152,"author":{"gitId":"owx0130"},"content":"            \"calories in DESCRIPTION c/INTEGER_CALORIES date/DATE m/MACROS\");","lastModifiedDate":"2024-03-21"},{"lineNumber":153,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":154,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":155,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":156,"author":{"gitId":"owx0130"},"content":"    private static void checkKeywordsCorrectlyOrdered(int caloriesIndex, int dateIndex, int macrosIndex)","lastModifiedDate":"2024-03-21"},{"lineNumber":157,"author":{"gitId":"owx0130"},"content":"            throws InvalidInputException {        ","lastModifiedDate":"2024-03-21"},{"lineNumber":158,"author":{"gitId":"owx0130"},"content":"        if ((macrosIndex !\u003d -1 \u0026\u0026 !(caloriesIndex \u003c dateIndex \u0026\u0026 dateIndex \u003c macrosIndex)) ||","lastModifiedDate":"2024-03-21"},{"lineNumber":159,"author":{"gitId":"owx0130"},"content":"                (macrosIndex \u003d\u003d -1 \u0026\u0026 !(caloriesIndex \u003c dateIndex))) {","lastModifiedDate":"2024-03-21"},{"lineNumber":160,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(\"\\t Invalid input! \\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":161,"author":{"gitId":"owx0130"},"content":"            \"\\t Please ensure that you have keyed in the correct format\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":162,"author":{"gitId":"owx0130"},"content":"            \" in the correct order!\\n\" + \"\\t Example input: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":163,"author":{"gitId":"owx0130"},"content":"            \"calories in DESCRIPTION c/INTEGER_CALORIES date/DATE m/MACROS\");","lastModifiedDate":"2024-03-21"},{"lineNumber":164,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":165,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":166,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":167,"author":{"gitId":"owx0130"},"content":"    private static Entry makeNewOutputEntry(String description, int calories, String date) {","lastModifiedDate":"2024-03-20"},{"lineNumber":168,"author":{"gitId":"owx0130"},"content":"        Activity newActivity \u003d new Activity();","lastModifiedDate":"2024-03-20"},{"lineNumber":169,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":170,"author":{"gitId":"owx0130"},"content":"        return new OutputEntry(description, calories, date, newActivity);","lastModifiedDate":"2024-03-20"},{"lineNumber":171,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":172,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":173,"author":{"gitId":"owx0130"},"content":"    private static Entry makeNewInputEntry(String description, int calories, String date) {","lastModifiedDate":"2024-03-20"},{"lineNumber":174,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":175,"author":{"gitId":"owx0130"},"content":"        return new InputEntry(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":176,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":177,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":178,"author":{"gitId":"owx0130"},"content":"    private static Entry makeNewInputEntry(String description, int calories, String date, int[] foodMacros) {","lastModifiedDate":"2024-03-20"},{"lineNumber":179,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":180,"author":{"gitId":"owx0130"},"content":"        Food newFood \u003d new Food(foodMacros[CARBS_IDX], foodMacros[PROTEINS_IDX], foodMacros[FATS_IDX]);","lastModifiedDate":"2024-03-20"},{"lineNumber":181,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":182,"author":{"gitId":"owx0130"},"content":"        return new InputEntry(description, calories, date, newFood);","lastModifiedDate":"2024-03-20"},{"lineNumber":183,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":184,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":24,"owx0130":160}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserLiquid.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.liquids.Beverage;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.liquids.liquidlist.LiquidEntry;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"public class ParserLiquid {","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"     * Parses a string input to create a Liquid object representing liquid intake.","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"     * This method expects the input string to follow a specific format, where the","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"     * beverage name and quantity are separated by the delimiters \u0027b/\u0027 and \u0027v/\u0027.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"     * The method extracts these components and creates a Liquid object.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"     * If any part of the input is missing or empty, an InvalidInputException is thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"     * @param input the input string to be parsed, containing beverage name and quantity","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"     * @return a Liquid object representing liquid intake","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if the input string is missing components or","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"     *                              contains empty fields","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    public static LiquidEntry parseLiquidInput(String input) throws InvalidInputException {","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"        //get index for b/ and  v/ inputs","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"        int beverageIndex \u003d input.indexOf(\"b/\");","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"        int volumeIndex \u003d input.indexOf(\"v/\");","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"        // Handle exception when b/ or v/ not entered","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"        if (beverageIndex \u003d\u003d -1 || volumeIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"                \"Please ensure that you have entered b/ and v/\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"                \"For example: liquids in b/Milo v/1000\");","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"        assert (beverageIndex !\u003d -1 || volumeIndex !\u003d -1) : \"ensures that beverage and volume has been keyed in\";","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"        //Handle exception when order of b/ and v/ is incorrect","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"        if (volumeIndex \u003c beverageIndex) {","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"                    \"Please ensure that you have entered b/ before v/\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"                    \"For example: liquids in b/Milo v/1000\");","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"        // splits string according to b/ and v/ keywords","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"        String[] parts \u003d input.split(\"b/|v/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"        // parts length less than 3 means that not all split keywords were keyed in","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"        if (parts.length \u003c 3) {","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(\"Please ensure that you have keyed in the correct format!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"        // extracts beverage name and quantity portion from input","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"        String beverageName \u003d parts[1].trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"        String strVolume \u003d parts[2].trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"        // ensures that both inputs are not empty","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"        if (beverageName.isEmpty() || strVolume.isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(\"Please ensure that you have keyed in the correct format!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"        int volume;","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"        // Handle exception when non integer values are keyed in for volume","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"            volume \u003d Integer.parseInt(strVolume);","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"        } catch(NumberFormatException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(\"Invalid input Exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"                    \"Please enter a positive integer value for volume\");","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"rexyyong"},"content":"        // Handle exception when negative values are keyed in for volume","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"        if (volume \u003c\u003d 0) {","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(\"Invalid input Exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"rexyyong"},"content":"                    \"Please enter a positive integer value for volume\");","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"rexyyong"},"content":"        return getNewLiquidEntry(volume, beverageName);","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"rexyyong"},"content":"    private static LiquidEntry getNewLiquidEntry(int volume, String name) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"        //create objects for Beverage","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"        Beverage liquidToAdd \u003d new Beverage(name, volume);","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"        //create Object Entry to be returned","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"        return new LiquidEntry(liquidToAdd);","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":41,"owx0130":4,"shawnpong":39}},{"path":"src/main/java/seedu/lifetrack/ui/CalorieListUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.Entry;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"public class CalorieListUi {","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"    public static void successfulDeletedMessage(Entry toDelete) {","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t The following calorie record has been successfully deleted!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t \" + toDelete.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"    public static void emptyListMessage() {","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Your caloric list is empty. Add new entries to populate your list :)\");","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"    public static void calorieListHeader() {","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Your Caloric List:\");","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewCalorieEntry(Entry newEntry) {","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t The following entry has been added to your caloric list!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t \" + newEntry.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"paturikarthik":25}},{"path":"src/main/java/seedu/lifetrack/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.liquids.liquidlist.LiquidList;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":" * Reads user input from the console and processes it.","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-03-15"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":" * This method continuously reads input from the console until the user","lastModifiedDate":"2024-03-13"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":" * inputs \"bye\". For each input line, it checks if it\u0027s empty and prompts","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":" * the user to enter a non-empty input if it is. If the input line starts","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":" * with \"calories in\", it attempts to parse the input as calorie intake","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":" * information using the calorieIn method from the CalorieList class.","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"public class Ui {","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    private static final String WHITESPACE \u003d \"         \";","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"    private static final String logo \u003d","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"            \"\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"                    \".____    .__  _____        ___________                     __\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"                    \"|    |   |__|/ ____\\\\____   \\\\__    ___/___________    ____ |  | __\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"                    \"|    |   |  \\\\   __\\\\/ __ \\\\    |    |  \\\\_  __ \\\\__  \\\\ _/ ___\\\\|  |/ /\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"                    \"|    |___|  ||  | \\\\  ___/    |    |   |  | \\\\// __ \\\\\\\\  \\\\___|    \u003c\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"                    \"|_______ \\\\__||__|  \\\\___  \u003e   |____|   |__|  (____  /\\\\___  \u003e__|_ \\\\\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"                    \"        \\\\/             \\\\/                        \\\\/     \\\\/     \\\\/\\n\";","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"    public static void readUserInput(CalorieList calorieList, LiquidList liquidList) {","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"        String line;","lastModifiedDate":"2024-03-13"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"        do {","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"            line \u003d new Scanner(System.in).nextLine();","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"            handleUserInput(line, calorieList, liquidList);","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"        } while (!line.equalsIgnoreCase(\"bye\"));","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"    public static void handleCaloriesInput(String line, CalorieList calorieList) {","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"        assert !line.startsWith(\"bye\") : \"exit the app\";","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"        if (line.startsWith(\"calories in\") || line.startsWith(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"            calorieList.addEntry(line);","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"calories list\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"            calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"calories delete\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"            calorieList.deleteEntry(line);","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"            handleUnknownInput();","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"    public static void handleLiquidsInput(String line, LiquidList liquidsList) {","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"        assert !line.startsWith(\"bye\") : \"exit the app\";","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"        if (line.startsWith(\"liquids in\") || line.startsWith(\"liquids out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"            liquidsList.addEntry(line);","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"liquids list\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"            liquidsList.printLiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"liquids delete\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"            liquidsList.deleteEntry(line);","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"            handleUnknownInput();","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"    public static void handleUserInput(String line, CalorieList calorieList, LiquidList liquidList) {","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"        if (!line.startsWith(\"bye\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"            printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"            line \u003d line.trim().toLowerCase();","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"            if (line.isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"                printEmptyInputMessage();","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"calories\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"                handleCaloriesInput(line, calorieList);","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"help\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"                showHelp();","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"liquids\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"                handleLiquidsInput(line, liquidList);","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"            } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"                handleUnknownInput();","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"            printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":81,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"    public static void sayHello() {","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"        System.out.println(WHITESPACE + \"Hello from\\n\\n\" + logo);","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"        System.out.println(WHITESPACE + \"How can I help you today?\");","lastModifiedDate":"2024-03-21"},{"lineNumber":86,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"paturikarthik"},"content":"    public static void byeMessage() {","lastModifiedDate":"2024-03-15"},{"lineNumber":90,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"        System.out.println(WHITESPACE + \"Bye! See you again soon ^^\");","lastModifiedDate":"2024-03-21"},{"lineNumber":92,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":93,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":94,"author":{"gitId":"paturikarthik"},"content":"    public static void printEmptyInputMessage() {","lastModifiedDate":"2024-03-15"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Please enter a non-empty input!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":98,"author":{"gitId":"paturikarthik"},"content":"    public static void printLine() {","lastModifiedDate":"2024-03-15"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"        System.out.println(WHITESPACE + \"-------------------------------------\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"                \"----------------------------------------\");","lastModifiedDate":"2024-03-21"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"paturikarthik"},"content":"    public static void handleUnknownInput() {","lastModifiedDate":"2024-03-21"},{"lineNumber":104,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Oops! I\u0027ve never seen this input before...\");","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t If you are unsure of the commands, use the help command for a quick recap :)\");","lastModifiedDate":"2024-03-21"},{"lineNumber":106,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"    public static void showHelp() {","lastModifiedDate":"2024-03-21"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t LifeTrack Command List:\");","lastModifiedDate":"2024-03-21"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - help: Displays a list of available commands and their descriptions.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories in/out \u003cactivity\u003e c/\u003cnumber of calories\u003e d/\u003cdate\u003e: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"paturikarthik"},"content":"                \"Adds a calorie gaining/burning entry into the calories tracker.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":114,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories list: Displays all entries currently stored in the calorie list.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories delete \u003cindex\u003e: Deletes the entry at the specified index\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"                \" from the calorie list.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - liquids in b/\u003ctype of beverage\u003e v/\u003cvolume\u003e : \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"                \"Marks the task at the specified index as done.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - liquids list: Displays all entries currently stored in the hydration list.\\\"\");","lastModifiedDate":"2024-03-21"},{"lineNumber":120,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"rexyyong":20,"owx0130":7,"paturikarthik":94}},{"path":"src/test/java/seedu/lifetrack/CalorieListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-19"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.Entry;","lastModifiedDate":"2024-03-19"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"public class CalorieListTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    private final String addedEntryHeader \u003d \"\\t The following entry has been added to your caloric list!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"    public void addEntry_validInput_entryAdded() {","lastModifiedDate":"2024-03-15"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"        // Test setup","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"        String validInputCalorieIn \u003d \"calories in Eat burger c/369 date/2024-03-14\";","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"        String validInputCalorieOut \u003d \"calories out run c/679 date/2024-03-15\";","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"        // Call method to test","lastModifiedDate":"2024-03-14"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"        calorieList.addEntry(validInputCalorieIn);","lastModifiedDate":"2024-03-15"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"        calorieList.addEntry(validInputCalorieOut);","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"        // Verify that the entry has been added to the list","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"        assertEquals(2, calorieList.getSize());","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"        Entry firstEntry \u003d calorieList.getEntry(0);","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"        Entry secondEntry \u003d calorieList.getEntry(1);","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"        // Check calories intake entry","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"        assertEquals(\"2024-03-14\", firstEntry.getDate());","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"        assertEquals(\"Eat burger\", firstEntry.getDescription());","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"        assertEquals(369, firstEntry.getCalories());","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"        // Check calories outflow entry","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"        assertEquals(\"2024-03-15\", secondEntry.getDate());","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"        assertEquals(\"run\", secondEntry.getDescription());","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        assertEquals(679, secondEntry.getCalories());","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author a-wild-chocolate","lastModifiedDate":"2024-03-22"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteCalorieValidIndex() {","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories out Run c/200 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d calorieList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete 1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize - 1, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories out Run c/200 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories in Eat c/200 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"        initialSize \u003d calorieList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete 2\");","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize - 1, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteCalorieInvalidIndex() {","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories out Run c/200 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d calorieList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete 2\"); // Index out of bounds","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete -1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"    //@@author shawnpong","lastModifiedDate":"2024-03-22"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"    public void testPrintCalorieListEmpty() {","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t Your caloric list is empty. \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"                \"Add new entries to populate your list :)\" + lineSeparator;","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"    public void testPrintCalorieListNonEmpty() {","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in Run c/200 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d addedEntryHeader + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"                \"\\t \" + calorieList.getEntry(0).toString() + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Caloric List:\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. \\t Date: 2024-03-14, Description: Run, Calories: 200\" + lineSeparator;","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"    public void testPrintCalorieListMultipleEntries() {","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in Run c/200 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Walk c/150 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in Eat c/500 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Run c/250 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in Eat c/300 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"        StringBuilder expectedOutput \u003d new StringBuilder();","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"            expectedOutput.append(addedEntryHeader)","lastModifiedDate":"2024-03-21"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator).append(\"\\t \").append(calorieList.getEntry(i).toString())","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator);","lastModifiedDate":"2024-03-21"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"        expectedOutput.append(\"\\t Your Caloric List:\")","lastModifiedDate":"2024-03-21"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t Date: 2024-03-14, Description: Run, Calories: 200\")","lastModifiedDate":"2024-03-21"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 2. \\t Date: 2024-03-14, Description: Walk, Calories: 150\")","lastModifiedDate":"2024-03-21"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 3. \\t Date: 2024-03-14, Description: Eat, Calories: 500\")","lastModifiedDate":"2024-03-21"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 4. \\t Date: 2024-03-14, Description: Run, Calories: 250\")","lastModifiedDate":"2024-03-21"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 5. \\t Date: 2024-03-14, Description: Eat, Calories: 300\")","lastModifiedDate":"2024-03-21"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator);","lastModifiedDate":"2024-03-21"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput.toString(), outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"        assertEquals(5, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"rexyyong":26,"a-wild-chocolate":25,"owx0130":14,"shawnpong":65,"paturikarthik":2}},{"path":"src/test/java/seedu/lifetrack/LiquidListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"//@@author shawnpong","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.liquids.liquidlist.LiquidList;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"public class LiquidListTest {","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteLiquidValidIndex() {","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"        liquidList.addEntry(\"liquids in b/Milo v/200\");","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d liquidList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"        liquidList.deleteEntry(\"delete liquids 1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize - 1, liquidList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteLiquidInvalidIndex() {","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"        liquidList.addEntry(\"liquids in b/Milo v/200\");","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d liquidList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"        liquidList.deleteEntry(\"delete liquids 2\"); // Index out of bounds","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"        liquidList.deleteEntry(\"delete liquids -1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize, liquidList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"    public void testPrintLiquidListEmpty() {","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"        liquidList.printLiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t Your liquid list is empty.\" + lineSeparator;","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"    public void testPrintLiquidListNonEmpty() {","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"        liquidList.addEntry(\"liquids in b/Milo v/200\");","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"        liquidList.printLiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"Beverage has been successfully added\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"                \"\\t Liquid List:\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. Beverage: Milo, Volume: 200\" + lineSeparator;","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"    public void testPrintLiquidListMultipleEntries() {","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"        liquidList.addEntry(\"liquids in b/Milo v/200\");","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"        liquidList.addEntry(\"liquids in b/Water v/300\");","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"        liquidList.addEntry(\"liquids in b/Juice v/150\");","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"        liquidList.printLiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"Beverage has been successfully added\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"                \"Beverage has been successfully added\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"                \"Beverage has been successfully added\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"                \"\\t Liquid List:\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. Beverage: Milo, Volume: 200\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"                \"\\t 2. Beverage: Water, Volume: 300\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"                \"\\t 3. Beverage: Juice, Volume: 150\" + lineSeparator;","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"        assertEquals(3, liquidList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"    //@@author","lastModifiedDate":"2024-03-22"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"owx0130":1,"shawnpong":81}},{"path":"src/test/java/seedu/lifetrack/ParserCaloriesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.parser.ParserCalories.parseCaloriesInput;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"class ParserCaloriesTest {","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_missingKeywords_exceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in Running\");","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"            assertEquals(\"\\t Invalid input! \\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"                    \"\\t Please ensure that you have keyed in the correct format\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"                    \" in the correct order!\\n\" + \"\\t Example input: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"                    \"calories in DESCRIPTION c/INTEGER_CALORIES date/DATE m/MACROS\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incompleteInput_exceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in Running date/220224\");","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"            assertEquals(\"\\t Invalid input! \\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"                    \"\\t Please ensure that you have keyed in the correct format\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"                    \" in the correct order!\\n\" + \"\\t Example input: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"                    \"calories in DESCRIPTION c/INTEGER_CALORIES date/DATE m/MACROS\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incorrectlyOrderedInput_exceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in Running date/220224 c/123\");","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"            assertEquals(\"\\t Invalid input! \\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"                    \"\\t Please ensure that you have keyed in the correct format\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"                    \" in the correct order!\\n\" + \"\\t Example input: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"                    \"calories in DESCRIPTION c/INTEGER_CALORIES date/DATE m/MACROS\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"owx0130":46}},{"path":"src/test/java/seedu/lifetrack/ParserLiquidTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"//@@author rexyyong","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.liquids.liquidlist.LiquidEntry;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.liquids.liquidlist.LiquidList;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"import static seedu.lifetrack.system.parser.ParserLiquid.parseLiquidInput;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"public class ParserLiquidTest {","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"    public void parseLiquidInput_inputContains2Beverages_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in b/Milo b/1000\";","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"            LiquidEntry entry \u003d parseLiquidInput(invalidInput);","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"                    \"Please ensure that you have entered b/ and v/\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"                    \"For example: liquids in b/Milo v/1000\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"    public void parseLiquidInput_inputContains2Volumes_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in v/Milo v/1000\";","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"            LiquidEntry entry \u003d parseLiquidInput(invalidInput);","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"                    \"Please ensure that you have entered b/ and v/\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"                    \"For example: liquids in b/Milo v/1000\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"    public void parseLiquidInput_inputMissingBeverage_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in v/1000\";","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"            LiquidEntry entry \u003d parseLiquidInput(invalidInput);","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"                    \"Please ensure that you have entered b/ and v/\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"rexyyong"},"content":"                    \"For example: liquids in b/Milo v/1000\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"    public void parseLiquidInput_inputMissingVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in b/Milo\";","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"            LiquidEntry entry \u003d parseLiquidInput(invalidInput);","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"                    \"Please ensure that you have entered b/ and v/\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"rexyyong"},"content":"                    \"For example: liquids in b/Milo v/1000\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"rexyyong"},"content":"    public void parseLiquidInput_inputWrongOrderVolumeBeforeBeverage_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"rexyyong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in v/1000 b/milo\";","lastModifiedDate":"2024-03-21"},{"lineNumber":83,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":86,"author":{"gitId":"rexyyong"},"content":"            LiquidEntry entry \u003d parseLiquidInput(invalidInput);","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"rexyyong"},"content":"                    \"Please ensure that you have entered b/ before v/\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"rexyyong"},"content":"                    \"For example: liquids in b/Milo v/1000\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":92,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":94,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"rexyyong"},"content":"    public void parseLiquidInput_inputNonIntegerValueForVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"rexyyong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":98,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in b/Milo v/##s100\";","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":101,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"rexyyong"},"content":"            LiquidEntry entry \u003d parseLiquidInput(invalidInput);","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":104,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"Invalid input Exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"rexyyong"},"content":"                    \"Please enter a positive integer value for volume\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":106,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":107,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":110,"author":{"gitId":"rexyyong"},"content":"    public void parseLiquidInput_inputNegativeValueForVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":111,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"rexyyong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in b/Milo v/-1000\";","lastModifiedDate":"2024-03-21"},{"lineNumber":114,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":116,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":117,"author":{"gitId":"rexyyong"},"content":"            LiquidEntry entry \u003d parseLiquidInput(invalidInput);","lastModifiedDate":"2024-03-21"},{"lineNumber":118,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":119,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"Invalid input Exception: \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":120,"author":{"gitId":"rexyyong"},"content":"                    \"Please enter a positive integer value for volume\", e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":121,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":122,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":123,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"    //@@author shawnpong","lastModifiedDate":"2024-03-22"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"    public void parseLiquidInput_missingKeywords_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"            parseLiquidInput(\"liquids in\");","lastModifiedDate":"2024-03-22"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-22"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"                    \"Please ensure that you have entered b/ and v/\\n\" +","lastModifiedDate":"2024-03-22"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"                    \"For example: liquids in b/Milo v/1000\", e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"    public void parseLiquidInput_incompleteInput_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"            parseLiquidInput(\"liquids in b/Milo\");","lastModifiedDate":"2024-03-22"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":141,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"Invalid input exception: \" +","lastModifiedDate":"2024-03-22"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"                    \"Please ensure that you have entered b/ and v/\\n\" +","lastModifiedDate":"2024-03-22"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"                    \"For example: liquids in b/Milo v/1000\", e.getMessage());        }","lastModifiedDate":"2024-03-22"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"    //@@author","lastModifiedDate":"2024-03-22"},{"lineNumber":146,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"rexyyong":124,"shawnpong":22}},{"path":"src/test/java/seedu/lifetrack/UITest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-15"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.ui.Ui;","lastModifiedDate":"2024-03-15"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.liquids.liquidlist.LiquidList;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"public class UITest {","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-15"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-15"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"    public void setUpStreams() {","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"    @AfterEach","lastModifiedDate":"2024-03-15"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"    public void restoreStreams() {","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"    // Expect Empty String as function is exited","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    public void handleUserInput_inputBye_printByeMessage() {","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"        LiquidList liquidList \u003d new LiquidList();","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"bye\";","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"        Ui.handleUserInput(input, calorieList, liquidList);","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"        assertEquals(\"\", outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"owx0130":5,"shawnpong":2,"paturikarthik":31}}]
