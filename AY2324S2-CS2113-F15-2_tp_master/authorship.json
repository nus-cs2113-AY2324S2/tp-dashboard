[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"    mainClass.set(\"seedu.lifetrack.LifeTrack\")","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"    archiveBaseName.set(\"lifetrack\")","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"rexyyong":2,"-":44,"paturikarthik":1}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"|                                                   Display                                                   |        Name        |                 Github Profile                 |             Portfolio              |","lastModifiedDate":"2024-04-15"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"|:-----------------------------------------------------------------------------------------------------------:|:------------------:|:----------------------------------------------:|:----------------------------------:|","lastModifiedDate":"2024-04-15"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"|                          ![](https://avatars.githubusercontent.com/u/64789669?v\u003d4)                          |   Paturi Karthik   |   [Github](https://github.com/paturikarthik)   | [Portfolio](team/paturikarthik.md) |","lastModifiedDate":"2024-04-15"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"| ![](https://avatars.githubusercontent.com/u/110764881?s\u003d400\u0026u\u003df41e3f40315f394bd71538063882c06bcfa2b624\u0026v\u003d4) |     Shawn Pong     |     [Github](https://github.com/shawnpong)     |   [Portfolio](team/shawnpong.md)   |","lastModifiedDate":"2024-04-15"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"| ![](https://avatars.githubusercontent.com/u/76645229?s\u003d400\u0026u\u003d235aba3bc4b5de57d0a76e24506f094e28734637\u0026v\u003d4)  | Rex Yong Jin Xiang |     [Github](https://github.com/rexyyong)      |   [Portfolio](team/rexyyong.md)    |","lastModifiedDate":"2024-04-15"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"|                             ![](https://via.placeholder.com/100.png?text\u003dPhoto)                             |       Yanyu        | [Github](https://github.com/a-wild-chocolate/) |[Portfolio](team/a-wild-chocolate.md)|","lastModifiedDate":"2024-04-15"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"|                             ![](https://via.placeholder.com/100.png?text\u003dPhoto)                             |   Ong Wei Xiang    |      [GitHub](https://github.com/owx0130)      |    [Portfolio](team/owx0130.md)    |                                    |","lastModifiedDate":"2024-04-15"}],"authorContributionMap":{"owx0130":1,"-":2,"paturikarthik":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"## Quick links","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"* [Acknowledgements](#acknowledgements)","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"* [Design](#design)","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"  * [Calories Component](#calories-component)","lastModifiedDate":"2024-04-15"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"  * [Hydration Component](#hydration-component)","lastModifiedDate":"2024-04-15"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"  * [Sleep Component](#sleep-component)","lastModifiedDate":"2024-04-15"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"  * [User Component](#user-component)","lastModifiedDate":"2024-04-15"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"* [Implementation](#implementation)","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"  * [Adding calorie entries feature](#adding-calorie-entries-feature)","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"  * [Calculating calorie requirements based on user\u0027s goals](#calculating-calorie-requirements-based-on-a-users-goals)","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"  * [Calories list feature](#calories-list-feature)","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"  * [Calories delete feature](#calories-delete-feature)","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"  * [Parsing user input for hydration entries](#parsing-user-input-for-hydration-entries)","lastModifiedDate":"2024-04-11"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"  * [Calculating hydration requirements for each user](#calculating-hydration-requirements-for-each-user)","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"  * [Hydration list feature](#hydration-list-feature)","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"  * [Hydration delete feature](#hydration-delete-feature)","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"  * [Adding sleep entries feature](#adding-sleep-entries-feature)","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"  * [User details feature](#user-details-feature)","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"  * [Parsing user input for sleep entries](#parsing-user-input-for-sleep-entries)","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"  * [Sleep list feature](#sleep-list-feature)","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"  * [Sleep delete feature](#sleep-delete-feature)","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"  * [Calculating sleep requirements for each user (Planning)](#calculating-sleep-requirements-for-each-user-planning)","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"* [Appendix A: Product scope](#appendix-a-product-scope)","lastModifiedDate":"2024-04-15"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"* [Appendix B: User Stories](#appendix-b-user-stories)","lastModifiedDate":"2024-04-15"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"* [Appendix C: Non-Functional Requirements](#appendix-c-non-functional-requirements)","lastModifiedDate":"2024-04-15"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"* [Appendix D: Glossary](#appendix-d-glossary)","lastModifiedDate":"2024-04-15"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"* [Appendix E: Instructions for manual testing](#appendix-e-instructions-for-manual-testing)","lastModifiedDate":"2024-04-15"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"To calculate the number of calories needed for a user to hit their goal, we used the following references:","lastModifiedDate":"2024-04-15"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"1. [BMR Formula based on gender](https://www.inchcalculator.com/bmr-calculator/)","lastModifiedDate":"2024-04-15"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"2. [BMR Formula based on exercise levels and goal](https://www.musclehacking.com/calorie-calculator/)","lastModifiedDate":"2024-04-15"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"## Design","lastModifiedDate":"2024-04-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"### Calories Component","lastModifiedDate":"2024-04-15"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"Here\u0027s a (partial) class diagram of the `calories` component.","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"![calories.png](assets%2Fcalories.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"The calories component consists of the following Classes","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"1. `Ui` : Handles user and program interaction.","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"2. `CalorieList` : Handles the list of calories entries.","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"3. `CaloriesFileHandler` : Handles the saving and reading of data from file.","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"4. `ParserCalories` : Handles the parsing of user input to determine type of command.","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"5. `Entry` : Handles calories entries data.","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"6. `OutputEntry` : Handles calories output entries data.","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"7. `InputEntry` : Handles calories input entries data.","lastModifiedDate":"2024-04-13"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"8. `Food` : Handles macronutrients data for calories input.","lastModifiedDate":"2024-04-13"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"The sequence diagram bellow illustrates the interactions within the `calories` component, taking","lastModifiedDate":"2024-04-12"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"`calories in donut c/1000 d/2024-04-10` call as an example. ","lastModifiedDate":"2024-04-12"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"![calories_component.png](assets%2Fcalories_component.png)","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"How the `calories` component works:","lastModifiedDate":"2024-04-12"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"1. When the user keys in the `calories in donut c/1000 d/2024-04-10` command, ","lastModifiedDate":"2024-04-13"},{"lineNumber":58,"author":{"gitId":"rexyyong"},"content":"the input is sent to `Ui#handleCaloriesInput(String, CalorieList)`, which calls ","lastModifiedDate":"2024-04-13"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"`CalorieList#addEntry(String)`.","lastModifiedDate":"2024-04-13"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"2. Inside `CalorieList#addEntry(String)`, the function `ParserCalories#parseCaloriesInput(String, int)` ","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"is then called to extract information such as the description, number of calories, and date of entry.","lastModifiedDate":"2024-04-13"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"3. With the extracted information, the function `ParserCalories#makeNewInputEntry(int, String, int, String)`","lastModifiedDate":"2024-04-13"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"is called, which creates a new entry of `InputEntry` that extends `Entry`. The `InputEntry` object is then returned","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"to the caller, `CalorieList#addEntry(String)` which was called in step 2.","lastModifiedDate":"2024-04-13"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":68,"author":{"gitId":"rexyyong"},"content":"4. The returned `InputEntry` object is added into the `calorieArrayList` member of type","lastModifiedDate":"2024-04-13"},{"lineNumber":69,"author":{"gitId":"rexyyong"},"content":"`ArrayList\u003cEntry\u003e` in the `CalorieList`, via the `ArrayList.add()` method. ","lastModifiedDate":"2024-04-13"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"5. `CalorieList#UpdateFile()` is then called, which calls `CaloriesFileHandler#writeEntries(ArrayList\u003cEntry\u003e)`.","lastModifiedDate":"2024-04-14"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"Within that function, `CaloriesFileHandler#writeToFile(String)` function is called, which writes the new data","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"into the data file. ","lastModifiedDate":"2024-04-13"},{"lineNumber":74,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":75,"author":{"gitId":"rexyyong"},"content":"6. If the dates of entries are not sorted in ascending order, `CalorieList#sortEntriesByDate()`","lastModifiedDate":"2024-04-13"},{"lineNumber":76,"author":{"gitId":"rexyyong"},"content":"function is called, which sorts the entries in ascending order. ","lastModifiedDate":"2024-04-13"},{"lineNumber":77,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":78,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"### Hydration Component","lastModifiedDate":"2024-04-15"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"Here\u0027s a (partial) class diagram of the `hydration` component.","lastModifiedDate":"2024-04-15"},{"lineNumber":81,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":82,"author":{"gitId":"rexyyong"},"content":"![hydration.png](assets%2Fhydration.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":83,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"The hydration component consists of the following Classes","lastModifiedDate":"2024-04-15"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"1. `Ui` : Handles user and program interaction.","lastModifiedDate":"2024-04-15"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"2. `HydrationList` : Handles the list of hydration entries.","lastModifiedDate":"2024-04-15"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"3. `HydrationFileHandler` : Handles the saving and reading of data from file.","lastModifiedDate":"2024-04-15"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"4. `ParserHydration` : Handles the parsing of user input to determine type of command.","lastModifiedDate":"2024-04-15"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"6. `HydrationEntry` : Handles hydration entries data.","lastModifiedDate":"2024-04-15"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"The sequence diagram bellow illustrates the interactions within the `hydration` component, taking","lastModifiedDate":"2024-04-15"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"`hydration in milo v/100 d/2024-04-10` call as an example.","lastModifiedDate":"2024-04-15"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"![hydration_component.png](assets%2Fhydration_component.png)","lastModifiedDate":"2024-04-15"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"1. When the user inputs the hydration in `water v/500 d/2024-04-15` command, the input is sent to ","lastModifiedDate":"2024-04-15"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"`Ui#handleHydrationInput(String, HydrationList)`, which then calls `HydrationList#addEntry(String)`.","lastModifiedDate":"2024-04-15"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"2. Inside `HydrationList#addEntry(String)`, the function `ParserHydration#parseHydrationInput(String, int)` is called to ","lastModifiedDate":"2024-04-15"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"extract information such as the description, volume, and date of entry.","lastModifiedDate":"2024-04-15"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"3. With the extracted information, the function `ParserHydration#makeNewInputEntry(int, String, int, String)` is called,","lastModifiedDate":"2024-04-15"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"which creates a new entry of `HydrationEntry` that extends `Entry`. The `HydrationEntry` object is then returned to the ","lastModifiedDate":"2024-04-15"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"caller, `HydrationList#addEntry(String)` which was called in step 2.","lastModifiedDate":"2024-04-15"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"4. The returned `HydrationEntry` object is added into the `hydrationArrayList` member of type `ArrayList\u003cEntry\u003e` in the ","lastModifiedDate":"2024-04-15"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"HydrationList, via the ArrayList.add() method.","lastModifiedDate":"2024-04-15"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"5. `HydrationList#UpdateFile()` is then called, which calls `HydrationFileHandler#writeEntries(ArrayList\u003cEntry\u003e)`. ","lastModifiedDate":"2024-04-15"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"Within that function, `HydrationFileHandler#writeToFile(String)` function is called, which writes the new data into the ","lastModifiedDate":"2024-04-15"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"data file.","lastModifiedDate":"2024-04-15"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"6. If the dates of entries are not sorted in ascending order, `HydrationList#sortEntriesByDate()` function is called,","lastModifiedDate":"2024-04-15"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"which sorts the entries in ascending order.","lastModifiedDate":"2024-04-15"},{"lineNumber":114,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"### Sleep Component","lastModifiedDate":"2024-04-15"},{"lineNumber":116,"author":{"gitId":"owx0130"},"content":"Here\u0027s a (partial) class diagram of the `sleep` component.","lastModifiedDate":"2024-04-14"},{"lineNumber":117,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":118,"author":{"gitId":"rexyyong"},"content":"![sleep.png](assets%2Fsleep.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":119,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":120,"author":{"gitId":"a-wild-chocolate"},"content":"The sleep component consists of the following classes:","lastModifiedDate":"2024-04-13"},{"lineNumber":121,"author":{"gitId":"a-wild-chocolate"},"content":"1. `Ui`: Handles user and program interaction.","lastModifiedDate":"2024-04-13"},{"lineNumber":122,"author":{"gitId":"a-wild-chocolate"},"content":"2. `SleepList`: Handles the list of sleep records.","lastModifiedDate":"2024-04-13"},{"lineNumber":123,"author":{"gitId":"owx0130"},"content":"3. `SleepFileHandler`: Handles the saving and reading of data from the file.","lastModifiedDate":"2024-04-14"},{"lineNumber":124,"author":{"gitId":"a-wild-chocolate"},"content":"4. `ParserSleep`: Handles the parsing of user input to determine type of command.","lastModifiedDate":"2024-04-13"},{"lineNumber":125,"author":{"gitId":"a-wild-chocolate"},"content":"5. `Entry`: Handles all entries data.","lastModifiedDate":"2024-04-13"},{"lineNumber":126,"author":{"gitId":"a-wild-chocolate"},"content":"6. `SleepEntry`: Handles sleep entries data.","lastModifiedDate":"2024-04-13"},{"lineNumber":127,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":128,"author":{"gitId":"a-wild-chocolate"},"content":"The sequence diagram bellow illustrates the interactions within the `sleep` component, taking `sleep add 7 d/2024-04-13` ","lastModifiedDate":"2024-04-13"},{"lineNumber":129,"author":{"gitId":"a-wild-chocolate"},"content":"call as an example.","lastModifiedDate":"2024-04-13"},{"lineNumber":130,"author":{"gitId":"a-wild-chocolate"},"content":"![SleepAddSeqDiagram.png](assets%2FSleepAddSeqDiagram.png)","lastModifiedDate":"2024-04-13"},{"lineNumber":131,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":132,"author":{"gitId":"a-wild-chocolate"},"content":"How the `sleep` component works:","lastModifiedDate":"2024-04-13"},{"lineNumber":133,"author":{"gitId":"a-wild-chocolate"},"content":"1. When the user keys in the`sleep add 7 d/2024-04-13` command,","lastModifiedDate":"2024-04-13"},{"lineNumber":134,"author":{"gitId":"a-wild-chocolate"},"content":"   the input is sent to `Ui#handleSleepInput(String, SleepList)`, which calls","lastModifiedDate":"2024-04-13"},{"lineNumber":135,"author":{"gitId":"a-wild-chocolate"},"content":"   `SleepList#addSleep(String)`.","lastModifiedDate":"2024-04-13"},{"lineNumber":136,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":137,"author":{"gitId":"a-wild-chocolate"},"content":"2. Inside `SleepList#addSleep(String)`, the function `ParserSleep#parseSleepInput(String)`","lastModifiedDate":"2024-04-13"},{"lineNumber":138,"author":{"gitId":"a-wild-chocolate"},"content":"   is then called to extract information such as the duration and date by calling `parseDate(String)` and `parseDuration(String)`.","lastModifiedDate":"2024-04-13"},{"lineNumber":139,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":140,"author":{"gitId":"a-wild-chocolate"},"content":"3. With the extracted information,a new entry of `SleepEntry` that extends `Entry` will be created. The `SleepEntry` object is then returned","lastModifiedDate":"2024-04-13"},{"lineNumber":141,"author":{"gitId":"a-wild-chocolate"},"content":"   to the caller, `SleepList#addSleep(String)` which was called in step 2.","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"a-wild-chocolate"},"content":"4. The returned `SleepEntry` object is added into the `sleepList` member of type","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"a-wild-chocolate"},"content":"   `ArrayList\u003cEntry\u003e` in the `SleepList`, via the `ArrayList.add()` method.","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":146,"author":{"gitId":"owx0130"},"content":"5. `SleepList#UpdateFile()` is then called, which calls `SleepFileHandler#writeEntries(ArrayList\u003cEntry\u003e)`.","lastModifiedDate":"2024-04-14"},{"lineNumber":147,"author":{"gitId":"owx0130"},"content":"   Within that function, `SleepFileHandler#writeToFile(String)` function is called, which writes the new data","lastModifiedDate":"2024-04-14"},{"lineNumber":148,"author":{"gitId":"a-wild-chocolate"},"content":"   into the data file.","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"paturikarthik"},"content":"### User Component","lastModifiedDate":"2024-04-15"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"Here\u0027s a (partial) class diagram of the `user` component.","lastModifiedDate":"2024-04-15"},{"lineNumber":153,"author":{"gitId":"paturikarthik"},"content":"![user.png](assets/user.png)","lastModifiedDate":"2024-04-15"},{"lineNumber":154,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":155,"author":{"gitId":"rexyyong"},"content":"How does `user` component work using `user setup` command as an example:","lastModifiedDate":"2024-04-15"},{"lineNumber":156,"author":{"gitId":"rexyyong"},"content":"1. When the user keys in the `user setup` command, the input is sent to `Ui#handleUserCommands(String, User)`, which calls `User#setUp(String)`.","lastModifiedDate":"2024-04-15"},{"lineNumber":157,"author":{"gitId":"rexyyong"},"content":"2. Inside `User#setUp(String)`, the function `ParserUser#parseSetUp(String, User)` is then called to extract information such as name, height, weight, age, sex, exerciseLevels, goals. The information is then stored int he `User` class.","lastModifiedDate":"2024-04-15"},{"lineNumber":158,"author":{"gitId":"rexyyong"},"content":"3. The function `#UserFileHandler#writeUserData(User)` is then called, which calls `#UserFileHandler#writeToFile(String)` which updates user data to the file.","lastModifiedDate":"2024-04-15"},{"lineNumber":159,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":160,"author":{"gitId":"rexyyong"},"content":"## Implementation","lastModifiedDate":"2024-04-11"},{"lineNumber":161,"author":{"gitId":"owx0130"},"content":"### Adding calorie entries feature","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":163,"author":{"gitId":"owx0130"},"content":"#### Implementation","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"owx0130"},"content":"This functionality is facilitated by `UI`, `CalorieList`, and `ParserCalories`. It implements one operation, namely:","lastModifiedDate":"2024-04-14"},{"lineNumber":166,"author":{"gitId":"owx0130"},"content":"- `UI#handleCaloriesInput(String, CalorieList)`","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"owx0130"},"content":"- `CalorieList#addEntry(String)`","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"owx0130"},"content":"- `CalorieList#updateFile()`","lastModifiedDate":"2024-04-14"},{"lineNumber":169,"author":{"gitId":"owx0130"},"content":"- `ParserCalories#parseCaloriesInput(String)`","lastModifiedDate":"2024-03-27"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":171,"author":{"gitId":"owx0130"},"content":"This feature is activated when the user inputs a `calories in` or `calories out` command in the terminal.","lastModifiedDate":"2024-04-02"},{"lineNumber":172,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":173,"author":{"gitId":"owx0130"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-03-27"},{"lineNumber":174,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":175,"author":{"gitId":"owx0130"},"content":"- Step 1: When the user inputs the command `calories in burger c/200 d/2024-02-02` in the terminal,","lastModifiedDate":"2024-04-02"},{"lineNumber":176,"author":{"gitId":"owx0130"},"content":"the string is sent to `UI#handleCaloriesInput(String, CalorieList)`, which calls `CalorieList#addEntry(String)`.","lastModifiedDate":"2024-04-02"},{"lineNumber":177,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":178,"author":{"gitId":"owx0130"},"content":"- Step 2: Inside `CalorieList#addEntry(String)`, the function `ParserCalories#parseCaloriesInput(String)` is then called to extract information such as the description, number of calories, and date of entry.","lastModifiedDate":"2024-04-02"},{"lineNumber":179,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":180,"author":{"gitId":"owx0130"},"content":"- Step 3: The obtained information is sent to the private method `ParserCalories#makeNewInputEntry(String, int, String)` to create a new entry of class `InputEntry` that extends `Entry`. An `Entry` object is then returned to the caller, `CalorieList#addEntry(String)`.","lastModifiedDate":"2024-04-02"},{"lineNumber":181,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":182,"author":{"gitId":"owx0130"},"content":"- Step 4: The returned `Entry` object is added into the `calorieArrayList` member of type `ArrayList\u003cEntry\u003e` in the `CalorieList`, via the `ArrayList.add()` method.","lastModifiedDate":"2024-04-02"},{"lineNumber":183,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":184,"author":{"gitId":"owx0130"},"content":"- Step 5: `CalorieList#updateFile()` is then called to update the data file with the new entry in the `CalorieList`.","lastModifiedDate":"2024-04-14"},{"lineNumber":185,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":186,"author":{"gitId":"owx0130"},"content":"The sequence diagram for this feature is shown below:","lastModifiedDate":"2024-04-02"},{"lineNumber":187,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":188,"author":{"gitId":"owx0130"},"content":"![CaloriesAddEntrySeqDiagram.png](assets%2FCaloriesAddEntrySeqDiagram.png)","lastModifiedDate":"2024-04-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":190,"author":{"gitId":"paturikarthik"},"content":"### User Details Feature","lastModifiedDate":"2024-04-14"},{"lineNumber":191,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":192,"author":{"gitId":"paturikarthik"},"content":"#### Implementation","lastModifiedDate":"2024-04-14"},{"lineNumber":193,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":194,"author":{"gitId":"paturikarthik"},"content":"This functionality is facilitated by `UI`, `User` and `UserUI` Classes. It implements the following","lastModifiedDate":"2024-04-14"},{"lineNumber":195,"author":{"gitId":"paturikarthik"},"content":"operation, namely:","lastModifiedDate":"2024-04-14"},{"lineNumber":196,"author":{"gitId":"paturikarthik"},"content":"- `UI#handleUserInput(String, User)`","lastModifiedDate":"2024-04-14"},{"lineNumber":197,"author":{"gitId":"paturikarthik"},"content":"- `UI#handleUserCommands(String, User)`","lastModifiedDate":"2024-04-14"},{"lineNumber":198,"author":{"gitId":"paturikarthik"},"content":"- `User#getUserDetails()`","lastModifiedDate":"2024-04-14"},{"lineNumber":199,"author":{"gitId":"paturikarthik"},"content":"- `UserUI#printUserDetails(User)`","lastModifiedDate":"2024-04-14"},{"lineNumber":200,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":201,"author":{"gitId":"paturikarthik"},"content":"This feature is activated when the user inputs `user details` command in the terminal.","lastModifiedDate":"2024-04-14"},{"lineNumber":202,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":203,"author":{"gitId":"paturikarthik"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-14"},{"lineNumber":204,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":205,"author":{"gitId":"paturikarthik"},"content":"- Step 1: When the user inputs the command `user details` in the terminal,","lastModifiedDate":"2024-04-14"},{"lineNumber":206,"author":{"gitId":"paturikarthik"},"content":"  the string is sent to `UI#handleUserInput(String, User)` and","lastModifiedDate":"2024-04-14"},{"lineNumber":207,"author":{"gitId":"paturikarthik"},"content":"  `UI#handleUserCommands(String, User)`, which calls `User#getUserDetails()`.","lastModifiedDate":"2024-04-14"},{"lineNumber":208,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":209,"author":{"gitId":"paturikarthik"},"content":"- Step 2: Inside `User#getUserDetails()`, the function `UserUI#printUserDetails(User)`","lastModifiedDate":"2024-04-14"},{"lineNumber":210,"author":{"gitId":"paturikarthik"},"content":"  is then called. The user\u0027s details are printed out.","lastModifiedDate":"2024-04-14"},{"lineNumber":211,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":212,"author":{"gitId":"paturikarthik"},"content":"- Step 3: After printing out the details, the program returns and awaits","lastModifiedDate":"2024-04-14"},{"lineNumber":213,"author":{"gitId":"paturikarthik"},"content":"  the next command typed in by user.","lastModifiedDate":"2024-04-14"},{"lineNumber":214,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":215,"author":{"gitId":"paturikarthik"},"content":"The class and sequence diagram for this feature is shown below:","lastModifiedDate":"2024-04-14"},{"lineNumber":216,"author":{"gitId":"paturikarthik"},"content":"Unrelated attributes and Classes were excluded.","lastModifiedDate":"2024-04-14"},{"lineNumber":217,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":218,"author":{"gitId":"paturikarthik"},"content":"![UserClassDiagram.png](assets/UserClassDiagram.png)","lastModifiedDate":"2024-04-14"},{"lineNumber":219,"author":{"gitId":"paturikarthik"},"content":"![UserDetailsSequenceDiagram.png](assets/UserDetailsSequenceDiagram.png)","lastModifiedDate":"2024-04-14"},{"lineNumber":220,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":221,"author":{"gitId":"a-wild-chocolate"},"content":"### Calculating calorie requirements based on a user`s goals","lastModifiedDate":"2024-03-28"},{"lineNumber":222,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":223,"author":{"gitId":"paturikarthik"},"content":"#### Implementation","lastModifiedDate":"2024-03-28"},{"lineNumber":224,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":225,"author":{"gitId":"paturikarthik"},"content":"This functionality is facilitated by `UserGoals`. It implements one operation, namely:","lastModifiedDate":"2024-03-28"},{"lineNumber":226,"author":{"gitId":"paturikarthik"},"content":"- `UserGoals#getHealthInfo(User)`","lastModifiedDate":"2024-03-28"},{"lineNumber":227,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":228,"author":{"gitId":"paturikarthik"},"content":"This operation is exposed in the `User` class as `User#getHealhInfo()`.","lastModifiedDate":"2024-03-28"},{"lineNumber":229,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":230,"author":{"gitId":"paturikarthik"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-03-28"},{"lineNumber":231,"author":{"gitId":"paturikarthik"},"content":"- Step 1: When the user inputs the command `user setup` in the terminal, ","lastModifiedDate":"2024-04-04"},{"lineNumber":232,"author":{"gitId":"paturikarthik"},"content":"  the input string is sent to `Ui#handleUserCommands(User,String)`, which calls `User#setup(String)`.","lastModifiedDate":"2024-04-04"},{"lineNumber":233,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":234,"author":{"gitId":"paturikarthik"},"content":"- Step 2: `User#setup(String)` calls `ParserUser#parseSetUp(String, User)` which parses the user\u0027s information such as ","lastModifiedDate":"2024-04-04"},{"lineNumber":235,"author":{"gitId":"paturikarthik"},"content":"  his height, weight, age, gender, exercise levels and intended goal and sets these information to the `User`.","lastModifiedDate":"2024-04-04"},{"lineNumber":236,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":237,"author":{"gitId":"paturikarthik"},"content":"- Step 3: `User#setup(String)` then calls `User#getHealthInfo()` which calls `UserGoals#getHealthInfo(User)`.","lastModifiedDate":"2024-04-04"},{"lineNumber":238,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":239,"author":{"gitId":"paturikarthik"},"content":"- Step 4: This method calculates the basal metabolism rate of the `user` using the user\u0027s height, weight, age and gender.","lastModifiedDate":"2024-04-04"},{"lineNumber":240,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":241,"author":{"gitId":"paturikarthik"},"content":"- Step 5: Using the `user`\u0027s exercise levels, the method calculates his active metabolism rate, and finally calculates the calories required by the user to achieve their goals based on their input.","lastModifiedDate":"2024-04-04"},{"lineNumber":242,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":243,"author":{"gitId":"paturikarthik"},"content":"- Step 6: This value is set to `User.caloriesRequired` by `User#setCaloriesRequired(int)`.","lastModifiedDate":"2024-04-04"},{"lineNumber":244,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":245,"author":{"gitId":"paturikarthik"},"content":"The Sequence Diagram for the above-mentioned process is as follows:","lastModifiedDate":"2024-04-04"},{"lineNumber":246,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":247,"author":{"gitId":"rexyyong"},"content":"![Sequence Diagram](assets/UserCalculateCaloriesSeqDiagram.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":248,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":249,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":250,"author":{"gitId":"paturikarthik"},"content":"#### Design considerations","lastModifiedDate":"2024-04-04"},{"lineNumber":251,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":252,"author":{"gitId":"paturikarthik"},"content":"- **Alternative 1 (current choice):** Uses an algorithm to find the number of calories needed","lastModifiedDate":"2024-04-04"},{"lineNumber":253,"author":{"gitId":"paturikarthik"},"content":"  - Pros: Not dependent on external APIs","lastModifiedDate":"2024-03-28"},{"lineNumber":254,"author":{"gitId":"paturikarthik"},"content":"  - Cons: Need to come up with an algorithm to use","lastModifiedDate":"2024-03-28"},{"lineNumber":255,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":256,"author":{"gitId":"paturikarthik"},"content":"- **Alternative 2 :** Uses an API to get the calories needed","lastModifiedDate":"2024-04-04"},{"lineNumber":257,"author":{"gitId":"paturikarthik"},"content":"    - Pros: No need to figure out the optimal algorithm","lastModifiedDate":"2024-04-04"},{"lineNumber":258,"author":{"gitId":"paturikarthik"},"content":"    - Cons: Need to parse response to sieve out necessary information","lastModifiedDate":"2024-04-04"},{"lineNumber":259,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":260,"author":{"gitId":"rexyyong"},"content":"### Calories list feature","lastModifiedDate":"2024-03-28"},{"lineNumber":261,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":262,"author":{"gitId":"rexyyong"},"content":"#### Implementation","lastModifiedDate":"2024-04-11"},{"lineNumber":263,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":264,"author":{"gitId":"rexyyong"},"content":"This functionality is facilitated by `UI` and `CalorieList` Classes. It implements the following","lastModifiedDate":"2024-04-11"},{"lineNumber":265,"author":{"gitId":"rexyyong"},"content":"operation, namely:","lastModifiedDate":"2024-04-11"},{"lineNumber":266,"author":{"gitId":"rexyyong"},"content":"- `UI#handleUserInput(String, CalorieList)`","lastModifiedDate":"2024-04-11"},{"lineNumber":267,"author":{"gitId":"rexyyong"},"content":"- `UI#handleCaloriesInput(String, CalorieList)`","lastModifiedDate":"2024-04-11"},{"lineNumber":268,"author":{"gitId":"rexyyong"},"content":"- `CalorieList#printCalorieList()`","lastModifiedDate":"2024-04-11"},{"lineNumber":269,"author":{"gitId":"rexyyong"},"content":"- `CalorieList#printCalorieInflow()`","lastModifiedDate":"2024-04-11"},{"lineNumber":270,"author":{"gitId":"rexyyong"},"content":"- `CalorieList#printCalorieOutflow()`","lastModifiedDate":"2024-04-11"},{"lineNumber":271,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":272,"author":{"gitId":"rexyyong"},"content":"This feature is activated when the user inputs `calories list` command in the terminal.","lastModifiedDate":"2024-04-11"},{"lineNumber":273,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":274,"author":{"gitId":"rexyyong"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-11"},{"lineNumber":275,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":276,"author":{"gitId":"rexyyong"},"content":"- Step 1: When the user inputs the command `calories list` in the terminal,","lastModifiedDate":"2024-04-11"},{"lineNumber":277,"author":{"gitId":"rexyyong"},"content":"  the string is sent to `UI#handleUserInput(String, CalorieList)` and ","lastModifiedDate":"2024-04-11"},{"lineNumber":278,"author":{"gitId":"rexyyong"},"content":"`UI#handleCaloriesInput(String, CalorieList)`, which calls `CalorieList#printCalorieList()`.","lastModifiedDate":"2024-04-11"},{"lineNumber":279,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":280,"author":{"gitId":"rexyyong"},"content":"- Step 2: Inside `CalorieList#printCalorieList()`, the function `CalorieList#printCalorieInflow()` ","lastModifiedDate":"2024-04-11"},{"lineNumber":281,"author":{"gitId":"rexyyong"},"content":"is then called. Entries that are classified under `InputEntry` will be printed out.","lastModifiedDate":"2024-04-11"},{"lineNumber":282,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":283,"author":{"gitId":"rexyyong"},"content":"- Step 3: Inside `CalorieList#printCalorieList()`, the function `CalorieList#printCalorieInflow()`","lastModifiedDate":"2024-04-11"},{"lineNumber":284,"author":{"gitId":"rexyyong"},"content":"  is then called. Entries that are classified under `OuputEntry` will be printed out.","lastModifiedDate":"2024-04-11"},{"lineNumber":285,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":286,"author":{"gitId":"rexyyong"},"content":"- Step 4: After printing out both the Input Entries and Output Entries, the program returns and awaits","lastModifiedDate":"2024-04-11"},{"lineNumber":287,"author":{"gitId":"rexyyong"},"content":"the next command typed in by user. ","lastModifiedDate":"2024-04-11"},{"lineNumber":288,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":289,"author":{"gitId":"rexyyong"},"content":"The class and sequence diagram for this feature is shown below:","lastModifiedDate":"2024-04-11"},{"lineNumber":290,"author":{"gitId":"rexyyong"},"content":"Unrelated attributes and Classes were excluded.","lastModifiedDate":"2024-04-11"},{"lineNumber":291,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":292,"author":{"gitId":"rexyyong"},"content":"![CaloriesListClassDiagram.png](assets%2FCaloriesListClassDiagram.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":293,"author":{"gitId":"rexyyong"},"content":"![CaloriesListSequenceDiagram.png](assets%2FCaloriesListSequenceDiagram.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":294,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":295,"author":{"gitId":"rexyyong"},"content":"#### Design considerations","lastModifiedDate":"2024-04-11"},{"lineNumber":296,"author":{"gitId":"rexyyong"},"content":"- **Alternative 1 (current choice):** Use one arrayList and use instanceof to print out ","lastModifiedDate":"2024-04-11"},{"lineNumber":297,"author":{"gitId":"rexyyong"},"content":"the Input Entries and Output Entries. ","lastModifiedDate":"2024-04-11"},{"lineNumber":298,"author":{"gitId":"rexyyong"},"content":"  - Pros: Only 1 arrayList is required.","lastModifiedDate":"2024-04-11"},{"lineNumber":299,"author":{"gitId":"rexyyong"},"content":"  - Cons: Need to loop the same arrayList twice, which is less efficient. Furthermore, ","lastModifiedDate":"2024-04-11"},{"lineNumber":300,"author":{"gitId":"rexyyong"},"content":"  when deleting entries from arrayList, we need to use a unique entryID instead of using the ","lastModifiedDate":"2024-04-11"},{"lineNumber":301,"author":{"gitId":"rexyyong"},"content":"  index of entry in the arrayList.","lastModifiedDate":"2024-04-11"},{"lineNumber":302,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":303,"author":{"gitId":"rexyyong"},"content":"- **Alternative 2 :** Use 2 arraylists. One for Input Entries and one for Output Entries. ","lastModifiedDate":"2024-04-11"},{"lineNumber":304,"author":{"gitId":"rexyyong"},"content":"  - Pros: More efficient, as each arrayList only needs to be looped through one time.","lastModifiedDate":"2024-04-11"},{"lineNumber":305,"author":{"gitId":"rexyyong"},"content":"  Furthermore, we can directly delete entries based on index, and no unique entryID field will be required.","lastModifiedDate":"2024-04-11"},{"lineNumber":306,"author":{"gitId":"rexyyong"},"content":"  - Cons: Troublesome to implement. Requires a lot of changes to current Class structure and code structure.","lastModifiedDate":"2024-04-11"},{"lineNumber":307,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":308,"author":{"gitId":"a-wild-chocolate"},"content":"### Calories delete feature","lastModifiedDate":"2024-03-28"},{"lineNumber":309,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":310,"author":{"gitId":"a-wild-chocolate"},"content":"The `calories delete` feature can delete the calories record at specific index of calorie list. This functionality is facilitated by `CaloriesList`. It implements one operation, namely:","lastModifiedDate":"2024-03-28"},{"lineNumber":311,"author":{"gitId":"a-wild-chocolate"},"content":"- `deleteEntry(String line)`","lastModifiedDate":"2024-03-28"},{"lineNumber":312,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":313,"author":{"gitId":"a-wild-chocolate"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-03-28"},{"lineNumber":314,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 1: When the user inputs the command `calories delete INDEX` in the terminal, the string is sent to `Ui#handleUserInput()`, which will call `Ui#handleCaloriesInput()`.","lastModifiedDate":"2024-03-28"},{"lineNumber":315,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":316,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 2: After the `Ui#handleCaloriesInput()` matching `delete calories` key word, the string will be passed into deleteEntry(String line) to execute delete process.","lastModifiedDate":"2024-03-28"},{"lineNumber":317,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":318,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 3: The string will be divided to two substrings according to the command syntax. Index will be tried to get from the second substring by `Integer.parseInt()`.","lastModifiedDate":"2024-03-28"},{"lineNumber":319,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":320,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 4: The calories record (`Entry`) stored in the `ArrayList\u003cEntry\u003e caloriesList` will be deleted by calling `calorieArrayList.remove((index-1));` and a successful deleting message will be shown in terminal by calling `CalorieListUi#successfulDeletedMessage(toDelete)`","lastModifiedDate":"2024-03-28"},{"lineNumber":321,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":322,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 5: The latest calories list will be updated to saving file by calling `CalorieList#updateFile()`.","lastModifiedDate":"2024-03-28"},{"lineNumber":323,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":324,"author":{"gitId":"a-wild-chocolate"},"content":"The Class diagram for Calories delete feature is shown below:","lastModifiedDate":"2024-03-28"},{"lineNumber":325,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":326,"author":{"gitId":"rexyyong"},"content":"![CaloriesDeleteClassDiagram](assets%2FcaloriesDeleteUML.jpg)","lastModifiedDate":"2024-04-12"},{"lineNumber":327,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":328,"author":{"gitId":"shawnpong"},"content":"### Parsing user input for hydration entries","lastModifiedDate":"2024-04-02"},{"lineNumber":329,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":330,"author":{"gitId":"shawnpong"},"content":"This functionality is facilitated by `ParserHydration`. It implements one operation, namely:","lastModifiedDate":"2024-04-02"},{"lineNumber":331,"author":{"gitId":"shawnpong"},"content":"- `ParserHydration#parseHydrationInput(String input)`","lastModifiedDate":"2024-04-02"},{"lineNumber":332,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":333,"author":{"gitId":"shawnpong"},"content":"This operation is exposed in the `HydrationList` class as `HydrationList#addEntry(String)`.","lastModifiedDate":"2024-04-02"},{"lineNumber":334,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":335,"author":{"gitId":"shawnpong"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-02"},{"lineNumber":336,"author":{"gitId":"shawnpong"},"content":"- Step 1: When the user inputs the command `hydration in Milo v/100 d/2022-01-02` in the terminal,","lastModifiedDate":"2024-04-02"},{"lineNumber":337,"author":{"gitId":"shawnpong"},"content":"  the string is sent to `HydrationList#addEntry(String)`, which calls `ParserHydration#parseHydrationInput(String)`.","lastModifiedDate":"2024-04-02"},{"lineNumber":338,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":339,"author":{"gitId":"shawnpong"},"content":"- Step 2: Using `String.split()`, the method extracts information such as the description, volume of beverage, and date of entry. The obtained information is sent to the private method `ParserHydration#makeNewInputEntry(String, int, String)` to create a new entry of class `HydrationEntry` that extends `Entry`.","lastModifiedDate":"2024-04-02"},{"lineNumber":340,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":341,"author":{"gitId":"shawnpong"},"content":"- Step 3: The created `HydrationEntry` instance is added into the `ArrayList\u003cEntry\u003e` attribute of the `HydrationList`.","lastModifiedDate":"2024-04-02"},{"lineNumber":342,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":343,"author":{"gitId":"shawnpong"},"content":"### Calculating hydration requirements for each user","lastModifiedDate":"2024-04-02"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":345,"author":{"gitId":"shawnpong"},"content":"#### Design Considerations","lastModifiedDate":"2024-04-02"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":347,"author":{"gitId":"shawnpong"},"content":"**General Health Guidelines:** The recommended daily intake of water for an average adult is around 8 glasses or approximately 2000 milliliters. This guideline is commonly recommended by health authorities and organizations such as HealthHub.","lastModifiedDate":"2024-04-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":349,"author":{"gitId":"shawnpong"},"content":"**Ease of Implementation:** Setting a standard hydration requirement simplifies the tracking process for users. It provides a clear goal to strive for, making it easier for individuals to monitor and maintain their hydration levels consistently.","lastModifiedDate":"2024-04-02"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":351,"author":{"gitId":"shawnpong"},"content":"### Hydration list feature","lastModifiedDate":"2024-04-02"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":353,"author":{"gitId":"shawnpong"},"content":"The `hydration list` feature lists out the record of all the Hydration data that the user has keyed in. The Hydration data are all stored into a `ArrayList\u003cEntry\u003e hydrationArrayList` attribute of the `HydrationList` Class. Hydration data are printed when the `printHydrationList()` function is called.","lastModifiedDate":"2024-04-02"},{"lineNumber":354,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":355,"author":{"gitId":"shawnpong"},"content":"The `printHydrationList()` function iterates through the `hydrationArrayList` and prints out the Entries according to its order in the Array List.","lastModifiedDate":"2024-04-02"},{"lineNumber":356,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":357,"author":{"gitId":"shawnpong"},"content":"The Class diagram for Hydration list feature is shown below. Unrelated attributes and Classes were excluded.","lastModifiedDate":"2024-04-02"},{"lineNumber":358,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":359,"author":{"gitId":"rexyyong"},"content":"![HydrationListClassDiagram.png](assets/HydrationListClassDiagram.png)","lastModifiedDate":"2024-04-12"},{"lineNumber":360,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":361,"author":{"gitId":"shawnpong"},"content":"### Hydration delete feature","lastModifiedDate":"2024-04-02"},{"lineNumber":362,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":363,"author":{"gitId":"shawnpong"},"content":"The `hydration delete` feature can delete the hydration record at specific index of hydration list. This functionality is facilitated by `HydrationList`. It implements one operation, namely:","lastModifiedDate":"2024-04-02"},{"lineNumber":364,"author":{"gitId":"shawnpong"},"content":"- `deleteEntry(String line)`","lastModifiedDate":"2024-04-02"},{"lineNumber":365,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":366,"author":{"gitId":"shawnpong"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-02"},{"lineNumber":367,"author":{"gitId":"shawnpong"},"content":"- Step 1: When the user inputs the command `hydration delete INDEX` in the terminal, the string is sent to `Ui#handleUserInput()`, which will call `Ui#handleHydrationInput()`.","lastModifiedDate":"2024-04-02"},{"lineNumber":368,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":369,"author":{"gitId":"shawnpong"},"content":"- Step 2: After the `Ui#handleHydrationInput()` matching `delete hydration` key word, the string will be passed into deleteEntry(String line) to execute delete process.","lastModifiedDate":"2024-04-02"},{"lineNumber":370,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":371,"author":{"gitId":"shawnpong"},"content":"- Step 3: The string will be divided to two substrings according to the command syntax. Index will be tried to get from the second substring by `Integer.parseInt()`.","lastModifiedDate":"2024-04-02"},{"lineNumber":372,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":373,"author":{"gitId":"shawnpong"},"content":"- Step 4: The hydration record (`Entry`) stored in the `ArrayList\u003cEntry\u003e hydrationList` will be deleted by calling `hydrationArrayList.remove((index-1));` and a successful deleting message will be shown in terminal by calling `HydrationListUi#successfulDeletedMessage(toDelete)`","lastModifiedDate":"2024-04-02"},{"lineNumber":374,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":375,"author":{"gitId":"shawnpong"},"content":"- Step 5: The latest hydration list will be updated to saving file by calling `HydrationList#updateFile()`.","lastModifiedDate":"2024-04-02"},{"lineNumber":376,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":377,"author":{"gitId":"shawnpong"},"content":"The Sequence diagram for Hydration delete feature is shown below:","lastModifiedDate":"2024-04-02"},{"lineNumber":378,"author":{"gitId":"shawnpong"},"content":"![HydrationDeleteEntrySeqDiagram.png](assets%2FHydrationDeleteEntrySeqDiagram.png)","lastModifiedDate":"2024-04-15"},{"lineNumber":379,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":380,"author":{"gitId":"a-wild-chocolate"},"content":"### Adding sleep entries feature","lastModifiedDate":"2024-04-04"},{"lineNumber":381,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":382,"author":{"gitId":"a-wild-chocolate"},"content":"#### Implementation","lastModifiedDate":"2024-04-04"},{"lineNumber":383,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":384,"author":{"gitId":"a-wild-chocolate"},"content":"This functionality is facilitated by `UI`, `SleepList`, `FileHandler` and `ParserSleep`. It implements one operation, namely:","lastModifiedDate":"2024-04-04"},{"lineNumber":385,"author":{"gitId":"a-wild-chocolate"},"content":"- `UI#handleSleepInput(String,SleepList)`","lastModifiedDate":"2024-04-04"},{"lineNumber":386,"author":{"gitId":"a-wild-chocolate"},"content":"- `SleepList#addEntry(String)`","lastModifiedDate":"2024-04-04"},{"lineNumber":387,"author":{"gitId":"a-wild-chocolate"},"content":"- `ParserSleep#parseSleepInput(String)`","lastModifiedDate":"2024-04-04"},{"lineNumber":388,"author":{"gitId":"a-wild-chocolate"},"content":"- `FileHandler#updateFile()`","lastModifiedDate":"2024-04-04"},{"lineNumber":389,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":390,"author":{"gitId":"a-wild-chocolate"},"content":"This feature is activated when the user inputs a `sleep add` command in the terminal.","lastModifiedDate":"2024-04-04"},{"lineNumber":391,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":392,"author":{"gitId":"a-wild-chocolate"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-04"},{"lineNumber":393,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":394,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 1: When the user inputs the command `sleep add 7.5 d/2022-01-02` in the terminal,","lastModifiedDate":"2024-04-04"},{"lineNumber":395,"author":{"gitId":"a-wild-chocolate"},"content":"  the string is sent to `UI#handleSleepInput(String, SleepList)`, which calls `SleepList#addSleep(String)`.","lastModifiedDate":"2024-04-04"},{"lineNumber":396,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":397,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 2: Inside `SleepList#addSleep(String)`, the function `ParserSleep#parseSleepInput(String)` is then called to extract information such as the duration and date of entry.","lastModifiedDate":"2024-04-04"},{"lineNumber":398,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":399,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 3: It will create a new entry of class `SleepEntry` that extends `Entry`based on the information.","lastModifiedDate":"2024-04-04"},{"lineNumber":400,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":401,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 4: The created `SleepEntry` instance is added into the `ArrayList\u003cEntry\u003e sleepList` attribute of the `SleepList`.","lastModifiedDate":"2024-04-04"},{"lineNumber":402,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":403,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 5: `FileHandler#updateFile()` is then called to update the data file with the new entry in the `SleepList`.","lastModifiedDate":"2024-04-04"},{"lineNumber":404,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":405,"author":{"gitId":"a-wild-chocolate"},"content":"The sequence diagram for this feature is shown below:","lastModifiedDate":"2024-04-04"},{"lineNumber":406,"author":{"gitId":"a-wild-chocolate"},"content":"![SleepAddSeqDiagram.jpg](assets%2FSleepAddSeqDiagram.png)","lastModifiedDate":"2024-04-13"},{"lineNumber":407,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":408,"author":{"gitId":"a-wild-chocolate"},"content":"### Parsing user input for sleep entries","lastModifiedDate":"2024-04-03"},{"lineNumber":409,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":410,"author":{"gitId":"a-wild-chocolate"},"content":"This functionality is facilitated by `ParserSleep`. It implements one operation, namely:","lastModifiedDate":"2024-04-03"},{"lineNumber":411,"author":{"gitId":"a-wild-chocolate"},"content":"- `ParserSleep#parseSleepInput(String input)`","lastModifiedDate":"2024-04-03"},{"lineNumber":412,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":413,"author":{"gitId":"a-wild-chocolate"},"content":"This operation is exposed in the `SleepList` class as `SleepList#addSleep(String)`.","lastModifiedDate":"2024-04-03"},{"lineNumber":414,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":415,"author":{"gitId":"a-wild-chocolate"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-03"},{"lineNumber":416,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 1: When the user inputs the command `sleep add 7.5 d/2022-01-02` in the terminal,","lastModifiedDate":"2024-04-03"},{"lineNumber":417,"author":{"gitId":"a-wild-chocolate"},"content":"  the string is sent to `SleepList#addEntry(String)`, which calls `ParserSleep#parseSleepInput(String)`.","lastModifiedDate":"2024-04-03"},{"lineNumber":418,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":419,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 2: Using `String.split()`, the method extracts information such as the duration and date of entry.","lastModifiedDate":"2024-04-03"},{"lineNumber":420,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":421,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 3: It will create a new entry of class `SleepEntry` that extends `Entry`based on the information.","lastModifiedDate":"2024-04-03"},{"lineNumber":422,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":423,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 4: The created `SleepEntry` instance is added into the `ArrayList\u003cEntry\u003e sleepList` attribute of the `SleepList`.","lastModifiedDate":"2024-04-03"},{"lineNumber":424,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":425,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":426,"author":{"gitId":"a-wild-chocolate"},"content":"### Sleep list feature","lastModifiedDate":"2024-04-03"},{"lineNumber":427,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":428,"author":{"gitId":"a-wild-chocolate"},"content":"The `sleep list` feature lists out the record of all the sleep data that the user has keyed in. The sleep data are all stored into a `ArrayList\u003cEntry\u003e sleepList` attribute of the `SleepList` Class. Sleep data are printed when the `printSleepList()` function is called.","lastModifiedDate":"2024-04-03"},{"lineNumber":429,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":430,"author":{"gitId":"a-wild-chocolate"},"content":"The `printSleepList()` function iterates through the `sleepList` and each entry will call `SleepEntry#toString()` to return its information string to be printed.","lastModifiedDate":"2024-04-03"},{"lineNumber":431,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":432,"author":{"gitId":"a-wild-chocolate"},"content":"The Sequence diagram for Sleep list feature is shown below. Unrelated attributes and Classes were excluded.","lastModifiedDate":"2024-04-03"},{"lineNumber":433,"author":{"gitId":"rexyyong"},"content":"![SleepListSeqDiagram.jpg](assets%2FSleepListSeqDiagram.jpg)","lastModifiedDate":"2024-04-12"},{"lineNumber":434,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":435,"author":{"gitId":"a-wild-chocolate"},"content":"### Sleep delete feature","lastModifiedDate":"2024-04-03"},{"lineNumber":436,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":437,"author":{"gitId":"a-wild-chocolate"},"content":"The `sleep delete` feature can delete the sleep record at specific index of sleep list. This functionality is facilitated by `SleepList`. It implements one operation, namely:","lastModifiedDate":"2024-04-03"},{"lineNumber":438,"author":{"gitId":"a-wild-chocolate"},"content":"- `deleteSleep(String line)`","lastModifiedDate":"2024-04-03"},{"lineNumber":439,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":440,"author":{"gitId":"a-wild-chocolate"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-03"},{"lineNumber":441,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 1: When the user inputs the command `sleep delete INDEX` in the terminal, the string is sent to `Ui#handleUserInput()`, which will call `Ui#handleSleepInput()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":442,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":443,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 2: After the `Ui#handleSleepInput()` matching `sleep delete` key word, the string will be passed into deleteSleep(String line) to execute delete process.","lastModifiedDate":"2024-04-03"},{"lineNumber":444,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":445,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 3: The string will be divided to two substrings according to the command syntax. Index will be tried to get from the second substring by `Integer.parseInt()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":446,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":447,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 4: The sleep record (`Entry`) stored in the `ArrayList\u003cEntry\u003e sleepList` will be deleted by calling `sleepArrayList.remove((index-1));` and a successful deleting message will be shown in terminal by calling `SleepListUi#successfulDeletedMessage(toDelete)`","lastModifiedDate":"2024-04-03"},{"lineNumber":448,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":449,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 5: The latest sleep list will be updated to saving file by calling `SleepList#updateFile()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":450,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":451,"author":{"gitId":"a-wild-chocolate"},"content":"The Sequence diagram for Sleep delete feature is shown below:","lastModifiedDate":"2024-04-03"},{"lineNumber":452,"author":{"gitId":"owx0130"},"content":"![sleepDeleteSeqDiagram.png](assets%2FsleepDeleteSeqDiagram.png)","lastModifiedDate":"2024-04-15"},{"lineNumber":453,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":454,"author":{"gitId":"a-wild-chocolate"},"content":"### Calculating sleep requirements for each user (Planning)","lastModifiedDate":"2024-04-03"},{"lineNumber":455,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":456,"author":{"gitId":"a-wild-chocolate"},"content":"#### Design Considerations","lastModifiedDate":"2024-04-03"},{"lineNumber":457,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":458,"author":{"gitId":"a-wild-chocolate"},"content":"**General Health Guidelines:** The recommended daily sleep duration for an average adult is around 7.5 hours. However, sleep standard is different for different individual with different healthy status. This feature will calculate recommend sleep duration by formula based on user health information.","lastModifiedDate":"2024-04-03"},{"lineNumber":459,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":460,"author":{"gitId":"a-wild-chocolate"},"content":"**Ease of Implementation:** Setting a standard sleep requirement simplifies the tracking process for users. It provides a clear goal to strive for, making it easier for individuals to monitor and maintain their sleep time levels consistently.","lastModifiedDate":"2024-04-03"},{"lineNumber":461,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":462,"author":{"gitId":"rexyyong"},"content":"## Appendix A: Product scope","lastModifiedDate":"2024-04-15"},{"lineNumber":463,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":464,"author":{"gitId":"rexyyong"},"content":"* Year 2 NUS Computer Engineering (CEG students)","lastModifiedDate":"2024-04-15"},{"lineNumber":465,"author":{"gitId":"rexyyong"},"content":"* can type fast","lastModifiedDate":"2024-04-15"},{"lineNumber":466,"author":{"gitId":"rexyyong"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2024-04-15"},{"lineNumber":467,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":469,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":471,"author":{"gitId":"rexyyong"},"content":"It is no secret that Year 2 is the busiest/most difficult period that CEG students will experience in university. ","lastModifiedDate":"2024-04-15"},{"lineNumber":472,"author":{"gitId":"rexyyong"},"content":"As such, it may be easy for students to neglect their health in the midst of the hustle and bustle. We hope that through","lastModifiedDate":"2024-04-15"},{"lineNumber":473,"author":{"gitId":"rexyyong"},"content":"this application, tracking one\u0027s health can be made easy and straightforward, so that students can get their health info","lastModifiedDate":"2024-04-15"},{"lineNumber":474,"author":{"gitId":"rexyyong"},"content":"quickly on the go, and thus know whether they need to eat/drink/sleep more/less.","lastModifiedDate":"2024-04-15"},{"lineNumber":475,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":476,"author":{"gitId":"rexyyong"},"content":"## Appendix B: User Stories","lastModifiedDate":"2024-04-15"},{"lineNumber":477,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":478,"author":{"gitId":"-"},"content":"| Version | As a ...     | I want to ...                                                                                                                                                              | So that I can ...                                                      |","lastModifiedDate":"2020-05-24"},{"lineNumber":479,"author":{"gitId":"rexyyong"},"content":"|---------|--------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------|","lastModifiedDate":"2024-04-15"},{"lineNumber":480,"author":{"gitId":"rexyyong"},"content":"| v1.1    | busy student | register my calorie gained by inputting the food consumed, amount of calories and date                                                                                     | track my calorie gained history                                        |","lastModifiedDate":"2024-04-15"},{"lineNumber":481,"author":{"gitId":"rexyyong"},"content":"| v1.1    | busy student | register my calories burnt by simply inputting the name of the activity, calories burnt and date                                                                           | track my burned outflow status                                         |","lastModifiedDate":"2024-04-15"},{"lineNumber":482,"author":{"gitId":"rexyyong"},"content":"| v1.1    | busy student | add my macronutrient details into my calorie entries, such as protein, carbohydrates and fats                                                                              | better track my nutrition                                              |","lastModifiedDate":"2024-04-15"},{"lineNumber":483,"author":{"gitId":"rexyyong"},"content":"| v1.1    | busy student | see my daily calories burned and consumed at a glance                                                                                                                      | get a summary of my calorie status                                     |","lastModifiedDate":"2024-04-15"},{"lineNumber":484,"author":{"gitId":"rexyyong"},"content":"| v1.1    | busy student | delete my calories burned data                                                                                                                                             | remove data that was keyed in wrongly                                  |","lastModifiedDate":"2024-04-15"},{"lineNumber":485,"author":{"gitId":"rexyyong"},"content":"| v1.1    | busy student | delete my calories gained data                                                                                                                                             | remove data that was keyed in wrongly                                  |","lastModifiedDate":"2024-04-15"},{"lineNumber":486,"author":{"gitId":"rexyyong"},"content":"| v1.1    | busy student | add my daily hydration intake                                                                                                                                              | track how hydrated I am daily                                          |","lastModifiedDate":"2024-04-15"},{"lineNumber":487,"author":{"gitId":"rexyyong"},"content":"| v1.1    | busy student | delete my daily hydration intake data                                                                                                                                      | remove wrong hydration data                                            |","lastModifiedDate":"2024-04-15"},{"lineNumber":488,"author":{"gitId":"rexyyong"},"content":"| v1.1    | busy student | see my hydration record at a glance                                                                                                                                        | have an idea of how much water I have been drinking so far             |","lastModifiedDate":"2024-04-15"},{"lineNumber":489,"author":{"gitId":"rexyyong"},"content":"| v2.0    | busy student | add my daily sleep hours                                                                                                                                                   | track my daily sleeping hours                                          |","lastModifiedDate":"2024-04-15"},{"lineNumber":490,"author":{"gitId":"rexyyong"},"content":"| v2.0    | busy student | delete my daily sleep hours                                                                                                                                                | remove wrong sleeping data                                             |","lastModifiedDate":"2024-04-15"},{"lineNumber":491,"author":{"gitId":"rexyyong"},"content":"| v2.0    | busy student | see my sleep hours data at a glance.                                                                                                                                       | track my sleep status                                                  |","lastModifiedDate":"2024-04-15"},{"lineNumber":492,"author":{"gitId":"rexyyong"},"content":"| v2.0    | busy student | see my calorie input and output sorted according to days                                                                                                                   | see what my calorie intake and outflow for each day is                 |","lastModifiedDate":"2024-04-15"},{"lineNumber":493,"author":{"gitId":"rexyyong"},"content":"| v2.0    | busy student | delete my calories entries based on the entry id                                                                                                                           | delete entries based on entry id, instead of based on array list index |","lastModifiedDate":"2024-04-15"},{"lineNumber":494,"author":{"gitId":"rexyyong"},"content":"| v2.0    | busy student | see my daily calorie goals on a progress bar                                                                                                                               | better visualise my daily progress                                     |","lastModifiedDate":"2024-04-15"},{"lineNumber":495,"author":{"gitId":"rexyyong"},"content":"| v2.0    | busy student | see my daily sleep goals on a progress bar                                                                                                                                 | better visualise my daily progress                                     |","lastModifiedDate":"2024-04-15"},{"lineNumber":496,"author":{"gitId":"rexyyong"},"content":"| v2.0    | busy student | see my daily hydration goals on a progress bar                                                                                                                             | better visualise my daily progress                                     |","lastModifiedDate":"2024-04-15"},{"lineNumber":497,"author":{"gitId":"rexyyong"},"content":"| v2.0    | busy student | store my personal details such has height, weight, age, gender, exercise levels and body goals for the program calculator to calculate my recommended daily caloric intake | hit my body goals and be healthier                                     |","lastModifiedDate":"2024-04-15"},{"lineNumber":498,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":499,"author":{"gitId":"rexyyong"},"content":"## Appendix C: Non-Functional Requirements","lastModifiedDate":"2024-04-15"},{"lineNumber":500,"author":{"gitId":"rexyyong"},"content":"1. Should work on mainstream OS as long as it has Java `11` installed.","lastModifiedDate":"2024-04-15"},{"lineNumber":501,"author":{"gitId":"rexyyong"},"content":"2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able","lastModifiedDate":"2024-04-15"},{"lineNumber":502,"author":{"gitId":"rexyyong"},"content":"to accomplish most of the tasks fast and efficiently.","lastModifiedDate":"2024-04-15"},{"lineNumber":503,"author":{"gitId":"rexyyong"},"content":"3. Calories, sleep and hydration data should be accurately recorded and stored without loss if users follow instructions on app usage. ","lastModifiedDate":"2024-04-15"},{"lineNumber":504,"author":{"gitId":"rexyyong"},"content":"4. Data retrieval and display operations such as listing calories, sleep or hydration entries should be completed within 5 seconds.","lastModifiedDate":"2024-04-15"},{"lineNumber":505,"author":{"gitId":"rexyyong"},"content":"5. Error messages should be descriptive and provide actionable or intuitive guidance to users on how to resolve issues.","lastModifiedDate":"2024-04-15"},{"lineNumber":506,"author":{"gitId":"rexyyong"},"content":"6. The app codebase should be well-organised and documented to facilitate future updates and maintenance by development teams.","lastModifiedDate":"2024-04-15"},{"lineNumber":507,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":508,"author":{"gitId":"rexyyong"},"content":"## Appendix D: Glossary","lastModifiedDate":"2024-04-15"},{"lineNumber":509,"author":{"gitId":"rexyyong"},"content":"* Mainstream OS: Windows, Linux, Unix, MacOS","lastModifiedDate":"2024-04-15"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":511,"author":{"gitId":"rexyyong"},"content":"## Appendix E: Instructions for manual testing","lastModifiedDate":"2024-04-15"},{"lineNumber":512,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":513,"author":{"gitId":"shawnpong"},"content":"### Adding calories intake entries","lastModifiedDate":"2024-04-15"},{"lineNumber":514,"author":{"gitId":"shawnpong"},"content":"1. Test case: `calories in burger c/100 d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":515,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":516,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry is added to the calories list.","lastModifiedDate":"2024-04-15"},{"lineNumber":517,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":518,"author":{"gitId":"shawnpong"},"content":"2. Test case: `calories in burger c/100 d/2024-04-15 m/19,10,10`","lastModifiedDate":"2024-04-15"},{"lineNumber":519,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":520,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry with macronutrients is added to the calories list.","lastModifiedDate":"2024-04-15"},{"lineNumber":521,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":522,"author":{"gitId":"shawnpong"},"content":"3. Test case: `calories in burger c/-1 d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":523,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":524,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry is not added into calories list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":525,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":526,"author":{"gitId":"shawnpong"},"content":"4. Test case: `calories in burger c/100 c/100 d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":527,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":528,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry is not added into calories list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":529,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":530,"author":{"gitId":"shawnpong"},"content":"5. Test case: `calories in burger d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":531,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":532,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry is not added into calories list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":533,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":534,"author":{"gitId":"shawnpong"},"content":"### Adding calories outflow entries","lastModifiedDate":"2024-04-15"},{"lineNumber":535,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":536,"author":{"gitId":"shawnpong"},"content":"1. Test case: `calories out run c/100 d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":537,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":538,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry is added to the calories list.","lastModifiedDate":"2024-04-15"},{"lineNumber":539,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":540,"author":{"gitId":"shawnpong"},"content":"2. Test case: `calories out go gym c/-1 d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":541,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":542,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry is not added into calories list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":543,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":544,"author":{"gitId":"shawnpong"},"content":"3. Test case: `calories out run c/100 c/100 d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":545,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":546,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry is not added into calories list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":547,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":548,"author":{"gitId":"shawnpong"},"content":"4. Test case: `calories out play softball d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":549,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":550,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry is not added into calories list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":551,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":552,"author":{"gitId":"shawnpong"},"content":"### Listing calories entries","lastModifiedDate":"2024-04-15"},{"lineNumber":553,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: Calories data has already been added into calories list.","lastModifiedDate":"2024-04-15"},{"lineNumber":554,"author":{"gitId":"shawnpong"},"content":"2. Test case: `calories list`","lastModifiedDate":"2024-04-15"},{"lineNumber":555,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":556,"author":{"gitId":"shawnpong"},"content":"   Expected: List of calories data is displayed.","lastModifiedDate":"2024-04-15"},{"lineNumber":557,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":558,"author":{"gitId":"shawnpong"},"content":"### Deleting calories entries","lastModifiedDate":"2024-04-15"},{"lineNumber":559,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: Calories data has already been added into the Calories list.","lastModifiedDate":"2024-04-15"},{"lineNumber":560,"author":{"gitId":"shawnpong"},"content":"2. Test case: `calories list`, followed by `calories delete 1`","lastModifiedDate":"2024-04-15"},{"lineNumber":561,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":562,"author":{"gitId":"shawnpong"},"content":"    Expected: Calories entry with `SLEEPID` 1 is deleted from list. ","lastModifiedDate":"2024-04-15"},{"lineNumber":563,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":564,"author":{"gitId":"shawnpong"},"content":"3. Test case: `sleep list`, followed by `sleep delete -1`","lastModifiedDate":"2024-04-15"},{"lineNumber":565,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":566,"author":{"gitId":"shawnpong"},"content":"   Expected: No sleep entry deleted. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":567,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":568,"author":{"gitId":"shawnpong"},"content":"### Searching for calories item or items","lastModifiedDate":"2024-04-15"},{"lineNumber":569,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: Calories data with `cream` has already been added into the Calories list.","lastModifiedDate":"2024-04-15"},{"lineNumber":570,"author":{"gitId":"shawnpong"},"content":"2. Test case: `calories find cream`","lastModifiedDate":"2024-04-15"},{"lineNumber":571,"author":{"gitId":"shawnpong"},"content":"   Expected: Calories entry with keyword cream in description is shown.","lastModifiedDate":"2024-04-15"},{"lineNumber":572,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":573,"author":{"gitId":"shawnpong"},"content":"### Adding hydration entries","lastModifiedDate":"2024-04-15"},{"lineNumber":574,"author":{"gitId":"shawnpong"},"content":"1. Test case: `hydration in water v/500 d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":575,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":576,"author":{"gitId":"shawnpong"},"content":"    Expected: Hydration entry is added to the hydration list.","lastModifiedDate":"2024-04-15"},{"lineNumber":577,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":578,"author":{"gitId":"shawnpong"},"content":"2. Test case: `hydration in water v/500 d/24-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":579,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":580,"author":{"gitId":"shawnpong"},"content":"    Expected: No hydration entry is added to the hydration list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":581,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":582,"author":{"gitId":"shawnpong"},"content":"3. Test case: `hydration in water d/2024-04-15 v/500`","lastModifiedDate":"2024-04-15"},{"lineNumber":583,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":584,"author":{"gitId":"shawnpong"},"content":"    Expected: No hydration entry is added to the hydration list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":585,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":586,"author":{"gitId":"shawnpong"},"content":"### Listing hydration entries","lastModifiedDate":"2024-04-15"},{"lineNumber":587,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: Hydration data has already been added into hydration list.","lastModifiedDate":"2024-04-15"},{"lineNumber":588,"author":{"gitId":"shawnpong"},"content":"2. Test case: `hydration list`","lastModifiedDate":"2024-04-15"},{"lineNumber":589,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":590,"author":{"gitId":"shawnpong"},"content":"   Expected: List of hydration data is displayed.","lastModifiedDate":"2024-04-15"},{"lineNumber":591,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":592,"author":{"gitId":"shawnpong"},"content":"### Deleting a hydration entry","lastModifiedDate":"2024-04-15"},{"lineNumber":593,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: hydration data has already been added into hydration list.","lastModifiedDate":"2024-04-15"},{"lineNumber":594,"author":{"gitId":"shawnpong"},"content":"2. Test case: `hydration list, followed by hydration delete 1`","lastModifiedDate":"2024-04-15"},{"lineNumber":595,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":596,"author":{"gitId":"shawnpong"},"content":"   Expected: Hydration entry with HYDRATIONID 1 is deleted from list.","lastModifiedDate":"2024-04-15"},{"lineNumber":597,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":598,"author":{"gitId":"shawnpong"},"content":"3. Test case: hydration list, followed by hydration delete -1","lastModifiedDate":"2024-04-15"},{"lineNumber":599,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":600,"author":{"gitId":"shawnpong"},"content":"   Expected: No hydration entry deleted. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":601,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":602,"author":{"gitId":"shawnpong"},"content":"### Searching for hydration item or items","lastModifiedDate":"2024-04-15"},{"lineNumber":603,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: Hydration data with `milo` has already been added into the Hydration list.","lastModifiedDate":"2024-04-15"},{"lineNumber":604,"author":{"gitId":"shawnpong"},"content":"2. Test case: `hydration find milo`","lastModifiedDate":"2024-04-15"},{"lineNumber":605,"author":{"gitId":"shawnpong"},"content":"   Expected: Hydration entry with keyword milo in description is shown.","lastModifiedDate":"2024-04-15"},{"lineNumber":606,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":607,"author":{"gitId":"shawnpong"},"content":"### Adding sleep entries","lastModifiedDate":"2024-04-15"},{"lineNumber":608,"author":{"gitId":"rexyyong"},"content":"1. Test case: `sleep add 7 d/2024-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":609,"author":{"gitId":"shawnpong"},"content":"  ","lastModifiedDate":"2024-04-15"},{"lineNumber":610,"author":{"gitId":"shawnpong"},"content":"    Expected: Sleep entry is added to the sleep list.","lastModifiedDate":"2024-04-15"},{"lineNumber":611,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":612,"author":{"gitId":"rexyyong"},"content":"2. Test case: `sleep add 7 d/20-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":613,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":614,"author":{"gitId":"shawnpong"},"content":"   Expected: No sleep entry is added to the sleep list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":615,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":616,"author":{"gitId":"rexyyong"},"content":"3. Test case: `sleep add 25 d/20-04-15`","lastModifiedDate":"2024-04-15"},{"lineNumber":617,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":618,"author":{"gitId":"shawnpong"},"content":"   Expected: No sleep entry is added to the sleep list. Error details shown in message.","lastModifiedDate":"2024-04-15"},{"lineNumber":619,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":620,"author":{"gitId":"shawnpong"},"content":"### Listing sleep entries","lastModifiedDate":"2024-04-15"},{"lineNumber":621,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: Sleep data has already been added into sleep list.","lastModifiedDate":"2024-04-15"},{"lineNumber":622,"author":{"gitId":"rexyyong"},"content":"2. Test case: `sleep list`","lastModifiedDate":"2024-04-15"},{"lineNumber":623,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":624,"author":{"gitId":"shawnpong"},"content":"    Expected: List of sleep data is displayed.","lastModifiedDate":"2024-04-15"},{"lineNumber":625,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":626,"author":{"gitId":"shawnpong"},"content":"### Deleting a sleep entry","lastModifiedDate":"2024-04-15"},{"lineNumber":627,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: Sleep data has already been added into sleep list.","lastModifiedDate":"2024-04-15"},{"lineNumber":628,"author":{"gitId":"rexyyong"},"content":"2. Test case: `sleep list`, followed by `sleep delete 1`","lastModifiedDate":"2024-04-15"},{"lineNumber":629,"author":{"gitId":"rexyyong"},"content":"    Expected: Sleep entry with `SLEEPID` 1 is deleted from list.","lastModifiedDate":"2024-04-15"},{"lineNumber":630,"author":{"gitId":"rexyyong"},"content":"3. Test case: `sleep list`, followed by `sleep delete -1`","lastModifiedDate":"2024-04-15"},{"lineNumber":631,"author":{"gitId":"shawnpong"},"content":"    Expected: No sleep entry deleted. Error details shown in message. ","lastModifiedDate":"2024-04-15"},{"lineNumber":632,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":633,"author":{"gitId":"shawnpong"},"content":"### Setup user details","lastModifiedDate":"2024-04-15"},{"lineNumber":634,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: User details already populated with User Setup.","lastModifiedDate":"2024-04-15"},{"lineNumber":635,"author":{"gitId":"shawnpong"},"content":"2. Test case: `user details`","lastModifiedDate":"2024-04-15"},{"lineNumber":636,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":637,"author":{"gitId":"shawnpong"},"content":"   Expected: List of user details is displayed.","lastModifiedDate":"2024-04-15"},{"lineNumber":638,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":639,"author":{"gitId":"shawnpong"},"content":"### Listing user details","lastModifiedDate":"2024-04-15"},{"lineNumber":640,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: User details already populated with User Setup.","lastModifiedDate":"2024-04-15"},{"lineNumber":641,"author":{"gitId":"shawnpong"},"content":"2. Test case: `user details`","lastModifiedDate":"2024-04-15"},{"lineNumber":642,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":643,"author":{"gitId":"shawnpong"},"content":"   Expected: List of user details is displayed.","lastModifiedDate":"2024-04-15"},{"lineNumber":644,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":645,"author":{"gitId":"shawnpong"},"content":"### Updating user details","lastModifiedDate":"2024-04-15"},{"lineNumber":646,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: User details already populated with User Setup.","lastModifiedDate":"2024-04-15"},{"lineNumber":647,"author":{"gitId":"shawnpong"},"content":"2. Test case: `user update height 170`","lastModifiedDate":"2024-04-15"},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":649,"author":{"gitId":"shawnpong"},"content":"   Expected: User details height updated.","lastModifiedDate":"2024-04-15"},{"lineNumber":650,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":651,"author":{"gitId":"shawnpong"},"content":"### Viewing user progress","lastModifiedDate":"2024-04-15"},{"lineNumber":652,"author":{"gitId":"shawnpong"},"content":"1. Prerequisites: User details already populated with User Setup. Calories and hydration and sleep lists have been","lastModifiedDate":"2024-04-15"},{"lineNumber":653,"author":{"gitId":"shawnpong"},"content":"populated with some entries.","lastModifiedDate":"2024-04-15"},{"lineNumber":654,"author":{"gitId":"shawnpong"},"content":"2. Test case: `user progress`","lastModifiedDate":"2024-04-15"},{"lineNumber":655,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":656,"author":{"gitId":"shawnpong"},"content":"   Expected: User progress is shown for calories, hydration and sleep.","lastModifiedDate":"2024-04-15"},{"lineNumber":657,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"}],"authorContributionMap":{"rexyyong":175,"a-wild-chocolate":129,"owx0130":36,"shawnpong":206,"-":32,"paturikarthik":79}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"# LifeTrack","lastModifiedDate":"2024-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"LifeTrack is a desktop app for students to track their health data, optimized for use via a Command Line Interface (CLI). It tracks calories, hydration and sleep data for the user, while also providing daily recommendations for calorie and hydration intake, based on the user\u0027s build and gender, as well as their body goals and activity levels.","lastModifiedDate":"2024-04-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"-":6,"paturikarthik":2}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"LifeTrack is a desktop app for students to track their health data, optimized for use via a Command Line Interface (CLI). It tracks calories, hydration and sleep data for the user, while also providing daily recommendations for calorie and hydration intake, based on the user\u0027s build and gender, as well as their body goals and activity levels.","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"## Quick links","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"- [General](#general)","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"  - [help](#viewing-help-help)","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"  - [bye](#exiting-the-program-bye)","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"- [Calories Tracker](#calories-tracker)","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"  - [Input calorie Intake](#input-calorie-intake-calories-in)","lastModifiedDate":"2024-04-15"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"  - [Input calorie loss](#input-calorie-loss-calories-out)","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"  - [Listing calorie items](#listing-calorie-items-calories-list)","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"  - [Deleting a calorie item](#deleting-a-calorie-item-calories-delete)","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"  - [Searching for a calorie item](#searching-for-a-calorie-item-calories-find)","lastModifiedDate":"2024-04-15"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"- [Hydration Tracker](#hydration-tracker)","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"  - [Input hydration intake](#input-hydration-intake-hydration-in)","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"  - [Listing hydration items](#listing-hydration-items-hydration-list)","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"  - [Deleting a hydration item](#deleting-a-hydration-item-hydration-delete)","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"  - [Searching for a hydration item from hydration list](#searching-for-a-hydration-item-hydration-find)","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"- [Sleep Tracker](#sleep-tracker)","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"  - [Input sleeping hours](#input-sleeping-hours-sleep-add)","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"  - [Listing sleep records](#listing-sleep-records-sleep-list)","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"  - [Deleting a sleep record](#deleting-a-sleep-record-sleep-delete)","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"- [User Profile](#user-profile)","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"  - [Set Up User Profile](#set-up-user-profile-user-setup)","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"  - [Check User Details](#check-your-users-details-user-details)","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"  - [Update User Details](#update-your-users-details-user-update)","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"  - [Check User\u0027s daily calories and hydration consumption and your sleep statistics](#check-your-daily-calories-and-hydration-consumption-and-your-sleep-statistics-user-progress)","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"- [Saving the data](#saving-the-data)","lastModifiedDate":"2024-04-15"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"- [Editing the data](#editing-the-data)","lastModifiedDate":"2024-04-15"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"- [FAQ](#faq)","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"- [Command Summary](#command-summary)","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Ensure that you have Java 11 or above installed.","lastModifiedDate":"2020-05-24"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"2. Download the latest version of `LifeTrack` from [here](https://github.com/AY2324S2-CS2113-F15-2/tp/releases). You may move the JAR file to anywhere in your computer if you wish.","lastModifiedDate":"2024-04-11"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"3. Open a terminal window and change directories to where the JAR file is located.","lastModifiedDate":"2024-04-11"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"4. Run the command `java -jar LifeTrack.jar` and the application will start running.","lastModifiedDate":"2024-04-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"[//]: # (## Features )","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"## General","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"### Viewing help: `help`","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"Shows a help message listing the commands available in the application.","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"`help`","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"Exits the program.","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"**Format:** ","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"`bye`","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"#### Expected output","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"         Bye! See you again soon ^^","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"## Calories Tracker","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"### Input calorie intake: `calories in`","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"Adds a calorie gaining activity into the calories tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"Macronutrients such as Carbohydrates, Proteins and Fats can be included if needed.","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"rexyyong"},"content":"The `caloriesID` of each entry increments based on the previous `caloriesID`. For example, if highest","lastModifiedDate":"2024-04-15"},{"lineNumber":72,"author":{"gitId":"rexyyong"},"content":"`caloriesID` is now 10, and user deletes the highest entry, the `caloriesID` of the next addition ","lastModifiedDate":"2024-04-15"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"would be 11. ","lastModifiedDate":"2024-04-15"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"**Format:** ","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"rexyyong"},"content":"`calories in DESCRIPTION c/CALORIES d/DATE [m/CARBOHYDRATES,PROTEIN,FATS]`","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"rexyyong"},"content":"* The `DESCRIPTION` refers to the food that the person consumed.","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"rexyyong"},"content":"* The `CALORIES` must be a positive **integer** 1, 2, 3, …, measured in kcal. The limit for `CALORIES` for each entry ","lastModifiedDate":"2024-04-14"},{"lineNumber":80,"author":{"gitId":"rexyyong"},"content":" is 5000 (inclusive).","lastModifiedDate":"2024-04-14"},{"lineNumber":81,"author":{"gitId":"rexyyong"},"content":"* The `DATE` provided should be of the form YYYY-MM-DD, such as 2024-03-04.","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"rexyyong"},"content":"* Macronutrients field including `CARBOHYDRATES`, `PROTEINS` and `FATS` is optional. The macronutrients must be a positive **integer** 1, 2, 3, measured in grams.","lastModifiedDate":"2024-04-10"},{"lineNumber":83,"author":{"gitId":"rexyyong"},"content":"The limit for each macronutrient per entry is 800g (inclusive).","lastModifiedDate":"2024-04-15"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"**Examples:** ","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"rexyyong"},"content":"* `calories in chicken rice c/678 d/2022-02-24`","lastModifiedDate":"2024-04-03"},{"lineNumber":87,"author":{"gitId":"rexyyong"},"content":"* `calories in cai png c/543 d/2024-04-13 m/200, 150, 100`","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"rexyyong"},"content":"* `calories in drink liho milk tea c/200 d/2024-04-14 m/50, 20, 10`","lastModifiedDate":"2024-04-15"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"### Input calorie loss: `calories out`","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"Adds a calorie burning activity into the calories tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"**Format:** ","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"rexyyong"},"content":"`calories out DESCRIPTION c/CALORIES d/DATE`","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":96,"author":{"gitId":"rexyyong"},"content":"* The `DESCRIPTION` refers to any activity that resulted in loss of calories.","lastModifiedDate":"2024-04-03"},{"lineNumber":97,"author":{"gitId":"rexyyong"},"content":"* The `CALORIES` must be a positive **integer** 1, 2, 3, …, measured in kcal. The limit for `CALORIES` for each entry","lastModifiedDate":"2024-04-14"},{"lineNumber":98,"author":{"gitId":"rexyyong"},"content":"  is 5000 (inclusive).","lastModifiedDate":"2024-04-14"},{"lineNumber":99,"author":{"gitId":"rexyyong"},"content":"* The `DATE` provided should be of the form YYYY-MM-DD such as 2024-04-03.","lastModifiedDate":"2024-04-03"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"* `calories out Run around NUS c/678 d/2022-02-24` ","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"rexyyong"},"content":"* `calories out go gym c/300 d/2024-04-03`","lastModifiedDate":"2024-04-03"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":106,"author":{"gitId":"rexyyong"},"content":"#### Expected output for `calories out go gym c/300 d/2024-04-03`","lastModifiedDate":"2024-04-15"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":108,"author":{"gitId":"rexyyong"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":109,"author":{"gitId":"rexyyong"},"content":"         The following entry has been added to your caloric list!","lastModifiedDate":"2024-04-15"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"                 caloriesID: 4, Date: 2024-04-03, Description: go gym, Calories: 300","lastModifiedDate":"2024-04-15"},{"lineNumber":111,"author":{"gitId":"rexyyong"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"### Listing calorie items: `calories list`","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"rexyyong"},"content":"Shows a list of all activities in the calories tacker. Calories inflow and outflow are displayed separately.","lastModifiedDate":"2024-04-10"},{"lineNumber":115,"author":{"gitId":"rexyyong"},"content":"All entries are sorted by date, in ascending order, from earlier dates to present dates.","lastModifiedDate":"2024-04-10"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"`calories list`","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"### Deleting a calorie item: `calories delete`","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"rexyyong"},"content":"Deletes the specified calories ID entry from the calories tracker according to the `CALORIESID`.","lastModifiedDate":"2024-04-10"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"rexyyong"},"content":"`calories delete CALORIESID`","lastModifiedDate":"2024-04-10"},{"lineNumber":125,"author":{"gitId":"rexyyong"},"content":"* The `CALORIESID` must be a positive **integer** 1, 2, 3 and so on.","lastModifiedDate":"2024-04-10"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"rexyyong"},"content":"* `calories list` followed by `calories delete 2` deletes the entry with `CALORIESID` 2 in the calories tracker.","lastModifiedDate":"2024-04-10"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"rexyyong"},"content":"#### Expected output for `calories delete 3` based on calories list shown in example above.","lastModifiedDate":"2024-04-15"},{"lineNumber":132,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":133,"author":{"gitId":"paturikarthik"},"content":"### Searching for a calorie item: `calories find`","lastModifiedDate":"2024-04-14"},{"lineNumber":134,"author":{"gitId":"paturikarthik"},"content":"Finds and retrieves all calories entries from the caloric list containing the keyword to search for.","lastModifiedDate":"2024-04-14"},{"lineNumber":135,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":136,"author":{"gitId":"paturikarthik"},"content":"**Format:**","lastModifiedDate":"2024-04-14"},{"lineNumber":137,"author":{"gitId":"paturikarthik"},"content":"`calories find KEYWORD`","lastModifiedDate":"2024-04-14"},{"lineNumber":138,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":139,"author":{"gitId":"paturikarthik"},"content":"**Examples:**","lastModifiedDate":"2024-04-14"},{"lineNumber":140,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":141,"author":{"gitId":"rexyyong"},"content":"* `calories find cream` retrieves all the calories entries with `cream` in their description.","lastModifiedDate":"2024-04-15"},{"lineNumber":142,"author":{"gitId":"paturikarthik"},"content":"* ","lastModifiedDate":"2024-04-15"},{"lineNumber":143,"author":{"gitId":"paturikarthik"},"content":"#### Expected output of `calories find gym` based on calories list shown in example above.","lastModifiedDate":"2024-04-15"},{"lineNumber":144,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":145,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":146,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":147,"author":{"gitId":"rexyyong"},"content":"         Caloric List based on your search:","lastModifiedDate":"2024-04-15"},{"lineNumber":148,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":149,"author":{"gitId":"rexyyong"},"content":"         Your Caloric Inflow List:","lastModifiedDate":"2024-04-15"},{"lineNumber":150,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":151,"author":{"gitId":"rexyyong"},"content":"         Your Caloric Outflow List:","lastModifiedDate":"2024-04-15"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"         1.      caloriesID: 4, Date: 2024-04-03, Description: go gym, Calories: 300","lastModifiedDate":"2024-04-15"},{"lineNumber":153,"author":{"gitId":"rexyyong"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":154,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":155,"author":{"gitId":"shawnpong"},"content":"## Hydration Tracker","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":157,"author":{"gitId":"shawnpong"},"content":"### Input hydration intake: `hydration in`","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"shawnpong"},"content":"Adds a hydration record into the hydration tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":159,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":161,"author":{"gitId":"shawnpong"},"content":"`hydration in DESCRIPTION v/VOLUME d/DATE`","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"shawnpong"},"content":"* The `DESCRIPTION` refers to the food that the person consumed.","lastModifiedDate":"2024-04-09"},{"lineNumber":164,"author":{"gitId":"shawnpong"},"content":"* The `VOLUME` must be a positive integer 1, 2, 3, …, measured in milliliters. The limit for `volume` for each entry is ","lastModifiedDate":"2024-04-15"},{"lineNumber":165,"author":{"gitId":"shawnpong"},"content":"10000(inclusive).","lastModifiedDate":"2024-04-15"},{"lineNumber":166,"author":{"gitId":"shawnpong"},"content":"* The `DATE` provided should be of the form YYYY-MM-DD, such as 2024-03-04.","lastModifiedDate":"2024-04-09"},{"lineNumber":167,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":169,"author":{"gitId":"shawnpong"},"content":"* `hydration in Milo v/1000 d/2022-03-25`","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"shawnpong"},"content":"* `hydration in Tea v/200 d/2022-02-05`","lastModifiedDate":"2024-04-02"},{"lineNumber":171,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":172,"author":{"gitId":"shawnpong"},"content":"### Listing hydration items: `hydration list`","lastModifiedDate":"2024-04-02"},{"lineNumber":173,"author":{"gitId":"shawnpong"},"content":"Show the list of all hydration records in the hydration tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":174,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":175,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":176,"author":{"gitId":"shawnpong"},"content":"`hydration list`","lastModifiedDate":"2024-04-02"},{"lineNumber":177,"author":{"gitId":"shawnpong"},"content":"#### Expected output","lastModifiedDate":"2024-04-05"},{"lineNumber":178,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":179,"author":{"gitId":"shawnpong"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-05"},{"lineNumber":180,"author":{"gitId":"shawnpong"},"content":"         Your Hydration List:","lastModifiedDate":"2024-04-05"},{"lineNumber":181,"author":{"gitId":"rexyyong"},"content":"         1.      hydrationID: 1, Date: 2024-04-10, Description: milo, Volume: 100","lastModifiedDate":"2024-04-10"},{"lineNumber":182,"author":{"gitId":"rexyyong"},"content":"         2.      hydrationID: 2, Date: 2024-04-10, Description: coke, Volume: 1000","lastModifiedDate":"2024-04-10"},{"lineNumber":183,"author":{"gitId":"shawnpong"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-05"},{"lineNumber":184,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":185,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":186,"author":{"gitId":"shawnpong"},"content":"### Deleting a hydration item: `hydration delete`","lastModifiedDate":"2024-04-02"},{"lineNumber":187,"author":{"gitId":"rexyyong"},"content":"Deletes the specified hydration entry according to the `HYDRATIONID`.","lastModifiedDate":"2024-04-10"},{"lineNumber":188,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":189,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":190,"author":{"gitId":"rexyyong"},"content":"`hydration delete HYDRATIONID`","lastModifiedDate":"2024-04-10"},{"lineNumber":191,"author":{"gitId":"rexyyong"},"content":"* The `HYDRATIONID` must be a positive **integer** 1, 2, 3 and so on.","lastModifiedDate":"2024-04-10"},{"lineNumber":192,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":193,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":194,"author":{"gitId":"rexyyong"},"content":"* `hydration list` followed by `hydration delete 2` deletes the entry with `HYDRATIONID` 2 in the hydration tracker.","lastModifiedDate":"2024-04-10"},{"lineNumber":195,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":196,"author":{"gitId":"paturikarthik"},"content":"#### Expected output for `hydration delete 1`","lastModifiedDate":"2024-04-15"},{"lineNumber":197,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":198,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":199,"author":{"gitId":"paturikarthik"},"content":"         The following hydration record has been successfully deleted!","lastModifiedDate":"2024-04-15"},{"lineNumber":200,"author":{"gitId":"paturikarthik"},"content":"                 hydrationID: 1, Date: 2024-04-15, Description: water, Volume: 1000","lastModifiedDate":"2024-04-15"},{"lineNumber":201,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":202,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":203,"author":{"gitId":"paturikarthik"},"content":"### Searching for a hydration item: `hydration find`","lastModifiedDate":"2024-04-14"},{"lineNumber":204,"author":{"gitId":"paturikarthik"},"content":"Finds and retrieves all hydration entries from the hydration list containing the keyword to search for.","lastModifiedDate":"2024-04-14"},{"lineNumber":205,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":206,"author":{"gitId":"paturikarthik"},"content":"**Format:**","lastModifiedDate":"2024-04-14"},{"lineNumber":207,"author":{"gitId":"paturikarthik"},"content":"`hydration find KEYWORD`","lastModifiedDate":"2024-04-14"},{"lineNumber":208,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":209,"author":{"gitId":"paturikarthik"},"content":"**Examples:**","lastModifiedDate":"2024-04-14"},{"lineNumber":210,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":211,"author":{"gitId":"paturikarthik"},"content":"* `hydration find water` retrieves all the hydration entries with `water` in their description.","lastModifiedDate":"2024-04-14"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":213,"author":{"gitId":"paturikarthik"},"content":"#### Expected output for `hydration find water`","lastModifiedDate":"2024-04-15"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":215,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":216,"author":{"gitId":"paturikarthik"},"content":"         Hydration List based on your search:","lastModifiedDate":"2024-04-15"},{"lineNumber":217,"author":{"gitId":"paturikarthik"},"content":"         1.      hydrationID: 1, Date: 2024-04-15, Description: water, Volume: 1000","lastModifiedDate":"2024-04-15"},{"lineNumber":218,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":220,"author":{"gitId":"shawnpong"},"content":"## Sleep Tracker","lastModifiedDate":"2024-04-02"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":222,"author":{"gitId":"shawnpong"},"content":"### Input sleeping hours: `sleep add`","lastModifiedDate":"2024-04-02"},{"lineNumber":223,"author":{"gitId":"shawnpong"},"content":"Adds a sleep record into the sleep tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":225,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":226,"author":{"gitId":"shawnpong"},"content":"`sleep add DURATION d/DATE`","lastModifiedDate":"2024-04-02"},{"lineNumber":227,"author":{"gitId":"shawnpong"},"content":"* The duration provided must be a positive real number.","lastModifiedDate":"2024-04-02"},{"lineNumber":228,"author":{"gitId":"a-wild-chocolate"},"content":"* The duration should not exceed 24 hours.","lastModifiedDate":"2024-04-10"},{"lineNumber":229,"author":{"gitId":"shawnpong"},"content":"* The date provided should be of the form YYYY-MM-DD.","lastModifiedDate":"2024-04-02"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":232,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":233,"author":{"gitId":"a-wild-chocolate"},"content":"* `sleep add 7.5 d/2024-03-11`","lastModifiedDate":"2024-04-05"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":235,"author":{"gitId":"paturikarthik"},"content":"#### Expected output for `sleep add 7.5 d/2024-03-11`:","lastModifiedDate":"2024-04-15"},{"lineNumber":236,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":237,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":238,"author":{"gitId":"paturikarthik"},"content":"         The following entry has been added to your sleep list!","lastModifiedDate":"2024-04-15"},{"lineNumber":239,"author":{"gitId":"paturikarthik"},"content":"                 Sleep ID: 5, Date: 2024-03-11, Duration: 7.50 hours","lastModifiedDate":"2024-04-15"},{"lineNumber":240,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":241,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":242,"author":{"gitId":"shawnpong"},"content":"### Listing sleep records: `sleep list`","lastModifiedDate":"2024-04-02"},{"lineNumber":243,"author":{"gitId":"shawnpong"},"content":"Show the list of all sleep records in the sleep tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":244,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":245,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":246,"author":{"gitId":"shawnpong"},"content":"`sleep list`","lastModifiedDate":"2024-04-02"},{"lineNumber":247,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":248,"author":{"gitId":"paturikarthik"},"content":"#### Expected output:","lastModifiedDate":"2024-04-15"},{"lineNumber":249,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":250,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":251,"author":{"gitId":"paturikarthik"},"content":"         Your Sleep List:","lastModifiedDate":"2024-04-15"},{"lineNumber":252,"author":{"gitId":"paturikarthik"},"content":"         1.      Sleep ID: 5, Date: 2024-03-11, Duration: 7.50 hours","lastModifiedDate":"2024-04-15"},{"lineNumber":253,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":254,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":255,"author":{"gitId":"shawnpong"},"content":"### Deleting a sleep record: `sleep delete`","lastModifiedDate":"2024-04-02"},{"lineNumber":256,"author":{"gitId":"rexyyong"},"content":"Deletes the specified sleep entry according to the `SLEEPID`.","lastModifiedDate":"2024-04-10"},{"lineNumber":257,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":258,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":259,"author":{"gitId":"a-wild-chocolate"},"content":"`sleep delete SLEEPID`","lastModifiedDate":"2024-04-10"},{"lineNumber":260,"author":{"gitId":"rexyyong"},"content":"* Delete the sleep record with specified `SLEEPID`.","lastModifiedDate":"2024-04-10"},{"lineNumber":261,"author":{"gitId":"rexyyong"},"content":"* The `SLEEPID` refers to the id number shown in the displayed sleeping records list.","lastModifiedDate":"2024-04-10"},{"lineNumber":262,"author":{"gitId":"rexyyong"},"content":"* The `SLEEPID` must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2024-04-10"},{"lineNumber":263,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":264,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":265,"author":{"gitId":"a-wild-chocolate"},"content":"* `sleep list` followed by `sleep delete 2` deletes the sleep record with `SLEEPID` 2 from the sleep tracker.","lastModifiedDate":"2024-04-15"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":267,"author":{"gitId":"paturikarthik"},"content":"#### Expected output for `sleep delete 5`:","lastModifiedDate":"2024-04-15"},{"lineNumber":268,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":269,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":270,"author":{"gitId":"paturikarthik"},"content":"         The following sleep record has been successfully deleted!","lastModifiedDate":"2024-04-15"},{"lineNumber":271,"author":{"gitId":"paturikarthik"},"content":"                 Sleep ID: 5, Date: 2024-03-11, Duration: 7.50 hours","lastModifiedDate":"2024-04-15"},{"lineNumber":272,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":273,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":274,"author":{"gitId":"paturikarthik"},"content":"## User Profile","lastModifiedDate":"2024-04-04"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":276,"author":{"gitId":"paturikarthik"},"content":"### Set up user profile: `user setup`","lastModifiedDate":"2024-04-04"},{"lineNumber":277,"author":{"gitId":"paturikarthik"},"content":"Creates/edits an existing user profile.","lastModifiedDate":"2024-04-04"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":279,"author":{"gitId":"paturikarthik"},"content":"**Format:**","lastModifiedDate":"2024-04-04"},{"lineNumber":280,"author":{"gitId":"owx0130"},"content":"`user setup NAME h/HEIGHT w/WEIGHT a/AGE s/GENDER e/EXERCISE_LEVELS g/BODY_GOAL`","lastModifiedDate":"2024-04-15"},{"lineNumber":281,"author":{"gitId":"paturikarthik"},"content":"* The height provided must be an integer between 90 and 225 cms.","lastModifiedDate":"2024-04-04"},{"lineNumber":282,"author":{"gitId":"paturikarthik"},"content":"* The weight provided must be an integer between 30 and 200 kgs.","lastModifiedDate":"2024-04-04"},{"lineNumber":283,"author":{"gitId":"paturikarthik"},"content":"* The age provided must be an integer between 13 and 30 years old.","lastModifiedDate":"2024-04-10"},{"lineNumber":284,"author":{"gitId":"paturikarthik"},"content":"* The gender provided must be either `male`/`m` or `female`/`f`. It is not case-sensitive.","lastModifiedDate":"2024-04-15"},{"lineNumber":285,"author":{"gitId":"paturikarthik"},"content":"* The exercise levels provided must be an integer between 1 and 5.","lastModifiedDate":"2024-04-04"},{"lineNumber":286,"author":{"gitId":"paturikarthik"},"content":"* The body goal provided must be an integer between 1 and 5.","lastModifiedDate":"2024-04-04"},{"lineNumber":287,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":288,"author":{"gitId":"paturikarthik"},"content":"**Notes about the command format:**","lastModifiedDate":"2024-04-04"},{"lineNumber":289,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":290,"author":{"gitId":"paturikarthik"},"content":"| Exercise Level Input |            Corresponding Exercise Levels            |","lastModifiedDate":"2024-04-04"},{"lineNumber":291,"author":{"gitId":"paturikarthik"},"content":"|:--------------------:|:---------------------------------------------------:|","lastModifiedDate":"2024-04-15"},{"lineNumber":292,"author":{"gitId":"paturikarthik"},"content":"|          1           |          Sedentary (little or no exercise)          |","lastModifiedDate":"2024-04-15"},{"lineNumber":293,"author":{"gitId":"paturikarthik"},"content":"|          2           |    Lightly Active (exercise 1 to 3 days a week)     |","lastModifiedDate":"2024-04-15"},{"lineNumber":294,"author":{"gitId":"paturikarthik"},"content":"|          3           |  Moderately Active  (exercise 3 to 5 days a week)   |","lastModifiedDate":"2024-04-15"},{"lineNumber":295,"author":{"gitId":"paturikarthik"},"content":"|          4           |      Very Active (exercise 6 to 7 days a week)      |","lastModifiedDate":"2024-04-15"},{"lineNumber":296,"author":{"gitId":"paturikarthik"},"content":"|          5           | Extremely Active (hard exercise 6 to 7 days a week) |","lastModifiedDate":"2024-04-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":298,"author":{"gitId":"paturikarthik"},"content":"| Body Goal Input |             Corresponding Goal             |","lastModifiedDate":"2024-04-04"},{"lineNumber":299,"author":{"gitId":"paturikarthik"},"content":"|:---------------:|:------------------------------------------:|","lastModifiedDate":"2024-04-15"},{"lineNumber":300,"author":{"gitId":"paturikarthik"},"content":"|        1        |  Quick Weight Loss (20% calorie deficit)   |","lastModifiedDate":"2024-04-15"},{"lineNumber":301,"author":{"gitId":"paturikarthik"},"content":"|        2        | Moderate Weight Loss (10% calorie deficit) |","lastModifiedDate":"2024-04-15"},{"lineNumber":302,"author":{"gitId":"paturikarthik"},"content":"|        3        |              Maintain Weight               |","lastModifiedDate":"2024-04-04"},{"lineNumber":303,"author":{"gitId":"paturikarthik"},"content":"|        4        | Moderate Weight Gain (10% calorie surplus) |","lastModifiedDate":"2024-04-15"},{"lineNumber":304,"author":{"gitId":"paturikarthik"},"content":"|        5        |  Quick Weight Gain (20% calorie surplus)   |","lastModifiedDate":"2024-04-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":307,"author":{"gitId":"paturikarthik"},"content":"**Examples:**","lastModifiedDate":"2024-04-04"},{"lineNumber":308,"author":{"gitId":"paturikarthik"},"content":"* `user setup Tom h/180 w/80 a/25 s/male e/3 g/2`","lastModifiedDate":"2024-04-04"},{"lineNumber":309,"author":{"gitId":"paturikarthik"},"content":"* `user setup Jane h/163 w/54 a/23 s/female e/2 g/3`","lastModifiedDate":"2024-04-04"},{"lineNumber":310,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":311,"author":{"gitId":"paturikarthik"},"content":"#### Expected Output:","lastModifiedDate":"2024-04-15"},{"lineNumber":312,"author":{"gitId":"paturikarthik"},"content":"When the command `user setup Jane h/163 w/54 a/23 s/female e/2 g/3` is entered in the terminal, the following output is expected:","lastModifiedDate":"2024-04-15"},{"lineNumber":313,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":314,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":315,"author":{"gitId":"paturikarthik"},"content":"         Hello, Jane! Thank you for completing the setup :)","lastModifiedDate":"2024-04-15"},{"lineNumber":316,"author":{"gitId":"paturikarthik"},"content":"         You need to consume 1763 calories per day to hit your goals!","lastModifiedDate":"2024-04-15"},{"lineNumber":317,"author":{"gitId":"paturikarthik"},"content":"         User details:","lastModifiedDate":"2024-04-15"},{"lineNumber":318,"author":{"gitId":"paturikarthik"},"content":"         Name: Jane","lastModifiedDate":"2024-04-15"},{"lineNumber":319,"author":{"gitId":"paturikarthik"},"content":"         Height: 163","lastModifiedDate":"2024-04-15"},{"lineNumber":320,"author":{"gitId":"paturikarthik"},"content":"         Weight: 54","lastModifiedDate":"2024-04-15"},{"lineNumber":321,"author":{"gitId":"paturikarthik"},"content":"         Age: 23","lastModifiedDate":"2024-04-15"},{"lineNumber":322,"author":{"gitId":"paturikarthik"},"content":"         Sex: female","lastModifiedDate":"2024-04-15"},{"lineNumber":323,"author":{"gitId":"paturikarthik"},"content":"         Exercise Levels: 2 out of 5 (Lightly Active)","lastModifiedDate":"2024-04-15"},{"lineNumber":324,"author":{"gitId":"paturikarthik"},"content":"         Goal: 3 out of 5 (Maintain Weight)","lastModifiedDate":"2024-04-15"},{"lineNumber":325,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":326,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":327,"author":{"gitId":"paturikarthik"},"content":"### Check your user\u0027s details: `user details`","lastModifiedDate":"2024-04-14"},{"lineNumber":328,"author":{"gitId":"paturikarthik"},"content":"Displays the details of the user who is using _LifeTrack_.","lastModifiedDate":"2024-04-14"},{"lineNumber":329,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":330,"author":{"gitId":"paturikarthik"},"content":"**Format:**","lastModifiedDate":"2024-04-14"},{"lineNumber":331,"author":{"gitId":"paturikarthik"},"content":"`user details`","lastModifiedDate":"2024-04-14"},{"lineNumber":332,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":333,"author":{"gitId":"paturikarthik"},"content":"**Notes about the command:**","lastModifiedDate":"2024-04-14"},{"lineNumber":334,"author":{"gitId":"paturikarthik"},"content":"If you have not set your user up beforehand, this command will prompt you to do so instead.","lastModifiedDate":"2024-04-14"},{"lineNumber":335,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":336,"author":{"gitId":"paturikarthik"},"content":"#### Expected output","lastModifiedDate":"2024-04-14"},{"lineNumber":337,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":338,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-14"},{"lineNumber":339,"author":{"gitId":"paturikarthik"},"content":"         User details:","lastModifiedDate":"2024-04-14"},{"lineNumber":340,"author":{"gitId":"paturikarthik"},"content":"         Name: John","lastModifiedDate":"2024-04-14"},{"lineNumber":341,"author":{"gitId":"paturikarthik"},"content":"         Height: 170","lastModifiedDate":"2024-04-14"},{"lineNumber":342,"author":{"gitId":"paturikarthik"},"content":"         Weight: 80","lastModifiedDate":"2024-04-14"},{"lineNumber":343,"author":{"gitId":"paturikarthik"},"content":"         Age: 23","lastModifiedDate":"2024-04-14"},{"lineNumber":344,"author":{"gitId":"paturikarthik"},"content":"         Sex: male","lastModifiedDate":"2024-04-14"},{"lineNumber":345,"author":{"gitId":"paturikarthik"},"content":"         Exercise Levels: 2 out of 5 (Lightly Active)","lastModifiedDate":"2024-04-14"},{"lineNumber":346,"author":{"gitId":"paturikarthik"},"content":"         Goal: 4 out of 5 (Moderate Weight Gain)","lastModifiedDate":"2024-04-14"},{"lineNumber":347,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-14"},{"lineNumber":348,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":349,"author":{"gitId":"paturikarthik"},"content":"### Update your user\u0027s details: `user update`","lastModifiedDate":"2024-04-14"},{"lineNumber":350,"author":{"gitId":"paturikarthik"},"content":"Updates the details of the user depending on their input.","lastModifiedDate":"2024-04-14"},{"lineNumber":351,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":352,"author":{"gitId":"paturikarthik"},"content":"**Format:**","lastModifiedDate":"2024-04-14"},{"lineNumber":353,"author":{"gitId":"paturikarthik"},"content":"`user update \u003cFIELD_TO_UPDATE\u003e \u003cNEWVALUE\u003e`","lastModifiedDate":"2024-04-14"},{"lineNumber":354,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":355,"author":{"gitId":"paturikarthik"},"content":"**List of possible fields to update:**","lastModifiedDate":"2024-04-14"},{"lineNumber":356,"author":{"gitId":"paturikarthik"},"content":"1. name","lastModifiedDate":"2024-04-14"},{"lineNumber":357,"author":{"gitId":"paturikarthik"},"content":"2. height","lastModifiedDate":"2024-04-14"},{"lineNumber":358,"author":{"gitId":"paturikarthik"},"content":"3. weight","lastModifiedDate":"2024-04-14"},{"lineNumber":359,"author":{"gitId":"paturikarthik"},"content":"4. age","lastModifiedDate":"2024-04-14"},{"lineNumber":360,"author":{"gitId":"paturikarthik"},"content":"5. sex","lastModifiedDate":"2024-04-14"},{"lineNumber":361,"author":{"gitId":"paturikarthik"},"content":"6. exercise levels","lastModifiedDate":"2024-04-14"},{"lineNumber":362,"author":{"gitId":"paturikarthik"},"content":"7. goal","lastModifiedDate":"2024-04-14"},{"lineNumber":363,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":364,"author":{"gitId":"paturikarthik"},"content":"#### Examples:","lastModifiedDate":"2024-04-14"},{"lineNumber":365,"author":{"gitId":"paturikarthik"},"content":"- `user update weight 70`","lastModifiedDate":"2024-04-14"},{"lineNumber":366,"author":{"gitId":"paturikarthik"},"content":"- `user update height 170`","lastModifiedDate":"2024-04-14"},{"lineNumber":367,"author":{"gitId":"paturikarthik"},"content":"- `user update exercise levels 2`","lastModifiedDate":"2024-04-14"},{"lineNumber":368,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":369,"author":{"gitId":"paturikarthik"},"content":"#### Expected Output:","lastModifiedDate":"2024-04-15"},{"lineNumber":370,"author":{"gitId":"paturikarthik"},"content":"When the command `user update name Karthik` is entered, the following output is expected:","lastModifiedDate":"2024-04-15"},{"lineNumber":371,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":372,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":373,"author":{"gitId":"paturikarthik"},"content":"         The following change has been made:","lastModifiedDate":"2024-04-15"},{"lineNumber":374,"author":{"gitId":"paturikarthik"},"content":"         Name: Karthik","lastModifiedDate":"2024-04-15"},{"lineNumber":375,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-15"},{"lineNumber":376,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":377,"author":{"gitId":"paturikarthik"},"content":"### Check your daily calories and hydration consumption and your sleep statistics: `user progress`","lastModifiedDate":"2024-04-14"},{"lineNumber":378,"author":{"gitId":"paturikarthik"},"content":"Displays progress bars to show the percentage of calories and hydration you have consumed as well as sleep you have gotten over the past 3 days.","lastModifiedDate":"2024-04-14"},{"lineNumber":379,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":380,"author":{"gitId":"paturikarthik"},"content":"**Format:**","lastModifiedDate":"2024-04-04"},{"lineNumber":381,"author":{"gitId":"paturikarthik"},"content":"`user progress`","lastModifiedDate":"2024-04-04"},{"lineNumber":382,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":383,"author":{"gitId":"paturikarthik"},"content":"**Notes about the command:**","lastModifiedDate":"2024-04-04"},{"lineNumber":384,"author":{"gitId":"paturikarthik"},"content":"If you have not set your user up beforehand, this command will prompt you to do so instead.","lastModifiedDate":"2024-04-04"},{"lineNumber":385,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":386,"author":{"gitId":"owx0130"},"content":"## Saving the data","lastModifiedDate":"2024-04-15"},{"lineNumber":387,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":388,"author":{"gitId":"owx0130"},"content":"Any data input by the user while the application is running will be stored in the `[JAR file location]/data` directory, which is automatically created by the application. Existing data found in the `/data` directory is automatically retrieved from this directory when the application is relaunched. There is no need to save manually.","lastModifiedDate":"2024-04-15"},{"lineNumber":389,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":390,"author":{"gitId":"owx0130"},"content":"## Editing the data","lastModifiedDate":"2024-04-15"},{"lineNumber":391,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":392,"author":{"gitId":"owx0130"},"content":"All data is saved as `.txt` files in the `[JAR file location]/data` directory. The data files that users should be aware of are:","lastModifiedDate":"2024-04-15"},{"lineNumber":393,"author":{"gitId":"owx0130"},"content":"- Calories List data: `/data/caloriesData.txt`","lastModifiedDate":"2024-04-15"},{"lineNumber":394,"author":{"gitId":"owx0130"},"content":"- Hydration List data: `/data/hydrationData.txt`","lastModifiedDate":"2024-04-15"},{"lineNumber":395,"author":{"gitId":"owx0130"},"content":"- Sleep List data: `/data/sleepData.txt`","lastModifiedDate":"2024-04-15"},{"lineNumber":396,"author":{"gitId":"owx0130"},"content":"- User data: `/data/userData.txt`","lastModifiedDate":"2024-04-15"},{"lineNumber":397,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":398,"author":{"gitId":"owx0130"},"content":"Advanced users are welcome to update data directly by editing the data files. However, do take note of the following:","lastModifiedDate":"2024-04-15"},{"lineNumber":399,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":400,"author":{"gitId":"owx0130"},"content":"\u003e **Caution**: LifeTrack reads the data files line-by-line upon launching. If any line is found to be of invalid format, it will automatically be ignored, and the application will continue reading from subsequent lines (if any). Do take note that performing the below functions will update the data file, which means that any corrupt data existing prior will be wiped.","lastModifiedDate":"2024-04-15"},{"lineNumber":401,"author":{"gitId":"owx0130"},"content":"\u003e - Calories List: `calories in`, `calories out`, `calories delete`","lastModifiedDate":"2024-04-15"},{"lineNumber":402,"author":{"gitId":"owx0130"},"content":"\u003e - Hydration List: `hydration in`, `hydration delete`","lastModifiedDate":"2024-04-15"},{"lineNumber":403,"author":{"gitId":"owx0130"},"content":"\u003e - Sleep List: `sleep add`, `sleep delete`","lastModifiedDate":"2024-04-15"},{"lineNumber":404,"author":{"gitId":"owx0130"},"content":"\u003e - User: `user setup`, `user update`","lastModifiedDate":"2024-04-15"},{"lineNumber":405,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":406,"author":{"gitId":"owx0130"},"content":"As such, do exercise sufficient caution while manually editing the data files. Refer to the relevant FAQ below where the correct format for all data files is described.","lastModifiedDate":"2024-04-15"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":408,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-24"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":410,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer?","lastModifiedDate":"2020-05-24"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":412,"author":{"gitId":"owx0130"},"content":"**A**: In the same directory as where the JAR file is located, the application will automatically create a `/data` directory which stores all the data files required for the application. Simply copy the entire directory and its contents to your new computer and ensure that it is in the same directory as your JAR file, then run the application as per normal.","lastModifiedDate":"2024-04-11"},{"lineNumber":413,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":414,"author":{"gitId":"owx0130"},"content":"**Q**: How do I manually edit the data files in the correct format?","lastModifiedDate":"2024-04-14"},{"lineNumber":415,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":416,"author":{"gitId":"owx0130"},"content":"**A**:","lastModifiedDate":"2024-04-15"},{"lineNumber":417,"author":{"gitId":"owx0130"},"content":"- For the calories data file, the format is as such: `ENTRY_ID;DATE;DESCRIPTION;ENTRY_TYPE;CALORIES;CARBOHYDRATES;PROTEINS;FATS`. `ENTRY_ID` and `ENTRY_TYPE` is not mentioned in [Calories Tracker](#calories-tracker), as they are automatically input by the application. `ENTRY_ID` should be a unique positive integer, while `ENTRY_TYPE` must be either `C_IN` or `C_OUT`. There is no exception thrown for inputting the same `ENTRY_ID` for different entries, but the application may behave undesirably, such as when performing `calories delete`. In this case, the first entry to be added will be deleted. Take note that `ENTRY_TYPE` must be `C_IN` for the application to accept additional macronutrient fields after the `CALORIES` field.","lastModifiedDate":"2024-04-15"},{"lineNumber":418,"author":{"gitId":"owx0130"},"content":"- For the hydration data file, the format is as such: `ENTRY_ID;DATE;DESCRIPTION;VOLUME`. See above for notes on `ENTRY_ID`.","lastModifiedDate":"2024-04-15"},{"lineNumber":419,"author":{"gitId":"owx0130"},"content":"- For the sleep data file, the format is as such: `ENTRY_ID;DATE;DURATION`. See above for notes on `ENTRY_ID`.","lastModifiedDate":"2024-04-15"},{"lineNumber":420,"author":{"gitId":"owx0130"},"content":"- For the user data file, the format is as such: `NAME;HEIGHT;WEIGHT;AGE;SEX;EXERCISE_LEVELS;BODY_GOAL;REQUIRED_CALORIES`. The `REQUIRED_CALORIES` field is not mentioned in the [User Profile](#user-profile) section as it is automatically calculated by the application. The delimiter used in the data files must be a semicolon (;).","lastModifiedDate":"2024-04-15"},{"lineNumber":421,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":422,"author":{"gitId":"owx0130"},"content":"**Q**: Why must I input integers for my calories when it is a continuous variable?","lastModifiedDate":"2024-04-11"},{"lineNumber":423,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":424,"author":{"gitId":"owx0130"},"content":"**A**: Although calories is technically a continuous variable, we chose to only take in integer inputs in our application as the difference is just not that significant, i.e. users can just round up values that have decimal values of 0.5 and above, and round down any values below that. An average human will have calorie intake in the thousands daily, thus such a small inaccuracy is insignificant in comparison. An `int` is also much easier to work with than `float`, which is why we chose to only use the former.","lastModifiedDate":"2024-04-11"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":426,"author":{"gitId":"rexyyong"},"content":"**Q**: Why is the limit for `CALORIES` 5000?","lastModifiedDate":"2024-04-14"},{"lineNumber":427,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":428,"author":{"gitId":"rexyyong"},"content":"**A**: Our team decided that a rational amount of calories per entry/meal would be 5000 calories. We decided on 5000 calories","lastModifiedDate":"2024-04-14"},{"lineNumber":429,"author":{"gitId":"rexyyong"},"content":"because it is not too big, nor is it too small an amount. Thus, it would account for extreme cases of high calorie intake.","lastModifiedDate":"2024-04-14"},{"lineNumber":430,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":431,"author":{"gitId":"owx0130"},"content":"## Coming soon","lastModifiedDate":"2024-04-04"},{"lineNumber":432,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":433,"author":{"gitId":"owx0130"},"content":"### Undo/Redo feature","lastModifiedDate":"2024-04-14"},{"lineNumber":434,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":435,"author":{"gitId":"owx0130"},"content":"An undo/redo feature will be a nice quality of life boost for the app, as it provides users with the freedom to navigate their actions with confidence. Mistakes are inevitable, whether it\u0027s unintentional deletions, accidental changes, or simply exploring different options. This feature will help to enhance user experience by instilling a sense of control and reducing anxiety about irreversible actions.","lastModifiedDate":"2024-04-14"},{"lineNumber":436,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":437,"author":{"gitId":"owx0130"},"content":"### Automatic calculation of calories burnt","lastModifiedDate":"2024-04-14"},{"lineNumber":438,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":439,"author":{"gitId":"owx0130"},"content":"Calories burnt from any exercise can be calculated from online calculators depending on the user\u0027s body proportions. If such calculators were implemented within the application itself, the calories burnt can be made even more accurate, and also improve user experience as they do not have to manually calculate and key in the values now.","lastModifiedDate":"2024-04-14"},{"lineNumber":440,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":441,"author":{"gitId":"owx0130"},"content":"### Implement daily requirements for macronutrients intake","lastModifiedDate":"2024-04-14"},{"lineNumber":442,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":443,"author":{"gitId":"owx0130"},"content":"Daily requirements for macronutrients intake can also be implemented to enhance the user\u0027s diet further. These requirements also change depending on the user\u0027s exercise levels and body goals.","lastModifiedDate":"2024-04-14"},{"lineNumber":444,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":445,"author":{"gitId":"owx0130"},"content":"### Provide recommendations to meet daily requirements","lastModifiedDate":"2024-04-14"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":447,"author":{"gitId":"owx0130"},"content":"The `user progress` command displays the user\u0027s current progress towards the daily caloric and hydration requirements. This can be enhanced if the application was able to provide recommendations on how to meet these requirements. For example, healthy meals with carefully calculated macronutrients can be recommended to users to meet their daily caloric and macronutrient requirements.","lastModifiedDate":"2024-04-14"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":449,"author":{"gitId":"-"},"content":"## Command Summary","lastModifiedDate":"2020-05-24"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":451,"author":{"gitId":"rexyyong"},"content":"| Action                             | Format, Examples                                                                 |","lastModifiedDate":"2024-04-03"},{"lineNumber":452,"author":{"gitId":"rexyyong"},"content":"|------------------------------------|----------------------------------------------------------------------------------|","lastModifiedDate":"2024-04-15"},{"lineNumber":453,"author":{"gitId":"rexyyong"},"content":"| Help                               | `help`                                                                           |","lastModifiedDate":"2024-04-03"},{"lineNumber":454,"author":{"gitId":"rexyyong"},"content":"| Exit program                       | `bye`                                                                            |","lastModifiedDate":"2024-04-15"},{"lineNumber":455,"author":{"gitId":"rexyyong"},"content":"| Add calories intake                | `calories in DESCRIPTION c/CALORIES d/DATE [m/CARBOHYDRATES,PROTEIN,FATS]`       |","lastModifiedDate":"2024-04-03"},{"lineNumber":456,"author":{"gitId":"rexyyong"},"content":"| Add calories outflow               | `calories out DESCRIPTION c/CALORIES d/DATE`                                     |","lastModifiedDate":"2024-04-03"},{"lineNumber":457,"author":{"gitId":"rexyyong"},"content":"| List calories                      | `calories list`                                                                  |","lastModifiedDate":"2024-04-03"},{"lineNumber":458,"author":{"gitId":"rexyyong"},"content":"| Delete calories entry              | `calories delete CALORIESID`                                                     |","lastModifiedDate":"2024-04-14"},{"lineNumber":459,"author":{"gitId":"rexyyong"},"content":"| Search for calorie entry/entries   | `calories find KEYWORD`                                                          |","lastModifiedDate":"2024-04-15"},{"lineNumber":460,"author":{"gitId":"rexyyong"},"content":"| Add hydration intake               | `hydration in DESCRIPTION v/VOLUME d/DATE`                                       |","lastModifiedDate":"2024-04-03"},{"lineNumber":461,"author":{"gitId":"rexyyong"},"content":"| List hydration                     | `hydration list`                                                                 |","lastModifiedDate":"2024-04-03"},{"lineNumber":462,"author":{"gitId":"rexyyong"},"content":"| Delete hydration entry             | `hydration delete HYDRATIONID`                                                   |","lastModifiedDate":"2024-04-14"},{"lineNumber":463,"author":{"gitId":"rexyyong"},"content":"| Search for hydration entry/entries | `hydration find KEYWORD`                                                         |","lastModifiedDate":"2024-04-15"},{"lineNumber":464,"author":{"gitId":"rexyyong"},"content":"| Add sleep                          | `sleep add DURATION d/DATE`                                                      |","lastModifiedDate":"2024-04-03"},{"lineNumber":465,"author":{"gitId":"rexyyong"},"content":"| List sleep                         | `sleep list`                                                                     |","lastModifiedDate":"2024-04-03"},{"lineNumber":466,"author":{"gitId":"rexyyong"},"content":"| Delete sleep entry                 | `sleep delete SLEEPID`                                                           |","lastModifiedDate":"2024-04-10"},{"lineNumber":467,"author":{"gitId":"paturikarthik"},"content":"| Set Up User Profile                | `user setup NAME h/HEIGHT w/WEIGHT a/AGE s/GENDER e/EXERCISE LEVELS g/BODY GOAL` |","lastModifiedDate":"2024-04-04"},{"lineNumber":468,"author":{"gitId":"paturikarthik"},"content":"| Check User Profile                 | `user details`                                                                   |","lastModifiedDate":"2024-04-14"},{"lineNumber":469,"author":{"gitId":"paturikarthik"},"content":"| Update User Details                | `user update \u003cFIELD_TO_UPDATE\u003e \u003cNEWVALUE\u003e`                                       |","lastModifiedDate":"2024-04-14"},{"lineNumber":470,"author":{"gitId":"paturikarthik"},"content":"| Check User Progress                | `user progress`                                                                  |","lastModifiedDate":"2024-04-04"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"rexyyong":92,"a-wild-chocolate":4,"owx0130":61,"shawnpong":102,"-":35,"paturikarthik":177}},{"path":"docs/diagrams/ArchitectureDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-04-12"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"actor bob","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"rectangle {","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"    rectangle Ui","lastModifiedDate":"2024-04-12"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"    rectangle Main","lastModifiedDate":"2024-04-12"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"    rectangle calories","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"    rectangle system.parser","lastModifiedDate":"2024-04-12"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"    rectangle hydration.hydrationlist","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"    rectangle sleep.sleeplist","lastModifiedDate":"2024-04-12"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"    rectangle system.storage","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"    rectangle Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-04-12"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"bob --[dotted]\u003e Ui","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"Main -[dotted]\u003e Ui","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"Main ----\u003e sleep.sleeplist","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"Main ----\u003e hydration.hydrationlist","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"Main ----\u003e calories","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"Ui -[dotted]\u003e calories","lastModifiedDate":"2024-04-12"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"Ui -[dotted]\u003e hydration.hydrationlist","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"Ui -[dotted]\u003e sleep.sleeplist","lastModifiedDate":"2024-04-12"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"calories -[dotted]---\u003e system.parser","lastModifiedDate":"2024-04-12"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"calories ----\u003e Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"calories --[dotted]\u003e system.storage","lastModifiedDate":"2024-04-12"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"hydration.hydrationlist ---[dotted]-\u003e system.parser","lastModifiedDate":"2024-04-12"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"hydration.hydrationlist -\u003e Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"hydration.hydrationlist --[dotted]\u003e system.storage","lastModifiedDate":"2024-04-12"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"sleep.sleeplist --[dotted]--\u003e system.parser","lastModifiedDate":"2024-04-12"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"sleep.sleeplist -\u003e Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"sleep.sleeplist --[dotted]\u003e system.storage","lastModifiedDate":"2024-04-12"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"system.storage -[dotted]-\u003e Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"hide circle","lastModifiedDate":"2024-04-12"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-04-12"}],"authorContributionMap":{"rexyyong":42}},{"path":"docs/diagrams/CaloriesAddEntrySeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-04-12"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"actor Bob","lastModifiedDate":"2024-04-12"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"Bob -\u003e UI: Input \"calories in\" or \"calories out\" command","lastModifiedDate":"2024-04-12"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"UI -\u003e UI: handleUserInput()","lastModifiedDate":"2024-04-12"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-12"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"UI -\u003e UI: handleCaloriesInput()","lastModifiedDate":"2024-04-12"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"UI -\u003e CalorieList: addEntry()","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e ParserCalories: parseCaloriesInput()","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"activate ParserCalories","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"return entry","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e CalorieList: calorieArrayList.add(entry)","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-12"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e CalorieList: updateFile()","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-12"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-12"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-12"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-12"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-12"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-12"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-04-12"}],"authorContributionMap":{"rexyyong":32}},{"path":"docs/diagrams/CaloriesListClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"class LifeTrack {","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"    +main(args: String[]): void","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"package ui {","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"    class Ui {","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"        + readUserInput(calorieList: calories.CalorieList, ...... ) : void","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"        + handleUserInput(line: String, calorieLIst: CalorieList, ......): void","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"        + handleCaloriesInput(line: String, calorieList: calories.CalorieList): void","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"    class CalorieListUi {","lastModifiedDate":"2024-04-11"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"            + calorieListHeader(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"            + emptyListMessage(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"            + inputCalorieListHeader(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"            + outputCalorieListHeader(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"package calories {","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"    package calorielist {","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"        class CalorieList {","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"            - ArrayList\u003cEntry\u003e calorieArrayList","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"            + printCalorieList(): void","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"            + printCalorieInflow(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"            + printCalorieOutflow(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"hide circle","lastModifiedDate":"2024-04-11"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"LifeTrack --\u003e calories.calorielist.CalorieList","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"LifeTrack -[dotted]-\u003e ui.Ui","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"ui.Ui -[dotted]-\u003e calories.calorielist.CalorieList","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"CalorieList -[dotted]-\u003e CalorieListUi","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"rexyyong":43}},{"path":"docs/diagrams/CaloriesListSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"actor Bob","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"Bob -\u003e UI: Input \"calories list\" command","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"UI -\u003e UI: handleUserInput(String input, CalorieList calorieList, .....)","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"UI -\u003e UI: handleCaloriesInput(String input, CalorieList calorieList, .....)","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"UI -\u003e CalorieList: printCalorieList()","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e CalorieList: printCalorieInflow()","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"loop calorieArrayList.size()","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e CalorieList : print Calorie Inflow entries","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"end","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e CalorieList: printCalorieOutflow()","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"loop calorieArrayList.size()","lastModifiedDate":"2024-04-11"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e CalorieList : print Calorie Outflow entries","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"end","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"rexyyong":37}},{"path":"docs/diagrams/HydrationDeleteEntrySeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"@startuml","lastModifiedDate":"2024-04-15"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"actor Bob","lastModifiedDate":"2024-04-15"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"Bob -\u003e UI: Input \"hydration delete\" command","lastModifiedDate":"2024-04-15"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"activate UI","lastModifiedDate":"2024-04-15"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"UI -\u003e UI: handleUserInput()","lastModifiedDate":"2024-04-15"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"activate UI","lastModifiedDate":"2024-04-15"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"UI -\u003e UI: handleHydrationInput()","lastModifiedDate":"2024-04-15"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"activate UI","lastModifiedDate":"2024-04-15"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"UI -\u003e HydrationList: deleteEntry()","lastModifiedDate":"2024-04-15"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"activate HydrationList","lastModifiedDate":"2024-04-15"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"HydrationList -\u003e HydrationList: getIndexFromEntryID()","lastModifiedDate":"2024-04-15"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"activate HydrationList","lastModifiedDate":"2024-04-15"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"HydrationList -\u003e HydrationList: hydrationArrayList.remove(entry)","lastModifiedDate":"2024-04-15"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"activate HydrationList","lastModifiedDate":"2024-04-15"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"HydrationList -\u003e HydrationList: updateFile()","lastModifiedDate":"2024-04-15"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"activate HydrationList","lastModifiedDate":"2024-04-15"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"@enduml","lastModifiedDate":"2024-04-15"}],"authorContributionMap":{"shawnpong":32}},{"path":"docs/diagrams/HydrationListClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"@startuml","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"hide circle","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"class LifeTrack {","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"    + main(args: String[]): void","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"package ui {","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"    class Ui {","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"        + readUserInput(hydrationList: hydration.HydrationList, ...... ) : void","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"        + handleUserInput(line: String, hydrationList: HydrationList, ......): void","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"        + handleHydrationInput(line: String, hydrationList: hydration.HydrationList): void","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"    class HydrationListUi {","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"            + hydrationListHeader(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"            + emptyListMessage(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"            + inputHydrationListHeader(): void","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"package hydration {","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    package hydrationlist {","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"        class HydrationList {","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"           - ArrayList\u003cEntry\u003e hydrationArrayList","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"           + printHydrationList(): void","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"LifeTrack --\u003e hydration.hydrationlist.HydrationList","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"LifeTrack -[dotted]-\u003e ui.Ui","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"ui.Ui -[dotted]-\u003e hydration.hydrationlist.HydrationList","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"HydrationList -[dotted]-\u003e HydrationListUi","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"@enduml","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"shawnpong":37}},{"path":"docs/diagrams/SleepAddSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"@startuml","lastModifiedDate":"2024-04-13"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"actor Bob","lastModifiedDate":"2024-04-13"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"Bob -\u003e UI: Input \"sleep add\" command","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"activate UI","lastModifiedDate":"2024-04-13"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"UI -\u003e UI: handleUserInput()","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"activate UI","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"UI -\u003e UI: handleSleepInput()","lastModifiedDate":"2024-04-13"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"activate UI","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"UI -\u003e SleepList: addSleep()","lastModifiedDate":"2024-04-13"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"activate SleepList","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"SleepList -\u003e ParserSleep: parseSleepInput()","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"activate ParserSleep","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"ParserSleep -\u003e ParserSleep: parseDuration()","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"activate ParserSleep","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"return Double","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"ParserSleep -\u003e ParserSleep: parseDate()","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"activate ParserSleep","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"return LocalDate","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"return SleepEntry","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"SleepList -\u003e SleepList: sleepList.add(SleepEntry)","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"SleepList-\u003eSleepListUi: printNewSleepEntry(SleepEntry)","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"activate SleepListUi","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"UI-\u003e Bob:Display successful message","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"@enduml","lastModifiedDate":"2024-04-13"}],"authorContributionMap":{"a-wild-chocolate":39}},{"path":"docs/diagrams/UserCalculateCaloriesSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"actor Tom","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"Tom -\u003e UI: Input \"user setup\" command","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"activate UI","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"UI -\u003e UI: handleUserInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"activate UI","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"UI -\u003e UI: handleUserCommands()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"activate UI","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"UI -\u003e User : setUp()","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"activate User","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"User -\u003e ParserUser: parseSetUp()","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"activate ParserUser","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"ParserUser -\u003e User: setName(),setHeight(),setWeight(),setAge(),setSex(),setExerciseLevels(),setGoal()","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"ParserUser -\u003e User: getHealthInfo()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"activate User","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"User -\u003e UserGoals : getHealthInfo(user)","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"activate UserGoals","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"return caloriesRequired","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"paturikarthik":36}},{"path":"docs/diagrams/UserClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"@startuml","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"class LifeTrack {","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"    +main(args: String[]): void","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"package ui {","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"    class Ui {","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"        + readUserInput(user: user.User, ...... ) : void","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"        + handleUserInput(line: String, user: User, ......): void","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"        + handleUserCommands(line: String, user: user.User): void","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"    class UserUi {","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"      + printUserCaloriesRequired(caloriesRequired: int): void","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"      + printUserCalorieProgress(caloriesConsumed: int, caloriesRequired: int,......): void","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"      + printUserHydrationProgress(hydrationConsumed: int, hydrationRequired: int,......): void","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"      + printUserSleepProgress(sleepConsumed: double, sleepRequired: int, ......): void","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"      + printUserSetUpComplete(user: user.User): void","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"      + printNoUserYetMessage(): void","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"      + printNewUserName(name: String): void","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"      + printNewUserAge(age: int): void","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"      + printNewUserHeight(height: int): void","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"      + printNewUserWeight(weight: int): void","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"      + printNewUserSex(sex: String): void","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"      + printNewUserExerciseLevels(user: user.User, level: int): void","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"      + printNewUserGoal(user: user.User, goal: int): void","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"      + printUserDetails(user: user.User): void","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"package user {","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"    class User {","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"          - name: String","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"          - height: int","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"          - weight: int","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"          - age: int","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"          - sex: String","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"          - exerciseLevels: int","lastModifiedDate":"2024-04-14"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"          - goal: int","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"          - caloriesRequired: int","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"          + setUp(line: String): void","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"          + update(line: String): void","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"          + getUserDetails(): void","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"hide circle","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"LifeTrack --\u003e user.User","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"LifeTrack -[dotted]-\u003e ui.Ui","lastModifiedDate":"2024-04-14"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"ui.Ui -[dotted]-\u003e user.User","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"User -[dotted]-\u003e UserUi","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"@enduml","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"paturikarthik":56}},{"path":"docs/diagrams/UserDetailsSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"@startuml","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"actor Tom","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"Tom -\u003e UI: Input \"user details\" command","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"activate UI","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"UI -\u003e UI: handleUserInput()","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"activate UI","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"UI -\u003e UI: handleUserCommands()","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"activate UI","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"UI -\u003e User : getUserDetails()","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"activate User","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"User -\u003e UserUI: printUserDetails()","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"activate UserUI","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"UserUI -\u003e User: getName(), getHeight(), getWeight(), getAge(), getSex()","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"UserUI -\u003e User: getExerciseLevels(), getExerciseLevelsAsString(), getGoal(), getGoalAsString()","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"activate User","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"return name, height, sex, age, exerciseLevels, exerciseLevelsAsString, goal, goalAsString","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"@enduml","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"paturikarthik":32}},{"path":"docs/diagrams/calories.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-04-12"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"rectangle CalorieList","lastModifiedDate":"2024-04-12"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"rectangle InputEntry","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"rectangle OutputEntry","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"rectangle Food","lastModifiedDate":"2024-04-12"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"rectangle Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"rectangle CaloriesFileHandler","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"rectangle Ui","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"rectangle ParserCalories","lastModifiedDate":"2024-04-12"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e \"*\" Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"CalorieList --\u003e \"1\" CaloriesFileHandler","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"CalorieList --[dotted]\u003e ParserCalories","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"Ui -[dotted]\u003e CalorieList","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"InputEntry --|\u003e Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"OutputEntry --|\u003e Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"InputEntry --\u003e \"0..1\" Food","lastModifiedDate":"2024-04-12"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"ParserCalories -[dotted]-\u003e InputEntry","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"ParserCalories -[dotted]-\u003e OutputEntry","lastModifiedDate":"2024-04-12"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-04-12"}],"authorContributionMap":{"rexyyong":24,"owx0130":2}},{"path":"docs/diagrams/calories_component.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-04-13"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"actor Bob","lastModifiedDate":"2024-04-13"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"Bob -\u003e UI: Input \"calories in\" command","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-13"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"UI -\u003e UI: handleCaloriesInput(String, CalorieList)","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"UI -\u003e CalorieList: addEntry(String)","lastModifiedDate":"2024-04-13"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e ParserCalories: parseCaloriesInput(String, int)","lastModifiedDate":"2024-04-13"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"activate ParserCalories","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"ParserCalories -\u003e ParserCalories : makeNewInputEntry(int, String, int, String)","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"activate ParserCalories","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"return InputEntry","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"return InputEntry","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e CalorieList: calorieArrayList.add(InputEntry)","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"alt calorieArrayList not sorted by date in ascending order","lastModifiedDate":"2024-04-15"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"    CalorieList -\u003e CalorieList : sortEntriesByDate()","lastModifiedDate":"2024-04-15"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"    activate CalorieList","lastModifiedDate":"2024-04-15"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"    return","lastModifiedDate":"2024-04-15"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"end","lastModifiedDate":"2024-04-15"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e CalorieList: updateFile()","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"CalorieList -\u003e CaloriesFileHandler : writeEntries(ArrayList\u003cEntry\u003e)","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"activate CaloriesFileHandler","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"CaloriesFileHandler -\u003e CaloriesFileHandler : writeToFile(String)","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"activate CaloriesFileHandler","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-13"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"return New InputEntry added","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-04-13"}],"authorContributionMap":{"rexyyong":44,"owx0130":4}},{"path":"docs/diagrams/hydration.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-04-12"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"rectangle HydrationList","lastModifiedDate":"2024-04-12"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"rectangle HydrationEntry","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"rectangle Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"rectangle HydrationFileHandler","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"rectangle Ui","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"rectangle ParserHydration","lastModifiedDate":"2024-04-12"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"HydrationList --\u003e \"*\" Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"HydrationList ---\u003e \"1\" HydrationFileHandler","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"HydrationList --[dotted]\u003e ParserHydration","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"Ui -[dotted]\u003e HydrationList","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"HydrationEntry --|\u003e Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"ParserHydration -[dotted]-\u003e HydrationEntry","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-04-12"}],"authorContributionMap":{"rexyyong":19,"owx0130":2}},{"path":"docs/diagrams/hydration_component.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"@startuml","lastModifiedDate":"2024-04-15"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"actor Bob","lastModifiedDate":"2024-04-15"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"Bob -\u003e UI: Input \"hydration in\" command","lastModifiedDate":"2024-04-15"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"activate UI","lastModifiedDate":"2024-04-15"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"UI -\u003e UI: handleHydrationInput(String, HydrationList)","lastModifiedDate":"2024-04-15"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"activate UI","lastModifiedDate":"2024-04-15"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"UI -\u003e HydrationList: addEntry(String)","lastModifiedDate":"2024-04-15"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"activate HydrationList","lastModifiedDate":"2024-04-15"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"HydrationList -\u003e ParserHydration: parseHydrationInput(String, int)","lastModifiedDate":"2024-04-15"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"activate ParserHydration","lastModifiedDate":"2024-04-15"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"ParserHydration -\u003e ParserHydration : makeNewHydrationEntry(int, String, int, String)","lastModifiedDate":"2024-04-15"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"activate ParserHydration","lastModifiedDate":"2024-04-15"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"return HydrationEntry","lastModifiedDate":"2024-04-15"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"return HydrationEntry","lastModifiedDate":"2024-04-15"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"HydrationList -\u003e HydrationList: hydrationArrayList.add(HydrationEntry)","lastModifiedDate":"2024-04-15"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"activate HydrationList","lastModifiedDate":"2024-04-15"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"HydrationList -\u003e HydrationList: updateFile()","lastModifiedDate":"2024-04-15"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"activate HydrationList","lastModifiedDate":"2024-04-15"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"HydrationList -\u003e HydrationFileHandler : writeEntries(ArrayList\u003cEntry\u003e)","lastModifiedDate":"2024-04-15"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"activate HydrationFileHandler","lastModifiedDate":"2024-04-15"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"HydrationFileHandler -\u003e HydrationFileHandler : writeToFile(String)","lastModifiedDate":"2024-04-15"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"activate HydrationFileHandler","lastModifiedDate":"2024-04-15"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"alt hydrationArrayList not sorted by date in ascending order","lastModifiedDate":"2024-04-15"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"    HydrationList -\u003e HydrationList : sortEntriesByDate()","lastModifiedDate":"2024-04-15"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"    activate HydrationList","lastModifiedDate":"2024-04-15"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"    return","lastModifiedDate":"2024-04-15"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"end","lastModifiedDate":"2024-04-15"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"return","lastModifiedDate":"2024-04-15"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"return New HydrationEntry added","lastModifiedDate":"2024-04-15"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"@enduml","lastModifiedDate":"2024-04-15"}],"authorContributionMap":{"shawnpong":47}},{"path":"docs/diagrams/sleep.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-04-12"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"rectangle SleepList","lastModifiedDate":"2024-04-12"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"rectangle SleepEntry","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"rectangle Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"rectangle SleepFileHandler","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"rectangle Ui","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"rectangle ParserSleep","lastModifiedDate":"2024-04-12"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"SleepList --\u003e \"*\" Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"SleepList ---\u003e \"1\" SleepFileHandler","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"SleepList --[dotted]\u003e ParserSleep","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"Ui -[dotted]\u003e SleepList","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"SleepEntry --|\u003e Entry","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"ParserSleep -[dotted]-\u003e SleepEntry","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-04-12"}],"authorContributionMap":{"rexyyong":19,"owx0130":2}},{"path":"docs/diagrams/sleepDeleteSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"@startuml","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"actor User","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"participant \"Ui#handleUserInput()\" as UI","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"participant \"Ui#handleSleepInput()\" as SleepInput","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"participant \"SleepList#deleteEntry(String line)\" as DeleteEntry","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"participant \"SleepList#updateFile()\" as UpdateFile","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"participant \"SleepFileHandler#writeEntries(ArrayList\u003cEntry\u003e entries)\" as WriteEntries","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"User -\u003e UI : Enters command","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"activate UI","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"UI -\u003e SleepInput : Sends command for sleep input handling","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"activate SleepInput","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"SleepInput -\u003e DeleteEntry : Calls delete entry method","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"activate DeleteEntry","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"DeleteEntry -\u003e UpdateFile : Deletes entry","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"activate UpdateFile","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"UpdateFile -\u003e WriteEntries : Updates file with new entries","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"activate WriteEntries","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"WriteEntries --\u003e UpdateFile : Updates file","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"deactivate WriteEntries","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"UpdateFile --\u003e DeleteEntry : File updated","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"deactivate UpdateFile","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"DeleteEntry --\u003e SleepInput : Entry deleted","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"deactivate DeleteEntry","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"SleepInput --\u003e UI : Sends success message","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"deactivate SleepInput","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"UI -\u003e User : Displays success message","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"deactivate UI","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"@enduml","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"a-wild-chocolate":29}},{"path":"docs/diagrams/user.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-04-12"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"rectangle User","lastModifiedDate":"2024-04-12"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"rectangle UserFileHandler","lastModifiedDate":"2024-04-15"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"rectangle ParserUser","lastModifiedDate":"2024-04-12"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"rectangle UserGoals","lastModifiedDate":"2024-04-12"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"rectangle HydrationList","lastModifiedDate":"2024-04-12"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"rectangle CaloriesList","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"rectangle SleepList","lastModifiedDate":"2024-04-12"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"User ---\u003e \"1\" UserFileHandler","lastModifiedDate":"2024-04-15"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"User --[dotted]\u003e ParserUser","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"User \u003c-[dotted]\u003e UserGoals","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"UserGoals --[dotted]\u003e HydrationList","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"UserGoals --[dotted]\u003e CaloriesList","lastModifiedDate":"2024-04-12"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"UserGoals --[dotted]\u003e SleepList","lastModifiedDate":"2024-04-12"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-04-12"}],"authorContributionMap":{"rexyyong":22,"paturikarthik":2}},{"path":"docs/team/a-wild-chocolate.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"# Mao Yanyu\u0027s Project Portfolio Page","lastModifiedDate":"2024-04-15"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"## Project: LifeTrack","lastModifiedDate":"2024-04-15"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"LifeTrack is a desktop app for students to track their health data,","lastModifiedDate":"2024-04-15"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"optimized for use via a Command Line Interface (CLI).","lastModifiedDate":"2024-04-15"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"It tracks calories, hydration and sleep data for the user,","lastModifiedDate":"2024-04-15"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"while also providing daily recommendations for calorie and hydration intake,","lastModifiedDate":"2024-04-15"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"based on the user\u0027s build and gender, as well as their body goals and activity levels.","lastModifiedDate":"2024-04-15"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"The program was created using Java. Version control was done using Git.","lastModifiedDate":"2024-04-15"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"## My contributions to the project","lastModifiedDate":"2024-04-15"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"### New features added and enhancements to existing features","lastModifiedDate":"2024-04-15"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"1. **Added the ability to delete entries for calories intake. [PR #8](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/8)**","lastModifiedDate":"2024-04-15"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"    * What it does: Allows users to delete records relating to their calories intake by index","lastModifiedDate":"2024-04-15"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"    * Testing: Added JUnit tests for the feature as well.","lastModifiedDate":"2024-04-15"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"2. **Added logger for debugging.** [PR #45](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/45)","lastModifiedDate":"2024-04-15"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"    * What it does: Allow coder to better handling the bugs.","lastModifiedDate":"2024-04-15"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"3. **Added the ability to add entries for sleep.** [PR #60](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/60)","lastModifiedDate":"2024-04-15"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"    * What it does: Allows users to add records relating to their sleep, which includes `Duration` and `Date`","lastModifiedDate":"2024-04-15"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"    * Testing: Added JUnit tests for the feature as well.","lastModifiedDate":"2024-04-15"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"4. **Added the ability to delete entries for sleep added.** [PR #60](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/60)","lastModifiedDate":"2024-04-15"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"    * What it does: Allows users to delete sleep records by id.","lastModifiedDate":"2024-04-15"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"    * Testing: Added JUnit tests for the feature as well.","lastModifiedDate":"2024-04-15"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"5. **Added the ability to list entries in the sleep list.** [PR #60](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/60)","lastModifiedDate":"2024-04-15"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"    * What it does: Allows users to see sleep records by date in the sleep list.","lastModifiedDate":"2024-04-15"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"    * Testing: Added JUnit tests for the feature as well.","lastModifiedDate":"2024-04-15"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"6. **Added the sleep id for sleep.** [PR #157](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/157)","lastModifiedDate":"2024-04-15"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"    * What it does: Give sleep records unique sleep id and can save it into file","lastModifiedDate":"2024-04-15"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"    * Testing: Added JUnit tests for the feature as well.","lastModifiedDate":"2024-04-15"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"### Contributions to exception handling","lastModifiedDate":"2024-04-15"},{"lineNumber":40,"author":{"gitId":"a-wild-chocolate"},"content":"* Added robust exception handling for sleep class and lists, in order to ensure that program does not crash","lastModifiedDate":"2024-04-15"},{"lineNumber":41,"author":{"gitId":"a-wild-chocolate"},"content":"  when users type the wrong command to add, delete or list sleep entries. [PR #16](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/16)","lastModifiedDate":"2024-04-15"},{"lineNumber":42,"author":{"gitId":"a-wild-chocolate"},"content":"* Added robust exception handling for ParserSleep, in order to ensure that program does not crash","lastModifiedDate":"2024-04-15"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"  when users enter invalid commands [PR #60](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/60)","lastModifiedDate":"2024-04-15"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"### Contributions to documentation","lastModifiedDate":"2024-04-15"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"* **Developer guide**","lastModifiedDate":"2024-04-15"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"    * Added implementation details for `Sleep` class. [PR #201](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/201)","lastModifiedDate":"2024-04-15"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"    * Ensure consistent formatting throughout developer guide.","lastModifiedDate":"2024-04-15"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"    * Generated sequence diagram and class diagram for above feature","lastModifiedDate":"2024-04-15"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"* **User guide**","lastModifiedDate":"2024-04-15"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"    * Converted User guide from word document to Markdown format for all existing features.","lastModifiedDate":"2024-04-15"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"        * Added documentation for features `calories delete`,`sleep add`, `sleep delete`, `sleep list`. [PR #91](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/91)","lastModifiedDate":"2024-04-15"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"        * Ensure consistent formatting throughout user guide.","lastModifiedDate":"2024-04-15"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"### Contributions to project management","lastModifiedDate":"2024-04-15"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"### Code contributed","lastModifiedDate":"2024-04-15"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"* [Reposense Link](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003dfunctional-code\u0026since\u003d2024-02-23\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003da-wild-chocolate\u0026zR\u003dAY2324S2-CS2113-F15-2%2Ftp%5Bmaster%5D\u0026zACS\u003d106.912839737582\u0026zS\u003d2024-02-23\u0026zFS\u003d\u0026zU\u003d2024-04-15\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)","lastModifiedDate":"2024-04-15"}],"authorContributionMap":{"a-wild-chocolate":59}},{"path":"docs/team/owx0130.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"# Ong Wei Xiang\u0027s Project Portfolio Page","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"## Project: LifeTrack","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"LifeTrack is a desktop app for students to track their health data, ","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"optimized for use via a Command Line Interface (CLI). ","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"It tracks calories, hydration and sleep data for the user, ","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"while also providing daily recommendations for calorie and hydration intake, ","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"based on the user\u0027s build and gender, as well as their body goals and activity levels.","lastModifiedDate":"2024-04-11"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"- **New Feature**: Added the ability to read and write from a data file.","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"  - What it does: allows the application to store caloric/hydration/sleep entries that were input previously. Data is retrieved from a data file whenever the application is relaunched.","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"  - Justification: the user should be able to compare against all their previous calorie/hydration/sleep entries to monitor their health which is the very purpose of the application. Additionally, it is exceedingly inconvenient to have the application open all the time if there was no form of storage available, thus this capability is also a huge boost to the user\u0027s quality of life while using the application.","lastModifiedDate":"2024-04-11"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"  - Highlights: This enhancement required an in-depth analysis of design alternatives, such as choosing a suitable delimiter when storing data. In this case, the delimiter needed to be a seldom used character to ensure that it does not show up too often in user input. The implementation was also challenging as there were many alternatives, including when and where in the code to update the data file.","lastModifiedDate":"2024-04-15"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"- **Code contributed**: [Reposense link](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003dowx0130\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2024-02-23\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2024-04-11"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"- **Project management**:","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"  - Managed releases `v1.0`, `v1.1` and `v2.0` on GitHub","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"  - Maintaining the issue tracker i.e. closing completed issues, labelling and assigning issues appropriately","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"  - Added capability for `calories in` inputs to take in an optional argument for macronutrients ([PR #39](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/39))","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    - What it does: more health-conscious users can further break down their calories consumed into macronutrients which can be passed as an optional argument into the `calories in` command.","lastModifiedDate":"2024-04-15"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    - Justification: This feature serves to enhance the experience of the more health-conscious people among our target audience, and by making this argument optional, the user experience of people who do not wish to track their macronutrients will not be affected.","lastModifiedDate":"2024-04-15"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"  - Reorganized all exception messages into a new class for ease of viewing and editing ([PR #56](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/56), [PR #160](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/160))","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"  - Created `InputEntry` and `OutputEntry` classes to inherit the original `Entry` class to differentiate between a calorie input and output entry ([PR #39](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/39))","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"  - Reorganized the `ParserCalories` class by extracting methods to make it more OOP-like ([PR #48](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/48))","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"  - Reorganized JUnit test cases into individual classes for ease of access ([PR #48](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/48))","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"  - Added JUnit tests for existing features ([PR #26](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/26), [PR #56](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/56))","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"  - Reorganized the `FileHandler` class, extracting methods into more classes for more OOP and neatness ([PR #218](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/218))","lastModifiedDate":"2024-04-15"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"  - Exception handling for `CaloriesFileHandler`, `HydrationFileHandler`, `SleepFileHandler`, and `UserFileHandler` ([PR #218](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/218))","lastModifiedDate":"2024-04-15"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"- **Documentation**:","lastModifiedDate":"2024-04-11"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"  - User Guide:","lastModifiedDate":"2024-04-11"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"    - Added to `Introduction` ([PR #97](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/97))","lastModifiedDate":"2024-04-11"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    - Added to `Quick Start` section ([PR #160](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/160), [PR #170](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/170))","lastModifiedDate":"2024-04-11"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"    - Added relevant FAQs ([PR #170](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/170), [PR #218](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/218))","lastModifiedDate":"2024-04-15"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"    - Added `Coming Soon` section ([PR #218](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/218))","lastModifiedDate":"2024-04-15"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"    - Added `Saving the data` and `Editing the data` sections ([PR #264](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/264))","lastModifiedDate":"2024-04-15"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"  - Developer Guide:","lastModifiedDate":"2024-04-11"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"    - Added implementation details of the `Adding calorie entries feature` ([PR #70](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/70), [PR #96](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/96))","lastModifiedDate":"2024-04-11"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"- **Community**:","lastModifiedDate":"2024-04-11"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"  - PRs reviewed: [#38](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/38), [#43](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/43), [#50](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/50), [#60](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/60), [#67](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/67), [#83](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/83), [#98](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/98)","lastModifiedDate":"2024-04-11"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"  - Helped review another team\u0027s project (T11-2)","lastModifiedDate":"2024-04-15"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"    - Issues raised: [#233](https://github.com/AY2324S2-CS2113-T11-2/tp/issues/233), [#235](https://github.com/AY2324S2-CS2113-T11-2/tp/issues/235), [#236](https://github.com/AY2324S2-CS2113-T11-2/tp/issues/236), [#239](https://github.com/AY2324S2-CS2113-T11-2/tp/issues/239)","lastModifiedDate":"2024-04-15"}],"authorContributionMap":{"owx0130":49}},{"path":"docs/team/paturikarthik.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"# Paturi Karthik\u0027s Project Portfolio Page","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"## Project: LifeTrack","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"LifeTrack is a desktop app for students to track their health data,","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"optimized for use via a Command Line Interface (CLI).","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"It tracks calories, hydration and sleep data for the user,","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"while also providing daily recommendations for calorie and hydration intake,","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"based on the user\u0027s build and gender, as well as their body goals and activity levels.","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"The program was created using Java. Version control was done using Git.","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"## My contributions to the project","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"### New features added and enhancements to existing features","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"1. **Added a `User` Class to store the details of the user of the app and calculate their daily calorie goal. [PR #73](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/73)**","lastModifiedDate":"2024-04-11"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"    * What it does: Allows users to set up their details such as their `NAME`, `HEIGHT`, `WEIGHT`, `AGE`, `SEX`, `EXERCISE LEVELS` and `GOALS`.","lastModifiedDate":"2024-04-11"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"      Using, these information, the user\u0027s calorie goal is also calculated and stored in `caloriesRequired`. Using the `user progress` command, ","lastModifiedDate":"2024-04-15"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"      users can track the percentage of calories and hydration they have consumed and sleep they have gotten for the last 3 days. **[PR #184](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/184)**","lastModifiedDate":"2024-04-15"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"    * Testing: Add JUnit tests for the feature. **[PR #219](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/219)**","lastModifiedDate":"2024-04-15"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"2. **Added `user update` and `user details` functions for users to quickly glance at and update their details. [PR #171](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/171)**","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"    * What it does: `user update` allows users to update their details one field at a time, while `user details` allows user to view all their details at once.","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"    * Testing: Add JUnit tests for the feature. **[PR #219](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/219)**","lastModifiedDate":"2024-04-15"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"3. **Added `UI` class for overall handling of user commands. [PR #52](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/52), [PR #58](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/58)**","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"    * What it does: Redirects commands from user to the relevant methods.","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"    * Justification: Having a separate class for `UI` ensures that the code is well factored out and that changes to the UI do not need to be made in multiple files. .","lastModifiedDate":"2024-04-11"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"4. **Added `UserUI` class to handle all System messages regarding the `User` class. [PR #108](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/108)**","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"    * What it does: Ensures that all messages from the System are factored out and consolidated into a single class for code clarity.","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"5. **Added a `find` feature to sieve through `calorieList` and `hydrationList` to find entries based on a given keyword. [PR #220](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/220)**","lastModifiedDate":"2024-04-15"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"    * What it does: Prints the calories list/ hydration list based on the keyword that was searched.","lastModifiedDate":"2024-04-11"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"    * Justification: So that users have an easier time finding certain entries from the lists, instead of looking through the full list.","lastModifiedDate":"2024-04-11"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"### Contributions to exception handling","lastModifiedDate":"2024-04-11"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"* Added robust exception handling for `ParserUser`, in order to ensure that program does not crash","lastModifiedDate":"2024-04-11"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"  when users give incomplete commands, invalid commands, missing fields, impractical entries or entries which are out of the range of LifeTrack. **[PR #89](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/89)**","lastModifiedDate":"2024-04-15"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"* Contributed to the robust exception handling for calorie features, in order to ensure that program does not crash","lastModifiedDate":"2024-04-11"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"  when users type the wrong command to add calorie entries. **[PR #33](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/33)**","lastModifiedDate":"2024-04-15"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"### Contributions to documentation","lastModifiedDate":"2024-04-11"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"* **Developer guide**","lastModifiedDate":"2024-04-11"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"    * Added implementation details and diagrams for `User` class and `user progress` feature. **[PR #109](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/109)**","lastModifiedDate":"2024-04-15"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"    * Added implementation details and diagrams for `user details` feature. **[PR #247](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/247)**","lastModifiedDate":"2024-04-15"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"* **User guide**","lastModifiedDate":"2024-04-11"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"    * Added documentation for features `user setup`, `user progress` and `help`. **[PR #109](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/109)**","lastModifiedDate":"2024-04-15"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"    * Added documentation for features `user details` and `user update`. **[PR #224](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/224)**","lastModifiedDate":"2024-04-15"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"### Contributions to project management","lastModifiedDate":"2024-04-11"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"* In charge of organising and factoring out code written to ensure high levels of OOP, as well as one of 2 designation PR reviewers to maintain the GitHub repository.","lastModifiedDate":"2024-04-15"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"* Conducted Peer Testing for Team T11-2 so that we could both learn from each other. **[Peer Testing Contributions](https://github.com/AY2324S2-CS2113-T11-2/tp/issues?q\u003dis%3Aissue+author%3Apaturikarthik)**","lastModifiedDate":"2024-04-15"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"### Code contributed","lastModifiedDate":"2024-04-11"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"* [RepoSense link](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003dpaturikarthik\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2024-02-23\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dpaturikarthik\u0026tabRepo\u003dAY2324S2-CS2113-F15-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026authorshipIsIgnoredFilesChecked\u003dfalse)","lastModifiedDate":"2024-04-11"}],"authorContributionMap":{"paturikarthik":55}},{"path":"docs/team/rexyyong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"# Rex Yong\u0027s Project Portfolio Page","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"## Project: LifeTrack","lastModifiedDate":"2024-04-10"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"LifeTrack is a desktop app for students to track their health data, ","lastModifiedDate":"2024-04-10"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"optimized for use via a Command Line Interface (CLI). ","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"It tracks calories, hydration and sleep data for the user, ","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"while also providing daily recommendations for calorie and hydration intake, ","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"based on the user\u0027s build and gender, as well as their body goals and activity levels.","lastModifiedDate":"2024-04-10"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"The program was created using Java. Version control was done using Git.","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"## My contributions to the project","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"### New features added and enhancements to existing features","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"1. **Added the ability to add entries for calories intake. [PR #12](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/12)**","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"   * What it does: Allows users to add records relating to their calories intake, which includes ","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"   `DESCRIPTION` of food, amount of `CALORIES`, as well as `DATE`.","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"   * Testing: Added JUnit tests for the feature as well.","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"2. **Added date format using Class LocalDate for Class Calories, Hydration and Sleep. [PR #83](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/83)**","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"   * What it does: Allows users to key in dates into their entries. ","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"   * Justification: By using the Java LocalDate Class, it allows methods to check if dates keyed","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"   in by users is valid. It also allows easier comparison of dates among entries. ","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"   * Highlights: This enhancement affects existing commands and commands to be added in future. It required","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"   the editing of many other classes to change the `DATE` from type String to type LocalDate.","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"   * Testing: Edited JUnit tests to follow LocalDate format.","lastModifiedDate":"2024-04-10"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"3. **Added `entryID` for calories entries in calories list. [PR #153](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/153)**","lastModifiedDate":"2024-04-10"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"   * What it does: Ensures that all entries added by users will be tagged to a unique `entryID`.","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"   * Justification: This allows users to remove calories entries based on the `entryID`, instead of","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"   removing entries based on the index of entry in the array list.","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"   * Highlights: This enhancement affects existing commands and commands to be added in future. It required","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"   the editing of many other classes to ensure that all entries will be given an `entryID`.","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"4. **Added feature to sort entries by `DATE`. [PR #161](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/161)**","lastModifiedDate":"2024-04-10"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"    * What it does: Ensures that dates of entries are sorted in ascending order.","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"    * Justification: So that user can see the breakdown of calories entries grouped by `DATE`.","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"5. **Added feature to print calories list grouped by calories in and calories out. [PR #154](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/154)**","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"    * What it does: Prints the calories list grouped by calories in and calories out data.","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"    * Justification: So that user can distinguish which entries are for calories in and calories out.","lastModifiedDate":"2024-04-10"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"### Contributions to exception handling","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"* Added robust exception handling for calories Parser, in order to ensure that program does not crash","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"    when users type the wrong command to add, delete or list calories entries. [PR #43](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/43)","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"* Added robust exception handling for hydration features, in order to ensure that program does not crash","lastModifiedDate":"2024-04-10"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"    when users type the wrong command to add, delete or list hydration entries. [PR #50](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/50)","lastModifiedDate":"2024-04-12"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"### Contributions to documentation","lastModifiedDate":"2024-04-10"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"* **Developer guide**","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"  * Added implementation details for `calories list` feature. [PR #74](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/74)","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"* **User guide**","lastModifiedDate":"2024-04-10"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"  * Added documentation for features `calories in`, `calories out`, `calories list`. ","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"  Also added quick links as well as command summary. [PR #100](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/100)","lastModifiedDate":"2024-04-10"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"### Contributions to project management","lastModifiedDate":"2024-04-10"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"* In charge of organising and documenting project meeting minutes and scheduling project meetings. ","lastModifiedDate":"2024-04-10"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"  * Click [here](https://docs.google.com/document/d/1hQchbh4mrso-WWNApsfkhvX7QF_kqfvNnIorwwQwjzU/edit) ","lastModifiedDate":"2024-04-10"},{"lineNumber":58,"author":{"gitId":"rexyyong"},"content":"  to view the meeting minutes document. ","lastModifiedDate":"2024-04-10"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"### Code contributed ","lastModifiedDate":"2024-04-10"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"* (Clink RepoSense link and search for rexyyong to see my code contributed:","lastModifiedDate":"2024-04-10"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"[RepoSense link](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2024-02-23\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003drexyyong\u0026tabRepo\u003dAY2324S2-CS2113-F15-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026authorshipIsIgnoredFilesChecked\u003dfalse)","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"rexyyong":61,"shawnpong":1}},{"path":"docs/team/shawnpong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"# Shawn Pong\u0027s Project Portfolio Page","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"## Project: LifeTrack","lastModifiedDate":"2024-04-11"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"LifeTrack is a desktop app for students to track their health data,","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"optimized for use via a Command Line Interface (CLI).","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"It tracks calories, hydration and sleep data for the user,","lastModifiedDate":"2024-04-11"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"while also providing daily recommendations for calorie and hydration intake,","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"based on the user\u0027s build and gender, as well as their body goals and activity levels.","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"The program was created using Java. Version control was done using Git.","lastModifiedDate":"2024-04-11"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"## My contributions to the project","lastModifiedDate":"2024-04-11"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"### New features added and enhancements to existing features","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"1. **Added the ability to add entries for hydration intake.** [PR #71](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/71)","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"   * What it does: Allows users to add records relating to their hydration intake, which includes `DESCRIPTION` of ","lastModifiedDate":"2024-04-12"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"   drink, `VOLUME` of drink, as well as `DATE`. ","lastModifiedDate":"2024-04-12"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"   * Testing: Added JUnit tests for the feature as well.","lastModifiedDate":"2024-04-12"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"2. **Added functionality for users to view their caloric and hydration goals** [PR #90](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/90)","lastModifiedDate":"2024-04-12"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"   * What it does: Allows users to view their progress with a progress bar with `user progress` function.","lastModifiedDate":"2024-04-12"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"   * Justification: This lets users easily view their progress with an easy to comprehend progress bar, so users can ","lastModifiedDate":"2024-04-12"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"   know how much more calories or hydration to consume.","lastModifiedDate":"2024-04-12"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"3. **Added feature for users to view caloric and hydration goals for current day** [PR #180](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/181)","lastModifiedDate":"2024-04-12"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"    * What it does: Users can now view their current daily caloric and hydration intake with `user progress` function,","lastModifiedDate":"2024-04-12"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"   instead of the cumulative intake.","lastModifiedDate":"2024-04-12"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"    * Justification: As this is a lifestyle tracker, the intent is for users to use it on a day-to-day basis, tracking","lastModifiedDate":"2024-04-12"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"   their current daily instake against their goals. They are still able to view their previous history of consumption ","lastModifiedDate":"2024-04-12"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"   with `calories list` and `hydration list`.","lastModifiedDate":"2024-04-12"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"4. **Added feature to sort hydration entries by DATE.** [PR #181](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/181)","lastModifiedDate":"2024-04-15"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"    * What it does: Ensures that dates of hydration entries are sorted in ascending order. ","lastModifiedDate":"2024-04-15"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"    * Justification: So that user can see the breakdown of hydration entries grouped by DATE.","lastModifiedDate":"2024-04-15"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"### Contributions to exception handling","lastModifiedDate":"2024-04-11"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"* Added robust exception handling for hydration class and lists, in order to ensure that program does not crash","lastModifiedDate":"2024-04-12"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"  when users type the wrong command to add, delete or list hydration entries. [PR #38](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/38)","lastModifiedDate":"2024-04-12"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"* Added robust exception handling for ParserHydration, in order to ensure that program does not crash","lastModifiedDate":"2024-04-12"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"  when users enter invalid commands [PR #71](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/71)","lastModifiedDate":"2024-04-12"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"### Contributions to documentation","lastModifiedDate":"2024-04-11"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"* **Developer guide**","lastModifiedDate":"2024-04-12"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"    * Added implementation details for `Hydration` class. [PR #275](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/275)","lastModifiedDate":"2024-04-15"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"    * Added implementation details for `HydrationList` class. [PR #93](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/93)","lastModifiedDate":"2024-04-15"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"    * Ensure consistent formatting throughout developer guide.","lastModifiedDate":"2024-04-12"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"* **User guide**","lastModifiedDate":"2024-04-12"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"    * Converted User guide from word document to Markdown format for all existing features.","lastModifiedDate":"2024-04-12"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"      * Added documentation for features `hydration in`, `hydration delete`, `hydration list`. [PR #91](https://github.com/AY2324S2-CS2113-F15-2/tp/pull/91)","lastModifiedDate":"2024-04-12"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"      * Ensure consistent formatting throughout user guide.","lastModifiedDate":"2024-04-12"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"### Code contributed","lastModifiedDate":"2024-04-11"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"* [Reposense Link](https://nus-cs2113-ay2324s2.github.io/tp-dashboard/?search\u003dshawnpong\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtotalCommits%20dsc\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2024-02-23\u0026tabOpen\u003dfalse)","lastModifiedDate":"2024-04-12"}],"authorContributionMap":{"shawnpong":53}},{"path":"src/main/java/seedu/lifetrack/Entry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"public abstract class Entry {","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"    private String description;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"    private LocalDate date;","lastModifiedDate":"2024-03-29"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    private int entryID;","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    public Entry(int lastEntryID, String description, LocalDate date){","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"        this.entryID \u003d lastEntryID;","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    public String getDescription() {","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"        return description;","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-29"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"        return date;","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    public int getEntryID() {","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        return entryID;","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    public String toString() {","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"        if(this instanceof InputEntry) {","lastModifiedDate":"2024-04-10"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"            return (\"\\t caloriesID: \" + entryID + \", Date: \" + date +","lastModifiedDate":"2024-04-15"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"                    \", Description: \" + description);","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"        } else if (this instanceof OutputEntry) {","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"            return (\"\\t caloriesID: \" + entryID + \", Date: \" + date + \", \" +","lastModifiedDate":"2024-04-15"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"                    \"Description: \" + description);","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        } else {","lastModifiedDate":"2024-04-10"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"            return (\"\\t hydrationID: \" + entryID + \", Date: \" + date + \", \" +","lastModifiedDate":"2024-04-15"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"                    \"Description: \" + description);","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"        return (entryID + \";\" + date + \";\" + description);","lastModifiedDate":"2024-04-15"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"owx0130":49}},{"path":"src/main/java/seedu/lifetrack/LifeTrack.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationList;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepList;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.ui.Ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import java.io.File;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"public class LifeTrack {","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    public static CalorieList calorieList \u003d new CalorieList(\"data/caloriesData.txt\");","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    public static HydrationList hydrationList \u003d new HydrationList(\"data/hydrationData.txt\");","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    public static SleepList sleepList \u003d new SleepList(\"data/sleepData.txt\");","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    public static User user \u003d new User(\"data/userData.txt\");","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"     * Main entry-point for the java.lifetrack.LifeTrack application.","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"        new File(\"data/\").mkdir();","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"        Ui.sayHello();","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"        Ui.readUserInput(calorieList,hydrationList,user,sleepList);","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"        Ui.byeMessage();","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"rexyyong":2,"a-wild-chocolate":1,"owx0130":8,"paturikarthik":15}},{"path":"src/main/java/seedu/lifetrack/calories/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.calories;","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"public class Food {","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"    private int carbohydrates;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    private int proteins;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"    private int fats;","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"    public Food(int carbohydrates, int proteins, int fats) {","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"        this.carbohydrates \u003d carbohydrates;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    public int getCarbohydrates() {","lastModifiedDate":"2024-03-22"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"        return carbohydrates;","lastModifiedDate":"2024-03-22"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    public int getProteins() {","lastModifiedDate":"2024-03-22"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"        return proteins;","lastModifiedDate":"2024-03-22"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    public int getFats() {","lastModifiedDate":"2024-03-22"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"        return fats;","lastModifiedDate":"2024-03-22"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"owx0130":27}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/CalorieList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"//@@author rexyyong","lastModifiedDate":"2024-04-08"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.system.parser.ParserCalories;","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.system.storage.CaloriesFileHandler;","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.ui.CalorieListUi;","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-12"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"import java.util.Collections;","lastModifiedDate":"2024-04-09"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-11"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"public class CalorieList {","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"    private static Logger logr \u003d Logger.getLogger(CalorieList.class.getName());","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"    private final int SIZE_OF_DELETE \u003d 16;","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"    //constant for finding entry index from entryID","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"    private final int NO_INDEX_FOUND \u003d -1;","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"    private ArrayList\u003cEntry\u003e calorieArrayList;","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"    private CaloriesFileHandler fileHandler;","lastModifiedDate":"2024-04-13"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"    private int lastEntryID;","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new CalorieList object.","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"     * This constructor is used for JUnit tests and initializes an empty list of calorie entries.","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"    public CalorieList() {","lastModifiedDate":"2024-03-11"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"        calorieArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-11"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new CalorieList object using a file path.","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"     * This constructor is intended for usage in a terminal environment.","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"     * @param filePath the path to the file containing calorie entries","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"    public CalorieList(String filePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"            fileHandler \u003d new CaloriesFileHandler(filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"            calorieArrayList \u003d fileHandler.getCalorieEntriesFromFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"            // Initialize lastEntryID from stored data or default to 0 if not available","lastModifiedDate":"2024-04-09"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"            this.lastEntryID \u003d loadLastEntryID();","lastModifiedDate":"2024-04-09"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"            calorieArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"     * Updates the file with the current list of calorie entries.","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"     * If the file handler is not initialized, no action is taken.","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"    private void updateFile() {","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"        if (fileHandler !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"            fileHandler.writeEntries(calorieArrayList);","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"    public Entry getEntry(int index) {","lastModifiedDate":"2024-03-15"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"        return calorieArrayList.get(index);","lastModifiedDate":"2024-03-15"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":68,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":69,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":71,"author":{"gitId":"rexyyong"},"content":"     * Deletes a calorie entry from the list based on the provided entryID.","lastModifiedDate":"2024-04-09"},{"lineNumber":72,"author":{"gitId":"rexyyong"},"content":"     * entryID should be in an integer from 1 to size of the list, and be present in the calorieArrayList.","lastModifiedDate":"2024-04-09"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"rexyyong"},"content":"     * @param line the string containing the entryID of calorie record user want to delete","lastModifiedDate":"2024-04-09"},{"lineNumber":75,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":76,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author a-wild-chocolate","lastModifiedDate":"2024-04-09"},{"lineNumber":77,"author":{"gitId":"a-wild-chocolate"},"content":"    public void deleteEntry(String line) {","lastModifiedDate":"2024-03-15"},{"lineNumber":78,"author":{"gitId":"a-wild-chocolate"},"content":"        assert (line.startsWith(\"calories delete\") ) : \"ensures that input is correct\";","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"a-wild-chocolate"},"content":"            int entryID \u003d Integer.parseInt(line.substring(SIZE_OF_DELETE).trim());","lastModifiedDate":"2024-04-09"},{"lineNumber":82,"author":{"gitId":"a-wild-chocolate"},"content":"            int index \u003d getIndexFromEntryID(entryID);","lastModifiedDate":"2024-04-09"},{"lineNumber":83,"author":{"gitId":"a-wild-chocolate"},"content":"            if (calorieArrayList.isEmpty()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":84,"author":{"gitId":"a-wild-chocolate"},"content":"                CalorieListUi.emptyCalorieList();;","lastModifiedDate":"2024-04-10"},{"lineNumber":85,"author":{"gitId":"a-wild-chocolate"},"content":"            } else if (index \u003d\u003d NO_INDEX_FOUND) {","lastModifiedDate":"2024-04-10"},{"lineNumber":86,"author":{"gitId":"a-wild-chocolate"},"content":"                CalorieListUi.unsuccessfulDeletedMessage(entryID);","lastModifiedDate":"2024-04-09"},{"lineNumber":87,"author":{"gitId":"a-wild-chocolate"},"content":"            } else {","lastModifiedDate":"2024-04-09"},{"lineNumber":88,"author":{"gitId":"a-wild-chocolate"},"content":"                Entry toDelete \u003d calorieArrayList.get(index);","lastModifiedDate":"2024-04-09"},{"lineNumber":89,"author":{"gitId":"a-wild-chocolate"},"content":"                calorieArrayList.remove((index));","lastModifiedDate":"2024-04-09"},{"lineNumber":90,"author":{"gitId":"a-wild-chocolate"},"content":"                CalorieListUi.successfulDeletedMessage(toDelete);","lastModifiedDate":"2024-03-28"},{"lineNumber":91,"author":{"gitId":"a-wild-chocolate"},"content":"                updateFile();","lastModifiedDate":"2024-04-09"},{"lineNumber":92,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-04-09"},{"lineNumber":93,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":94,"author":{"gitId":"a-wild-chocolate"},"content":"            System.out.println(CalorieListUi.deleteLogNumberMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":95,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":96,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":97,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author","lastModifiedDate":"2024-04-09"},{"lineNumber":98,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":99,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-09"},{"lineNumber":100,"author":{"gitId":"rexyyong"},"content":"     * Returns the index of the entry in the calorie ArrayList based on the given entry ID.","lastModifiedDate":"2024-04-09"},{"lineNumber":101,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-09"},{"lineNumber":102,"author":{"gitId":"rexyyong"},"content":"     * @param entryID the entry ID to search for in the list","lastModifiedDate":"2024-04-09"},{"lineNumber":103,"author":{"gitId":"rexyyong"},"content":"     * @return the index of the entry with the specified entry ID, or NO_INDEX_FOUND if not found","lastModifiedDate":"2024-04-09"},{"lineNumber":104,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-09"},{"lineNumber":105,"author":{"gitId":"rexyyong"},"content":"    public int getIndexFromEntryID(int entryID) {","lastModifiedDate":"2024-04-09"},{"lineNumber":106,"author":{"gitId":"rexyyong"},"content":"        for (int i \u003d 0; i \u003c calorieArrayList.size(); i++) {","lastModifiedDate":"2024-04-09"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"            if (calorieArrayList.get(i).getEntryID() \u003d\u003d entryID) {","lastModifiedDate":"2024-04-14"},{"lineNumber":108,"author":{"gitId":"rexyyong"},"content":"                return i;","lastModifiedDate":"2024-04-09"},{"lineNumber":109,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-04-09"},{"lineNumber":110,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-04-09"},{"lineNumber":111,"author":{"gitId":"rexyyong"},"content":"        return NO_INDEX_FOUND;","lastModifiedDate":"2024-04-09"},{"lineNumber":112,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":113,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":114,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":115,"author":{"gitId":"rexyyong"},"content":"     * Parses a string input representing calorie intake and adds it to the calorie list.","lastModifiedDate":"2024-03-13"},{"lineNumber":116,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":117,"author":{"gitId":"rexyyong"},"content":"     * This method takes a string input representing calorie intake information and","lastModifiedDate":"2024-03-13"},{"lineNumber":118,"author":{"gitId":"rexyyong"},"content":"     * attempts to parse it using the parseCaloriesInput method from the ParserCalories class.","lastModifiedDate":"2024-04-09"},{"lineNumber":119,"author":{"gitId":"rexyyong"},"content":"     * If the input format is incorrect or contains missing components, it catches","lastModifiedDate":"2024-03-13"},{"lineNumber":120,"author":{"gitId":"rexyyong"},"content":"     * the InvalidInputException and prints an error message. Otherwise, it adds","lastModifiedDate":"2024-03-13"},{"lineNumber":121,"author":{"gitId":"rexyyong"},"content":"     * the parsed Entry object to the calorieArrayList.","lastModifiedDate":"2024-03-13"},{"lineNumber":122,"author":{"gitId":"rexyyong"},"content":"     * Additionally, if the date of the newly added entry is earlier than the date of the final","lastModifiedDate":"2024-04-09"},{"lineNumber":123,"author":{"gitId":"rexyyong"},"content":"     * entry before adding the new entry, the list is sorted by date.","lastModifiedDate":"2024-04-09"},{"lineNumber":124,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"rexyyong"},"content":"     * @param input the input string containing date, time, activity, and calorie count","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"    public void addEntry(String input) {","lastModifiedDate":"2024-03-14"},{"lineNumber":128,"author":{"gitId":"rexyyong"},"content":"        assert (input.startsWith(\"calories in\") || input.startsWith(\"calories out\")) : \"ensures that input is correct\";","lastModifiedDate":"2024-03-21"},{"lineNumber":129,"author":{"gitId":"a-wild-chocolate"},"content":"        logr.setLevel(Level.SEVERE);","lastModifiedDate":"2024-04-09"},{"lineNumber":130,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-13"},{"lineNumber":131,"author":{"gitId":"rexyyong"},"content":"            Entry newEntry \u003d ParserCalories.parseCaloriesInput(input, lastEntryID);","lastModifiedDate":"2024-04-09"},{"lineNumber":132,"author":{"gitId":"rexyyong"},"content":"            calorieArrayList.add(newEntry);","lastModifiedDate":"2024-03-13"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"            CalorieListUi.printNewCalorieEntry(newEntry);","lastModifiedDate":"2024-03-28"},{"lineNumber":134,"author":{"gitId":"rexyyong"},"content":"            lastEntryID ++;","lastModifiedDate":"2024-04-09"},{"lineNumber":135,"author":{"gitId":"rexyyong"},"content":"            //only sort if newly added date is earlier than date in final entry before adding entry","lastModifiedDate":"2024-04-09"},{"lineNumber":136,"author":{"gitId":"rexyyong"},"content":"            if (calorieArrayList.size() \u003e 1 \u0026\u0026","lastModifiedDate":"2024-04-09"},{"lineNumber":137,"author":{"gitId":"rexyyong"},"content":"                    calorieArrayList.get(calorieArrayList.size() - 2).getDate().compareTo(newEntry.getDate()) \u003e 0 ) {","lastModifiedDate":"2024-04-09"},{"lineNumber":138,"author":{"gitId":"rexyyong"},"content":"                sortEntriesByDate();","lastModifiedDate":"2024-04-09"},{"lineNumber":139,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-04-09"},{"lineNumber":140,"author":{"gitId":"rexyyong"},"content":"            updateFile();","lastModifiedDate":"2024-04-15"},{"lineNumber":141,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-13"},{"lineNumber":142,"author":{"gitId":"a-wild-chocolate"},"content":"            logr.log(Level.WARNING, e.getMessage(), e);","lastModifiedDate":"2024-03-21"},{"lineNumber":143,"author":{"gitId":"a-wild-chocolate"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":144,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":145,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"     * Prints the list of calorie entries along with its activity description.","lastModifiedDate":"2024-03-14"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"     * If the list is empty, it prints a message indicating that the list is empty.","lastModifiedDate":"2024-03-14"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"     * Otherwise, it prints each entry\u0027s activity description and calorie count.","lastModifiedDate":"2024-03-14"},{"lineNumber":151,"author":{"gitId":"rexyyong"},"content":"     * It prints calorieInflow entries, followed by calorieOutflow entries.","lastModifiedDate":"2024-04-09"},{"lineNumber":152,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":153,"author":{"gitId":"owx0130"},"content":"    public void printCalorieList() {","lastModifiedDate":"2024-03-14"},{"lineNumber":154,"author":{"gitId":"shawnpong"},"content":"        if (calorieArrayList.isEmpty()) {","lastModifiedDate":"2024-03-14"},{"lineNumber":155,"author":{"gitId":"owx0130"},"content":"            CalorieListUi.emptyListMessage();","lastModifiedDate":"2024-03-28"},{"lineNumber":156,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-03-14"},{"lineNumber":157,"author":{"gitId":"owx0130"},"content":"            CalorieListUi.calorieListHeader();","lastModifiedDate":"2024-03-28"},{"lineNumber":158,"author":{"gitId":"rexyyong"},"content":"            printCalorieInflow();","lastModifiedDate":"2024-04-09"},{"lineNumber":159,"author":{"gitId":"rexyyong"},"content":"            printCalorieOutflow();","lastModifiedDate":"2024-04-09"},{"lineNumber":160,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-04-09"},{"lineNumber":161,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":162,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":163,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-09"},{"lineNumber":164,"author":{"gitId":"rexyyong"},"content":"     * Prints the list of calorie entries representing calorie intake along with their activity descriptions.","lastModifiedDate":"2024-04-09"},{"lineNumber":165,"author":{"gitId":"rexyyong"},"content":"     * This method prints each entry\u0027s activity description and calorie count if it represents calorie intake.","lastModifiedDate":"2024-04-09"},{"lineNumber":166,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-09"},{"lineNumber":167,"author":{"gitId":"rexyyong"},"content":"    public void printCalorieInflow() {","lastModifiedDate":"2024-04-09"},{"lineNumber":168,"author":{"gitId":"rexyyong"},"content":"        CalorieListUi.inputCalorieListHeader();","lastModifiedDate":"2024-04-09"},{"lineNumber":169,"author":{"gitId":"rexyyong"},"content":"        int serialNumber \u003d 1;","lastModifiedDate":"2024-04-09"},{"lineNumber":170,"author":{"gitId":"rexyyong"},"content":"        for (Entry value : calorieArrayList) {","lastModifiedDate":"2024-04-09"},{"lineNumber":171,"author":{"gitId":"rexyyong"},"content":"            if (value instanceof InputEntry) {","lastModifiedDate":"2024-04-09"},{"lineNumber":172,"author":{"gitId":"rexyyong"},"content":"                Entry entry \u003d value;","lastModifiedDate":"2024-04-09"},{"lineNumber":173,"author":{"gitId":"rexyyong"},"content":"                System.out.println(\"\\t \" + serialNumber + \". \" + entry);","lastModifiedDate":"2024-04-09"},{"lineNumber":174,"author":{"gitId":"rexyyong"},"content":"                serialNumber++;","lastModifiedDate":"2024-04-09"},{"lineNumber":175,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-03-14"},{"lineNumber":176,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":177,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":178,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":179,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-09"},{"lineNumber":180,"author":{"gitId":"rexyyong"},"content":"     * Prints the list of calorie entries representing calorie expenditure along with their activity descriptions.","lastModifiedDate":"2024-04-09"},{"lineNumber":181,"author":{"gitId":"rexyyong"},"content":"     * This method prints each entry\u0027s activity description and calorie count if it represents calorie expenditure.","lastModifiedDate":"2024-04-09"},{"lineNumber":182,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-09"},{"lineNumber":183,"author":{"gitId":"rexyyong"},"content":"    public void printCalorieOutflow() {","lastModifiedDate":"2024-04-09"},{"lineNumber":184,"author":{"gitId":"rexyyong"},"content":"        CalorieListUi.outputCalorieListHeader();","lastModifiedDate":"2024-04-09"},{"lineNumber":185,"author":{"gitId":"rexyyong"},"content":"        int serialNumber \u003d 1;","lastModifiedDate":"2024-04-09"},{"lineNumber":186,"author":{"gitId":"rexyyong"},"content":"        for (Entry value : calorieArrayList) {","lastModifiedDate":"2024-04-09"},{"lineNumber":187,"author":{"gitId":"rexyyong"},"content":"            if (value instanceof OutputEntry) {","lastModifiedDate":"2024-04-09"},{"lineNumber":188,"author":{"gitId":"rexyyong"},"content":"                Entry entry \u003d value;","lastModifiedDate":"2024-04-09"},{"lineNumber":189,"author":{"gitId":"rexyyong"},"content":"                System.out.println(\"\\t \" + serialNumber + \". \" + entry);","lastModifiedDate":"2024-04-09"},{"lineNumber":190,"author":{"gitId":"rexyyong"},"content":"                serialNumber++;","lastModifiedDate":"2024-04-09"},{"lineNumber":191,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-04-09"},{"lineNumber":192,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-04-09"},{"lineNumber":193,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":194,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":195,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":196,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":197,"author":{"gitId":"rexyyong"},"content":"     * Returns the size of the list of calorie entries.","lastModifiedDate":"2024-04-03"},{"lineNumber":198,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":199,"author":{"gitId":"rexyyong"},"content":"     * @return the number of calorie entries in the list","lastModifiedDate":"2024-04-03"},{"lineNumber":200,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":201,"author":{"gitId":"owx0130"},"content":"    public int getSize() {","lastModifiedDate":"2024-03-14"},{"lineNumber":202,"author":{"gitId":"owx0130"},"content":"        return calorieArrayList.size();","lastModifiedDate":"2024-03-14"},{"lineNumber":203,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":204,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":205,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":206,"author":{"gitId":"rexyyong"},"content":"     * Calculates and returns the total number of calories consumed from all entries in the list.","lastModifiedDate":"2024-04-03"},{"lineNumber":207,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":208,"author":{"gitId":"rexyyong"},"content":"     * @return the total number of calories consumed","lastModifiedDate":"2024-04-03"},{"lineNumber":209,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":210,"author":{"gitId":"paturikarthik"},"content":"    public int getCaloriesConsumed(LocalDate date) {","lastModifiedDate":"2024-04-13"},{"lineNumber":211,"author":{"gitId":"shawnpong"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":212,"author":{"gitId":"paturikarthik"},"content":"        for (Entry entry : calorieArrayList) {","lastModifiedDate":"2024-04-10"},{"lineNumber":213,"author":{"gitId":"paturikarthik"},"content":"            if (entry instanceof InputEntry \u0026\u0026 entry.getDate().isEqual(date)) {","lastModifiedDate":"2024-04-13"},{"lineNumber":214,"author":{"gitId":"paturikarthik"},"content":"                InputEntry tempEntry \u003d (InputEntry) entry;","lastModifiedDate":"2024-04-10"},{"lineNumber":215,"author":{"gitId":"shawnpong"},"content":"                totalCalories +\u003d tempEntry.getCalories();","lastModifiedDate":"2024-04-02"},{"lineNumber":216,"author":{"gitId":"paturikarthik"},"content":"            } else if (entry instanceof OutputEntry \u0026\u0026 entry.getDate().isEqual(date)) {","lastModifiedDate":"2024-04-13"},{"lineNumber":217,"author":{"gitId":"paturikarthik"},"content":"                OutputEntry tempEntry \u003d (OutputEntry) entry;","lastModifiedDate":"2024-04-10"},{"lineNumber":218,"author":{"gitId":"paturikarthik"},"content":"                totalCalories -\u003d tempEntry.getCalories();","lastModifiedDate":"2024-04-10"},{"lineNumber":219,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-10"},{"lineNumber":220,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":221,"author":{"gitId":"shawnpong"},"content":"        return totalCalories;","lastModifiedDate":"2024-04-01"},{"lineNumber":222,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":223,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":224,"author":{"gitId":"shawnpong"},"content":"    public int getCaloriesConsumedCurrentDay() {","lastModifiedDate":"2024-04-12"},{"lineNumber":225,"author":{"gitId":"shawnpong"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2024-04-12"},{"lineNumber":226,"author":{"gitId":"shawnpong"},"content":"        for (Entry entry : calorieArrayList) {","lastModifiedDate":"2024-04-12"},{"lineNumber":227,"author":{"gitId":"shawnpong"},"content":"            if (entry.getDate().isEqual(LocalDate.now())) {","lastModifiedDate":"2024-04-12"},{"lineNumber":228,"author":{"gitId":"shawnpong"},"content":"                if (entry instanceof InputEntry) {","lastModifiedDate":"2024-04-12"},{"lineNumber":229,"author":{"gitId":"shawnpong"},"content":"                    InputEntry tempEntry \u003d (InputEntry) entry;","lastModifiedDate":"2024-04-12"},{"lineNumber":230,"author":{"gitId":"shawnpong"},"content":"                    totalCalories +\u003d tempEntry.getCalories();","lastModifiedDate":"2024-04-12"},{"lineNumber":231,"author":{"gitId":"shawnpong"},"content":"                } else if (entry instanceof OutputEntry) {","lastModifiedDate":"2024-04-12"},{"lineNumber":232,"author":{"gitId":"shawnpong"},"content":"                    OutputEntry tempEntry \u003d (OutputEntry) entry;","lastModifiedDate":"2024-04-12"},{"lineNumber":233,"author":{"gitId":"shawnpong"},"content":"                    totalCalories -\u003d tempEntry.getCalories();","lastModifiedDate":"2024-04-12"},{"lineNumber":234,"author":{"gitId":"shawnpong"},"content":"                }","lastModifiedDate":"2024-04-12"},{"lineNumber":235,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-04-12"},{"lineNumber":236,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":237,"author":{"gitId":"shawnpong"},"content":"        return totalCalories;","lastModifiedDate":"2024-04-12"},{"lineNumber":238,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":239,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":240,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-09"},{"lineNumber":241,"author":{"gitId":"rexyyong"},"content":"     * Loads the last entry ID from a text file.","lastModifiedDate":"2024-04-09"},{"lineNumber":242,"author":{"gitId":"rexyyong"},"content":"     * This method retrieves the last entry ID from the file using the FileHandler.getMaxCaloriesID method.","lastModifiedDate":"2024-04-09"},{"lineNumber":243,"author":{"gitId":"rexyyong"},"content":"     * If the file doesn\u0027t exist or an error occurs during the process, it returns a default value.","lastModifiedDate":"2024-04-09"},{"lineNumber":244,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-09"},{"lineNumber":245,"author":{"gitId":"rexyyong"},"content":"     * @return the last entry ID loaded from the file, or a default value if the file doesn\u0027t exist or an error occurs","lastModifiedDate":"2024-04-09"},{"lineNumber":246,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-09"},{"lineNumber":247,"author":{"gitId":"rexyyong"},"content":"    private int loadLastEntryID() {","lastModifiedDate":"2024-04-09"},{"lineNumber":248,"author":{"gitId":"owx0130"},"content":"        return CaloriesFileHandler.maxCaloriesID; // Default value if file doesn\u0027t exist or error occurs","lastModifiedDate":"2024-04-13"},{"lineNumber":249,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":250,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":251,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-09"},{"lineNumber":252,"author":{"gitId":"rexyyong"},"content":"     * Sorts the list of calorie entries by date.","lastModifiedDate":"2024-04-09"},{"lineNumber":253,"author":{"gitId":"rexyyong"},"content":"     * This method uses the Collections.sort(List, Comparator) method to sort the list of","lastModifiedDate":"2024-04-09"},{"lineNumber":254,"author":{"gitId":"rexyyong"},"content":"     * calorie entries in ascending order based on their dates. It provides a custom comparator that","lastModifiedDate":"2024-04-09"},{"lineNumber":255,"author":{"gitId":"rexyyong"},"content":"     * compares the dates of two entries and returns the result of the comparison.","lastModifiedDate":"2024-04-09"},{"lineNumber":256,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-09"},{"lineNumber":257,"author":{"gitId":"rexyyong"},"content":"    public void sortEntriesByDate() {","lastModifiedDate":"2024-04-09"},{"lineNumber":258,"author":{"gitId":"rexyyong"},"content":"        Collections.sort(calorieArrayList, new Comparator\u003cEntry\u003e() {","lastModifiedDate":"2024-04-09"},{"lineNumber":259,"author":{"gitId":"rexyyong"},"content":"            @Override","lastModifiedDate":"2024-04-09"},{"lineNumber":260,"author":{"gitId":"rexyyong"},"content":"            public int compare(Entry entry1, Entry entry2) {","lastModifiedDate":"2024-04-09"},{"lineNumber":261,"author":{"gitId":"rexyyong"},"content":"                return entry1.getDate().compareTo(entry2.getDate());","lastModifiedDate":"2024-04-09"},{"lineNumber":262,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-04-09"},{"lineNumber":263,"author":{"gitId":"rexyyong"},"content":"        });","lastModifiedDate":"2024-04-09"},{"lineNumber":264,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":265,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":266,"author":{"gitId":"paturikarthik"},"content":"    //@@author paturikarthik","lastModifiedDate":"2024-04-14"},{"lineNumber":267,"author":{"gitId":"paturikarthik"},"content":"    public void findEntries(String input){","lastModifiedDate":"2024-04-14"},{"lineNumber":268,"author":{"gitId":"paturikarthik"},"content":"        ParserCalories.findCalorieListEntries(input,this);","lastModifiedDate":"2024-04-14"},{"lineNumber":269,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":270,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":271,"author":{"gitId":"paturikarthik"},"content":"    public void addCalorieEntry(Entry entry){","lastModifiedDate":"2024-04-14"},{"lineNumber":272,"author":{"gitId":"paturikarthik"},"content":"        this.calorieArrayList.add(entry);","lastModifiedDate":"2024-04-14"},{"lineNumber":273,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":274,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":275,"author":{"gitId":"paturikarthik"},"content":"    public void printFoundCalorieList() {","lastModifiedDate":"2024-04-14"},{"lineNumber":276,"author":{"gitId":"paturikarthik"},"content":"        if (calorieArrayList.isEmpty()) {","lastModifiedDate":"2024-04-14"},{"lineNumber":277,"author":{"gitId":"paturikarthik"},"content":"            CalorieListUi.emptyFoundListMessage();","lastModifiedDate":"2024-04-14"},{"lineNumber":278,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-14"},{"lineNumber":279,"author":{"gitId":"paturikarthik"},"content":"            CalorieListUi.calorieListFoundHeader();","lastModifiedDate":"2024-04-14"},{"lineNumber":280,"author":{"gitId":"paturikarthik"},"content":"            printCalorieInflow();","lastModifiedDate":"2024-04-14"},{"lineNumber":281,"author":{"gitId":"paturikarthik"},"content":"            printCalorieOutflow();","lastModifiedDate":"2024-04-14"},{"lineNumber":282,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":283,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":284,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"rexyyong":187,"a-wild-chocolate":26,"owx0130":11,"shawnpong":32,"paturikarthik":28}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/InputEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"//@@author rexyyong","lastModifiedDate":"2024-04-08"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":" * Represents an entry for calories intake.","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":" * Extends the Entry class and includes additional fields and methods specific to input entries.","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"public class InputEntry extends Entry {","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"    ","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"    private Food food;","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"    private int calories;","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"    private boolean doesFoodExist \u003d false;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new InputEntry object with the given description, calories, and date.","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories consumed","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"    public InputEntry(int lastEntryID, String description, int calories, LocalDate date) {","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"        super(lastEntryID, description, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new InputEntry object with the given description, calories, date,","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"     * and food details with macronutrients.","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories consumed","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"     * @param food the food details with macronutrients associated with the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"    public InputEntry(int lastEntryID, String description, int calories, LocalDate date, Food food) {","lastModifiedDate":"2024-04-09"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"        super(lastEntryID, description, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"        this.food \u003d food;","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"        this.doesFoodExist \u003d true;","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"    public Food getFood() {","lastModifiedDate":"2024-03-22"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"        return food;","lastModifiedDate":"2024-03-22"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"    public int getCalories() {","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"        return this.calories;","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"    public String toString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"        return (super.toString() + \", Calories: \" + calories + (doesFoodExist ?","lastModifiedDate":"2024-04-15"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"                \" (C: \" + food.getCarbohydrates() +","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"rexyyong"},"content":"                \", P: \" + food.getProteins() +","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"                \", F: \" + food.getFats() + \")\"","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"                : \"\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"        return (super.toFileFriendlyString() + \";C_IN;\" + calories +","lastModifiedDate":"2024-04-15"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"                (doesFoodExist ? \";\" + food.getCarbohydrates() + \";\" + food.getProteins() + \";\" + food.getFats()","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"                : \"\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":68}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/OutputEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"//@@author rexyyong","lastModifiedDate":"2024-04-08"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":" * Represents an entry for calories output.","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":" * Extends the Entry class and includes additional fields and methods specific to output entries.","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"public class OutputEntry extends Entry {","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"    private int calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new OutputEntry object with the given description, calories, and date.","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories burnt","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"    public OutputEntry(int lastEntryID, String description, int calories, LocalDate date) {","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"        super(lastEntryID, description, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"    public int getCalories() {","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"        return calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"    public String toString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"        return (super.toString() + \", Calories: \" + calories);","lastModifiedDate":"2024-04-15"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"        return (super.toFileFriendlyString() + \";C_OUT;\" + calories);","lastModifiedDate":"2024-04-15"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":39}},{"path":"src/main/java/seedu/lifetrack/hydration/hydrationlist/HydrationEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"//@@author shawnpong","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack.hydration.hydrationlist;","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"public class HydrationEntry extends Entry {","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"    private int volume;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"    public HydrationEntry(int lastHydrationEntryID, String description, int volume, LocalDate date){","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"        super(lastHydrationEntryID, description, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"        this.volume\u003d volume;","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"    public  int getHydration() {","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"        return volume;","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"    public int getVolume() {","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"        return volume;","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    public String toString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"        return (super.toString() + \", Volume: \" + volume);","lastModifiedDate":"2024-04-15"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"        return (super.toFileFriendlyString() + \";\" + volume);","lastModifiedDate":"2024-04-15"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"shawnpong":32}},{"path":"src/main/java/seedu/lifetrack/hydration/hydrationlist/HydrationList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"//@@author shawnpong","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack.hydration.hydrationlist;","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.system.parser.ParserHydration;","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.system.storage.HydrationFileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.ui.HydrationListUI;","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-12"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"import java.util.Collections;","lastModifiedDate":"2024-04-12"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-04-12"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":" * Represents a list of liquid entries.","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":" * Provides methods to add, delete, and print liquid entries.","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"public class HydrationList {","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    private static Logger logr \u003d Logger.getLogger(CalorieList.class.getName());","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"    private final int SIZE_OF_DELETE \u003d 16;","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"    private final int NO_INDEX_FOUND \u003d -1;","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"    private ArrayList\u003cEntry\u003e hydrationArrayList;","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"    private HydrationFileHandler fileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"    private int lastHydrationEntryID;","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"    //constructor for JUnit tests","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"    public HydrationList() {","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"        hydrationArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"    //constructor for usage in terminal","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"    public HydrationList(String filePath) {","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"            fileHandler \u003d new HydrationFileHandler(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"            hydrationArrayList \u003d fileHandler.getHydrationEntriesFromFile();","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"            this.lastHydrationEntryID \u003d loadLastEntryID();","lastModifiedDate":"2024-04-09"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"            hydrationArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"     * Updates the file with the current list of hydration entries.","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"    private void updateFile() {","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"        if (fileHandler !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"            fileHandler.writeEntries(hydrationArrayList);","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the liquid entry at the specified index.","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"     * @param index the index of the liquid entry to retrieve","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"     * @return the liquid entry at the specified index","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"     * @throws IndexOutOfBoundsException if the index is out of range","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"    public Entry getEntry(int index) {","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"        return hydrationArrayList.get(index);","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"     * Deletes the liquid entry indicated by the provided line.","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"     * @param line the string containing the index of the liquid record to delete","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"    public void deleteEntry(String line) {","lastModifiedDate":"2024-03-20"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"        assert (line.startsWith(\"hydration delete\")) : \"ensures that input is correct\";","lastModifiedDate":"2024-04-12"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"            int entryID \u003d Integer.parseInt(line.substring(SIZE_OF_DELETE).trim());","lastModifiedDate":"2024-04-09"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"            int index \u003d getIndexFromEntryID(entryID);","lastModifiedDate":"2024-04-09"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"            if (hydrationArrayList.isEmpty()) {","lastModifiedDate":"2024-04-12"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"                HydrationListUI.emptyHydrationList();","lastModifiedDate":"2024-04-12"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"            } else if (index \u003d\u003d NO_INDEX_FOUND) {","lastModifiedDate":"2024-04-12"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"                HydrationListUI.unsuccessfulDeletedMessage(entryID);","lastModifiedDate":"2024-04-09"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"            } else {","lastModifiedDate":"2024-04-09"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"                Entry toDelete \u003d hydrationArrayList.get(index);","lastModifiedDate":"2024-04-09"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"                hydrationArrayList.remove((index));","lastModifiedDate":"2024-04-09"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"                HydrationListUI.successfulDeletedMessage(toDelete);","lastModifiedDate":"2024-03-28"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"                updateFile();","lastModifiedDate":"2024-04-09"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-04-09"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"            System.out.println(HydrationListUI.deleteLogIndexMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"            System.out.println(HydrationListUI.deleteLogNumberMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"    public int getIndexFromEntryID(int lastEntryID) {","lastModifiedDate":"2024-04-09"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 0; i \u003c hydrationArrayList.size(); i++) {","lastModifiedDate":"2024-04-09"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"            if (hydrationArrayList.get(i).getEntryID() \u003d\u003d lastEntryID) {","lastModifiedDate":"2024-04-14"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"                return i;","lastModifiedDate":"2024-04-09"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-04-09"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-09"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"        return NO_INDEX_FOUND;","lastModifiedDate":"2024-04-09"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"     * Adds a new liquid entry based on the provided input.","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"     * @param input the input string containing liquid entry information","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"    public void addEntry(String input) {","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"        assert (input.startsWith(\"hydration in\")) : \"ensures that input is correct\";","lastModifiedDate":"2024-04-09"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"        logr.setLevel(Level.SEVERE);","lastModifiedDate":"2024-04-09"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"            Entry newEntry \u003d ParserHydration.parseHydrationInput(input, lastHydrationEntryID);","lastModifiedDate":"2024-04-09"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"            hydrationArrayList.add(newEntry);","lastModifiedDate":"2024-03-28"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"            HydrationListUI.printNewHydrationEntry(newEntry);","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"            lastHydrationEntryID++;","lastModifiedDate":"2024-04-09"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"            if (hydrationArrayList.size() \u003e 1 \u0026\u0026","lastModifiedDate":"2024-04-12"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"                    hydrationArrayList.get(hydrationArrayList.size() - 2).getDate().compareTo(newEntry.getDate()) \u003e 0) {","lastModifiedDate":"2024-04-12"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"                sortEntriesByDate();","lastModifiedDate":"2024-04-12"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-04-12"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"            updateFile();","lastModifiedDate":"2024-04-15"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"            logr.log(Level.WARNING, e.getMessage(), e);","lastModifiedDate":"2024-03-21"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-12"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"    public void sortEntriesByDate() {","lastModifiedDate":"2024-04-12"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"        Collections.sort(hydrationArrayList, new Comparator\u003cEntry\u003e() {","lastModifiedDate":"2024-04-12"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"            @Override","lastModifiedDate":"2024-04-12"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"            public int compare(Entry entry1, Entry entry2) {","lastModifiedDate":"2024-04-12"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"                return entry1.getDate().compareTo(entry2.getDate());","lastModifiedDate":"2024-04-12"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"        });","lastModifiedDate":"2024-04-12"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"     * Prints the list of liquid entries.","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"shawnpong"},"content":"     * If the list is empty, prints a message indicating that the list is empty.","lastModifiedDate":"2024-03-20"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"    public void printHydrationList() {","lastModifiedDate":"2024-03-28"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"        if (hydrationArrayList.isEmpty()) {","lastModifiedDate":"2024-03-28"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"            HydrationListUI.emptyListMessage();","lastModifiedDate":"2024-03-28"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"            HydrationListUI.hydrationListHeader();","lastModifiedDate":"2024-03-28"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"            printHydrationInflow();","lastModifiedDate":"2024-04-12"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":151,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":152,"author":{"gitId":"shawnpong"},"content":"    public void printHydrationInflow() {","lastModifiedDate":"2024-04-12"},{"lineNumber":153,"author":{"gitId":"shawnpong"},"content":"        int serialNumber \u003d 1;","lastModifiedDate":"2024-04-12"},{"lineNumber":154,"author":{"gitId":"shawnpong"},"content":"        for (Entry value : hydrationArrayList) {","lastModifiedDate":"2024-04-12"},{"lineNumber":155,"author":{"gitId":"shawnpong"},"content":"            if (value instanceof HydrationEntry) {","lastModifiedDate":"2024-04-12"},{"lineNumber":156,"author":{"gitId":"shawnpong"},"content":"                Entry entry \u003d value;","lastModifiedDate":"2024-04-12"},{"lineNumber":157,"author":{"gitId":"shawnpong"},"content":"                System.out.println(\"\\t \" + serialNumber + \". \" + entry);","lastModifiedDate":"2024-04-12"},{"lineNumber":158,"author":{"gitId":"shawnpong"},"content":"                serialNumber++;","lastModifiedDate":"2024-04-12"},{"lineNumber":159,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":160,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":161,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":162,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the total amount of hydration consumed.","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":166,"author":{"gitId":"shawnpong"},"content":"     * @return the total amount of hydration consumed","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"shawnpong"},"content":"    public int getHydrationConsumed(LocalDate date) {","lastModifiedDate":"2024-04-13"},{"lineNumber":169,"author":{"gitId":"shawnpong"},"content":"        int totalHydration \u003d 0;","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"shawnpong"},"content":"        for (Entry entry : hydrationArrayList) {","lastModifiedDate":"2024-04-13"},{"lineNumber":171,"author":{"gitId":"shawnpong"},"content":"            if (entry.getDate().isEqual(date)) {","lastModifiedDate":"2024-04-13"},{"lineNumber":172,"author":{"gitId":"shawnpong"},"content":"                HydrationEntry tempEntry \u003d (HydrationEntry) entry;","lastModifiedDate":"2024-04-13"},{"lineNumber":173,"author":{"gitId":"shawnpong"},"content":"                totalHydration +\u003d tempEntry.getHydration();","lastModifiedDate":"2024-04-02"},{"lineNumber":174,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":175,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":176,"author":{"gitId":"shawnpong"},"content":"        return totalHydration;","lastModifiedDate":"2024-04-02"},{"lineNumber":177,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":178,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":179,"author":{"gitId":"shawnpong"},"content":"    public int getHydrationConsumedCurrentDay() {","lastModifiedDate":"2024-04-12"},{"lineNumber":180,"author":{"gitId":"shawnpong"},"content":"        int totalHydration \u003d 0;","lastModifiedDate":"2024-04-12"},{"lineNumber":181,"author":{"gitId":"shawnpong"},"content":"        for (Entry entry : hydrationArrayList) {","lastModifiedDate":"2024-04-12"},{"lineNumber":182,"author":{"gitId":"shawnpong"},"content":"            if (entry.getDate().isEqual(LocalDate.now())) {","lastModifiedDate":"2024-04-12"},{"lineNumber":183,"author":{"gitId":"shawnpong"},"content":"                HydrationEntry tempEntry \u003d (HydrationEntry) entry;","lastModifiedDate":"2024-04-12"},{"lineNumber":184,"author":{"gitId":"shawnpong"},"content":"                totalHydration +\u003d tempEntry.getHydration();","lastModifiedDate":"2024-04-12"},{"lineNumber":185,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-04-12"},{"lineNumber":186,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-12"},{"lineNumber":187,"author":{"gitId":"shawnpong"},"content":"        return totalHydration;","lastModifiedDate":"2024-04-12"},{"lineNumber":188,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":189,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":190,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":191,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":192,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the size of the liquid list.","lastModifiedDate":"2024-03-20"},{"lineNumber":193,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":194,"author":{"gitId":"shawnpong"},"content":"     * @return the number of liquid entries in the list","lastModifiedDate":"2024-03-20"},{"lineNumber":195,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":196,"author":{"gitId":"shawnpong"},"content":"    public int getSize() {","lastModifiedDate":"2024-03-20"},{"lineNumber":197,"author":{"gitId":"shawnpong"},"content":"        return hydrationArrayList.size();","lastModifiedDate":"2024-03-28"},{"lineNumber":198,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":199,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":200,"author":{"gitId":"shawnpong"},"content":"    private int loadLastEntryID() {","lastModifiedDate":"2024-04-09"},{"lineNumber":201,"author":{"gitId":"shawnpong"},"content":"        return HydrationFileHandler.maxHydrationID;","lastModifiedDate":"2024-04-14"},{"lineNumber":202,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":203,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":204,"author":{"gitId":"paturikarthik"},"content":"    //@@author paturikarthik","lastModifiedDate":"2024-04-14"},{"lineNumber":205,"author":{"gitId":"paturikarthik"},"content":"    public void findEntries(String input){","lastModifiedDate":"2024-04-14"},{"lineNumber":206,"author":{"gitId":"paturikarthik"},"content":"        ParserHydration.findHydrationListEntries(input,this);","lastModifiedDate":"2024-04-14"},{"lineNumber":207,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":208,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":209,"author":{"gitId":"paturikarthik"},"content":"    public void addHydrationEntry(Entry entry){","lastModifiedDate":"2024-04-14"},{"lineNumber":210,"author":{"gitId":"paturikarthik"},"content":"        this.hydrationArrayList.add(entry);","lastModifiedDate":"2024-04-14"},{"lineNumber":211,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":212,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":213,"author":{"gitId":"paturikarthik"},"content":"    public void printFoundHydrationList() {","lastModifiedDate":"2024-04-14"},{"lineNumber":214,"author":{"gitId":"paturikarthik"},"content":"        if (hydrationArrayList.isEmpty()) {","lastModifiedDate":"2024-04-14"},{"lineNumber":215,"author":{"gitId":"paturikarthik"},"content":"            HydrationListUI.emptyFoundListMessage();","lastModifiedDate":"2024-04-14"},{"lineNumber":216,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-14"},{"lineNumber":217,"author":{"gitId":"paturikarthik"},"content":"            HydrationListUI.hydrationListFoundHeader();","lastModifiedDate":"2024-04-14"},{"lineNumber":218,"author":{"gitId":"paturikarthik"},"content":"            printHydrationInflow();","lastModifiedDate":"2024-04-14"},{"lineNumber":219,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":220,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":221,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":222,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"shawnpong":203,"paturikarthik":19}},{"path":"src/main/java/seedu/lifetrack/sleep/sleeplist/SleepEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"//@@author a-wild-chocolate","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack.sleep.sleeplist;","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"public class SleepEntry extends Entry {","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"    private static int sleepEntryNum\u003d1;","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"    private LocalDate date;","lastModifiedDate":"2024-03-29"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"    private double duration;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"    private int sleepEntryID;","lastModifiedDate":"2024-04-09"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"    /***","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"     * Sleep constructor: date can be empty. If date input is empty, automatically fill with N/A;","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"     * date should be in format DDMMYY, duration should be a positive real number in hour unit.","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"     * @param date","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"     * @param duration","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"    public SleepEntry (double duration, LocalDate date){","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"        super(sleepEntryNum++, \"SLEEP\", date);","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"        this.sleepEntryID\u003dsleepEntryNum-1;","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"    ","lastModifiedDate":"2024-04-15"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"    public SleepEntry (int sleepEntryID,double duration, LocalDate date){","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"        super(sleepEntryID, \"SLEEP\", date);","lastModifiedDate":"2024-04-09"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"        if(sleepEntryNum\u003c\u003dsleepEntryID){","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepEntryNum\u003dsleepEntryID+1;","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-29"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"        this.sleepEntryID\u003dsleepEntryID;","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-29"},{"lineNumber":40,"author":{"gitId":"a-wild-chocolate"},"content":"        return date;","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"    public double getDuration() {","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"        return duration;","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"    public int getSleepEntryID() {","lastModifiedDate":"2024-04-09"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"        return sleepEntryID;","lastModifiedDate":"2024-04-09"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"    public String toString() {","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Sleep ID: \" +this.sleepEntryID+\", Date: \" + date +","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"                \", Duration: \" + String.format(\"%.2f\", duration) + \" hours\";","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"        return (sleepEntryID + \";\" + date + \";\" + duration);","lastModifiedDate":"2024-04-15"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"//@@author","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"a-wild-chocolate":60}},{"path":"src/main/java/seedu/lifetrack/sleep/sleeplist/SleepList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"//@@author a-wild-chocolate","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack.sleep.sleeplist;","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.system.parser.ParserSleep;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.system.storage.SleepFileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.ui.SleepListUi;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.Collections;","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncorrectSleepDeleteMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getSleepDurationSumTooLongMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getEmptySleepListMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"public class SleepList {","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"    private static int DELETE_IDX \u003d 2;","lastModifiedDate":"2024-04-10"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"    private static int DELETE_LEN \u003d 3;","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"    private ArrayList\u003cEntry\u003e sleepList;","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"    private SleepFileHandler fileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"    private int lastSleepEntryID;","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"    //constructor for JUnit tests","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"    public SleepList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"    //constructor for usage in terminal","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"    public SleepList(String filePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"            fileHandler \u003d new SleepFileHandler(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList \u003d fileHandler.getSleepEntriesFromFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"            this.lastSleepEntryID \u003d loadLastEntryID();","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"    private void updateFile() {","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"        if (fileHandler !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"            fileHandler.writeEntries(sleepList);","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"    public Entry getSleep(int index) {","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c sleepList.size() : \"Index out of bounds\";","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"        return sleepList.get(index);","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"    public void addSleep(String input) {","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"            SleepEntry newSleep \u003d ParserSleep.parseSleepInput(input);","lastModifiedDate":"2024-04-14"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"            double sleepRecord \u003d newSleep.getDuration();","lastModifiedDate":"2024-04-14"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"            for(int i\u003d0;i\u003cthis.sleepList.size();i++) {","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"                SleepEntry curSleep \u003d (SleepEntry) this.sleepList.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":62,"author":{"gitId":"a-wild-chocolate"},"content":"                if(curSleep.getDate().isEqual(newSleep.getDate())) {","lastModifiedDate":"2024-04-15"},{"lineNumber":63,"author":{"gitId":"a-wild-chocolate"},"content":"                    sleepRecord +\u003d curSleep.getDuration();","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"                }","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-04-15"},{"lineNumber":66,"author":{"gitId":"a-wild-chocolate"},"content":"            if(sleepRecord\u003e24){","lastModifiedDate":"2024-04-14"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"                System.out.println(getSleepDurationSumTooLongMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"                return;","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList.add(newSleep);","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"a-wild-chocolate"},"content":"            SleepListUi.printNewSleepEntry(newSleep);","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"a-wild-chocolate"},"content":"            //only sort if newly added date is earlier than date in final entry before adding entry","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"a-wild-chocolate"},"content":"            if (sleepList.size() \u003e 1 \u0026\u0026","lastModifiedDate":"2024-04-14"},{"lineNumber":74,"author":{"gitId":"a-wild-chocolate"},"content":"                    sleepList.get(sleepList.size() - 2).getDate().compareTo(newSleep.getDate()) \u003e 0 ) {","lastModifiedDate":"2024-04-14"},{"lineNumber":75,"author":{"gitId":"a-wild-chocolate"},"content":"                sortEntriesByDate();","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":77,"author":{"gitId":"a-wild-chocolate"},"content":"            updateFile();","lastModifiedDate":"2024-04-15"},{"lineNumber":78,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":79,"author":{"gitId":"a-wild-chocolate"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":80,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"a-wild-chocolate"},"content":"    public void sortEntriesByDate() {","lastModifiedDate":"2024-04-14"},{"lineNumber":84,"author":{"gitId":"a-wild-chocolate"},"content":"        Collections.sort(sleepList, new Comparator\u003cEntry\u003e() {","lastModifiedDate":"2024-04-14"},{"lineNumber":85,"author":{"gitId":"a-wild-chocolate"},"content":"            @Override","lastModifiedDate":"2024-04-14"},{"lineNumber":86,"author":{"gitId":"a-wild-chocolate"},"content":"            public int compare(Entry entry1, Entry entry2) {","lastModifiedDate":"2024-04-14"},{"lineNumber":87,"author":{"gitId":"a-wild-chocolate"},"content":"                return entry1.getDate().compareTo(entry2.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":88,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":89,"author":{"gitId":"a-wild-chocolate"},"content":"        });","lastModifiedDate":"2024-04-14"},{"lineNumber":90,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":91,"author":{"gitId":"a-wild-chocolate"},"content":"    ","lastModifiedDate":"2024-04-14"},{"lineNumber":92,"author":{"gitId":"a-wild-chocolate"},"content":"    public void deleteSleep(String line) {","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"a-wild-chocolate"},"content":"            if(line.split(\" \").length!\u003dDELETE_LEN) {","lastModifiedDate":"2024-04-14"},{"lineNumber":95,"author":{"gitId":"a-wild-chocolate"},"content":"                System.out.println(getIncorrectSleepDeleteMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":96,"author":{"gitId":"a-wild-chocolate"},"content":"                return;","lastModifiedDate":"2024-04-14"},{"lineNumber":97,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":98,"author":{"gitId":"a-wild-chocolate"},"content":"            int index \u003d Integer.parseInt(line.split(\" \")[DELETE_IDX]) ; //User input format: sleep delete ID","lastModifiedDate":"2024-04-10"},{"lineNumber":99,"author":{"gitId":"a-wild-chocolate"},"content":"            if(sleepList.isEmpty()){","lastModifiedDate":"2024-04-10"},{"lineNumber":100,"author":{"gitId":"a-wild-chocolate"},"content":"                System.out.println(getEmptySleepListMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":101,"author":{"gitId":"a-wild-chocolate"},"content":"                return;","lastModifiedDate":"2024-04-10"},{"lineNumber":102,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-04-10"},{"lineNumber":103,"author":{"gitId":"a-wild-chocolate"},"content":"            for(int i\u003d0; i\u003csleepList.size(); i++) {","lastModifiedDate":"2024-04-10"},{"lineNumber":104,"author":{"gitId":"a-wild-chocolate"},"content":"                SleepEntry cur_sleep \u003d (SleepEntry) sleepList.get(i);","lastModifiedDate":"2024-04-10"},{"lineNumber":105,"author":{"gitId":"a-wild-chocolate"},"content":"                if(cur_sleep.getSleepEntryID()\u003d\u003dindex) {","lastModifiedDate":"2024-04-10"},{"lineNumber":106,"author":{"gitId":"a-wild-chocolate"},"content":"                    sleepList.remove(i);","lastModifiedDate":"2024-04-10"},{"lineNumber":107,"author":{"gitId":"a-wild-chocolate"},"content":"                    updateFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"a-wild-chocolate"},"content":"                    SleepListUi.successfulDeletedMessage(cur_sleep);","lastModifiedDate":"2024-04-10"},{"lineNumber":109,"author":{"gitId":"a-wild-chocolate"},"content":"                    return;","lastModifiedDate":"2024-04-10"},{"lineNumber":110,"author":{"gitId":"a-wild-chocolate"},"content":"                }","lastModifiedDate":"2024-04-10"},{"lineNumber":111,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-04-10"},{"lineNumber":112,"author":{"gitId":"a-wild-chocolate"},"content":"            System.out.println(SleepListUi.deleteLogIndexMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":113,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":114,"author":{"gitId":"a-wild-chocolate"},"content":"            System.out.println(SleepListUi.deleteLogNumberMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":115,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":116,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":117,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"a-wild-chocolate"},"content":"    public void printSleepList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":119,"author":{"gitId":"a-wild-chocolate"},"content":"        if (this.sleepList.isEmpty()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":120,"author":{"gitId":"a-wild-chocolate"},"content":"            SleepListUi.emptyListMessage();","lastModifiedDate":"2024-03-26"},{"lineNumber":121,"author":{"gitId":"a-wild-chocolate"},"content":"        } else {","lastModifiedDate":"2024-03-26"},{"lineNumber":122,"author":{"gitId":"a-wild-chocolate"},"content":"            SleepListUi.sleepListHeader();","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"a-wild-chocolate"},"content":"            for (int i \u003d 0; i \u003c sleepList.size(); i++) {","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"a-wild-chocolate"},"content":"                Entry entry \u003d sleepList.get(i);","lastModifiedDate":"2024-03-27"},{"lineNumber":125,"author":{"gitId":"a-wild-chocolate"},"content":"                System.out.println(\"\\t \" + (i + 1) + \". \" + entry);","lastModifiedDate":"2024-03-27"},{"lineNumber":126,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":127,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":128,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":129,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"a-wild-chocolate"},"content":"    public int getSize() {","lastModifiedDate":"2024-03-26"},{"lineNumber":131,"author":{"gitId":"a-wild-chocolate"},"content":"        return sleepList.size();","lastModifiedDate":"2024-03-26"},{"lineNumber":132,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":133,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":134,"author":{"gitId":"a-wild-chocolate"},"content":"    private int loadLastEntryID() {","lastModifiedDate":"2024-04-09"},{"lineNumber":135,"author":{"gitId":"a-wild-chocolate"},"content":"        return 0; // Default value if file doesn\u0027t exist or error occurs","lastModifiedDate":"2024-04-09"},{"lineNumber":136,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":137,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":138,"author":{"gitId":"a-wild-chocolate"},"content":"    public double getSleepConsumed(LocalDate date) {","lastModifiedDate":"2024-04-14"},{"lineNumber":139,"author":{"gitId":"a-wild-chocolate"},"content":"        double totalSleep \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":140,"author":{"gitId":"a-wild-chocolate"},"content":"        for (Entry entry : sleepList) {","lastModifiedDate":"2024-04-13"},{"lineNumber":141,"author":{"gitId":"a-wild-chocolate"},"content":"            if (entry.getDate().isEqual(date)) {","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"a-wild-chocolate"},"content":"                SleepEntry tempEntry \u003d (SleepEntry) entry;","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"a-wild-chocolate"},"content":"                totalSleep +\u003d tempEntry.getDuration();","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":146,"author":{"gitId":"a-wild-chocolate"},"content":"        return totalSleep;","lastModifiedDate":"2024-04-14"},{"lineNumber":147,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":148,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"},{"lineNumber":149,"author":{"gitId":"a-wild-chocolate"},"content":"//@@author","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"a-wild-chocolate":149}},{"path":"src/main/java/seedu/lifetrack/system/exceptions/FileHandlerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-13"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.exceptions;","lastModifiedDate":"2024-04-13"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"public class FileHandlerException extends Exception {","lastModifiedDate":"2024-04-13"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-04-13"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"     * Constructs a new FileHandlerException with a default error message.","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"     * The default message provides guidance on ensuring correct input format.","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"    public FileHandlerException(){","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"        super(\"\\t There was an error reading/writing to the file!\");","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"     * Constructs a new FileHandlerException with a custom error message.","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"     * @param exception the custom error message describing the specific input error","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    public FileHandlerException(String exception) {","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"        super(exception);","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-13"}],"authorContributionMap":{"owx0130":22}},{"path":"src/main/java/seedu/lifetrack/system/exceptions/FileHandlerExceptionMessage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-13"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.exceptions;","lastModifiedDate":"2024-04-13"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.ui.Ui.printLine;","lastModifiedDate":"2024-04-13"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"/**","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":" * Utility class for managing error messages related to file handler exceptions.","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":" */","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"public class FileHandlerExceptionMessage {","lastModifiedDate":"2024-04-13"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"    //general error messages","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"    private static final String TOO_FEW_FIELDS \u003d \"\\t Too few fields were given in line \";","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    private static final String TOO_MANY_FIELDS \u003d \"\\t Too many fields were given in line \";","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    private static final String EMPTY_DESC \u003d \"\\t An empty description was given in line \";","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_DATE \u003d \"\\t An invalid date was given in line \";","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_ENTRYID \u003d \"\\t An invalid EntryID value was given in line \";","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    //calories list error messages","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_CALORIES \u003d \"\\t An invalid calories value was given in line \";","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_CARBS \u003d \"\\t An invalid carbohydrates value was given in line \";","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_PROTEINS \u003d \"\\t An invalid proteins value was given in line \";","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_FATS \u003d \"\\t An invalid fats value was given in line \";","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_ENTRYTYPE \u003d \"\\t An invalid entry type was given in line \";","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    private static final String TOO_FEW_MACROS \u003d \"\\t Too few macronutrient fields were given in line \";","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    private static final String MACROS_IN_OUTPUT \u003d \"\\t Macronutrient fields were given in line \";","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    //hydration list error messages","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_VOLUME \u003d \"\\t An invalid volume value was given in line \";","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"    //sleep list error messages","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_DURATION \u003d \"\\t An invalid duration value was given in line \";","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    //user error messages","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    private static final String USER_NOT_ADDED \u003d \"\\t User was not set up due to corrupt data!\\n\";","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"    private static final String EMPTY_NAME \u003d \"\\t An empty name was given in \";","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_HEIGHT \u003d \"\\t An invalid height was given in \";","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_WEIGHT \u003d \"\\t An invalid weight was given in \";","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_AGE \u003d \"\\t An invalid age was given in \";","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_SEX \u003d \"\\t An invalid sex was given in \";","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_EX_LEVELS \u003d \"\\t An invalid exercise level was given in \";","lastModifiedDate":"2024-04-14"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_GOAL \u003d \"\\t An invalid goal was given in \";","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"    private static final String INVALID_REQ_CAL \u003d \"\\t An invalid required calories value was given in \";","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"    //messages to provide user guidance (general)","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    private static final String DATE_FORMAT_GUIDANCE \u003d \"\\t Please ensure that a date in format YYYY-MM-DD is given\";","lastModifiedDate":"2024-04-13"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"    private static final String DATE_PERIOD_GUIDANCE \u003d \"\\t Please ensure that a date no later than today is given\";","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"    private static final String DESC_GUIDANCE \u003d \"\\t Please ensure that a non-empty description is given\";","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"    private static final String POS_INT_GUIDANCE \u003d \"\\t Please ensure that a positive integer value is given\";","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"    private static final String POS_FLOAT_GUIDANCE \u003d \"\\t Please ensure that a positive float value is given\";","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"    //messages to provide user guidance (calories)","lastModifiedDate":"2024-04-13"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"    private static final String CALORIES_FIELDS_GUIDANCE \u003d \"\\t Please ensure that only either five or eight \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"            \"(including macronutrients) fields are provided!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"    private static final String ENTRYTYPE_GUIDANCE \u003d \"\\t Please ensure the entry type is only either \\\"C_IN\\\" or \" +","lastModifiedDate":"2024-04-13"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"            \"\\\"C_OUT\\\"\";","lastModifiedDate":"2024-04-13"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"    private static final String MACROS_GUIDANCE \u003d \"\\t Please ensure that three macronutrient fields are given!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"    private static final String OUTPUT_GUIDANCE \u003d \"\\t Do not provide macronutrients for a calorie output \" +","lastModifiedDate":"2024-04-13"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"            \"(C_OUT) entry!\";","lastModifiedDate":"2024-04-13"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"    //messages to provide user guidance (hydration)","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"    private static final String HYDRATION_FIELDS_GUIDANCE \u003d \"\\t Please ensure that four fields are provided!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"    //messages to provide user guidance (sleep)","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"    private static final String SLEEP_FIELDS_GUIDANCE \u003d \"\\t Please ensure that three fields are provided!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-04-14"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"    //messages to provide user guidance (user)","lastModifiedDate":"2024-04-14"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"    private static final String USER_FIELDS_GUIDANCE \u003d \"\\t Please ensure that eight fields are provided!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"    private static final String NAME_GUIDANCE \u003d \"\\t Please ensure that the name field is not empty!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"    private static final String HEIGHT_GUIDANCE \u003d \"\\t Please ensure that an integer between 90 and 225 (cm) \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"            \"is provided!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"    private static final String WEIGHT_GUIDANCE \u003d \"\\t Please ensure that an integer between 30 and 200 (kg) \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"            \"is provided!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"    private static final String AGE_GUIDANCE \u003d \"\\t Please ensure that an integer between 13 and 30 (years) \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"            \"is provided!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"    private static final String SEX_GUIDANCE \u003d \"\\t Please ensure that the sex field is only either \"+","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"            \"\\\"male\\\" or \\\"female\\\"!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"    private static final String EX_LEVELS_GOALS_GUIDANCE \u003d \"\\t Please ensure that an integer between 1 to 5 \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"            \"is provided!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"    private static String getLineNotAddedMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"        if (filePath.equals(\"data/caloriesData.txt\")) {","lastModifiedDate":"2024-04-13"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"            return \"\\t Line \" + lineNumber + \" was not added into the calories list due to corrupt data!\\n\";","lastModifiedDate":"2024-04-13"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"        } else if (filePath.equals(\"data/hydrationData.txt\")) {","lastModifiedDate":"2024-04-13"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"            return \"\\t Line \" + lineNumber + \" was not added into the hydration list due to corrupt data!\\n\";","lastModifiedDate":"2024-04-14"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"        } else if (filePath.equals(\"data/sleepData.txt\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"            return \"\\t Line \" + lineNumber + \" was not added into the sleep list due to corrupt data!\\n\";","lastModifiedDate":"2024-04-14"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"        } else {","lastModifiedDate":"2024-04-14"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"            return \"\\t Line \" + lineNumber + \" was not added into the test data due to corrupt data!\\n\";","lastModifiedDate":"2024-04-14"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"    //general messages","lastModifiedDate":"2024-04-13"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidDateMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"        return INVALID_DATE + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + DATE_FORMAT_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":97,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"    public static String getFileDateLaterThanCurrentMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":101,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":102,"author":{"gitId":"owx0130"},"content":"        return INVALID_DATE + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + DATE_PERIOD_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"    public static String getFileEmptyDescriptionMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"        return EMPTY_DESC + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + DESC_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":111,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidEntryIDMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":112,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":113,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":114,"author":{"gitId":"owx0130"},"content":"        return INVALID_ENTRYID + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + POS_INT_GUIDANCE;","lastModifiedDate":"2024-04-15"},{"lineNumber":115,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":116,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":117,"author":{"gitId":"owx0130"},"content":"    //calories list related messages","lastModifiedDate":"2024-04-14"},{"lineNumber":118,"author":{"gitId":"owx0130"},"content":"    public static String getFileCaloriesTooManyFieldsMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":119,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":120,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":121,"author":{"gitId":"owx0130"},"content":"        return TOO_MANY_FIELDS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + CALORIES_FIELDS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":122,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":123,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":124,"author":{"gitId":"owx0130"},"content":"    public static String getFileCaloriesTooFewFieldsMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":125,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":126,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"        return TOO_FEW_FIELDS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + CALORIES_FIELDS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":128,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":130,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidCaloriesMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":131,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":132,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"        return INVALID_CALORIES + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + POS_INT_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":134,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidCarbsMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":137,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":138,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":139,"author":{"gitId":"owx0130"},"content":"        return INVALID_CARBS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + POS_INT_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":140,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":141,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidProteinsMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"owx0130"},"content":"        return INVALID_PROTEINS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + POS_INT_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":146,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":147,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":148,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidFatsMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"owx0130"},"content":"        return INVALID_FATS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + POS_INT_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":153,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":154,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidEntryTypeMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":155,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":156,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":157,"author":{"gitId":"owx0130"},"content":"        return INVALID_ENTRYTYPE + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + ENTRYTYPE_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":158,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":159,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":160,"author":{"gitId":"owx0130"},"content":"    public static String getFileTooFewMacrosMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":161,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":162,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":163,"author":{"gitId":"owx0130"},"content":"        return TOO_FEW_MACROS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + MACROS_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":164,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":165,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":166,"author":{"gitId":"owx0130"},"content":"    public static String getFileMacrosInOutputMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":167,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":168,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":169,"author":{"gitId":"owx0130"},"content":"        return MACROS_IN_OUTPUT + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + OUTPUT_GUIDANCE;","lastModifiedDate":"2024-04-13"},{"lineNumber":170,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":171,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":172,"author":{"gitId":"owx0130"},"content":"    //hydration list related messages","lastModifiedDate":"2024-04-14"},{"lineNumber":173,"author":{"gitId":"owx0130"},"content":"    public static String getFileHydrationTooManyFieldsMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":174,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":175,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":176,"author":{"gitId":"owx0130"},"content":"        return TOO_MANY_FIELDS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + HYDRATION_FIELDS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":177,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":178,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":179,"author":{"gitId":"owx0130"},"content":"    public static String getFileHydrationTooFewFieldsMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":180,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":181,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":182,"author":{"gitId":"owx0130"},"content":"        return TOO_FEW_FIELDS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + HYDRATION_FIELDS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":183,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":184,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":185,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidVolumeMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":186,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":187,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":188,"author":{"gitId":"owx0130"},"content":"        return INVALID_VOLUME + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + POS_INT_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":189,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":190,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":191,"author":{"gitId":"owx0130"},"content":"    //sleep list related messages","lastModifiedDate":"2024-04-14"},{"lineNumber":192,"author":{"gitId":"owx0130"},"content":"    public static String getFileSleepTooManyFieldsMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":193,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":194,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":195,"author":{"gitId":"owx0130"},"content":"        return TOO_MANY_FIELDS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + SLEEP_FIELDS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":196,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":197,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":198,"author":{"gitId":"owx0130"},"content":"    public static String getFileSleepTooFewFieldsMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":199,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":200,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":201,"author":{"gitId":"owx0130"},"content":"        return TOO_FEW_FIELDS + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + SLEEP_FIELDS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":202,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":203,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":204,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidDurationMessage(int lineNumber, String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":205,"author":{"gitId":"owx0130"},"content":"        String suffix \u003d getLineNotAddedMessage(lineNumber, filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":206,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":207,"author":{"gitId":"owx0130"},"content":"        return INVALID_DURATION + lineNumber + \" of \" + filePath + \"!\\n\" + suffix + POS_FLOAT_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":208,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":209,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":210,"author":{"gitId":"owx0130"},"content":"    //user related messages","lastModifiedDate":"2024-04-14"},{"lineNumber":211,"author":{"gitId":"owx0130"},"content":"    public static String getFileUserTooManyFieldsMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":212,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":213,"author":{"gitId":"owx0130"},"content":"        return TOO_MANY_FIELDS + \" 1 of \" + filePath + \"!\\n\" + USER_NOT_ADDED + USER_FIELDS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":214,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":215,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":216,"author":{"gitId":"owx0130"},"content":"    public static String getFileUserTooFewFieldsMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":217,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":218,"author":{"gitId":"owx0130"},"content":"        return TOO_FEW_FIELDS + \" 1 of \" + filePath + \"!\\n\" + USER_NOT_ADDED + USER_FIELDS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":219,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":220,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":221,"author":{"gitId":"owx0130"},"content":"    public static String getFileUserEmptyNameMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":222,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":223,"author":{"gitId":"owx0130"},"content":"        return EMPTY_NAME + filePath + \"!\\n\" + USER_NOT_ADDED + NAME_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":224,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":225,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":226,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidHeightMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":227,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":228,"author":{"gitId":"owx0130"},"content":"        return INVALID_HEIGHT + filePath + \"!\\n\" + USER_NOT_ADDED + HEIGHT_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":229,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":230,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":231,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidWeightMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":232,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":233,"author":{"gitId":"owx0130"},"content":"        return INVALID_WEIGHT + filePath + \"!\\n\" + USER_NOT_ADDED + WEIGHT_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":234,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":235,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":236,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidAgeMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":237,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":238,"author":{"gitId":"owx0130"},"content":"        return INVALID_AGE + filePath + \"!\\n\" + USER_NOT_ADDED + AGE_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":239,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":240,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":241,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidSexMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":242,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":243,"author":{"gitId":"owx0130"},"content":"        return INVALID_SEX + filePath + \"!\\n\" + USER_NOT_ADDED + SEX_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":244,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":245,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":246,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidExerciseLevelMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":247,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":248,"author":{"gitId":"owx0130"},"content":"        return INVALID_EX_LEVELS + filePath + \"!\\n\" + USER_NOT_ADDED + EX_LEVELS_GOALS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":249,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":250,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":251,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidGoalMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":252,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":253,"author":{"gitId":"owx0130"},"content":"        return INVALID_GOAL + filePath + \"!\\n\" + USER_NOT_ADDED + EX_LEVELS_GOALS_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":254,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":255,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":256,"author":{"gitId":"owx0130"},"content":"    public static String getFileInvalidReqCalMessage(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":257,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":258,"author":{"gitId":"owx0130"},"content":"        return INVALID_REQ_CAL + filePath + \"!\\n\" + USER_NOT_ADDED + POS_INT_GUIDANCE;","lastModifiedDate":"2024-04-14"},{"lineNumber":259,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":260,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-13"}],"authorContributionMap":{"owx0130":260}},{"path":"src/main/java/seedu/lifetrack/system/exceptions/InvalidInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.exceptions;","lastModifiedDate":"2024-03-19"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"     * Constructs a new InvalidInputException with a default error message.","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"     * The default message provides guidance on ensuring correct input format.","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"    public InvalidInputException(){","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"        super(\"\\t Please ensure that you have keyed in the correct format!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"     * Constructs a new InvalidInputException with a custom error message.","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"     * @param exception the custom error message describing the specific input error","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    public InvalidInputException(String exception) {","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"        super(exception);","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"owx0130":22}},{"path":"src/main/java/seedu/lifetrack/system/exceptions/InvalidInputExceptionMessage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.exceptions;","lastModifiedDate":"2024-03-22"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-10"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":" * Utility class for managing error messages related to invalid input exceptions.","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"public class InvalidInputExceptionMessage {","lastModifiedDate":"2024-03-22"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"    private static final String HEADER \u003d \"\\t Invalid input!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"    private static final String CALORIES_IN_INPUT \u003d \"\\t Example input: calories in DESCRIPTION \" +","lastModifiedDate":"2024-03-22"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"            \"c/INTEGER_CALORIES d/DATE [m/MACROS]\";","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    private static final String CALORIES_OUT_INPUT \u003d \"\\t Example input: calories out DESCRIPTION \" +","lastModifiedDate":"2024-03-22"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"            \"c/INTEGER_CALORIES d/DATE\";","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    private static final String MACROS_INPUT \u003d \"\\t Example input: ....... m/CARBS_INT, PROTEIN_INT, FATS_INT\";","lastModifiedDate":"2024-03-22"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    private static final String SLEEP_IN_INPUT \u003d \"\\t Example input: sleep add 7.5 d/2024-03-11\" ;","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    private static final String HYDRATION_IN_INPUT \u003d \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\" ;","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    private static final String USER_SETUP_INPUT \u003d \"\\t Example input: user setup Tom h/170 w/80 a/25 s/male e/4 g/3\";","lastModifiedDate":"2024-03-31"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    private static final String USER_UPDATE_FIELDS \u003d \"\\t 1) user update name \u003cNAME\u003e\\n\"+","lastModifiedDate":"2024-04-11"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"            \"\\t 2) user update height \u003cHEIGHT\u003e\\n\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"            \"\\t 3) user update weight \u003cWEIGHT\u003e\\n\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"            \"\\t 4) user update age \u003cAGE\u003e\\n\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"            \"\\t 5) user update sex \u003cSEX\u003e\\n\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"            \"\\t 6) user update exercise levels \u003cEXERCISE LEVELS\u003e\\n\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"            \"\\t 7) user update goal \u003cGOAL\u003e\";","lastModifiedDate":"2024-04-11"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    //general error messages","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    public static String getInvalidDateMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Invalid date! Please enter a valid date in format YYYY-MM-DD.\";","lastModifiedDate":"2024-04-10"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"        return message;","lastModifiedDate":"2024-04-10"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    public static String getDateLaterThanPresentDateMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Invalid date! Please enter a date that is not later than today\u0027s date: \" + LocalDate.now();","lastModifiedDate":"2024-04-10"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"        return message;","lastModifiedDate":"2024-04-10"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    //calories list related messages","lastModifiedDate":"2024-04-10"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"    public static String getCaloriesIncorrectOrderMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that you have keyed the input in the correct order!\\n\";","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + CALORIES_IN_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    public static String getCaloriesDuplicateKeywordMessage() {","lastModifiedDate":"2024-04-15"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure there are no duplicate c/ or d/ or m/ keywords!\\n\";","lastModifiedDate":"2024-04-15"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + CALORIES_IN_INPUT;","lastModifiedDate":"2024-04-15"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-15"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"    public static String getIncorrectCaloriesInputMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please input only positive integers into the calories field!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"    public static String getCaloriesOverLimitMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please ensure that calories is within the limit of 5000 calories per entry!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"    public static String getCaloriesMissingKeywordsMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that you have entered all keywords!\\n\";","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + CALORIES_IN_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"    public static String getWhitespaceInInputMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that there is no whitespace in your input!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + CALORIES_IN_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"    public static String getHydrationWhitespaceInInputMessage() {","lastModifiedDate":"2024-04-15"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that there is no whitespace in your input!\\n\";","lastModifiedDate":"2024-04-15"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-04-15"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-15"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"    public static String getEmptyMacrosMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Your macronutrients field is empty!\\n\";","lastModifiedDate":"2024-04-10"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + MACROS_INPUT;","lastModifiedDate":"2024-04-10"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"    public static String getIncorrectMacrosInputMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please input only positive integers into the macronutrients field!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"    public static String getMacrosOverLimitMessage() {","lastModifiedDate":"2024-04-15"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please ensure that all macros entered are within the limit of 800g per macro per entry!\";","lastModifiedDate":"2024-04-15"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-15"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"    public static String getIncompleteMacrosMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that all macronutrients fields are filled up!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + MACROS_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"    public static String getWhitespaceInMacrosInputMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that there is no whitespace in your macros input!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + MACROS_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"    public static String getMacrosInCaloriesOutMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":97,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Calorie output entry cannot have macros!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + CALORIES_OUT_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"owx0130"},"content":"    //hydration list related messages","lastModifiedDate":"2024-04-10"},{"lineNumber":102,"author":{"gitId":"owx0130"},"content":"    public static String getHydrationMissingKeywordMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that you have entered all keywords!\\n\";","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"    public static String getHydrationIncorrectOrderMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that you have keyed the input in the correct order!\\n\";","lastModifiedDate":"2024-03-27"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-03-27"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":111,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"owx0130"},"content":"    public static String getHydrationEmptyDescriptionMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":113,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that beverage and volume is not empty!\\n\";","lastModifiedDate":"2024-03-27"},{"lineNumber":114,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-03-27"},{"lineNumber":115,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":116,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":117,"author":{"gitId":"owx0130"},"content":"    public static String getHydrationNegativeIntegerVolumeMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that positive integer value is keyed in for volume!\\n\";","lastModifiedDate":"2024-03-27"},{"lineNumber":119,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-03-27"},{"lineNumber":120,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":121,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":122,"author":{"gitId":"owx0130"},"content":"    public static String getHydrationOverVolumeLimitMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":123,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that volume is not more than 10000!\\n\";","lastModifiedDate":"2024-04-14"},{"lineNumber":124,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-04-14"},{"lineNumber":125,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":126,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"    public static String getHydrationDuplicateInputsMessage() {","lastModifiedDate":"2024-04-15"},{"lineNumber":128,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that there are no duplicate v/ or d/ inputs!\\n\";","lastModifiedDate":"2024-04-15"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-04-15"},{"lineNumber":130,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-15"},{"lineNumber":131,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":132,"author":{"gitId":"owx0130"},"content":"    public static String getIncorrectVolumeInputMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please input only positive integers into the volume field!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":134,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"    //sleep list related messages","lastModifiedDate":"2024-04-10"},{"lineNumber":137,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author a-wild-chocolate","lastModifiedDate":"2024-04-14"},{"lineNumber":138,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String getSleepMissingKeywordMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":139,"author":{"gitId":"a-wild-chocolate"},"content":"        String message \u003d \"\\t Please ensure that you have entered all keywords!\\n\";","lastModifiedDate":"2024-04-10"},{"lineNumber":140,"author":{"gitId":"a-wild-chocolate"},"content":"        return HEADER + message + SLEEP_IN_INPUT;","lastModifiedDate":"2024-04-10"},{"lineNumber":141,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":142,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":143,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String getIncorrectSleepInputMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":144,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Please input one positive real number into the sleep duration field!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":145,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":146,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":147,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String getIncorrectSleepDeleteMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":148,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Please input delete command in correct format: sleep delete SLEEPID \";","lastModifiedDate":"2024-04-14"},{"lineNumber":149,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":150,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":151,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String getEmptySleepListMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":152,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Sorry, there is no sleep record in the sleep list.\" +","lastModifiedDate":"2024-04-14"},{"lineNumber":153,"author":{"gitId":"a-wild-chocolate"},"content":"                                        \"You cannot delete sleep entry.\";","lastModifiedDate":"2024-04-14"},{"lineNumber":154,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":155,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":156,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String getTooLongSleepDurationMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":157,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Please enter a sleep duration less than 24 hours.\";","lastModifiedDate":"2024-04-10"},{"lineNumber":158,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":159,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":160,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String getSleepDurationSumTooLongMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":161,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Sorry, your sum of sleep duration exceeds 24 hours in this day. This record failed to add \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":162,"author":{"gitId":"a-wild-chocolate"},"content":"                \"into the list. Please ensure your sum of duration of a day do not exceed 24 hours.\";","lastModifiedDate":"2024-04-14"},{"lineNumber":163,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":164,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author","lastModifiedDate":"2024-04-14"},{"lineNumber":165,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":166,"author":{"gitId":"owx0130"},"content":"    //user related messages","lastModifiedDate":"2024-04-10"},{"lineNumber":167,"author":{"gitId":"paturikarthik"},"content":"    public static String getOutOfGoalRangeMessage() {","lastModifiedDate":"2024-03-31"},{"lineNumber":168,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Invalid Goal input!\\n \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":169,"author":{"gitId":"paturikarthik"},"content":"                \"Please key in a number between 1 and 5!\\n \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":170,"author":{"gitId":"paturikarthik"},"content":"                \"1 being quick fat loss \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":171,"author":{"gitId":"paturikarthik"},"content":"                \"and 5 being quick bulking\";","lastModifiedDate":"2024-04-04"},{"lineNumber":172,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":173,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":174,"author":{"gitId":"paturikarthik"},"content":"    public static String getOutOfExerciseLevelsRangeMessage() {","lastModifiedDate":"2024-03-31"},{"lineNumber":175,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Invalid Exercise Level input!\\n\" +","lastModifiedDate":"2024-04-14"},{"lineNumber":176,"author":{"gitId":"paturikarthik"},"content":"                \"\\t Please key in a number between 1 and 5!\\n\" +","lastModifiedDate":"2024-04-14"},{"lineNumber":177,"author":{"gitId":"paturikarthik"},"content":"                \" 1 being little exercise done per week and 5 being\" +","lastModifiedDate":"2024-04-14"},{"lineNumber":178,"author":{"gitId":"paturikarthik"},"content":"                \" very heavy levels of exercise done per week.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":179,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":180,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":181,"author":{"gitId":"paturikarthik"},"content":"    public static String getEmptyUserSetupInputMessage() {","lastModifiedDate":"2024-03-31"},{"lineNumber":182,"author":{"gitId":"paturikarthik"},"content":"        return HEADER + \"\\t Please key in the relevant user fields!\\n\" + USER_SETUP_INPUT;","lastModifiedDate":"2024-03-31"},{"lineNumber":183,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":184,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":185,"author":{"gitId":"owx0130"},"content":"    public static String getInvalidNumberOfSetUpInputs() {","lastModifiedDate":"2024-04-10"},{"lineNumber":186,"author":{"gitId":"owx0130"},"content":"        return \"\\t Sorry, this command is invalid. Please enter the setup command in the following format \" +","lastModifiedDate":"2024-04-10"},{"lineNumber":187,"author":{"gitId":"owx0130"},"content":"                \"user setup {NAME} h/{HEIGHT} w/{WEIGHT} a/{AGE} s/{SEX} e/{EXERCISE LEVELS} g/{GOAL}\";","lastModifiedDate":"2024-04-10"},{"lineNumber":188,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":189,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":190,"author":{"gitId":"owx0130"},"content":"    public static String getInvalidGoalNumberMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":191,"author":{"gitId":"owx0130"},"content":"        return \"\\t Invalid input for goal number. Please enter a number between 1 and 5.\";","lastModifiedDate":"2024-04-10"},{"lineNumber":192,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":193,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":194,"author":{"gitId":"owx0130"},"content":"    public static String getInvalidExerciseLevelsNumberMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":195,"author":{"gitId":"owx0130"},"content":"        return \"\\t Invalid input for exercise level. Please enter a number between 1 and 5.\";","lastModifiedDate":"2024-04-10"},{"lineNumber":196,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":197,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":198,"author":{"gitId":"owx0130"},"content":"    public static String getHeightOutOfRangeMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":199,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please enter a valid height!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":200,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":201,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":202,"author":{"gitId":"owx0130"},"content":"    public static String getInvalidHeightNumberMessage(){","lastModifiedDate":"2024-04-10"},{"lineNumber":203,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please enter your height(in cm) as an integer!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":204,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":205,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":206,"author":{"gitId":"owx0130"},"content":"    public static String getWeightOutOfRangeMessage(){","lastModifiedDate":"2024-04-10"},{"lineNumber":207,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please enter a valid weight!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":208,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":209,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":210,"author":{"gitId":"owx0130"},"content":"    public static String  getInvalidWeightNumberMessage(){","lastModifiedDate":"2024-04-10"},{"lineNumber":211,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please enter your weight(in kg) as an integer!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":212,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":213,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":214,"author":{"gitId":"owx0130"},"content":"    public static String getUnderAgeMessage(){","lastModifiedDate":"2024-04-10"},{"lineNumber":215,"author":{"gitId":"owx0130"},"content":"        return \"\\t You are too young to use this app :(\";","lastModifiedDate":"2024-04-10"},{"lineNumber":216,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":217,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":218,"author":{"gitId":"owx0130"},"content":"    public static String getAgeOutOfRangeMessage(){","lastModifiedDate":"2024-04-10"},{"lineNumber":219,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please enter a valid age!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":220,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":221,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":222,"author":{"gitId":"owx0130"},"content":"    public static String getInvalidAgeNumberMessage(){","lastModifiedDate":"2024-04-10"},{"lineNumber":223,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please enter your age as an integer!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":224,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":225,"author":{"gitId":"paturikarthik"},"content":"    public static String getEmptyUserUpdateInputMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":226,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter your name!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":227,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":228,"author":{"gitId":"paturikarthik"},"content":"    public static String getUnknownUpdateMessage() {","lastModifiedDate":"2024-04-11"},{"lineNumber":229,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Oops, I\u0027ve not seen this command before!\\n\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":230,"author":{"gitId":"paturikarthik"},"content":"                \"\\t Here are a list of possible update commands:\\n\" + USER_UPDATE_FIELDS;","lastModifiedDate":"2024-04-11"},{"lineNumber":231,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":232,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":233,"author":{"gitId":"paturikarthik"},"content":"    public static String getEmptyGenderInputMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":234,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter your gender!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":235,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":236,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":237,"author":{"gitId":"paturikarthik"},"content":"    public static String getInvalidGenderInputMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":238,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter either male or female as your gender!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":239,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":240,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":241,"author":{"gitId":"paturikarthik"},"content":"    public static String getEmptyNameInputMessage() {","lastModifiedDate":"2024-04-10"},{"lineNumber":242,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter a non-empty name!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":243,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":244,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":245,"author":{"gitId":"paturikarthik"},"content":"    public static String getEmptyUserUpdateFieldMessage(){","lastModifiedDate":"2024-04-11"},{"lineNumber":246,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please include the value you would like to update the field to as such:\\n\" + USER_UPDATE_FIELDS;","lastModifiedDate":"2024-04-11"},{"lineNumber":247,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":248,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":249,"author":{"gitId":"paturikarthik"},"content":"    public static String getReachedMaximumSleepMessage(){","lastModifiedDate":"2024-04-14"},{"lineNumber":250,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Invalid input! The total duration you have slept on this day exceeds 24 hours!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":251,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":252,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-22"}],"authorContributionMap":{"a-wild-chocolate":29,"owx0130":180,"paturikarthik":43}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserCalories.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesIncorrectOrderMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesMissingKeywordsMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getDateLaterThanPresentDateMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getEmptyMacrosMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncompleteMacrosMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncorrectCaloriesInputMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncorrectMacrosInputMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidDateMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getMacrosInCaloriesOutMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getWhitespaceInInputMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getWhitespaceInMacrosInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesOverLimitMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getMacrosOverLimitMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesDuplicateKeywordMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"public class ParserCalories {","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    private static final int CARBS_IDX \u003d 0;","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"    private static final int PROTEINS_IDX \u003d 1;","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    private static final int FATS_IDX \u003d 2;","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    private static final int CALORIES_OUT_PADDING \u003d 12;","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"    private static final int CALORIES_FIND_LENGTH \u003d \"calories find\".length();","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"    private static final int CALORIES_LIMIT_5000 \u003d 5000;","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"    private static final int MACROS_LIMIT_800 \u003d 800;","lastModifiedDate":"2024-04-15"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"     * Parses a string input to create an Entry object representing calorie intake.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"     * This method expects the input string to follow a specific format, where the","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"     * description, calorie count, date and macronutrients are separated by the","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"     * delimiters \u0027desc/\u0027, \u0027c/\u0027, \u0027date/\u0027, and \u0027m/\u0027. The method extracts these components","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"     * and creates either an InputEntry or OutputEntry object depending on the user command.","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"     * If required inputs are missing or empty, an InvalidInputException is thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"     * @param input the input string to be parsed, containing date, time, activity,","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"     *              and calorie count information","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"     * @return an Entry object representing calorie intake","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"     * @throws InvalidInputException if the input string is missing components or contains empty fields","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"    public static Entry parseCaloriesInput(String input, int lastEntryID) throws InvalidInputException {","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"        int caloriesIndex \u003d input.indexOf(\"c/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"        int dateIndex \u003d input.indexOf(\"d/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"        int macrosIndex \u003d input.indexOf(\"m/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"        checkKeywordsExist(caloriesIndex, dateIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"        assert caloriesIndex !\u003d -1 : \"The c/ keyword should exist!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"        assert dateIndex !\u003d -1 : \"The d/ keyword should exist!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"        checkKeywordsCorrectlyOrdered(caloriesIndex, dateIndex, macrosIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"        assert caloriesIndex \u003c dateIndex : \"The c/ keyword must appear before strDate/ in the input!\";","lastModifiedDate":"2024-03-29"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"        //extract command, description, calories, strDate from input","lastModifiedDate":"2024-03-29"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"        String[] parts \u003d input.split(\"c/|d/|m/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"        String command \u003d parts[0].substring(0, CALORIES_OUT_PADDING).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"        String description \u003d getDescriptionFromInput(input, command, caloriesIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"        String strCalories \u003d parts[1].trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"        // Used to detect whether there are duplicate parameters entered","lastModifiedDate":"2024-04-15"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"        int caloriesCount \u003d input.split(\"c/\").length - 1;","lastModifiedDate":"2024-04-15"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"        int dateCount \u003d input.split(\"d/\").length - 1;","lastModifiedDate":"2024-04-15"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"        int macrosCount \u003d input.split(\"m/\").length - 1;","lastModifiedDate":"2024-04-15"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"        // catch duplicate input for c/ and d/","lastModifiedDate":"2024-04-15"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-15"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"            checkNoDuplicateKeywords(caloriesCount);","lastModifiedDate":"2024-04-15"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"            checkNoDuplicateKeywords(dateCount);","lastModifiedDate":"2024-04-15"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-04-15"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getCaloriesDuplicateKeywordMessage());","lastModifiedDate":"2024-04-15"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-15"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"        // Try catch here is needed because if user inputs \"calories in chicken c/1000 d/  \"\",","lastModifiedDate":"2024-04-10"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"        // code fails because index out of bounds occurs due to parts[2].trim()","lastModifiedDate":"2024-03-29"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"        String strDate \u003d null;","lastModifiedDate":"2024-03-29"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-29"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"            strDate \u003d parts[2].trim();","lastModifiedDate":"2024-03-29"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getWhitespaceInInputMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-29"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"        checkInputsAreNonEmpty(description, strCalories, strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"        assert description !\u003d \"\" : \"The description field should be a non-empty string!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"        assert strCalories !\u003d \"\" : \"The calories field should be a non-empty string!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"        assert strDate !\u003d \"\" : \"The strDate field should be a non-empty string!\";","lastModifiedDate":"2024-03-29"},{"lineNumber":97,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"        //extract macronutrients if user provided it in their input, otherwise initialise it as null","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"        int[] macros \u003d null;","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"        if (macrosIndex !\u003d -1) {","lastModifiedDate":"2024-03-21"},{"lineNumber":101,"author":{"gitId":"owx0130"},"content":"            if (command.equals(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"owx0130"},"content":"                throw new InvalidInputException(getMacrosInCaloriesOutMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"            try {","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"                String macroString \u003d parts[3].trim();","lastModifiedDate":"2024-04-10"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"                macros \u003d getMacrosFromInput(macroString);","lastModifiedDate":"2024-03-21"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"            } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"                throw new InvalidInputException(e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-04-10"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"                throw new InvalidInputException(getEmptyMacrosMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":111,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"owx0130"},"content":"            // try catch for duplicate macros","lastModifiedDate":"2024-04-15"},{"lineNumber":113,"author":{"gitId":"owx0130"},"content":"            try {","lastModifiedDate":"2024-04-15"},{"lineNumber":114,"author":{"gitId":"owx0130"},"content":"                checkNoDuplicateKeywords(macrosCount);","lastModifiedDate":"2024-04-15"},{"lineNumber":115,"author":{"gitId":"owx0130"},"content":"            } catch (InvalidInputException e) {","lastModifiedDate":"2024-04-15"},{"lineNumber":116,"author":{"gitId":"owx0130"},"content":"                throw new InvalidInputException(getCaloriesDuplicateKeywordMessage());","lastModifiedDate":"2024-04-15"},{"lineNumber":117,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-15"},{"lineNumber":118,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":120,"author":{"gitId":"owx0130"},"content":"        int calories;","lastModifiedDate":"2024-04-14"},{"lineNumber":121,"author":{"gitId":"owx0130"},"content":"        //convert calories from string to integer","lastModifiedDate":"2024-03-21"},{"lineNumber":122,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":123,"author":{"gitId":"owx0130"},"content":"            calories \u003d getIntegerCaloriesFromInput(strCalories);","lastModifiedDate":"2024-04-14"},{"lineNumber":124,"author":{"gitId":"owx0130"},"content":"            checkCaloriesIsPositiveInteger(calories);","lastModifiedDate":"2024-03-21"},{"lineNumber":125,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":126,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getIncorrectCaloriesInputMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":128,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"        if (calories \u003e CALORIES_LIMIT_5000) {","lastModifiedDate":"2024-04-14"},{"lineNumber":130,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getCaloriesOverLimitMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":131,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":132,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"        assert calories \u003e 0 : \"Calories value must be a positive integer!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":134,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":135,"author":{"gitId":"rexyyong"},"content":"        //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":136,"author":{"gitId":"rexyyong"},"content":"        // Convert strDate from type String to date of type LocalDate","lastModifiedDate":"2024-03-29"},{"lineNumber":137,"author":{"gitId":"rexyyong"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2024-03-29"},{"lineNumber":138,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-29"},{"lineNumber":139,"author":{"gitId":"rexyyong"},"content":"            date \u003d getLocalDateFromInput(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":140,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":141,"author":{"gitId":"rexyyong"},"content":"            if (date.isAfter(LocalDate.now())) {","lastModifiedDate":"2024-04-10"},{"lineNumber":142,"author":{"gitId":"rexyyong"},"content":"                throw new InvalidInputException(getDateLaterThanPresentDateMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":143,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-04-10"},{"lineNumber":144,"author":{"gitId":"rexyyong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":145,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(getInvalidDateMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":146,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-29"},{"lineNumber":147,"author":{"gitId":"owx0130"},"content":"        //@@author owx0130","lastModifiedDate":"2024-04-10"},{"lineNumber":148,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":149,"author":{"gitId":"owx0130"},"content":"        lastEntryID++;","lastModifiedDate":"2024-04-09"},{"lineNumber":150,"author":{"gitId":"owx0130"},"content":"        if (command.equals(\"calories out\")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":151,"author":{"gitId":"owx0130"},"content":"            return makeNewOutputEntry(lastEntryID, description, calories, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":152,"author":{"gitId":"owx0130"},"content":"        } else if (macros \u003d\u003d null) {","lastModifiedDate":"2024-03-20"},{"lineNumber":153,"author":{"gitId":"owx0130"},"content":"            return makeNewInputEntry(lastEntryID, description, calories, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":154,"author":{"gitId":"owx0130"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":155,"author":{"gitId":"owx0130"},"content":"            return makeNewInputEntry(lastEntryID, description, calories, date, macros);","lastModifiedDate":"2024-04-09"},{"lineNumber":156,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":157,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":158,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":159,"author":{"gitId":"rexyyong"},"content":"    //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":160,"author":{"gitId":"rexyyong"},"content":"    public static void checkNoDuplicateKeywords(int keywordCount) throws InvalidInputException {","lastModifiedDate":"2024-04-15"},{"lineNumber":161,"author":{"gitId":"rexyyong"},"content":"        if (keywordCount !\u003d 1) {","lastModifiedDate":"2024-04-15"},{"lineNumber":162,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException();","lastModifiedDate":"2024-04-15"},{"lineNumber":163,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-04-15"},{"lineNumber":164,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-15"},{"lineNumber":165,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":166,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":167,"author":{"gitId":"rexyyong"},"content":"     * Parses a string representation of a date and returns a LocalDate object.","lastModifiedDate":"2024-04-03"},{"lineNumber":168,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"rexyyong"},"content":"     * @param strDate the string representation of the date","lastModifiedDate":"2024-04-03"},{"lineNumber":170,"author":{"gitId":"rexyyong"},"content":"     * @return the LocalDate object parsed from the input string","lastModifiedDate":"2024-04-03"},{"lineNumber":171,"author":{"gitId":"rexyyong"},"content":"     * @throws DateTimeParseException if the input string cannot be parsed as a valid date","lastModifiedDate":"2024-04-03"},{"lineNumber":172,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":173,"author":{"gitId":"rexyyong"},"content":"    public static LocalDate getLocalDateFromInput(String strDate) throws DateTimeParseException {","lastModifiedDate":"2024-03-29"},{"lineNumber":174,"author":{"gitId":"rexyyong"},"content":"        LocalDate date \u003d LocalDate.parse(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":175,"author":{"gitId":"rexyyong"},"content":"        return date;","lastModifiedDate":"2024-03-29"},{"lineNumber":176,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":177,"author":{"gitId":"owx0130"},"content":"    //@@author owx0130","lastModifiedDate":"2024-04-10"},{"lineNumber":178,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":179,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":180,"author":{"gitId":"owx0130"},"content":"     * Parses a string representation of calories and returns an integer value.","lastModifiedDate":"2024-04-03"},{"lineNumber":181,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":182,"author":{"gitId":"owx0130"},"content":"     * @param strCalories the string representation of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":183,"author":{"gitId":"owx0130"},"content":"     * @return the integer value of calories parsed from the input string","lastModifiedDate":"2024-04-03"},{"lineNumber":184,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":185,"author":{"gitId":"owx0130"},"content":"    private static int getIntegerCaloriesFromInput(String strCalories) throws InvalidInputException {","lastModifiedDate":"2024-04-14"},{"lineNumber":186,"author":{"gitId":"owx0130"},"content":"        int calories \u003d 0;","lastModifiedDate":"2024-03-21"},{"lineNumber":187,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":188,"author":{"gitId":"owx0130"},"content":"            calories \u003d Integer.parseInt(strCalories);","lastModifiedDate":"2024-03-21"},{"lineNumber":189,"author":{"gitId":"owx0130"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":190,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException();","lastModifiedDate":"2024-04-14"},{"lineNumber":191,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":192,"author":{"gitId":"owx0130"},"content":"        return calories;","lastModifiedDate":"2024-03-21"},{"lineNumber":193,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":194,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":195,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":196,"author":{"gitId":"owx0130"},"content":"     * Extracts the description from the input string based on the command and the index of calories.","lastModifiedDate":"2024-04-03"},{"lineNumber":197,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":198,"author":{"gitId":"owx0130"},"content":"     * @param inputString   the input string containing the description","lastModifiedDate":"2024-04-03"},{"lineNumber":199,"author":{"gitId":"owx0130"},"content":"     * @param command       the command string indicating the type of entry (\"calories in\" or \"calories out\")","lastModifiedDate":"2024-04-03"},{"lineNumber":200,"author":{"gitId":"owx0130"},"content":"     * @param caloriesIndex the index of the \"calories\" keyword in the input string","lastModifiedDate":"2024-04-03"},{"lineNumber":201,"author":{"gitId":"owx0130"},"content":"     * @return the description extracted from the input string","lastModifiedDate":"2024-04-03"},{"lineNumber":202,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":203,"author":{"gitId":"owx0130"},"content":"    private static String getDescriptionFromInput(String inputString, String command, int caloriesIndex) {","lastModifiedDate":"2024-03-21"},{"lineNumber":204,"author":{"gitId":"owx0130"},"content":"        String description;","lastModifiedDate":"2024-03-21"},{"lineNumber":205,"author":{"gitId":"owx0130"},"content":"        if (command.equals(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":206,"author":{"gitId":"owx0130"},"content":"            description \u003d inputString.substring(CALORIES_OUT_PADDING, caloriesIndex).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":207,"author":{"gitId":"owx0130"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":208,"author":{"gitId":"owx0130"},"content":"            command \u003d inputString.substring(0, CALORIES_OUT_PADDING - 1).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":209,"author":{"gitId":"owx0130"},"content":"            description \u003d inputString.substring(CALORIES_OUT_PADDING - 1, caloriesIndex).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":210,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":211,"author":{"gitId":"owx0130"},"content":"        return description;","lastModifiedDate":"2024-03-21"},{"lineNumber":212,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":213,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":214,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":215,"author":{"gitId":"owx0130"},"content":"     * Parses a string containing macros (carbs, proteins, fats) and returns an array of integers.","lastModifiedDate":"2024-04-03"},{"lineNumber":216,"author":{"gitId":"owx0130"},"content":"     * The string should be in the format \"carbs,proteins,fats\".","lastModifiedDate":"2024-04-03"},{"lineNumber":217,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":218,"author":{"gitId":"owx0130"},"content":"     * @param macroString the string containing macros separated by commas","lastModifiedDate":"2024-04-03"},{"lineNumber":219,"author":{"gitId":"owx0130"},"content":"     * @return an array of integers representing macros [carbs, proteins, fats]","lastModifiedDate":"2024-04-03"},{"lineNumber":220,"author":{"gitId":"owx0130"},"content":"     * @throws InvalidInputException if the input string is not in the correct format or contains invalid values","lastModifiedDate":"2024-04-03"},{"lineNumber":221,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":222,"author":{"gitId":"owx0130"},"content":"    private static int[] getMacrosFromInput(String macroString) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":223,"author":{"gitId":"owx0130"},"content":"        int[] macros \u003d new int[3];","lastModifiedDate":"2024-03-20"},{"lineNumber":224,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":225,"author":{"gitId":"owx0130"},"content":"            String[] macroParts \u003d macroString.split(\",\");","lastModifiedDate":"2024-03-20"},{"lineNumber":226,"author":{"gitId":"owx0130"},"content":"            int idx \u003d 0;","lastModifiedDate":"2024-03-20"},{"lineNumber":227,"author":{"gitId":"owx0130"},"content":"            for (String macro : macroParts) {","lastModifiedDate":"2024-03-20"},{"lineNumber":228,"author":{"gitId":"owx0130"},"content":"                //throw exception if user inputs whitespace in the macros field i.e. m/123, ,123","lastModifiedDate":"2024-03-21"},{"lineNumber":229,"author":{"gitId":"owx0130"},"content":"                if (macro.trim().isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":230,"author":{"gitId":"owx0130"},"content":"                    throw new InvalidInputException(getWhitespaceInMacrosInputMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":231,"author":{"gitId":"owx0130"},"content":"                }","lastModifiedDate":"2024-03-21"},{"lineNumber":232,"author":{"gitId":"owx0130"},"content":"                int macrosInt \u003d Integer.parseInt(macro.trim());","lastModifiedDate":"2024-04-14"},{"lineNumber":233,"author":{"gitId":"owx0130"},"content":"                //Exception to handle negative macros","lastModifiedDate":"2024-04-15"},{"lineNumber":234,"author":{"gitId":"owx0130"},"content":"                if (macrosInt \u003c\u003d 0) {","lastModifiedDate":"2024-04-14"},{"lineNumber":235,"author":{"gitId":"owx0130"},"content":"                    throw new InvalidInputException(getIncorrectMacrosInputMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":236,"author":{"gitId":"owx0130"},"content":"                }","lastModifiedDate":"2024-04-14"},{"lineNumber":237,"author":{"gitId":"owx0130"},"content":"                //exception to handle macros over limit","lastModifiedDate":"2024-04-15"},{"lineNumber":238,"author":{"gitId":"owx0130"},"content":"                if (macrosInt \u003e MACROS_LIMIT_800) {","lastModifiedDate":"2024-04-15"},{"lineNumber":239,"author":{"gitId":"owx0130"},"content":"                    throw new InvalidInputException(getMacrosOverLimitMessage());","lastModifiedDate":"2024-04-15"},{"lineNumber":240,"author":{"gitId":"owx0130"},"content":"                }","lastModifiedDate":"2024-04-15"},{"lineNumber":241,"author":{"gitId":"owx0130"},"content":"                macros[idx] \u003d macrosInt;","lastModifiedDate":"2024-04-14"},{"lineNumber":242,"author":{"gitId":"owx0130"},"content":"                idx++;","lastModifiedDate":"2024-03-20"},{"lineNumber":243,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":244,"author":{"gitId":"owx0130"},"content":"            //throw exception if there are missing values in the macros field","lastModifiedDate":"2024-03-21"},{"lineNumber":245,"author":{"gitId":"owx0130"},"content":"            if (idx !\u003d 3) {","lastModifiedDate":"2024-03-21"},{"lineNumber":246,"author":{"gitId":"owx0130"},"content":"                throw new InvalidInputException(getIncompleteMacrosMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":247,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":248,"author":{"gitId":"owx0130"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":249,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getIncorrectMacrosInputMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":250,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":251,"author":{"gitId":"owx0130"},"content":"        return macros;","lastModifiedDate":"2024-03-20"},{"lineNumber":252,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":253,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":254,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":255,"author":{"gitId":"owx0130"},"content":"     * Checks if the calorie value is a positive integer.","lastModifiedDate":"2024-04-03"},{"lineNumber":256,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":257,"author":{"gitId":"owx0130"},"content":"     * @param calories the calorie value to check","lastModifiedDate":"2024-04-03"},{"lineNumber":258,"author":{"gitId":"owx0130"},"content":"     * @throws InvalidInputException if the calorie value is not a positive integer","lastModifiedDate":"2024-04-03"},{"lineNumber":259,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":260,"author":{"gitId":"owx0130"},"content":"    private static void checkCaloriesIsPositiveInteger(int calories) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":261,"author":{"gitId":"owx0130"},"content":"        if (calories \u003c\u003d 0) {","lastModifiedDate":"2024-03-21"},{"lineNumber":262,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException();","lastModifiedDate":"2024-04-14"},{"lineNumber":263,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":264,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":265,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":266,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":267,"author":{"gitId":"owx0130"},"content":"     * Checks if the inputs (description, calories, and date) are non-empty strings.","lastModifiedDate":"2024-04-03"},{"lineNumber":268,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":269,"author":{"gitId":"owx0130"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":270,"author":{"gitId":"owx0130"},"content":"     * @param strCalories the string representation of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":271,"author":{"gitId":"owx0130"},"content":"     * @param date        the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":272,"author":{"gitId":"owx0130"},"content":"     * @throws InvalidInputException if any of the inputs are empty strings","lastModifiedDate":"2024-04-03"},{"lineNumber":273,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":274,"author":{"gitId":"owx0130"},"content":"    private static void checkInputsAreNonEmpty(String description, String strCalories, String date)","lastModifiedDate":"2024-03-21"},{"lineNumber":275,"author":{"gitId":"owx0130"},"content":"            throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":276,"author":{"gitId":"owx0130"},"content":"        //check if the description, calories or date fields are empty","lastModifiedDate":"2024-03-21"},{"lineNumber":277,"author":{"gitId":"owx0130"},"content":"        if (description.isEmpty() || strCalories.isEmpty() || date.isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":278,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getWhitespaceInInputMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":279,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":280,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":281,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":282,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":283,"author":{"gitId":"owx0130"},"content":"     * Checks if the keywords for calories and date exist in the input string.","lastModifiedDate":"2024-04-03"},{"lineNumber":284,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":285,"author":{"gitId":"owx0130"},"content":"     * @param caloriesIndex the index of the \"c/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":286,"author":{"gitId":"owx0130"},"content":"     * @param dateIndex     the index of the \"date/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":287,"author":{"gitId":"owx0130"},"content":"     * @throws InvalidInputException if the keywords are missing","lastModifiedDate":"2024-04-03"},{"lineNumber":288,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":289,"author":{"gitId":"owx0130"},"content":"    private static void checkKeywordsExist(int caloriesIndex, int dateIndex) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":290,"author":{"gitId":"owx0130"},"content":"        //check that c/ and date/ keywords exist in the input, else throw exception","lastModifiedDate":"2024-03-21"},{"lineNumber":291,"author":{"gitId":"owx0130"},"content":"        if (caloriesIndex \u003d\u003d -1 || dateIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-21"},{"lineNumber":292,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getCaloriesMissingKeywordsMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":293,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":294,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":295,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":296,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":297,"author":{"gitId":"owx0130"},"content":"     * Checks if the keywords for calories and date are correctly ordered in the input string.","lastModifiedDate":"2024-04-03"},{"lineNumber":298,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":299,"author":{"gitId":"owx0130"},"content":"     * @param caloriesIndex the index of the \"c/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":300,"author":{"gitId":"owx0130"},"content":"     * @param dateIndex     the index of the \"date/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":301,"author":{"gitId":"owx0130"},"content":"     * @param macrosIndex   the index of the \"macros/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":302,"author":{"gitId":"owx0130"},"content":"     * @throws InvalidInputException if the keywords are not correctly ordered","lastModifiedDate":"2024-04-03"},{"lineNumber":303,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":304,"author":{"gitId":"owx0130"},"content":"    private static void checkKeywordsCorrectlyOrdered(int caloriesIndex, int dateIndex, int macrosIndex)","lastModifiedDate":"2024-03-21"},{"lineNumber":305,"author":{"gitId":"owx0130"},"content":"            throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":306,"author":{"gitId":"owx0130"},"content":"        if ((macrosIndex !\u003d -1 \u0026\u0026 !(caloriesIndex \u003c dateIndex \u0026\u0026 dateIndex \u003c macrosIndex)) ||","lastModifiedDate":"2024-03-21"},{"lineNumber":307,"author":{"gitId":"owx0130"},"content":"                (macrosIndex \u003d\u003d -1 \u0026\u0026 !(caloriesIndex \u003c dateIndex))) {","lastModifiedDate":"2024-03-21"},{"lineNumber":308,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getCaloriesIncorrectOrderMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":309,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":310,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":311,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":312,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":313,"author":{"gitId":"owx0130"},"content":"     * Creates a new output entry with the given description, calories, and date.","lastModifiedDate":"2024-04-03"},{"lineNumber":314,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":315,"author":{"gitId":"owx0130"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":316,"author":{"gitId":"owx0130"},"content":"     * @param calories    the number of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":317,"author":{"gitId":"owx0130"},"content":"     * @param date        the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":318,"author":{"gitId":"owx0130"},"content":"     * @return a new OutputEntry object","lastModifiedDate":"2024-04-03"},{"lineNumber":319,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":320,"author":{"gitId":"owx0130"},"content":"    private static Entry makeNewOutputEntry(int lastEntryID, String description, int calories, LocalDate date) {","lastModifiedDate":"2024-04-09"},{"lineNumber":321,"author":{"gitId":"owx0130"},"content":"        return new OutputEntry(lastEntryID, description, calories, date);","lastModifiedDate":"2024-04-11"},{"lineNumber":322,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":323,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":324,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":325,"author":{"gitId":"owx0130"},"content":"     * Creates a new input entry with the given description, calories, and date.","lastModifiedDate":"2024-04-03"},{"lineNumber":326,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":327,"author":{"gitId":"owx0130"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":328,"author":{"gitId":"owx0130"},"content":"     * @param calories    the number of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":329,"author":{"gitId":"owx0130"},"content":"     * @param date        the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":330,"author":{"gitId":"owx0130"},"content":"     * @return a new InputEntry object","lastModifiedDate":"2024-04-03"},{"lineNumber":331,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":332,"author":{"gitId":"owx0130"},"content":"    private static Entry makeNewInputEntry(int lastEntryID, String description, int calories, LocalDate date) {","lastModifiedDate":"2024-04-09"},{"lineNumber":333,"author":{"gitId":"owx0130"},"content":"        return new InputEntry(lastEntryID, description, calories, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":334,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":335,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":336,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":337,"author":{"gitId":"owx0130"},"content":"     * Creates a new input entry with the given description, calories, date, and food macros.","lastModifiedDate":"2024-04-03"},{"lineNumber":338,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":339,"author":{"gitId":"owx0130"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":340,"author":{"gitId":"owx0130"},"content":"     * @param calories    the number of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":341,"author":{"gitId":"owx0130"},"content":"     * @param date        the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":342,"author":{"gitId":"owx0130"},"content":"     * @param foodMacros  an array containing food macros (carbs, proteins, fats)","lastModifiedDate":"2024-04-03"},{"lineNumber":343,"author":{"gitId":"owx0130"},"content":"     * @return a new InputEntry object with food macros","lastModifiedDate":"2024-04-03"},{"lineNumber":344,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":345,"author":{"gitId":"owx0130"},"content":"    private static Entry makeNewInputEntry(int lastEntryID, String description, int calories, LocalDate date,","lastModifiedDate":"2024-04-09"},{"lineNumber":346,"author":{"gitId":"owx0130"},"content":"            int[] foodMacros) {","lastModifiedDate":"2024-04-09"},{"lineNumber":347,"author":{"gitId":"owx0130"},"content":"        Food newFood \u003d new Food(foodMacros[CARBS_IDX], foodMacros[PROTEINS_IDX], foodMacros[FATS_IDX]);","lastModifiedDate":"2024-03-20"},{"lineNumber":348,"author":{"gitId":"owx0130"},"content":"        return new InputEntry(lastEntryID, description, calories, date, newFood);","lastModifiedDate":"2024-04-09"},{"lineNumber":349,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":350,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":351,"author":{"gitId":"paturikarthik"},"content":"    //@@author paturikarthik","lastModifiedDate":"2024-04-14"},{"lineNumber":352,"author":{"gitId":"paturikarthik"},"content":"    public static void findCalorieListEntries(String input, CalorieList originalList) {","lastModifiedDate":"2024-04-14"},{"lineNumber":353,"author":{"gitId":"paturikarthik"},"content":"        String keyword \u003d input.substring(CALORIES_FIND_LENGTH).trim();","lastModifiedDate":"2024-04-14"},{"lineNumber":354,"author":{"gitId":"paturikarthik"},"content":"        CalorieList searchList \u003d new CalorieList();","lastModifiedDate":"2024-04-14"},{"lineNumber":355,"author":{"gitId":"paturikarthik"},"content":"        for (int i \u003d 0; i \u003c originalList.getSize(); i++) {","lastModifiedDate":"2024-04-14"},{"lineNumber":356,"author":{"gitId":"paturikarthik"},"content":"            Entry entry \u003d originalList.getEntry(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":357,"author":{"gitId":"paturikarthik"},"content":"            if (entry.getDescription().contains(keyword)) {","lastModifiedDate":"2024-04-14"},{"lineNumber":358,"author":{"gitId":"paturikarthik"},"content":"                if (entry instanceof InputEntry) {","lastModifiedDate":"2024-04-14"},{"lineNumber":359,"author":{"gitId":"paturikarthik"},"content":"                    Entry entryToAdd \u003d makeNewInputEntry(entry.getEntryID(), entry.getDescription()","lastModifiedDate":"2024-04-14"},{"lineNumber":360,"author":{"gitId":"paturikarthik"},"content":"                            , ((InputEntry) entry).getCalories(), entry.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":361,"author":{"gitId":"paturikarthik"},"content":"                    searchList.addCalorieEntry(entryToAdd);","lastModifiedDate":"2024-04-14"},{"lineNumber":362,"author":{"gitId":"paturikarthik"},"content":"                } else {","lastModifiedDate":"2024-04-14"},{"lineNumber":363,"author":{"gitId":"paturikarthik"},"content":"                    Entry entryToAdd \u003d makeNewOutputEntry(entry.getEntryID(), entry.getDescription(),","lastModifiedDate":"2024-04-14"},{"lineNumber":364,"author":{"gitId":"paturikarthik"},"content":"                            ((OutputEntry) entry).getCalories(), entry.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":365,"author":{"gitId":"paturikarthik"},"content":"                    searchList.addCalorieEntry(entryToAdd);","lastModifiedDate":"2024-04-14"},{"lineNumber":366,"author":{"gitId":"paturikarthik"},"content":"                }","lastModifiedDate":"2024-04-14"},{"lineNumber":367,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":368,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":369,"author":{"gitId":"paturikarthik"},"content":"        searchList.printFoundCalorieList();","lastModifiedDate":"2024-04-14"},{"lineNumber":370,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":371,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":30,"owx0130":320,"paturikarthik":21}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserHydration.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"//@@author shawnpong","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationEntry;","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationList;","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-29"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationWhitespaceInInputMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getDateLaterThanPresentDateMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidDateMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationOverVolumeLimitMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncorrectVolumeInputMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationNegativeIntegerVolumeMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationEmptyDescriptionMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationMissingKeywordMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationIncorrectOrderMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationDuplicateInputsMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"public class ParserHydration {","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"    private static final int VOLUME_IDX \u003d 1;","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"    private static final int DATE_IDX \u003d 2;","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"    private static final int HYDRATION_ADD_PADDING \u003d 13;","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"    private static final int HYDRATION_LIMIT_10000 \u003d 10000;","lastModifiedDate":"2024-04-15"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"    private static final int HYDRATION_FIND_LENGTH \u003d \"hydration find\".length();","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"     * Parses a string input to create a Liquid object representing liquid intake.","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"     * This method expects the input string to follow a specific format, where the","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"     * beverage name and quantity are separated by the delimiters \u0027b/\u0027 and \u0027v/\u0027.","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"     * The method extracts these components and creates a Liquid object.","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"     * If any part of the input is missing or empty, an InvalidInputException is thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"     * @param input the input string to be parsed, containing beverage name and quantity","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"     * @return a Liquid object representing liquid intake","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if the input string is missing components or","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"     *                              contains empty fields","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"    public static Entry parseHydrationInput(String input, int lastHydrationEntryID) throws InvalidInputException {","lastModifiedDate":"2024-04-09"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"        ","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"        int volumeIndex \u003d input.indexOf(\"v/\");","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"        int dateIndex \u003d input.indexOf(\"d/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"        checkKeywordsExist(dateIndex, volumeIndex);","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"        assert volumeIndex !\u003d -1 : \"The v/ keyword should exist!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"        assert dateIndex !\u003d -1 : \"The d/ keyword should exist!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"        checkKeywordsCorrectlyOrdered(dateIndex, volumeIndex);","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"        assert volumeIndex \u003c dateIndex : \"The v/ keyword must appear before date/ in the input!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"        int volumeCount \u003d input.split(\"v/\").length - 1;","lastModifiedDate":"2024-04-15"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"        int dateCount \u003d input.split(\"d/\").length - 1;","lastModifiedDate":"2024-04-15"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"        checkNoDuplicateKeywords(volumeCount, dateCount);","lastModifiedDate":"2024-04-15"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"        assert volumeCount \u003d\u003d 1 : \"The v/ keyword must appear before date/ in the input!\";","lastModifiedDate":"2024-04-15"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"        assert dateCount \u003d\u003d 1 : \"The v/ keyword must appear before date/ in the input!\";","lastModifiedDate":"2024-04-15"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"        String[] parts \u003d input.split(\"v/|d/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"        String description \u003d getDescriptionFromInput(input, volumeIndex);","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"        String strVolume \u003d parts[VOLUME_IDX].trim();","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"        // Try catch here is needed because if user inputs \"hydration in milo v/1000 d/  \"\",","lastModifiedDate":"2024-04-15"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        // code fails because index out of bounds occurs due to parts[DATE_IDX].trim()","lastModifiedDate":"2024-04-15"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"        String strDate \u003d null;","lastModifiedDate":"2024-04-15"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-04-15"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"            strDate \u003d parts[DATE_IDX].trim();","lastModifiedDate":"2024-04-15"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-04-15"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationWhitespaceInInputMessage());","lastModifiedDate":"2024-04-15"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-15"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"        checkInputsAreNonEmpty(description, strVolume, strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"        assert description !\u003d \"\" : \"The description field should be a non-empty string!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"        assert strVolume !\u003d \"\" : \"The volume field should be a non-empty string!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"        assert strDate !\u003d \"\" : \"The date field should be a non-empty string!\";","lastModifiedDate":"2024-03-29"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"        int volume \u003d getIntegerVolumeFromInput(strVolume);","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"        checkVolumeIsPositiveInteger(volume);","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"        checkVolumeMaxAllowable(volume);","lastModifiedDate":"2024-04-14"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"        assert volume \u003e 0 : \"Volume value must be a positive integer!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"rexyyong"},"content":"        //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":90,"author":{"gitId":"rexyyong"},"content":"        // Convert strDate from type String to date of type LocalDate","lastModifiedDate":"2024-03-29"},{"lineNumber":91,"author":{"gitId":"rexyyong"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2024-03-29"},{"lineNumber":92,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-29"},{"lineNumber":93,"author":{"gitId":"rexyyong"},"content":"            date \u003d getLocalDateFromInput(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":94,"author":{"gitId":"rexyyong"},"content":"            if (date.isAfter(LocalDate.now())) {","lastModifiedDate":"2024-04-12"},{"lineNumber":95,"author":{"gitId":"rexyyong"},"content":"                throw new InvalidInputException(getDateLaterThanPresentDateMessage());","lastModifiedDate":"2024-04-12"},{"lineNumber":96,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-04-12"},{"lineNumber":97,"author":{"gitId":"rexyyong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":98,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(getInvalidDateMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":99,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-29"},{"lineNumber":100,"author":{"gitId":"rexyyong"},"content":"        //@@author","lastModifiedDate":"2024-03-29"},{"lineNumber":101,"author":{"gitId":"rexyyong"},"content":"        lastHydrationEntryID++;","lastModifiedDate":"2024-04-09"},{"lineNumber":102,"author":{"gitId":"rexyyong"},"content":"        return makeNewInputEntry(lastHydrationEntryID, description, volume, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"    private static void checkNoDuplicateKeywords(int volumeCount, int dateCount) throws InvalidInputException{","lastModifiedDate":"2024-04-15"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"        if (volumeCount !\u003d 1 || dateCount !\u003d 1) {","lastModifiedDate":"2024-04-15"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationDuplicateInputsMessage());","lastModifiedDate":"2024-04-15"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-15"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-15"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"    private static void checkVolumeMaxAllowable(int volume) throws InvalidInputException {","lastModifiedDate":"2024-04-14"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"        if (volume \u003e HYDRATION_LIMIT_10000) {","lastModifiedDate":"2024-04-15"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationOverVolumeLimitMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"     * Creates a new HydrationEntry object with the specified description, volume, and date.","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"     * @param description the description of the hydration entry","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"     * @param volume the volume of liquid intake","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"     * @param date the date of the hydration entry","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"     * @return a new HydrationEntry object with the specified attributes","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"rexyyong"},"content":"    private static HydrationEntry makeNewInputEntry(int lastHydrationEntryID, String description, int volume,","lastModifiedDate":"2024-04-09"},{"lineNumber":126,"author":{"gitId":"rexyyong"},"content":"                                                    LocalDate date) {","lastModifiedDate":"2024-04-09"},{"lineNumber":127,"author":{"gitId":"rexyyong"},"content":"        return new HydrationEntry(lastHydrationEntryID, description, volume, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"     * Parses a string representation of a date and returns a LocalDate object.","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"     * @param strDate the string representation of the date","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"     * @return a LocalDate object representing the parsed date","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"     * @throws DateTimeParseException if the input string cannot be parsed into a valid date","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":137,"author":{"gitId":"rexyyong"},"content":"    //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":138,"author":{"gitId":"rexyyong"},"content":"    public static LocalDate getLocalDateFromInput(String strDate) throws DateTimeParseException {","lastModifiedDate":"2024-03-29"},{"lineNumber":139,"author":{"gitId":"rexyyong"},"content":"        LocalDate date \u003d LocalDate.parse(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":140,"author":{"gitId":"rexyyong"},"content":"        return date;","lastModifiedDate":"2024-03-29"},{"lineNumber":141,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":142,"author":{"gitId":"rexyyong"},"content":"    //@@author","lastModifiedDate":"2024-03-29"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"     * Parses the volume from a string and returns the integer value.","lastModifiedDate":"2024-04-02"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"     * @param strVolume the string representation of the volume","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"     * @return the integer value of the volume","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"    private static int getIntegerVolumeFromInput(String strVolume) {","lastModifiedDate":"2024-03-27"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"        int volume \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":151,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":152,"author":{"gitId":"rexyyong"},"content":"            volume \u003d Integer.parseInt(strVolume);","lastModifiedDate":"2024-03-21"},{"lineNumber":153,"author":{"gitId":"rexyyong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":154,"author":{"gitId":"shawnpong"},"content":"            System.out.println(getIncorrectVolumeInputMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":155,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":156,"author":{"gitId":"shawnpong"},"content":"        return volume;","lastModifiedDate":"2024-03-27"},{"lineNumber":157,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":158,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":159,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"shawnpong"},"content":"     * Checks if the given volume is a positive integer.","lastModifiedDate":"2024-04-02"},{"lineNumber":161,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"shawnpong"},"content":"     * @param volume the volume value to be checked","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if the volume is not a positive integer","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"shawnpong"},"content":"    private static void checkVolumeIsPositiveInteger(int volume) throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"rexyyong"},"content":"        if (volume \u003c\u003d 0) {","lastModifiedDate":"2024-03-21"},{"lineNumber":167,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationNegativeIntegerVolumeMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":168,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":169,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":170,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":171,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":172,"author":{"gitId":"shawnpong"},"content":"     * Checks if the description, volume, and date fields are non-empty.","lastModifiedDate":"2024-04-02"},{"lineNumber":173,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":174,"author":{"gitId":"shawnpong"},"content":"     * @param description the description of the hydration entry","lastModifiedDate":"2024-04-02"},{"lineNumber":175,"author":{"gitId":"shawnpong"},"content":"     * @param strVolume the string representation of the volume","lastModifiedDate":"2024-04-02"},{"lineNumber":176,"author":{"gitId":"shawnpong"},"content":"     * @param date the string representation of the date","lastModifiedDate":"2024-04-02"},{"lineNumber":177,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if any of the fields are empty","lastModifiedDate":"2024-04-02"},{"lineNumber":178,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":179,"author":{"gitId":"shawnpong"},"content":"    private static void checkInputsAreNonEmpty(String description, String strVolume, String date)","lastModifiedDate":"2024-03-27"},{"lineNumber":180,"author":{"gitId":"shawnpong"},"content":"            throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":181,"author":{"gitId":"shawnpong"},"content":"        if (description.isEmpty() || strVolume.isEmpty() || date.isEmpty()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":182,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationEmptyDescriptionMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":183,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":184,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":185,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":186,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":187,"author":{"gitId":"shawnpong"},"content":"     * Extracts the description from the input string.","lastModifiedDate":"2024-04-02"},{"lineNumber":188,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":189,"author":{"gitId":"shawnpong"},"content":"     * @param inputString the input string containing description, volume, and date","lastModifiedDate":"2024-04-02"},{"lineNumber":190,"author":{"gitId":"shawnpong"},"content":"     * @param volumeIndex the index of the \u0027v/\u0027 delimiter","lastModifiedDate":"2024-04-02"},{"lineNumber":191,"author":{"gitId":"shawnpong"},"content":"     * @return the description extracted from the input string","lastModifiedDate":"2024-04-02"},{"lineNumber":192,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":193,"author":{"gitId":"shawnpong"},"content":"    private static String getDescriptionFromInput(String inputString, int volumeIndex) {","lastModifiedDate":"2024-03-27"},{"lineNumber":194,"author":{"gitId":"shawnpong"},"content":"        String description;","lastModifiedDate":"2024-03-27"},{"lineNumber":195,"author":{"gitId":"owx0130"},"content":"        description \u003d inputString.substring(HYDRATION_ADD_PADDING, volumeIndex).trim();","lastModifiedDate":"2024-03-28"},{"lineNumber":196,"author":{"gitId":"shawnpong"},"content":"        return description;","lastModifiedDate":"2024-03-27"},{"lineNumber":197,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":198,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":199,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":200,"author":{"gitId":"shawnpong"},"content":"     * Checks if the \u0027v/\u0027 and \u0027d/\u0027 keywords are in the correct order in the input string.","lastModifiedDate":"2024-04-02"},{"lineNumber":201,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":202,"author":{"gitId":"shawnpong"},"content":"     * @param dateIndex the index of the \u0027d/\u0027 keyword","lastModifiedDate":"2024-04-02"},{"lineNumber":203,"author":{"gitId":"shawnpong"},"content":"     * @param volumeIndex the index of the \u0027v/\u0027 keyword","lastModifiedDate":"2024-04-02"},{"lineNumber":204,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if the keywords are in the incorrect order","lastModifiedDate":"2024-04-02"},{"lineNumber":205,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":206,"author":{"gitId":"shawnpong"},"content":"    private static void checkKeywordsCorrectlyOrdered(int dateIndex, int volumeIndex) throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":207,"author":{"gitId":"shawnpong"},"content":"        if (volumeIndex \u003e\u003d dateIndex) {","lastModifiedDate":"2024-04-02"},{"lineNumber":208,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationIncorrectOrderMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":209,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":210,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":211,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":212,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":213,"author":{"gitId":"shawnpong"},"content":"     * Checks if the \u0027v/\u0027 and \u0027d/\u0027 keywords exist in the input string.","lastModifiedDate":"2024-04-02"},{"lineNumber":214,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":215,"author":{"gitId":"shawnpong"},"content":"     * @param dateIndex the index of the \u0027d/\u0027 keyword","lastModifiedDate":"2024-04-02"},{"lineNumber":216,"author":{"gitId":"shawnpong"},"content":"     * @param volumeIndex the index of the \u0027v/\u0027 keyword","lastModifiedDate":"2024-04-02"},{"lineNumber":217,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if any of the keywords are missing","lastModifiedDate":"2024-04-02"},{"lineNumber":218,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":219,"author":{"gitId":"shawnpong"},"content":"    private static void checkKeywordsExist(int dateIndex, int volumeIndex) throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":220,"author":{"gitId":"shawnpong"},"content":"        if (dateIndex \u003d\u003d -1 || volumeIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-27"},{"lineNumber":221,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationMissingKeywordMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":222,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":223,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":224,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":225,"author":{"gitId":"paturikarthik"},"content":"    //@@author paturikarthik","lastModifiedDate":"2024-04-14"},{"lineNumber":226,"author":{"gitId":"paturikarthik"},"content":"    public static void findHydrationListEntries(String input, HydrationList originalList){","lastModifiedDate":"2024-04-14"},{"lineNumber":227,"author":{"gitId":"paturikarthik"},"content":"        String keyword \u003d input.substring(HYDRATION_FIND_LENGTH).trim();","lastModifiedDate":"2024-04-14"},{"lineNumber":228,"author":{"gitId":"paturikarthik"},"content":"        HydrationList searchList \u003d new HydrationList();","lastModifiedDate":"2024-04-14"},{"lineNumber":229,"author":{"gitId":"paturikarthik"},"content":"        for (int i \u003d 0 ; i \u003coriginalList.getSize();i++){","lastModifiedDate":"2024-04-14"},{"lineNumber":230,"author":{"gitId":"paturikarthik"},"content":"            Entry entry \u003d originalList.getEntry(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":231,"author":{"gitId":"paturikarthik"},"content":"            if (entry.getDescription().contains(keyword)){","lastModifiedDate":"2024-04-14"},{"lineNumber":232,"author":{"gitId":"paturikarthik"},"content":"                searchList.addHydrationEntry(entry);","lastModifiedDate":"2024-04-14"},{"lineNumber":233,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":234,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":235,"author":{"gitId":"paturikarthik"},"content":"        searchList.printFoundHydrationList();","lastModifiedDate":"2024-04-14"},{"lineNumber":236,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":237,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":238,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":31,"owx0130":6,"shawnpong":187,"paturikarthik":14}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserSleep.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"//@@author a-wild-chocolate","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepEntry;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-04-09"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-29"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.LifeTrack.sleepList;","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncorrectSleepInputMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getReachedMaximumSleepMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getTooLongSleepDurationMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidDateMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getSleepMissingKeywordMessage;","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"public class ParserSleep {","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"    private static final int DURATION_IDX \u003d 0;","lastModifiedDate":"2024-04-09"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"    private static final int DATE_IDX \u003d 1;","lastModifiedDate":"2024-04-09"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"    private static final int STRING_PARTS_LEN \u003d 2;","lastModifiedDate":"2024-04-09"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"    private static final String SLEEP_HEADER \u003d \"sleep add \";","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"    private static final String DATE_ICON \u003d \"d/\";","lastModifiedDate":"2024-04-09"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"    private static final int MAX_SLEEP_PER_DAY \u003d 24;","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"    public static SleepEntry parseSleepInput(String input) throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2024-03-29"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"        double duration \u003d 0;","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"        int dateIndex \u003d input.indexOf(DATE_ICON);","lastModifiedDate":"2024-04-09"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"        checkKeywordsExist(dateIndex);","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"        assert dateIndex !\u003d -1 : \"The d/ keyword should exist!\";","lastModifiedDate":"2024-04-09"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"        String[] parts \u003d input.substring(SLEEP_HEADER.length()).split(DATE_ICON);","lastModifiedDate":"2024-04-09"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"        checkValidFormat(parts);","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"        String strDate \u003d parts[DATE_IDX].trim();","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"a-wild-chocolate"},"content":"        String strDuration \u003d parts[DURATION_IDX].trim();","lastModifiedDate":"2024-04-09"},{"lineNumber":41,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":42,"author":{"gitId":"a-wild-chocolate"},"content":"        duration \u003d parseDuration(strDuration);","lastModifiedDate":"2024-04-09"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"        date \u003d parseDate(strDate);","lastModifiedDate":"2024-04-09"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"        if (date.isAfter(LocalDate.now())) {","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"            throw new InvalidInputException(\"\\t The date cannot be in the future. Please enter a valid date.\");","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"        if (sleepList.getSleepConsumed(date) + duration \u003e MAX_SLEEP_PER_DAY){","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"            throw new InvalidInputException(getReachedMaximumSleepMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepEntry newSleep \u003d new SleepEntry(duration, date);","lastModifiedDate":"2024-04-09"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"        return newSleep;","lastModifiedDate":"2024-04-09"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"    private static double parseDuration(String durationStr) throws InvalidInputException {","lastModifiedDate":"2024-04-09"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"        double duration\u003d0;","lastModifiedDate":"2024-04-09"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-04-09"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"            duration \u003d Double.parseDouble(durationStr);","lastModifiedDate":"2024-04-09"},{"lineNumber":62,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-09"},{"lineNumber":63,"author":{"gitId":"a-wild-chocolate"},"content":"            throw new InvalidInputException(getIncorrectSleepInputMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":66,"author":{"gitId":"a-wild-chocolate"},"content":"        if (duration \u003c\u003d 0) {","lastModifiedDate":"2024-04-09"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"            throw new InvalidInputException(getIncorrectSleepInputMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"        } else if (duration \u003e\u003d 24) {","lastModifiedDate":"2024-04-09"},{"lineNumber":69,"author":{"gitId":"a-wild-chocolate"},"content":"            throw new InvalidInputException(getTooLongSleepDurationMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":70,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"a-wild-chocolate"},"content":"        return duration;","lastModifiedDate":"2024-04-09"},{"lineNumber":72,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":73,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":74,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":75,"author":{"gitId":"a-wild-chocolate"},"content":"    private static LocalDate parseDate(String strDate) throws InvalidInputException {","lastModifiedDate":"2024-04-09"},{"lineNumber":76,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-29"},{"lineNumber":77,"author":{"gitId":"a-wild-chocolate"},"content":"            return LocalDate.parse(strDate, DateTimeFormatter.ISO_LOCAL_DATE);","lastModifiedDate":"2024-04-09"},{"lineNumber":78,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":79,"author":{"gitId":"a-wild-chocolate"},"content":"            throw new InvalidInputException(getInvalidDateMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":80,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":82,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":83,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":84,"author":{"gitId":"a-wild-chocolate"},"content":"    private static void checkKeywordsExist(int dateIndex) throws InvalidInputException {","lastModifiedDate":"2024-04-09"},{"lineNumber":85,"author":{"gitId":"a-wild-chocolate"},"content":"        if (dateIndex \u003d\u003d -1 ) {","lastModifiedDate":"2024-04-09"},{"lineNumber":86,"author":{"gitId":"a-wild-chocolate"},"content":"            throw new InvalidInputException(getSleepMissingKeywordMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":87,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-04-09"},{"lineNumber":88,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":89,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":90,"author":{"gitId":"a-wild-chocolate"},"content":"    private static void checkValidFormat(String[] parts) throws InvalidInputException {","lastModifiedDate":"2024-04-09"},{"lineNumber":91,"author":{"gitId":"a-wild-chocolate"},"content":"        if (parts.length !\u003d STRING_PARTS_LEN || parts[DURATION_IDX].isEmpty()) {","lastModifiedDate":"2024-04-09"},{"lineNumber":92,"author":{"gitId":"a-wild-chocolate"},"content":"            throw new InvalidInputException(\"Please ensure that you have keyed in the correct format: \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":93,"author":{"gitId":"a-wild-chocolate"},"content":"                    \"sleep add \u003cduration\u003e d/\u003cstrDate\u003e\");","lastModifiedDate":"2024-04-09"},{"lineNumber":94,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":96,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":97,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-29"},{"lineNumber":98,"author":{"gitId":"a-wild-chocolate"},"content":"//@@author","lastModifiedDate":"2024-03-29"}],"authorContributionMap":{"a-wild-chocolate":98}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserUser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"//@@author paturikarthik","lastModifiedDate":"2024-04-13"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"import java.util.Objects;","lastModifiedDate":"2024-04-11"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getAgeOutOfRangeMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getEmptyGenderInputMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getEmptyNameInputMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getEmptyUserSetupInputMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getEmptyUserUpdateFieldMessage;","lastModifiedDate":"2024-04-11"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHeightOutOfRangeMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidAgeNumberMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidExerciseLevelsNumberMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidGenderInputMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidGoalNumberMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidHeightNumberMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidNumberOfSetUpInputs;","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getInvalidWeightNumberMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getOutOfExerciseLevelsRangeMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getOutOfGoalRangeMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getUnderAgeMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getUnknownUpdateMessage;","lastModifiedDate":"2024-04-11"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getWeightOutOfRangeMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printNewUserAge;","lastModifiedDate":"2024-04-11"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printNewUserExerciseLevels;","lastModifiedDate":"2024-04-11"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printNewUserGoal;","lastModifiedDate":"2024-04-11"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printNewUserHeight;","lastModifiedDate":"2024-04-11"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printNewUserName;","lastModifiedDate":"2024-04-11"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printNewUserSex;","lastModifiedDate":"2024-04-11"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printNewUserWeight;","lastModifiedDate":"2024-04-11"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printUserCaloriesRequired;","lastModifiedDate":"2024-04-11"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printUserSetUpComplete;","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":" * Utility Class to parse the commands made with regard to the User class.","lastModifiedDate":"2024-03-31"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"public class ParserUser {","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_SETUP_COMMAND \u003d \"user setup\".length();","lastModifiedDate":"2024-03-31"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"    private static final int USER_INPUT_NAME_INDEX \u003d 0;","lastModifiedDate":"2024-04-10"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"    private static final int USER_INPUT_HEIGHT_INDEX \u003d 1;","lastModifiedDate":"2024-04-10"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"    private static final int USER_INPUT_WEIGHT_INDEX \u003d 2;","lastModifiedDate":"2024-04-10"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"    private static final int USER_INPUT_AGE_INDEX \u003d 3;","lastModifiedDate":"2024-04-10"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"    private static final int USER_INPUT_GENDER_INDEX \u003d 4;","lastModifiedDate":"2024-04-10"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"    private static final int USER_INPUT_EXERCISE_LEVELS_INDEX \u003d 5;","lastModifiedDate":"2024-04-10"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"    private static final int USER_INPUT_GOAL_INDEX \u003d 6;","lastModifiedDate":"2024-04-10"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_UPDATE_COMMAND \u003d \"user update\".length();","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_NAME \u003d \"name\".length();","lastModifiedDate":"2024-04-10"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_HEIGHT \u003d \"height\".length();","lastModifiedDate":"2024-04-10"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_WEIGHT \u003d \"weight\".length();","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_AGE \u003d \"age\".length();","lastModifiedDate":"2024-04-10"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_SEX \u003d \"sex\".length();","lastModifiedDate":"2024-04-10"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_EXERCISE_LEVELS \u003d \"exercise levels\".length();","lastModifiedDate":"2024-04-10"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_GOAL \u003d \"goal\".length();","lastModifiedDate":"2024-04-10"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"     * Parses the input from user to sieve out name, height, weight, age, gender, exercise levels and goals of the user","lastModifiedDate":"2024-03-31"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"     * and sets them accordingly in the User class.","lastModifiedDate":"2024-03-31"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"     * @param input input String from the user","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"     * @param user  current user of the app","lastModifiedDate":"2024-03-31"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if user does not input all the information in the correct order and format","lastModifiedDate":"2024-03-31"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"     * @throws NumberFormatException if user does not input a number for exercise levels and goals","lastModifiedDate":"2024-03-31"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"    public static void parseSetUp(String input, User user) throws InvalidInputException, NumberFormatException {","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"        checkEmptyInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"        int heightIndex \u003d input.indexOf(\"h/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"        String name \u003d null;","lastModifiedDate":"2024-04-14"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"        if (heightIndex !\u003d -1) {","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"            name \u003d parseName(input.substring(LENGTH_OF_SETUP_COMMAND, heightIndex).trim());","lastModifiedDate":"2024-04-14"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"            input \u003d input.substring(heightIndex).toLowerCase();","lastModifiedDate":"2024-04-15"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"        int weightIndex \u003d input.indexOf(\"w/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"        int ageIndex \u003d input.indexOf(\"a/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"        int sexIndex \u003d input.indexOf(\"s/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"        int exerciseLevelsIndex \u003d input.indexOf(\"e/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"        int goalIndex \u003d input.indexOf(\"g/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"        if (heightIndex \u003d\u003d -1 || weightIndex \u003d\u003d -1 || ageIndex \u003d\u003d -1 || sexIndex \u003d\u003d -1","lastModifiedDate":"2024-03-28"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"                || exerciseLevelsIndex \u003d\u003d -1 || goalIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-28"},{"lineNumber":84,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidNumberOfSetUpInputs());","lastModifiedDate":"2024-03-28"},{"lineNumber":85,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"paturikarthik"},"content":"        checkSetUpInputsCorrectOrder(weightIndex, ageIndex, sexIndex, exerciseLevelsIndex, goalIndex);","lastModifiedDate":"2024-04-14"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":88,"author":{"gitId":"paturikarthik"},"content":"        String[] parts \u003d input.split(\"h/|w/|a/|s/|e/|g/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":89,"author":{"gitId":"paturikarthik"},"content":"        if (parts.length !\u003d 7) {","lastModifiedDate":"2024-03-31"},{"lineNumber":90,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidNumberOfSetUpInputs());","lastModifiedDate":"2024-03-31"},{"lineNumber":91,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":92,"author":{"gitId":"paturikarthik"},"content":"        int height \u003d parseHeightIndex(parts[USER_INPUT_HEIGHT_INDEX].trim());","lastModifiedDate":"2024-04-10"},{"lineNumber":93,"author":{"gitId":"paturikarthik"},"content":"        int weight \u003d parseWeightIndex(parts[USER_INPUT_WEIGHT_INDEX].trim());","lastModifiedDate":"2024-04-10"},{"lineNumber":94,"author":{"gitId":"paturikarthik"},"content":"        int age \u003d parseAgeIndex(parts[USER_INPUT_AGE_INDEX].trim());","lastModifiedDate":"2024-04-10"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"        String sex \u003d parseGenderIndex(parts[USER_INPUT_GENDER_INDEX].trim().toLowerCase());","lastModifiedDate":"2024-04-10"},{"lineNumber":96,"author":{"gitId":"paturikarthik"},"content":"        int exerciseLevels \u003d parseExerciseLevels(parts[USER_INPUT_EXERCISE_LEVELS_INDEX].trim());","lastModifiedDate":"2024-04-10"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"        int goal \u003d parseGoalIndex(parts[USER_INPUT_GOAL_INDEX].trim());","lastModifiedDate":"2024-04-10"},{"lineNumber":98,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":99,"author":{"gitId":"paturikarthik"},"content":"        user.setName(name);","lastModifiedDate":"2024-03-28"},{"lineNumber":100,"author":{"gitId":"paturikarthik"},"content":"        user.setHeight(height);","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"        user.setWeight(weight);","lastModifiedDate":"2024-03-28"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"        user.setAge(age);","lastModifiedDate":"2024-03-28"},{"lineNumber":103,"author":{"gitId":"paturikarthik"},"content":"        user.setSex(sex);","lastModifiedDate":"2024-03-28"},{"lineNumber":104,"author":{"gitId":"paturikarthik"},"content":"        user.setExerciseLevels(exerciseLevels);","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"paturikarthik"},"content":"        user.setGoal(goal);","lastModifiedDate":"2024-03-28"},{"lineNumber":106,"author":{"gitId":"paturikarthik"},"content":"        user.getHealthInfo();","lastModifiedDate":"2024-04-04"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"        printUserSetUpComplete(user);","lastModifiedDate":"2024-04-11"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"    private static String parseName(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-10"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getEmptyNameInputMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":113,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":114,"author":{"gitId":"paturikarthik"},"content":"        return input;","lastModifiedDate":"2024-04-10"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s height input for an Integer","lastModifiedDate":"2024-04-04"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":120,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s height input","lastModifiedDate":"2024-04-04"},{"lineNumber":121,"author":{"gitId":"paturikarthik"},"content":"     * @return user\u0027s height as an integer","lastModifiedDate":"2024-04-04"},{"lineNumber":122,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the height input is not an integer or if the user\u0027s height is not between","lastModifiedDate":"2024-04-04"},{"lineNumber":123,"author":{"gitId":"paturikarthik"},"content":"     *                               90 and 225 cm","lastModifiedDate":"2024-04-04"},{"lineNumber":124,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":125,"author":{"gitId":"paturikarthik"},"content":"    private static int parseHeightIndex(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":126,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":127,"author":{"gitId":"paturikarthik"},"content":"            int height \u003d Integer.parseInt(input);","lastModifiedDate":"2024-04-04"},{"lineNumber":128,"author":{"gitId":"paturikarthik"},"content":"            if (height \u003c 90 || height \u003e 225) {","lastModifiedDate":"2024-04-04"},{"lineNumber":129,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getHeightOutOfRangeMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":130,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":131,"author":{"gitId":"paturikarthik"},"content":"            return height;","lastModifiedDate":"2024-04-04"},{"lineNumber":132,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":133,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidHeightNumberMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":134,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":135,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":136,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":137,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-10"},{"lineNumber":138,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s gender input for a String","lastModifiedDate":"2024-04-10"},{"lineNumber":139,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":140,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s gender input","lastModifiedDate":"2024-04-10"},{"lineNumber":141,"author":{"gitId":"paturikarthik"},"content":"     * @return user\u0027s gender as a string","lastModifiedDate":"2024-04-10"},{"lineNumber":142,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the gender input is empty or if it is not male/m or female/f","lastModifiedDate":"2024-04-10"},{"lineNumber":143,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-10"},{"lineNumber":144,"author":{"gitId":"paturikarthik"},"content":"    private static String parseGenderIndex(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-10"},{"lineNumber":145,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-04-10"},{"lineNumber":146,"author":{"gitId":"paturikarthik"},"content":"            if (input.isEmpty()) {","lastModifiedDate":"2024-04-10"},{"lineNumber":147,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getEmptyGenderInputMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":148,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-10"},{"lineNumber":149,"author":{"gitId":"paturikarthik"},"content":"            if (input.equals(\"male\") || input.equals(\"m\")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":150,"author":{"gitId":"paturikarthik"},"content":"                return \"male\";","lastModifiedDate":"2024-04-10"},{"lineNumber":151,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-10"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"            if (input.equals(\"female\") || input.equals(\"f\")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":153,"author":{"gitId":"paturikarthik"},"content":"                return \"female\";","lastModifiedDate":"2024-04-10"},{"lineNumber":154,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-10"},{"lineNumber":155,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidGenderInputMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":156,"author":{"gitId":"paturikarthik"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2024-04-10"},{"lineNumber":157,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getEmptyUserSetupInputMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":158,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":159,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":160,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":161,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":162,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s weight input for an Integer","lastModifiedDate":"2024-04-04"},{"lineNumber":163,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":164,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s weight input","lastModifiedDate":"2024-04-04"},{"lineNumber":165,"author":{"gitId":"paturikarthik"},"content":"     * @return user\u0027s weight as an integer","lastModifiedDate":"2024-04-04"},{"lineNumber":166,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the weight input is not an integer or if the user\u0027s weight is not between","lastModifiedDate":"2024-04-04"},{"lineNumber":167,"author":{"gitId":"paturikarthik"},"content":"     *                               30 and 200 kg","lastModifiedDate":"2024-04-04"},{"lineNumber":168,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":169,"author":{"gitId":"paturikarthik"},"content":"    private static int parseWeightIndex(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":170,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":171,"author":{"gitId":"paturikarthik"},"content":"            int weight \u003d Integer.parseInt(input);","lastModifiedDate":"2024-04-04"},{"lineNumber":172,"author":{"gitId":"paturikarthik"},"content":"            if (weight \u003c 30 || weight \u003e 200) {","lastModifiedDate":"2024-04-04"},{"lineNumber":173,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getWeightOutOfRangeMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":174,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":175,"author":{"gitId":"paturikarthik"},"content":"            return weight;","lastModifiedDate":"2024-04-04"},{"lineNumber":176,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":177,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidWeightNumberMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":178,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":179,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":180,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":181,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":182,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s age input for an Integer","lastModifiedDate":"2024-04-04"},{"lineNumber":183,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":184,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s age input","lastModifiedDate":"2024-04-04"},{"lineNumber":185,"author":{"gitId":"paturikarthik"},"content":"     * @return user\u0027s age as an integer","lastModifiedDate":"2024-04-04"},{"lineNumber":186,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the age input is not an integer or if the user\u0027s age is not between","lastModifiedDate":"2024-04-04"},{"lineNumber":187,"author":{"gitId":"paturikarthik"},"content":"     *                               13 and 30 years old","lastModifiedDate":"2024-04-10"},{"lineNumber":188,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":189,"author":{"gitId":"paturikarthik"},"content":"    private static int parseAgeIndex(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":190,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":191,"author":{"gitId":"paturikarthik"},"content":"            int age \u003d Integer.parseInt(input);","lastModifiedDate":"2024-04-04"},{"lineNumber":192,"author":{"gitId":"paturikarthik"},"content":"            if (age \u003c 13 \u0026\u0026 age \u003e 0) {","lastModifiedDate":"2024-04-04"},{"lineNumber":193,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getUnderAgeMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":194,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":195,"author":{"gitId":"paturikarthik"},"content":"            if (age \u003c 0 || age \u003e 30) {","lastModifiedDate":"2024-04-10"},{"lineNumber":196,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getAgeOutOfRangeMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":197,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":198,"author":{"gitId":"paturikarthik"},"content":"            return age;","lastModifiedDate":"2024-04-04"},{"lineNumber":199,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":200,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidAgeNumberMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":201,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":202,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":203,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":204,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":205,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s goal input for an Integer and assigns the String equivalent of it","lastModifiedDate":"2024-03-31"},{"lineNumber":206,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":207,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s goal input","lastModifiedDate":"2024-03-31"},{"lineNumber":208,"author":{"gitId":"paturikarthik"},"content":"     * @return String equivalent of User\u0027s goals","lastModifiedDate":"2024-03-31"},{"lineNumber":209,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the goal input is not an integer between 1 and 7","lastModifiedDate":"2024-03-31"},{"lineNumber":210,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":211,"author":{"gitId":"paturikarthik"},"content":"    private static int parseGoalIndex(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":212,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-03-28"},{"lineNumber":213,"author":{"gitId":"paturikarthik"},"content":"            int goalNumber \u003d Integer.parseInt(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":214,"author":{"gitId":"paturikarthik"},"content":"            if (goalNumber \u003e 5 || goalNumber \u003c 1) {","lastModifiedDate":"2024-04-04"},{"lineNumber":215,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":216,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getOutOfGoalRangeMessage());","lastModifiedDate":"2024-03-31"},{"lineNumber":217,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-03-28"},{"lineNumber":218,"author":{"gitId":"paturikarthik"},"content":"            return goalNumber;","lastModifiedDate":"2024-04-04"},{"lineNumber":219,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-28"},{"lineNumber":220,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidGoalNumberMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":221,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":222,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":223,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":224,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":225,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s exercise levels input for an Integer and assigns the String equivalent of it","lastModifiedDate":"2024-03-31"},{"lineNumber":226,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":227,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s exercise levels input","lastModifiedDate":"2024-03-31"},{"lineNumber":228,"author":{"gitId":"paturikarthik"},"content":"     * @return String equivalent of User\u0027s exercise levels","lastModifiedDate":"2024-03-31"},{"lineNumber":229,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the goal input is not an integer between 1 and 5","lastModifiedDate":"2024-03-31"},{"lineNumber":230,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":231,"author":{"gitId":"paturikarthik"},"content":"    private static int parseExerciseLevels(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":232,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-03-28"},{"lineNumber":233,"author":{"gitId":"paturikarthik"},"content":"            int levelInNumber \u003d Integer.parseInt(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":234,"author":{"gitId":"paturikarthik"},"content":"            if (levelInNumber \u003c 1 || levelInNumber \u003e 5) {","lastModifiedDate":"2024-04-04"},{"lineNumber":235,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getOutOfExerciseLevelsRangeMessage());","lastModifiedDate":"2024-03-31"},{"lineNumber":236,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-03-28"},{"lineNumber":237,"author":{"gitId":"paturikarthik"},"content":"            return levelInNumber;","lastModifiedDate":"2024-04-04"},{"lineNumber":238,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-28"},{"lineNumber":239,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidExerciseLevelsNumberMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":240,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":241,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":242,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":243,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":244,"author":{"gitId":"paturikarthik"},"content":"     * Ensures that the input given by the user is in the correct order","lastModifiedDate":"2024-03-31"},{"lineNumber":245,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":246,"author":{"gitId":"paturikarthik"},"content":"     * @param weightIndex         Index of the input where user\u0027s weight is specified","lastModifiedDate":"2024-03-31"},{"lineNumber":247,"author":{"gitId":"paturikarthik"},"content":"     * @param ageIndex            Index of the input where user\u0027s age is specified","lastModifiedDate":"2024-03-31"},{"lineNumber":248,"author":{"gitId":"paturikarthik"},"content":"     * @param sexIndex            Index of the input where user\u0027s gender is specified","lastModifiedDate":"2024-03-31"},{"lineNumber":249,"author":{"gitId":"paturikarthik"},"content":"     * @param exerciseLevelsIndex Index of the input where user\u0027s exercise levels is specified in Integer form","lastModifiedDate":"2024-03-31"},{"lineNumber":250,"author":{"gitId":"paturikarthik"},"content":"     * @param goalIndex           Index of the input where user\u0027s goal is specified in Integer form","lastModifiedDate":"2024-03-31"},{"lineNumber":251,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the order of the inputs is not correct. The input should be in this order:","lastModifiedDate":"2024-03-31"},{"lineNumber":252,"author":{"gitId":"paturikarthik"},"content":"     *                               height, weight, age, gender, exercise levels and goal.","lastModifiedDate":"2024-03-31"},{"lineNumber":253,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":254,"author":{"gitId":"paturikarthik"},"content":"    private static void checkSetUpInputsCorrectOrder(int weightIndex, int ageIndex, int sexIndex,","lastModifiedDate":"2024-04-14"},{"lineNumber":255,"author":{"gitId":"paturikarthik"},"content":"                                                     int exerciseLevelsIndex,","lastModifiedDate":"2024-04-04"},{"lineNumber":256,"author":{"gitId":"paturikarthik"},"content":"                                                     int goalIndex) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":257,"author":{"gitId":"paturikarthik"},"content":"        if (!(weightIndex \u003c ageIndex \u0026\u0026 sexIndex \u003c exerciseLevelsIndex","lastModifiedDate":"2024-04-14"},{"lineNumber":258,"author":{"gitId":"paturikarthik"},"content":"                \u0026\u0026 exerciseLevelsIndex \u003c goalIndex)) {","lastModifiedDate":"2024-03-28"},{"lineNumber":259,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidNumberOfSetUpInputs());","lastModifiedDate":"2024-03-31"},{"lineNumber":260,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":261,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":262,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":263,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":264,"author":{"gitId":"paturikarthik"},"content":"     * Checks if User Setup command is empty","lastModifiedDate":"2024-03-31"},{"lineNumber":265,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":266,"author":{"gitId":"paturikarthik"},"content":"     * @param input input from user","lastModifiedDate":"2024-03-31"},{"lineNumber":267,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the command is empty","lastModifiedDate":"2024-03-31"},{"lineNumber":268,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":269,"author":{"gitId":"paturikarthik"},"content":"    private static void checkEmptyInput(String input) throws InvalidInputException {","lastModifiedDate":"2024-03-31"},{"lineNumber":270,"author":{"gitId":"paturikarthik"},"content":"        if (input.substring(LENGTH_OF_SETUP_COMMAND).trim().isEmpty()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":271,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getEmptyUserSetupInputMessage());","lastModifiedDate":"2024-03-31"},{"lineNumber":272,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":273,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":274,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":275,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":276,"author":{"gitId":"paturikarthik"},"content":"     * Parses \"user update\" command to update the relevant field of the user. Recalculates the user\u0027s calorific goal as","lastModifiedDate":"2024-04-11"},{"lineNumber":277,"author":{"gitId":"paturikarthik"},"content":"     * well.","lastModifiedDate":"2024-04-11"},{"lineNumber":278,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-11"},{"lineNumber":279,"author":{"gitId":"paturikarthik"},"content":"     * @param input input from the user","lastModifiedDate":"2024-04-11"},{"lineNumber":280,"author":{"gitId":"paturikarthik"},"content":"     * @param user  current User","lastModifiedDate":"2024-04-11"},{"lineNumber":281,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the command is empty, the update field is empty, if the field given to update","lastModifiedDate":"2024-04-11"},{"lineNumber":282,"author":{"gitId":"paturikarthik"},"content":"     *                               is unknown or if the value to update is not correct.","lastModifiedDate":"2024-04-11"},{"lineNumber":283,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":284,"author":{"gitId":"paturikarthik"},"content":"    public static void parseUpdate(String input, User user) throws InvalidInputException {","lastModifiedDate":"2024-04-10"},{"lineNumber":285,"author":{"gitId":"paturikarthik"},"content":"        checkEmptyUpdateInput(input);","lastModifiedDate":"2024-04-10"},{"lineNumber":286,"author":{"gitId":"paturikarthik"},"content":"        String fieldToUpdate \u003d input.substring(LENGTH_OF_UPDATE_COMMAND).trim();","lastModifiedDate":"2024-04-10"},{"lineNumber":287,"author":{"gitId":"paturikarthik"},"content":"        checkEmptyUpdateField(fieldToUpdate);","lastModifiedDate":"2024-04-11"},{"lineNumber":288,"author":{"gitId":"paturikarthik"},"content":"        if (fieldToUpdate.startsWith(\"name \")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":289,"author":{"gitId":"paturikarthik"},"content":"            String name \u003d parseName(fieldToUpdate.substring(LENGTH_OF_NAME).trim());","lastModifiedDate":"2024-04-10"},{"lineNumber":290,"author":{"gitId":"paturikarthik"},"content":"            user.setName(name);","lastModifiedDate":"2024-04-10"},{"lineNumber":291,"author":{"gitId":"paturikarthik"},"content":"            assert Objects.equals(user.getName(), name);","lastModifiedDate":"2024-04-11"},{"lineNumber":292,"author":{"gitId":"paturikarthik"},"content":"            printNewUserName(name);","lastModifiedDate":"2024-04-11"},{"lineNumber":293,"author":{"gitId":"paturikarthik"},"content":"        } else if (fieldToUpdate.startsWith(\"height \")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":294,"author":{"gitId":"paturikarthik"},"content":"            int height \u003d parseHeightIndex(fieldToUpdate.toLowerCase().substring(LENGTH_OF_HEIGHT).trim());","lastModifiedDate":"2024-04-15"},{"lineNumber":295,"author":{"gitId":"paturikarthik"},"content":"            user.setHeight(height);","lastModifiedDate":"2024-04-10"},{"lineNumber":296,"author":{"gitId":"paturikarthik"},"content":"            assert Objects.equals(user.getHeight(), height);","lastModifiedDate":"2024-04-11"},{"lineNumber":297,"author":{"gitId":"paturikarthik"},"content":"            printNewUserHeight(height);","lastModifiedDate":"2024-04-11"},{"lineNumber":298,"author":{"gitId":"paturikarthik"},"content":"            user.getHealthInfo();","lastModifiedDate":"2024-04-11"},{"lineNumber":299,"author":{"gitId":"paturikarthik"},"content":"            printUserCaloriesRequired(user.getCaloriesRequired());","lastModifiedDate":"2024-04-11"},{"lineNumber":300,"author":{"gitId":"paturikarthik"},"content":"        } else if (fieldToUpdate.startsWith(\"weight \")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":301,"author":{"gitId":"paturikarthik"},"content":"            int weight \u003d parseWeightIndex(fieldToUpdate.toLowerCase().substring(LENGTH_OF_WEIGHT).trim());","lastModifiedDate":"2024-04-15"},{"lineNumber":302,"author":{"gitId":"paturikarthik"},"content":"            user.setWeight(weight);","lastModifiedDate":"2024-04-10"},{"lineNumber":303,"author":{"gitId":"paturikarthik"},"content":"            assert Objects.equals(user.getWeight(), weight);","lastModifiedDate":"2024-04-11"},{"lineNumber":304,"author":{"gitId":"paturikarthik"},"content":"            printNewUserWeight(weight);","lastModifiedDate":"2024-04-11"},{"lineNumber":305,"author":{"gitId":"paturikarthik"},"content":"            user.getHealthInfo();","lastModifiedDate":"2024-04-11"},{"lineNumber":306,"author":{"gitId":"paturikarthik"},"content":"            printUserCaloriesRequired(user.getCaloriesRequired());","lastModifiedDate":"2024-04-11"},{"lineNumber":307,"author":{"gitId":"paturikarthik"},"content":"        } else if (fieldToUpdate.startsWith(\"age \")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":308,"author":{"gitId":"paturikarthik"},"content":"            int age \u003d parseAgeIndex(fieldToUpdate.toLowerCase().substring(LENGTH_OF_AGE).trim());","lastModifiedDate":"2024-04-15"},{"lineNumber":309,"author":{"gitId":"paturikarthik"},"content":"            user.setAge(age);","lastModifiedDate":"2024-04-10"},{"lineNumber":310,"author":{"gitId":"paturikarthik"},"content":"            assert Objects.equals(user.getAge(), age);","lastModifiedDate":"2024-04-11"},{"lineNumber":311,"author":{"gitId":"paturikarthik"},"content":"            printNewUserAge(age);","lastModifiedDate":"2024-04-11"},{"lineNumber":312,"author":{"gitId":"paturikarthik"},"content":"            user.getHealthInfo();","lastModifiedDate":"2024-04-11"},{"lineNumber":313,"author":{"gitId":"paturikarthik"},"content":"            printUserCaloriesRequired(user.getCaloriesRequired());","lastModifiedDate":"2024-04-11"},{"lineNumber":314,"author":{"gitId":"paturikarthik"},"content":"        } else if (fieldToUpdate.startsWith(\"exercise levels \")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":315,"author":{"gitId":"paturikarthik"},"content":"            int level \u003d parseExerciseLevels(fieldToUpdate.substring(LENGTH_OF_EXERCISE_LEVELS).trim());","lastModifiedDate":"2024-04-10"},{"lineNumber":316,"author":{"gitId":"paturikarthik"},"content":"            user.setExerciseLevels(level);","lastModifiedDate":"2024-04-10"},{"lineNumber":317,"author":{"gitId":"paturikarthik"},"content":"            assert Objects.equals(user.getExerciseLevels(), level);","lastModifiedDate":"2024-04-11"},{"lineNumber":318,"author":{"gitId":"paturikarthik"},"content":"            printNewUserExerciseLevels(user, level);","lastModifiedDate":"2024-04-11"},{"lineNumber":319,"author":{"gitId":"paturikarthik"},"content":"            user.getHealthInfo();","lastModifiedDate":"2024-04-11"},{"lineNumber":320,"author":{"gitId":"paturikarthik"},"content":"            printUserCaloriesRequired(user.getCaloriesRequired());","lastModifiedDate":"2024-04-11"},{"lineNumber":321,"author":{"gitId":"paturikarthik"},"content":"        } else if (fieldToUpdate.startsWith(\"goal \")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":322,"author":{"gitId":"paturikarthik"},"content":"            int goal \u003d parseGoalIndex(fieldToUpdate.toLowerCase().substring(LENGTH_OF_GOAL).trim());","lastModifiedDate":"2024-04-15"},{"lineNumber":323,"author":{"gitId":"paturikarthik"},"content":"            user.setGoal(goal);","lastModifiedDate":"2024-04-10"},{"lineNumber":324,"author":{"gitId":"paturikarthik"},"content":"            assert Objects.equals(user.getGoal(), goal);","lastModifiedDate":"2024-04-11"},{"lineNumber":325,"author":{"gitId":"paturikarthik"},"content":"            printNewUserGoal(user, goal);","lastModifiedDate":"2024-04-11"},{"lineNumber":326,"author":{"gitId":"paturikarthik"},"content":"            user.getHealthInfo();","lastModifiedDate":"2024-04-11"},{"lineNumber":327,"author":{"gitId":"paturikarthik"},"content":"            printUserCaloriesRequired(user.getCaloriesRequired());","lastModifiedDate":"2024-04-11"},{"lineNumber":328,"author":{"gitId":"paturikarthik"},"content":"        } else if (fieldToUpdate.startsWith(\"sex \")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":329,"author":{"gitId":"paturikarthik"},"content":"            String sex \u003d parseGenderIndex(fieldToUpdate.toLowerCase().substring(LENGTH_OF_SEX).trim());","lastModifiedDate":"2024-04-15"},{"lineNumber":330,"author":{"gitId":"paturikarthik"},"content":"            user.setSex(sex);","lastModifiedDate":"2024-04-10"},{"lineNumber":331,"author":{"gitId":"paturikarthik"},"content":"            assert Objects.equals(user.getSex(), sex);","lastModifiedDate":"2024-04-11"},{"lineNumber":332,"author":{"gitId":"paturikarthik"},"content":"            printNewUserSex(sex);","lastModifiedDate":"2024-04-11"},{"lineNumber":333,"author":{"gitId":"paturikarthik"},"content":"            user.getHealthInfo();","lastModifiedDate":"2024-04-11"},{"lineNumber":334,"author":{"gitId":"paturikarthik"},"content":"            printUserCaloriesRequired(user.getCaloriesRequired());","lastModifiedDate":"2024-04-11"},{"lineNumber":335,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-10"},{"lineNumber":336,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getUnknownUpdateMessage());","lastModifiedDate":"2024-04-11"},{"lineNumber":337,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":338,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":339,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":340,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":341,"author":{"gitId":"paturikarthik"},"content":"     * Checks if the \"user update\" command is empty","lastModifiedDate":"2024-04-11"},{"lineNumber":342,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-14"},{"lineNumber":343,"author":{"gitId":"paturikarthik"},"content":"     * @param input input from the user","lastModifiedDate":"2024-04-11"},{"lineNumber":344,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the command is empty","lastModifiedDate":"2024-04-11"},{"lineNumber":345,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":346,"author":{"gitId":"paturikarthik"},"content":"    private static void checkEmptyUpdateInput(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-10"},{"lineNumber":347,"author":{"gitId":"paturikarthik"},"content":"        if (input.substring(LENGTH_OF_UPDATE_COMMAND).trim().isBlank()) {","lastModifiedDate":"2024-04-14"},{"lineNumber":348,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getEmptyUserUpdateFieldMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":349,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":350,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":351,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":352,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-11"},{"lineNumber":353,"author":{"gitId":"paturikarthik"},"content":"     * Checks if the field to update is empty","lastModifiedDate":"2024-04-11"},{"lineNumber":354,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-14"},{"lineNumber":355,"author":{"gitId":"paturikarthik"},"content":"     * @param input input from the user","lastModifiedDate":"2024-04-11"},{"lineNumber":356,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the field is empty","lastModifiedDate":"2024-04-11"},{"lineNumber":357,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-11"},{"lineNumber":358,"author":{"gitId":"paturikarthik"},"content":"    private static void checkEmptyUpdateField(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-11"},{"lineNumber":359,"author":{"gitId":"paturikarthik"},"content":"        if (input.trim().isEmpty()) {","lastModifiedDate":"2024-04-11"},{"lineNumber":360,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getEmptyUserUpdateFieldMessage());","lastModifiedDate":"2024-04-11"},{"lineNumber":361,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-11"},{"lineNumber":362,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":363,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":364,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"paturikarthik":364}},{"path":"src/main/java/seedu/lifetrack/system/storage/CaloriesFileHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.storage;","lastModifiedDate":"2024-04-13"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import java.io.File;","lastModifiedDate":"2024-04-13"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-04-13"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-04-13"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-04-13"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-04-13"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-04-13"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.FileHandlerException;","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileCaloriesTooFewFieldsMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileTooFewMacrosMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileCaloriesTooManyFieldsMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidCaloriesMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidCarbsMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidEntryIDMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidEntryTypeMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidFatsMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidProteinsMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileMacrosInOutputMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidDateMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"public class CaloriesFileHandler extends FileHandler {","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    //class-level member for lastEntryID calories","lastModifiedDate":"2024-04-13"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"    public static int maxCaloriesID \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    //calorie list constants","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"    private final int ENTRY_TYPE_INDEX \u003d 3;","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"    private final int CALORIES_INDEX \u003d 4;","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"    private final int CARBOHYDRATES_INDEX \u003d 5;","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"    private final int PROTEINS_INDEX \u003d 6;","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    private final int FATS_INDEX \u003d 7;","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"    public CaloriesFileHandler(String filePath) {","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"        super(filePath);","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    protected void checkCorrectNumberOfFields(int lineNumber, int dataLength) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"        if (dataLength \u003c 5) {","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileCaloriesTooFewFieldsMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"        } else if (dataLength \u003e 8) {","lastModifiedDate":"2024-04-14"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileCaloriesTooManyFieldsMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"    private void calculateMaxCaloriesEntry(int entryID) {","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"        if (entryID \u003e maxCaloriesID) {","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"            maxCaloriesID \u003d entryID;","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"    private void checkCaloriesIsPositive(int lineNumber, int calories) throws FileHandlerException {","lastModifiedDate":"2024-04-13"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"        if (calories \u003c\u003d 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidCaloriesMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"    private void checkMacrosArePositive(int lineNumber, int carbs, int proteins, int fats)","lastModifiedDate":"2024-04-13"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"            throws FileHandlerException {","lastModifiedDate":"2024-04-13"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"        if (carbs \u003c\u003d 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidCarbsMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"        } else if (proteins \u003c\u003d 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidProteinsMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"        } else if (fats \u003c\u003d 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidFatsMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"    private void checkValidEntryType(int lineNumber, String entryType, int dataLength) throws FileHandlerException {","lastModifiedDate":"2024-04-13"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"        if (!(entryType.equals(\"C_IN\") || entryType.equals(\"C_OUT\"))) {","lastModifiedDate":"2024-04-13"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidEntryTypeMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"        ","lastModifiedDate":"2024-04-13"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"        if (entryType.equals(\"C_IN\") \u0026\u0026 dataLength !\u003d 8 \u0026\u0026 dataLength !\u003d 5) {","lastModifiedDate":"2024-04-14"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileTooFewMacrosMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"        } else if (entryType.equals(\"C_OUT\") \u0026\u0026 dataLength !\u003d 5) {","lastModifiedDate":"2024-04-13"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileMacrosInOutputMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"    private void getSingleCalorieEntry(ArrayList\u003cEntry\u003e entries, String[] words, int lineNumber) ","lastModifiedDate":"2024-04-14"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"            throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"        checkCorrectNumberOfFields(lineNumber, words.length);","lastModifiedDate":"2024-04-14"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"        int entryID \u003d Integer.parseInt(words[ENTRYID_INDEX].trim());","lastModifiedDate":"2024-04-13"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"        checkPositiveEntryID(lineNumber, entryID);","lastModifiedDate":"2024-04-15"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"        calculateMaxCaloriesEntry(entryID);","lastModifiedDate":"2024-04-13"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"        LocalDate date \u003d LocalDate.parse(words[DATE_INDEX].trim());","lastModifiedDate":"2024-04-13"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"        checkDateNotLaterThanCurrent(lineNumber, date);","lastModifiedDate":"2024-04-14"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"        String description \u003d words[DESCRIPTION_INDEX].trim();","lastModifiedDate":"2024-04-13"},{"lineNumber":97,"author":{"gitId":"owx0130"},"content":"        checkNonEmptyDescription(lineNumber, description);","lastModifiedDate":"2024-04-14"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"        int calories \u003d Integer.parseInt(words[CALORIES_INDEX].trim());","lastModifiedDate":"2024-04-13"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"        checkCaloriesIsPositive(lineNumber, calories);","lastModifiedDate":"2024-04-14"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"        String entryType \u003d words[ENTRY_TYPE_INDEX].trim();","lastModifiedDate":"2024-04-13"},{"lineNumber":101,"author":{"gitId":"owx0130"},"content":"        checkValidEntryType(lineNumber, entryType, words.length);","lastModifiedDate":"2024-04-14"},{"lineNumber":102,"author":{"gitId":"owx0130"},"content":"        if (entryType.equals(\"C_IN\") \u0026\u0026 words.length \u003d\u003d 8) {","lastModifiedDate":"2024-04-13"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"            int carbohydrates \u003d Integer.parseInt(words[CARBOHYDRATES_INDEX].trim());","lastModifiedDate":"2024-04-13"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"            int proteins \u003d Integer.parseInt(words[PROTEINS_INDEX].trim());","lastModifiedDate":"2024-04-13"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"            int fats \u003d Integer.parseInt(words[FATS_INDEX].trim());","lastModifiedDate":"2024-04-13"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"            Food food \u003d new Food(carbohydrates, proteins, fats);","lastModifiedDate":"2024-04-13"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"            checkMacrosArePositive(lineNumber, carbohydrates, proteins, fats);","lastModifiedDate":"2024-04-14"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"            entries.add(new InputEntry(entryID, description, calories, date, food));","lastModifiedDate":"2024-04-13"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"        } else if (entryType.equals(\"C_IN\")) {","lastModifiedDate":"2024-04-13"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"            entries.add(new InputEntry(entryID, description, calories, date));","lastModifiedDate":"2024-04-13"},{"lineNumber":111,"author":{"gitId":"owx0130"},"content":"        } else {","lastModifiedDate":"2024-04-13"},{"lineNumber":112,"author":{"gitId":"owx0130"},"content":"            entries.add(new OutputEntry(entryID, description, calories, date));","lastModifiedDate":"2024-04-13"},{"lineNumber":113,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":114,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":115,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":116,"author":{"gitId":"owx0130"},"content":"    public ArrayList\u003cEntry\u003e getCalorieEntriesFromFile() throws FileNotFoundException {","lastModifiedDate":"2024-04-14"},{"lineNumber":117,"author":{"gitId":"owx0130"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":118,"author":{"gitId":"owx0130"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-04-14"},{"lineNumber":119,"author":{"gitId":"owx0130"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-14"},{"lineNumber":120,"author":{"gitId":"owx0130"},"content":"        String line \u003d \"\";","lastModifiedDate":"2024-04-14"},{"lineNumber":121,"author":{"gitId":"owx0130"},"content":"        int i \u003d 1;","lastModifiedDate":"2024-04-14"},{"lineNumber":122,"author":{"gitId":"owx0130"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-04-14"},{"lineNumber":123,"author":{"gitId":"owx0130"},"content":"            line \u003d s.nextLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":124,"author":{"gitId":"owx0130"},"content":"            String[] words \u003d line.split(\";\");","lastModifiedDate":"2024-04-14"},{"lineNumber":125,"author":{"gitId":"owx0130"},"content":"            try {","lastModifiedDate":"2024-04-14"},{"lineNumber":126,"author":{"gitId":"owx0130"},"content":"                getSingleCalorieEntry(entries, words, i);","lastModifiedDate":"2024-04-14"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":128,"author":{"gitId":"owx0130"},"content":"                if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[ENTRYID_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-13"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"                    System.out.println(getFileInvalidEntryIDMessage(i, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":130,"author":{"gitId":"owx0130"},"content":"                } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[CALORIES_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-13"},{"lineNumber":131,"author":{"gitId":"owx0130"},"content":"                    System.out.println(getFileInvalidCaloriesMessage(i, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":132,"author":{"gitId":"owx0130"},"content":"                } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[CARBOHYDRATES_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-13"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"                    System.out.println(getFileInvalidCarbsMessage(i, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":134,"author":{"gitId":"owx0130"},"content":"                } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[PROTEINS_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-13"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"                    System.out.println(getFileInvalidProteinsMessage(i, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"                } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[FATS_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-13"},{"lineNumber":137,"author":{"gitId":"owx0130"},"content":"                    System.out.println(getFileInvalidFatsMessage(i, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":138,"author":{"gitId":"owx0130"},"content":"                }","lastModifiedDate":"2024-04-13"},{"lineNumber":139,"author":{"gitId":"owx0130"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":140,"author":{"gitId":"owx0130"},"content":"                System.out.println(getFileInvalidDateMessage(i, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":141,"author":{"gitId":"owx0130"},"content":"            } catch (FileHandlerException e) {","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"owx0130"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"owx0130"},"content":"            } finally {","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"owx0130"},"content":"                i++;","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-13"},{"lineNumber":146,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":147,"author":{"gitId":"owx0130"},"content":"        s.close();","lastModifiedDate":"2024-04-13"},{"lineNumber":148,"author":{"gitId":"owx0130"},"content":"        return entries;","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-13"}],"authorContributionMap":{"owx0130":150}},{"path":"src/main/java/seedu/lifetrack/system/storage/FileHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.storage;","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.FileHandlerException;","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileDateLaterThanCurrentMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileEmptyDescriptionMessage;","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidEntryIDMessage;","lastModifiedDate":"2024-04-15"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"public class FileHandler {","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    //general list constants","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    protected final int ENTRYID_INDEX \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    protected final int DATE_INDEX \u003d 1;","lastModifiedDate":"2024-04-13"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    protected final int DESCRIPTION_INDEX \u003d 2;","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    //NumberFormatException exception message prefix","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    protected final String NF_EXCEPTION_PREFIX \u003d \"For input string: \\\"\";","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    //error message for IO exception","lastModifiedDate":"2024-04-10"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    protected final String message \u003d \"\\t Unable to write to file!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    protected String filePath;","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    public FileHandler(String filePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"    protected void checkDateNotLaterThanCurrent(int lineNumber, LocalDate date) throws FileHandlerException {","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"        if (date.isAfter(LocalDate.now())) {","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileDateLaterThanCurrentMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"    protected void checkNonEmptyDescription(int lineNumber, String description) throws FileHandlerException {","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileEmptyDescriptionMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"    protected void checkPositiveEntryID(int lineNumber, int entryID) throws FileHandlerException {","lastModifiedDate":"2024-04-15"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"        if (entryID \u003c\u003d 0) {","lastModifiedDate":"2024-04-15"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidEntryIDMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-15"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-15"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-15"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-15"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"    public void writeToFile(String textToAdd) throws IOException {","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"        fw.close();","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"    public void writeEntries(ArrayList\u003cEntry\u003e entries) {","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"            String newData \u003d \"\";","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"            for (Entry entry : entries) {","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"                newData +\u003d entry.toFileFriendlyString() + System.lineSeparator();","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"            writeToFile(newData);","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"            System.out.println(message);","lastModifiedDate":"2024-04-10"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"owx0130":70}},{"path":"src/main/java/seedu/lifetrack/system/storage/HydrationFileHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.storage;","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import java.io.File;","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationEntry;","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.FileHandlerException;","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidEntryIDMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidVolumeMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileHydrationTooFewFieldsMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileHydrationTooManyFieldsMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidDateMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"public class HydrationFileHandler extends FileHandler {","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    //class-level member for lastEntryID calories","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    public static int maxHydrationID \u003d 0;","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    //hydration list constants","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    private final int VOLUME_INDEX \u003d 3;","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    public HydrationFileHandler(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        super(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    private void calculateMaxHydrationEntry(int entryID) {","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"        if (entryID \u003e maxHydrationID) {","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"            maxHydrationID \u003d entryID;","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    private void checkCorrectNumberOfFields(int lineNumber, int dataLength) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        if (dataLength \u003c 4) {","lastModifiedDate":"2024-04-14"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileHydrationTooFewFieldsMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"        } else if (dataLength \u003e 4) {","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileHydrationTooManyFieldsMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"    private void checkVolumeIsPositive(int lineNumber, int volume) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"        if (volume \u003c\u003d 0) {","lastModifiedDate":"2024-04-14"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidVolumeMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"    private void getSingleHydrationEntry(ArrayList\u003cEntry\u003e entries, String[] words, int lineNumber)","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"            throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"        checkCorrectNumberOfFields(lineNumber, words.length);","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"        int entryID \u003d Integer.parseInt(words[ENTRYID_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"        checkPositiveEntryID(lineNumber, entryID);","lastModifiedDate":"2024-04-15"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"        calculateMaxHydrationEntry(entryID);","lastModifiedDate":"2024-04-14"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"        LocalDate date \u003d LocalDate.parse(words[DATE_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"        checkDateNotLaterThanCurrent(lineNumber, date);","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"        String description \u003d words[DESCRIPTION_INDEX];","lastModifiedDate":"2024-04-14"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"        checkNonEmptyDescription(lineNumber, description);","lastModifiedDate":"2024-04-14"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"        int volume \u003d Integer.parseInt(words[VOLUME_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"        checkVolumeIsPositive(lineNumber, volume);","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"        entries.add(new HydrationEntry(entryID, description, volume, date));","lastModifiedDate":"2024-04-14"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"    public ArrayList\u003cEntry\u003e getHydrationEntriesFromFile() throws FileNotFoundException {","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-04-14"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-14"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"        String line \u003d \"\";","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"        int i \u003d 1;","lastModifiedDate":"2024-04-14"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-04-14"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"            line \u003d s.nextLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"            String[] words \u003d line.split(\";\");","lastModifiedDate":"2024-04-14"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"            try {","lastModifiedDate":"2024-04-14"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"                getSingleHydrationEntry(entries, words, i);","lastModifiedDate":"2024-04-14"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"                if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[ENTRYID_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"                    System.out.println(getFileInvalidEntryIDMessage(i, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"                } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[VOLUME_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"                    System.out.println(getFileInvalidVolumeMessage(i, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"                }","lastModifiedDate":"2024-04-14"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"                System.out.println(getFileInvalidDateMessage(i, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"            } catch (FileHandlerException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"            } finally {","lastModifiedDate":"2024-04-14"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"                i++;","lastModifiedDate":"2024-04-14"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"        s.close();","lastModifiedDate":"2024-04-14"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"        return entries;","lastModifiedDate":"2024-04-14"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"owx0130":96}},{"path":"src/main/java/seedu/lifetrack/system/storage/SleepFileHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.storage;","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import java.io.File;","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepEntry;","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.FileHandlerException;","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidEntryIDMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileSleepTooFewFieldsMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileSleepTooManyFieldsMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidDateMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidDurationMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"public class SleepFileHandler extends FileHandler {","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    //sleep list constants","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    private final int DURATION_INDEX \u003d 2;","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    public SleepFileHandler(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"        super(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"    private void checkCorrectNumberOfFields(int lineNumber, int dataLength) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"        if (dataLength \u003c 3) {","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileSleepTooFewFieldsMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"        } else if (dataLength \u003e 3) {","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileSleepTooManyFieldsMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"    private void checkDurationIsPositive(int lineNumber, double duration) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"        if (duration \u003c\u003d 0) {","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidDurationMessage(lineNumber, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"    private void getSingleSleepEntry(ArrayList\u003cEntry\u003e entries, String[] words, int lineNumber)","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"            throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"        checkCorrectNumberOfFields(lineNumber, words.length);","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"        int entryID \u003d Integer.parseInt(words[ENTRYID_INDEX]);","lastModifiedDate":"2024-04-15"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"        checkPositiveEntryID(lineNumber, entryID);","lastModifiedDate":"2024-04-15"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"        LocalDate date \u003d LocalDate.parse(words[DATE_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        checkDateNotLaterThanCurrent(lineNumber, date);","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"        double duration \u003d Double.parseDouble(words[DURATION_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"        checkDurationIsPositive(lineNumber, duration);","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"        entries.add(new SleepEntry(entryID, duration, date));","lastModifiedDate":"2024-04-15"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"    public ArrayList\u003cEntry\u003e getSleepEntriesFromFile() throws FileNotFoundException {","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-04-14"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-14"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"        String line \u003d \"\";","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"        int i \u003d 1;","lastModifiedDate":"2024-04-14"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-04-14"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"            line \u003d s.nextLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"            String[] words \u003d line.split(\";\");","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"            try {","lastModifiedDate":"2024-04-14"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"                getSingleSleepEntry(entries, words, i);","lastModifiedDate":"2024-04-14"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"                if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[ENTRYID_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"                    System.out.println(getFileInvalidEntryIDMessage(i, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"                } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[DURATION_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"                    System.out.println(getFileInvalidDurationMessage(i, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"                }","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"                System.out.println(getFileInvalidDateMessage(i, filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"            } catch (FileHandlerException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"            } finally {","lastModifiedDate":"2024-04-14"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"                i++;","lastModifiedDate":"2024-04-14"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"        s.close();","lastModifiedDate":"2024-04-14"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"        return entries;","lastModifiedDate":"2024-04-14"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"owx0130":84}},{"path":"src/main/java/seedu/lifetrack/system/storage/UserFileHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.storage;","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidAgeMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidExerciseLevelMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidGoalMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidHeightMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidReqCalMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidSexMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileInvalidWeightMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileUserEmptyNameMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileUserTooFewFieldsMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.FileHandlerExceptionMessage.getFileUserTooManyFieldsMessage;","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"import java.io.File;","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"import java.io.IOException;","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.FileHandlerException;","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"public class UserFileHandler extends FileHandler {","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    //user data constants","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    private final int NAME_INDEX \u003d 0;","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    private final int HEIGHT_INDEX \u003d 1;","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    private final int WEIGHT_INDEX \u003d 2;","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"    private final int AGE_INDEX \u003d 3;","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    private final int SEX_INDEX \u003d 4;","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"    private final int EXERCISE_LEVEL_INDEX \u003d 5;","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    private final int GOAL_INDEX \u003d 6;","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    private final int REQ_CAL_INDEX \u003d 7;","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"    public UserFileHandler(String filePath) {","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"        super(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"    private void checkCorrectNumberOfFields(int dataLength) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        if (dataLength \u003c 8) {","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileUserTooFewFieldsMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"        } else if (dataLength \u003e 8) {","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileUserTooManyFieldsMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"    private void checkNonEmptyName(String name) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"        if (name.equals(\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileUserEmptyNameMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"    private void checkValidHeight(int height) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"        if (!(height \u003e\u003d 90 \u0026\u0026 height \u003c\u003d 225)) {","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidHeightMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"    private void checkValidWeight(int weight) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"        if (!(weight \u003e\u003d 30 \u0026\u0026 weight \u003c\u003d 200)) {","lastModifiedDate":"2024-04-14"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidWeightMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"    private void checkValidAge(int age) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"        if (!(age \u003e\u003d 13 \u0026\u0026 age \u003c\u003d 30)) {","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidAgeMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"    private void checkValidSex(String sex) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"        if (!(sex.equals(\"male\") || sex.equals(\"female\"))) {","lastModifiedDate":"2024-04-14"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidSexMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"    private void checkValidExerciseLevel(int exerciseLevel) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"        if (!(exerciseLevel \u003e\u003d 1 \u0026\u0026 exerciseLevel \u003c\u003d 5)) {","lastModifiedDate":"2024-04-14"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidExerciseLevelMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"    private void checkValidGoal(int goal) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"        if (!(goal \u003e\u003d 1 \u0026\u0026 goal \u003c\u003d 5)) {","lastModifiedDate":"2024-04-14"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidGoalMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"    private void checkReqCalIsPositive(int requiredCals) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"        if (requiredCals \u003c\u003d 0) {","lastModifiedDate":"2024-04-14"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"            throw new FileHandlerException(getFileInvalidReqCalMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"    private void extractUserData(ArrayList\u003cString\u003e data, String[] words) throws FileHandlerException {","lastModifiedDate":"2024-04-14"},{"lineNumber":97,"author":{"gitId":"owx0130"},"content":"        checkCorrectNumberOfFields(words.length);","lastModifiedDate":"2024-04-14"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"        String name \u003d words[NAME_INDEX];","lastModifiedDate":"2024-04-14"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"        checkNonEmptyName(name);","lastModifiedDate":"2024-04-14"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"        int height \u003d Integer.parseInt(words[HEIGHT_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":101,"author":{"gitId":"owx0130"},"content":"        checkValidHeight(height);","lastModifiedDate":"2024-04-14"},{"lineNumber":102,"author":{"gitId":"owx0130"},"content":"        int weight \u003d Integer.parseInt(words[WEIGHT_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"        checkValidWeight(weight);","lastModifiedDate":"2024-04-14"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"        int age \u003d Integer.parseInt(words[AGE_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"        checkValidAge(age);","lastModifiedDate":"2024-04-14"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"        String sex \u003d words[SEX_INDEX];","lastModifiedDate":"2024-04-14"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"        checkValidSex(sex);","lastModifiedDate":"2024-04-14"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"        int exerciseLevel \u003d Integer.parseInt(words[EXERCISE_LEVEL_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"        checkValidExerciseLevel(exerciseLevel);","lastModifiedDate":"2024-04-14"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"        int goal \u003d Integer.parseInt(words[GOAL_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":111,"author":{"gitId":"owx0130"},"content":"        checkValidGoal(goal);","lastModifiedDate":"2024-04-14"},{"lineNumber":112,"author":{"gitId":"owx0130"},"content":"        int requiredCals \u003d Integer.parseInt(words[REQ_CAL_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":113,"author":{"gitId":"owx0130"},"content":"        checkReqCalIsPositive(requiredCals);","lastModifiedDate":"2024-04-14"},{"lineNumber":114,"author":{"gitId":"owx0130"},"content":"        data.add(words[NAME_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":115,"author":{"gitId":"owx0130"},"content":"        data.add(words[HEIGHT_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":116,"author":{"gitId":"owx0130"},"content":"        data.add(words[WEIGHT_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":117,"author":{"gitId":"owx0130"},"content":"        data.add(words[AGE_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":118,"author":{"gitId":"owx0130"},"content":"        data.add(words[SEX_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":119,"author":{"gitId":"owx0130"},"content":"        data.add(words[EXERCISE_LEVEL_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":120,"author":{"gitId":"owx0130"},"content":"        data.add(words[GOAL_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":121,"author":{"gitId":"owx0130"},"content":"        data.add(words[REQ_CAL_INDEX]);","lastModifiedDate":"2024-04-14"},{"lineNumber":122,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":123,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":124,"author":{"gitId":"owx0130"},"content":"    public ArrayList\u003cString\u003e getUserDataFromFile() throws FileNotFoundException {","lastModifiedDate":"2024-04-14"},{"lineNumber":125,"author":{"gitId":"owx0130"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":126,"author":{"gitId":"owx0130"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-04-14"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-14"},{"lineNumber":128,"author":{"gitId":"owx0130"},"content":"        String line \u003d s.nextLine();","lastModifiedDate":"2024-04-14"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"        String[] words \u003d line.split(\";\");","lastModifiedDate":"2024-04-14"},{"lineNumber":130,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":131,"author":{"gitId":"owx0130"},"content":"            extractUserData(data, words);","lastModifiedDate":"2024-04-14"},{"lineNumber":132,"author":{"gitId":"owx0130"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"            if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[HEIGHT_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":134,"author":{"gitId":"owx0130"},"content":"                System.out.println(getFileInvalidHeightMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"            } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[WEIGHT_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"                System.out.println(getFileInvalidWeightMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":137,"author":{"gitId":"owx0130"},"content":"            } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[AGE_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":138,"author":{"gitId":"owx0130"},"content":"                System.out.println(getFileInvalidAgeMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":139,"author":{"gitId":"owx0130"},"content":"            } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[EXERCISE_LEVEL_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":140,"author":{"gitId":"owx0130"},"content":"                System.out.println(getFileInvalidExerciseLevelMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":141,"author":{"gitId":"owx0130"},"content":"            } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[GOAL_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":142,"author":{"gitId":"owx0130"},"content":"                System.out.println(getFileInvalidGoalMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":143,"author":{"gitId":"owx0130"},"content":"            } else if (e.getMessage().equals(NF_EXCEPTION_PREFIX + words[REQ_CAL_INDEX] + \"\\\"\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":144,"author":{"gitId":"owx0130"},"content":"                System.out.println(getFileInvalidReqCalMessage(filePath));","lastModifiedDate":"2024-04-14"},{"lineNumber":145,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":146,"author":{"gitId":"owx0130"},"content":"        } catch (FileHandlerException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":147,"author":{"gitId":"owx0130"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":148,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":149,"author":{"gitId":"owx0130"},"content":"        s.close();","lastModifiedDate":"2024-04-14"},{"lineNumber":150,"author":{"gitId":"owx0130"},"content":"        return data;","lastModifiedDate":"2024-04-14"},{"lineNumber":151,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":152,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":153,"author":{"gitId":"owx0130"},"content":"    public void writeUserData(User user) {","lastModifiedDate":"2024-04-14"},{"lineNumber":154,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":155,"author":{"gitId":"owx0130"},"content":"            writeToFile(user.toFileFriendlyString());","lastModifiedDate":"2024-04-14"},{"lineNumber":156,"author":{"gitId":"owx0130"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":157,"author":{"gitId":"owx0130"},"content":"            System.out.println(message);","lastModifiedDate":"2024-04-14"},{"lineNumber":158,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":159,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":160,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"owx0130":160}},{"path":"src/main/java/seedu/lifetrack/ui/CalorieListUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"//@@author rexyyong","lastModifiedDate":"2024-04-08"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"public class CalorieListUi {","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"    private static final String CALORIES_DELETE_SAMPLE_INPUT \u003d \"\\t Example input: calories delete CALORIES_ID\";","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"    public static void successfulDeletedMessage(Entry toDelete) {","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\\t The following calorie record has been successfully deleted!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\\t \" + toDelete.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"    public static void unsuccessfulDeletedMessage(int entryID) {","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\\t The following calorie record corresponding to caloriesID \" + entryID + \" could \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"                \"not be found\\n\" + \"\\t Refer to calories list to see valid caloriesIDs.\");","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"    public static void emptyCalorieList() {","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\\t There is nothing to delete as the calorie list is empty!\");","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"    public static void emptyListMessage() {","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\\t Your caloric list is empty. Add new entries to populate your list :)\");","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"    public static void emptyFoundListMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\\t There were no matches to your search!\");","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author a-wild-chocolate","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String deleteLogIndexMessage() {","lastModifiedDate":"2024-03-25"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Sorry, this index is invalid. Please enter a positive integer within the size of the list.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"    ","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String deleteLogNumberMessage() {","lastModifiedDate":"2024-03-25"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Please enter a valid positive integer within the range of all caloriesID \" +","lastModifiedDate":"2024-04-15"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"                \"shown in the calories list.\\n\" +","lastModifiedDate":"2024-04-15"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"                CALORIES_DELETE_SAMPLE_INPUT;","lastModifiedDate":"2024-04-10"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"    public static void calorieListHeader() {","lastModifiedDate":"2024-03-21"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Your Caloric List:\");","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"    public static void calorieListFoundHeader() {","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Caloric List based on your search:\");","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"    public static void outputCalorieListHeader() {","lastModifiedDate":"2024-04-09"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\");","lastModifiedDate":"2024-04-09"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\\t Your Caloric Outflow List:\");","lastModifiedDate":"2024-04-10"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"    public static void inputCalorieListHeader() {","lastModifiedDate":"2024-04-09"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\");","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\\t Your Caloric Inflow List:\");","lastModifiedDate":"2024-04-10"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewCalorieEntry(Entry newEntry) {","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t The following entry has been added to your caloric list!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t \" + newEntry.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"rexyyong":38,"a-wild-chocolate":11,"paturikarthik":12}},{"path":"src/main/java/seedu/lifetrack/ui/HydrationListUI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"//@@author shawnpong","lastModifiedDate":"2024-04-11"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-24"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"public class HydrationListUI {","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"    public static void successfulDeletedMessage(Entry toDelete) {","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t The following hydration record has been successfully deleted!\");","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t \" + toDelete.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"    public static void unsuccessfulDeletedMessage(int entryID) {","lastModifiedDate":"2024-04-09"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t The following hydration record corresponding to hydrationID \" + entryID + \" could \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"                \"not be found\");","lastModifiedDate":"2024-04-09"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-09"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"    public static void emptyListMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t Your hydration list is empty. Add new entries to populate your list :)\");","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"    public static void emptyFoundListMessage() {","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t There were no matches to your search!\");","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"    public static void hydrationListFoundHeader() {","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t Hydration List based on your search:\");","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"    public static String deleteLogIndexMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"        return \"\\t Sorry, this index is invalid. Please enter a positive integer within the size of the list.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"    public static String deleteLogNumberMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"        return \"\\t Please enter a valid hydrationID!\";","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"    public static void hydrationListHeader() {","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t Your Hydration List:\");","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"    public static void printNewHydrationEntry(Entry newEntry) {","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t The following entry has been added to your hydration list!\");","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t \" + newEntry.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-12"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"    public static void emptyHydrationList() {","lastModifiedDate":"2024-04-12"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t There is nothing to delete as the hydration list is empty!\");","lastModifiedDate":"2024-04-12"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-12"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-24"}],"authorContributionMap":{"shawnpong":47}},{"path":"src/main/java/seedu/lifetrack/ui/SleepListUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"//@@author a-wild-chocolate","lastModifiedDate":"2024-04-09"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"public class SleepListUi {","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"    public static void successfulDeletedMessage(Entry toDelete) {","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"        System.out.println(\"\\t The following sleep record has been successfully deleted!\");","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"        System.out.println(\"\\t \" + toDelete.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"    public static void emptyListMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"        System.out.println(\"\\t Your sleep list is empty. Add new entries to populate your list :)\");","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String deleteLogIndexMessage() {","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Sorry, this index is invalid. Please enter a positive integer within the sleep id of the list.\";","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String deleteLogNumberMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Please enter a valid index!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"    public static void sleepListHeader() {","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"        System.out.println(\"\\t Your Sleep List:\");","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"    public static void printNewSleepEntry(Entry newEntry) {","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"        System.out.println(\"\\t The following entry has been added to your sleep list!\");","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"        System.out.println(\"\\t \" + newEntry.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"//@@author","lastModifiedDate":"2024-04-09"}],"authorContributionMap":{"a-wild-chocolate":34}},{"path":"src/main/java/seedu/lifetrack/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"//@@author paturikarthik","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-19"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationList;","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepList;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printNoUserYetMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":" * Reads user input from the console and processes it.","lastModifiedDate":"2024-03-13"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-03-15"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":" * This method continuously reads input from the console until the user","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":" * inputs \"bye\". For each input line, it checks if it\u0027s empty and prompts","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":" * the user to enter a non-empty input if it is. If the input line starts","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":" * with \"calories in\", it attempts to parse the input as calorie intake","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":" * information using the calorieIn method from the CalorieList class.","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"public class Ui {","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"    private static final String WHITESPACE \u003d \"         \";","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"    private static final String logo \u003d","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"            \"\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"                    \".____    .__  _____        ___________                     __\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"                    \"|    |   |__|/ ____\\\\____   \\\\__    ___/___________    ____ |  | __\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"                    \"|    |   |  \\\\   __\\\\/ __ \\\\    |    |  \\\\_  __ \\\\__  \\\\ _/ ___\\\\|  |/ /\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"                    \"|    |___|  ||  | \\\\  ___/    |    |   |  | \\\\// __ \\\\\\\\  \\\\___|    \u003c\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"                    \"|_______ \\\\__||__|  \\\\___  \u003e   |____|   |__|  (____  /\\\\___  \u003e__|_ \\\\\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"                    \"        \\\\/             \\\\/                        \\\\/     \\\\/     \\\\/\\n\";","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"     * Reads in the input from the user","lastModifiedDate":"2024-03-24"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"     * @param calorieList   list containing all entries pertinent to calories","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"     * @param hydrationList list containing all entries pertinent to liquids","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"    public static void readUserInput(CalorieList calorieList, HydrationList hydrationList,","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"                                     User user, SleepList sleepList) {","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"        String line;","lastModifiedDate":"2024-03-13"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"        do {","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"            line \u003d new Scanner(System.in).nextLine();","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"            handleUserInput(line, calorieList, hydrationList, user, sleepList);","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"        } while (!line.equalsIgnoreCase(\"bye\"));","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"     * handles input from the user","lastModifiedDate":"2024-03-24"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-10"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"     * @param line        input from the user","lastModifiedDate":"2024-03-24"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"     * @param calorieList list containing all entries pertinent to calories","lastModifiedDate":"2024-03-24"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"    public static void handleCaloriesInput(String line, CalorieList calorieList) {","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"        assert !line.startsWith(\"bye\") : \"exit the app\";","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"        if (line.startsWith(\"calories in \") || line.startsWith(\"calories out \")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"            calorieList.addEntry(line);","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.equals(\"calories list\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"            calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"calories delete \")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"            calorieList.deleteEntry(line);","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"calories find \")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"            calorieList.findEntries(line);","lastModifiedDate":"2024-04-14"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"            handleUnknownInput(line);","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"    public static void handleHydrationInput(String line, HydrationList hydrationList) {","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"        assert !line.startsWith(\"bye\") : \"exit the app\";","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"        if (line.startsWith(\"hydration in \")) {","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"            hydrationList.addEntry(line);","lastModifiedDate":"2024-03-28"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.equals(\"hydration list\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"            hydrationList.printHydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"hydration delete \")) {","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"            hydrationList.deleteEntry(line);","lastModifiedDate":"2024-03-28"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"hydration find \")){","lastModifiedDate":"2024-04-14"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"            hydrationList.findEntries(line);","lastModifiedDate":"2024-04-14"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"            handleUnknownInput(line);","lastModifiedDate":"2024-04-14"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"paturikarthik"},"content":"    //@@author","lastModifiedDate":"2024-04-10"},{"lineNumber":86,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":87,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author a-wild-chocolate","lastModifiedDate":"2024-04-09"},{"lineNumber":88,"author":{"gitId":"a-wild-chocolate"},"content":"    public static void handleSleepInput(String line, SleepList sleepList) {","lastModifiedDate":"2024-03-26"},{"lineNumber":89,"author":{"gitId":"a-wild-chocolate"},"content":"        assert !line.startsWith(\"bye\") : \"exit the app\";","lastModifiedDate":"2024-03-26"},{"lineNumber":90,"author":{"gitId":"a-wild-chocolate"},"content":"        if (line.startsWith(\"sleep add \")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":91,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList.addSleep(line);","lastModifiedDate":"2024-03-26"},{"lineNumber":92,"author":{"gitId":"a-wild-chocolate"},"content":"        } else if (line.equals(\"sleep list\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":93,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList.printSleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":94,"author":{"gitId":"a-wild-chocolate"},"content":"        } else if (line.startsWith(\"sleep delete \")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":95,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList.deleteSleep(line);","lastModifiedDate":"2024-03-26"},{"lineNumber":96,"author":{"gitId":"a-wild-chocolate"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"a-wild-chocolate"},"content":"            handleUnknownInput(line);","lastModifiedDate":"2024-04-14"},{"lineNumber":98,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author","lastModifiedDate":"2024-04-09"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"    //@@author paturikarthik","lastModifiedDate":"2024-04-10"},{"lineNumber":103,"author":{"gitId":"paturikarthik"},"content":"    public static void handleUserInput(String line, CalorieList calorieList, HydrationList hydrationList,","lastModifiedDate":"2024-03-28"},{"lineNumber":104,"author":{"gitId":"paturikarthik"},"content":"                                       User user, SleepList sleepList) {","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"paturikarthik"},"content":"        if (!line.trim().equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":106,"author":{"gitId":"paturikarthik"},"content":"            printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"            line \u003d line.trim();","lastModifiedDate":"2024-04-15"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"            if (line.isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"                printEmptyInputMessage();","lastModifiedDate":"2024-03-21"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"calories\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"                handleCaloriesInput(line.toLowerCase(), calorieList);","lastModifiedDate":"2024-04-15"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.equalsIgnoreCase(\"help\")) {","lastModifiedDate":"2024-04-15"},{"lineNumber":113,"author":{"gitId":"paturikarthik"},"content":"                showHelp();","lastModifiedDate":"2024-03-21"},{"lineNumber":114,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"hydration\")) {","lastModifiedDate":"2024-03-27"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"                handleHydrationInput(line.toLowerCase(), hydrationList);","lastModifiedDate":"2024-04-15"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"sleep\")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"                handleSleepInput(line.toLowerCase(), sleepList);","lastModifiedDate":"2024-04-15"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"user\")) {","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"                handleUserCommands(line, user);","lastModifiedDate":"2024-03-28"},{"lineNumber":120,"author":{"gitId":"paturikarthik"},"content":"            } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":121,"author":{"gitId":"paturikarthik"},"content":"                handleUnknownInput(line);","lastModifiedDate":"2024-04-14"},{"lineNumber":122,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":123,"author":{"gitId":"paturikarthik"},"content":"            printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":124,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":125,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":126,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":127,"author":{"gitId":"paturikarthik"},"content":"    public static void handleUserCommands(String line, User user) {","lastModifiedDate":"2024-03-28"},{"lineNumber":128,"author":{"gitId":"paturikarthik"},"content":"        if (line.startsWith(\"user setup \")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":129,"author":{"gitId":"paturikarthik"},"content":"            user.setUp(line);","lastModifiedDate":"2024-03-28"},{"lineNumber":130,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.equals(\"user progress\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":131,"author":{"gitId":"paturikarthik"},"content":"            handleUserProgress(user);","lastModifiedDate":"2024-04-04"},{"lineNumber":132,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"user update\")) {","lastModifiedDate":"2024-04-10"},{"lineNumber":133,"author":{"gitId":"paturikarthik"},"content":"            if (user.getName() \u003d\u003d null) {","lastModifiedDate":"2024-04-11"},{"lineNumber":134,"author":{"gitId":"paturikarthik"},"content":"                printNoUserYetMessage();","lastModifiedDate":"2024-04-11"},{"lineNumber":135,"author":{"gitId":"paturikarthik"},"content":"            } else {","lastModifiedDate":"2024-04-11"},{"lineNumber":136,"author":{"gitId":"paturikarthik"},"content":"                user.update(line);","lastModifiedDate":"2024-04-10"},{"lineNumber":137,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-11"},{"lineNumber":138,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.equals(\"user details\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":139,"author":{"gitId":"paturikarthik"},"content":"            if (user.getName() \u003d\u003d null) {","lastModifiedDate":"2024-04-11"},{"lineNumber":140,"author":{"gitId":"paturikarthik"},"content":"                printNoUserYetMessage();","lastModifiedDate":"2024-04-11"},{"lineNumber":141,"author":{"gitId":"paturikarthik"},"content":"            } else {","lastModifiedDate":"2024-04-11"},{"lineNumber":142,"author":{"gitId":"paturikarthik"},"content":"                user.getUserDetails();","lastModifiedDate":"2024-04-14"},{"lineNumber":143,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-11"},{"lineNumber":144,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":145,"author":{"gitId":"paturikarthik"},"content":"            handleUnknownInput(line);","lastModifiedDate":"2024-04-14"},{"lineNumber":146,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":147,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":148,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":149,"author":{"gitId":"paturikarthik"},"content":"    private static void handleUserProgress(User user) {","lastModifiedDate":"2024-04-04"},{"lineNumber":150,"author":{"gitId":"paturikarthik"},"content":"        if (user.getName() \u003d\u003d null) {","lastModifiedDate":"2024-04-04"},{"lineNumber":151,"author":{"gitId":"paturikarthik"},"content":"            printNoUserYetMessage();","lastModifiedDate":"2024-04-04"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":153,"author":{"gitId":"paturikarthik"},"content":"            user.getCaloriesProgressBar();","lastModifiedDate":"2024-04-02"},{"lineNumber":154,"author":{"gitId":"paturikarthik"},"content":"            user.getHydrationProgressBar();","lastModifiedDate":"2024-04-02"},{"lineNumber":155,"author":{"gitId":"paturikarthik"},"content":"            user.getSleepProgressBar();","lastModifiedDate":"2024-04-13"},{"lineNumber":156,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":157,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":158,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":159,"author":{"gitId":"paturikarthik"},"content":"    public static void sayHello() {","lastModifiedDate":"2024-03-21"},{"lineNumber":160,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-04-13"},{"lineNumber":161,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(WHITESPACE + \"Hello from\\n\\n\" + logo);","lastModifiedDate":"2024-03-21"},{"lineNumber":162,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(WHITESPACE + \"How can I help you today?\");","lastModifiedDate":"2024-03-21"},{"lineNumber":163,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":164,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":165,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":166,"author":{"gitId":"paturikarthik"},"content":"    public static void byeMessage() {","lastModifiedDate":"2024-03-15"},{"lineNumber":167,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":168,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(WHITESPACE + \"Bye! See you again soon ^^\");","lastModifiedDate":"2024-03-21"},{"lineNumber":169,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":170,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":171,"author":{"gitId":"paturikarthik"},"content":"    public static void printEmptyInputMessage() {","lastModifiedDate":"2024-03-15"},{"lineNumber":172,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Please enter a non-empty input!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":173,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":174,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":175,"author":{"gitId":"paturikarthik"},"content":"    public static void printLine() {","lastModifiedDate":"2024-03-15"},{"lineNumber":176,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(WHITESPACE + \"-------------------------------------\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":177,"author":{"gitId":"paturikarthik"},"content":"                \"----------------------------------------\");","lastModifiedDate":"2024-03-21"},{"lineNumber":178,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":179,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":180,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-14"},{"lineNumber":181,"author":{"gitId":"paturikarthik"},"content":"     * Sorts unhandled inputs into incomplete inputs and unknown inputs","lastModifiedDate":"2024-04-14"},{"lineNumber":182,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-14"},{"lineNumber":183,"author":{"gitId":"paturikarthik"},"content":"     * @param line string input from user","lastModifiedDate":"2024-04-14"},{"lineNumber":184,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-14"},{"lineNumber":185,"author":{"gitId":"paturikarthik"},"content":"    public static void handleUnknownInput(String line) {","lastModifiedDate":"2024-04-14"},{"lineNumber":186,"author":{"gitId":"paturikarthik"},"content":"        if (line.startsWith(\"calories in\") || line.startsWith(\"calories out\") || line.startsWith(\"calories delete\") ||","lastModifiedDate":"2024-04-14"},{"lineNumber":187,"author":{"gitId":"paturikarthik"},"content":"                line.startsWith(\"hydration in\") || line.startsWith(\"hydration delete\") || line.startsWith(\"sleep add\")","lastModifiedDate":"2024-04-14"},{"lineNumber":188,"author":{"gitId":"paturikarthik"},"content":"                || line.startsWith(\"sleep delete\") || line.startsWith(\"user setup\")","lastModifiedDate":"2024-04-14"},{"lineNumber":189,"author":{"gitId":"paturikarthik"},"content":"                || line.startsWith(\"calories find\") || line.startsWith(\"hydration find\")) {","lastModifiedDate":"2024-04-14"},{"lineNumber":190,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(\"\\t Oops! Incomplete command!\");","lastModifiedDate":"2024-04-14"},{"lineNumber":191,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-14"},{"lineNumber":192,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(\"\\t Oops! I\u0027ve never seen this input before...\");","lastModifiedDate":"2024-03-21"},{"lineNumber":193,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":194,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t If you are unsure of the commands, use the help command for a quick recap :)\");","lastModifiedDate":"2024-03-21"},{"lineNumber":195,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":196,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":197,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":198,"author":{"gitId":"paturikarthik"},"content":"    public static void showHelp() {","lastModifiedDate":"2024-03-21"},{"lineNumber":199,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t LifeTrack Command List:\");","lastModifiedDate":"2024-03-21"},{"lineNumber":200,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - help: Displays a list of available commands and their descriptions.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":201,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-03-28"},{"lineNumber":202,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories in \u003cfood\u003e c/\u003ccalories\u003e d/\u003cdate, format:YYYY-MM-DD\u003e \" +","lastModifiedDate":"2024-04-02"},{"lineNumber":203,"author":{"gitId":"paturikarthik"},"content":"                \"m/[carbohydrates, proteins, fats]:\\n\" + \"\\t Adds a calorie gaining entry into the calories tracker.\");","lastModifiedDate":"2024-04-10"},{"lineNumber":204,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories out \u003cactivity\u003e c/\u003ccalories\u003e d/\u003cdate, format:YYYY-MM-DD\u003e:\\n\" +","lastModifiedDate":"2024-04-10"},{"lineNumber":205,"author":{"gitId":"paturikarthik"},"content":"                \"\\t Adds a calorie burning entry into the calories tracker.\");","lastModifiedDate":"2024-04-10"},{"lineNumber":206,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories list: Displays all entries currently stored in the calorie list.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":207,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories delete \u003ccalorie ID\u003e: Deletes the entry at the specified ID\" +","lastModifiedDate":"2024-04-14"},{"lineNumber":208,"author":{"gitId":"paturikarthik"},"content":"                \" from the calorie list.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":209,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories find \u003ckeyword\u003e: finds and lists all calorie entries \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":210,"author":{"gitId":"paturikarthik"},"content":"                \"containing the keyword \" + \"in their description\");","lastModifiedDate":"2024-04-14"},{"lineNumber":211,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-03-28"},{"lineNumber":212,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - hydration in \u003cbeverage\u003e v/\u003cvolume\u003e d/\u003cdate, format:YYYY-MM-DD\u003e:\\n\" +","lastModifiedDate":"2024-04-10"},{"lineNumber":213,"author":{"gitId":"paturikarthik"},"content":"                \"\\t Adds a hydration entry into the hydration tracker.\");","lastModifiedDate":"2024-04-10"},{"lineNumber":214,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - hydration list: Displays all entries currently stored in the hydration list.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":215,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - hydration delete \u003chydration ID\u003e: Deletes the hydration entry at the specified ID \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":216,"author":{"gitId":"paturikarthik"},"content":"                \"from the hydration list.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":217,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - hydration find \u003ckeyword\u003e: finds and lists all hydration entries containing \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":218,"author":{"gitId":"paturikarthik"},"content":"                \"the keyword \" + \"in their description\");","lastModifiedDate":"2024-04-14"},{"lineNumber":219,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-03-28"},{"lineNumber":220,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - sleep add \u003cduration\u003e d/\u003cdate, format:YYYY-MM-DD\u003e: \" +","lastModifiedDate":"2024-03-29"},{"lineNumber":221,"author":{"gitId":"paturikarthik"},"content":"                \"Adds a sleep entry into the sleep tracker.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":222,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - sleep list: Displays all entries currently stored in the sleep list.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":223,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - sleep delete \u003csleep ID\u003e: Deletes the entry at the specified index \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":224,"author":{"gitId":"paturikarthik"},"content":"                \"from the sleep list.\");","lastModifiedDate":"2024-03-26"},{"lineNumber":225,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-04-02"},{"lineNumber":226,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - user setup \u003cname\u003e h/\u003cheight\u003e w/\u003cweight\u003e a/\u003cage\u003e s/\u003csex\u003e e/\u003cexercise_level\u003e \" +","lastModifiedDate":"2024-04-02"},{"lineNumber":227,"author":{"gitId":"paturikarthik"},"content":"                \"g/\u003cbody_goal\u003e:\\n\" + \"\\t Create a new user, or edit an existing one.\");","lastModifiedDate":"2024-04-10"},{"lineNumber":228,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - user details: prints the details of the user.\");","lastModifiedDate":"2024-04-14"},{"lineNumber":229,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - user update name/height/weight/age/sex/exercise levels/goal \u003cUPDATED VALUE\u003e: \"","lastModifiedDate":"2024-04-11"},{"lineNumber":230,"author":{"gitId":"paturikarthik"},"content":"                + \"updates the corresponding field of the user.\");","lastModifiedDate":"2024-04-11"},{"lineNumber":231,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - user progress: Display calories and hydration progress towards the daily \" +","lastModifiedDate":"2024-04-14"},{"lineNumber":232,"author":{"gitId":"paturikarthik"},"content":"                \"requirement.\");","lastModifiedDate":"2024-04-14"},{"lineNumber":233,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":234,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-13"},{"lineNumber":235,"author":{"gitId":"paturikarthik"},"content":"//@@author","lastModifiedDate":"2024-04-10"}],"authorContributionMap":{"a-wild-chocolate":14,"paturikarthik":221}},{"path":"src/main/java/seedu/lifetrack/ui/UserUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-04-11"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"public class UserUi {","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"    private static final String CHANGE_MADE_MESSAGE \u003d \"\\t The following change has been made:\\n\";","lastModifiedDate":"2024-04-11"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"    private static final int INDEX_OF_TODAY \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"    private static final int INDEX_OF_YESTERDAY \u003d 1;","lastModifiedDate":"2024-04-13"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"    private static final int INDEX_OF_DAY_BEFORE \u003d 2;","lastModifiedDate":"2024-04-13"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"    private static final String UNDERLINE \u003d \"\\t ----------\";","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserCaloriesRequired(int caloriesRequired) {","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t You need to consume \" + caloriesRequired + \" calories per day to hit your goals!\");","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserCalorieProgress(int caloriesConsumed, int caloriesRequired, String progressBar,","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"                                                int percentage, int date) {","lastModifiedDate":"2024-04-13"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"        String dateInString;","lastModifiedDate":"2024-04-13"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"        if (date \u003d\u003d INDEX_OF_TODAY) {","lastModifiedDate":"2024-04-13"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"            System.out.print(\"\\t Calories:\\n\");","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(UNDERLINE);","lastModifiedDate":"2024-04-13"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"            dateInString \u003d \"today\";","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"        } else if (date \u003d\u003d INDEX_OF_YESTERDAY) {","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"            dateInString \u003d \"yesterday\";","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"            dateInString \u003d \"on the day before yesterday\";","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"        System.out.printf(\"\\t You have consumed \" + caloriesConsumed + \" calories out of your goal of \"","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"                + caloriesRequired + \" calories \" + dateInString + \".\\n\");","lastModifiedDate":"2024-04-13"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"        System.out.printf(\"\\t %s %d%%\\n\\n\", progressBar, percentage);","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserHydrationProgress(int hydrationConsumed, int hydrationRequired, String progressBar,","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"                                                  int percentage, int date) {","lastModifiedDate":"2024-04-13"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"        String dateInString;","lastModifiedDate":"2024-04-13"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"        if (date \u003d\u003d INDEX_OF_TODAY) {","lastModifiedDate":"2024-04-13"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"            System.out.print(\"\\t Hydration:\\n\");","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(UNDERLINE);","lastModifiedDate":"2024-04-13"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"            dateInString \u003d \"today\";","lastModifiedDate":"2024-04-13"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"        } else if (date \u003d\u003d INDEX_OF_YESTERDAY) {","lastModifiedDate":"2024-04-13"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"            dateInString \u003d \"yesterday\";","lastModifiedDate":"2024-04-13"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-13"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"            dateInString \u003d \"on the day before yesterday\";","lastModifiedDate":"2024-04-13"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"        System.out.printf(\"\\t You have consumed \" + hydrationConsumed + \"ml out of your goal of \"","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"                + hydrationRequired + \"ml \" + dateInString + \".\\n\");","lastModifiedDate":"2024-04-13"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"        System.out.printf(\"\\t %s %d%%\\n\\n\", progressBar, percentage);","lastModifiedDate":"2024-04-13"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserSleepProgress(double sleepConsumed, int sleepRequired, String progressBar,","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"                                              int percentage, int date) {","lastModifiedDate":"2024-04-13"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"        String dateInString;","lastModifiedDate":"2024-04-13"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"        if (date \u003d\u003d INDEX_OF_TODAY) {","lastModifiedDate":"2024-04-13"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"            System.out.print(\"\\t Sleep:\\n\");","lastModifiedDate":"2024-04-13"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(UNDERLINE);","lastModifiedDate":"2024-04-13"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"            dateInString \u003d \"today\";","lastModifiedDate":"2024-04-13"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"        } else if (date \u003d\u003d INDEX_OF_YESTERDAY) {","lastModifiedDate":"2024-04-13"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"            dateInString \u003d \"yesterday\";","lastModifiedDate":"2024-04-13"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-13"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"            dateInString \u003d \"on the day before yesterday\";","lastModifiedDate":"2024-04-13"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"        System.out.print(\"\\t You have slept for \" + sleepConsumed + \" hrs out of your goal of \"","lastModifiedDate":"2024-04-14"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"                + sleepRequired + \" hrs \" + dateInString + \".\\n\");","lastModifiedDate":"2024-04-13"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"        System.out.printf(\"\\t %s %d%%\\n\\n\", progressBar, percentage);","lastModifiedDate":"2024-04-13"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserSetUpComplete(User user) {","lastModifiedDate":"2024-04-11"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Hello, \" + user.getName() + \"! Thank you for completing the setup :)\");","lastModifiedDate":"2024-04-11"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"        printUserCaloriesRequired(user.getCaloriesRequired());","lastModifiedDate":"2024-04-11"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"        printUserDetails(user);","lastModifiedDate":"2024-04-11"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"    public static void printNoUserYetMessage() {","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Please set up your profile first!\");","lastModifiedDate":"2024-04-11"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewUserName(String name) {","lastModifiedDate":"2024-04-11"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(CHANGE_MADE_MESSAGE + \"\\t Name: \" + name);","lastModifiedDate":"2024-04-11"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewUserAge(int age) {","lastModifiedDate":"2024-04-11"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(CHANGE_MADE_MESSAGE + \"\\t Age: \" + age);","lastModifiedDate":"2024-04-11"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":84,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":85,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewUserHeight(int height) {","lastModifiedDate":"2024-04-11"},{"lineNumber":86,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(CHANGE_MADE_MESSAGE + \"\\t Height: \" + height);","lastModifiedDate":"2024-04-11"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":88,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":89,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewUserWeight(int weight) {","lastModifiedDate":"2024-04-11"},{"lineNumber":90,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(CHANGE_MADE_MESSAGE + \"\\t Weight: \" + weight);","lastModifiedDate":"2024-04-11"},{"lineNumber":91,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":92,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":93,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewUserSex(String sex) {","lastModifiedDate":"2024-04-11"},{"lineNumber":94,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(CHANGE_MADE_MESSAGE + \"\\t Sex: \" + sex);","lastModifiedDate":"2024-04-11"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":96,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewUserExerciseLevels(User user, int level) {","lastModifiedDate":"2024-04-11"},{"lineNumber":98,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(CHANGE_MADE_MESSAGE + \"\\t Exercise Levels: \" + level + \" out of 5 (\"","lastModifiedDate":"2024-04-11"},{"lineNumber":99,"author":{"gitId":"paturikarthik"},"content":"                + user.getExerciseLevelAsString() + \")\");","lastModifiedDate":"2024-04-11"},{"lineNumber":100,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewUserGoal(User user, int goal) {","lastModifiedDate":"2024-04-11"},{"lineNumber":103,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(CHANGE_MADE_MESSAGE + \"\\t Goal: \" + goal + \" out of 5 (\"","lastModifiedDate":"2024-04-11"},{"lineNumber":104,"author":{"gitId":"paturikarthik"},"content":"                + user.getGoalAsString() + \")\");","lastModifiedDate":"2024-04-11"},{"lineNumber":105,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":106,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserDetails(User user) {","lastModifiedDate":"2024-04-11"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t User details:\\n\" +","lastModifiedDate":"2024-04-11"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"                \"\\t Name: \" + (user.getName().substring(0, 1).toUpperCase() + user.getName().substring(1))","lastModifiedDate":"2024-04-14"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"                + \"\\n\"","lastModifiedDate":"2024-04-14"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"                + \"\\t Height: \" + user.getHeight() + \"\\n\"","lastModifiedDate":"2024-04-11"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"                + \"\\t Weight: \" + user.getWeight() + \"\\n\"","lastModifiedDate":"2024-04-11"},{"lineNumber":113,"author":{"gitId":"paturikarthik"},"content":"                + \"\\t Age: \" + user.getAge() + \"\\n\"","lastModifiedDate":"2024-04-11"},{"lineNumber":114,"author":{"gitId":"paturikarthik"},"content":"                + \"\\t Sex: \" + user.getSex() + \"\\n\"","lastModifiedDate":"2024-04-11"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"                + \"\\t Exercise Levels: \" + user.getExerciseLevels() + \" out of 5 (\"","lastModifiedDate":"2024-04-11"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"                + user.getExerciseLevelAsString() + \")\" + \"\\n\"","lastModifiedDate":"2024-04-11"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"                + \"\\t Goal: \" + user.getGoal() + \" out of 5 (\" + user.getGoalAsString() + \")\");","lastModifiedDate":"2024-04-14"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"paturikarthik":119}},{"path":"src/main/java/seedu/lifetrack/user/User.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"//@@author paturikarthik","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.user;","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.system.storage.UserFileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.usergoals.UserGoals;","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.parser.ParserUser.parseSetUp;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.parser.ParserUser.parseUpdate;","lastModifiedDate":"2024-04-10"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printUserDetails;","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"public class User {","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    private UserFileHandler fileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"    private String name;","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"    private int height;","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"    private int weight;","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"    private int age;","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"    private String sex;","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"    private int exerciseLevels;","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"    private int goal;","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"    private int caloriesRequired;","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"    private int hydrationRequired \u003d 2000;","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"    private int sleepRequired \u003d 7;","lastModifiedDate":"2024-04-13"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"    //user data constants","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"    private final int NAME_INDEX \u003d 0;","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"    private final int HEIGHT_INDEX \u003d 1;","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"    private final int WEIGHT_INDEX \u003d 2;","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"    private final int AGE_INDEX \u003d 3;","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"    private final int SEX_INDEX \u003d 4;","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"    private final int EXERCISE_INDEX \u003d 5;","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"    private final int GOAL_INDEX \u003d 6;","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"    private final int REQ_CAL_INDEX \u003d 7;","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"    //constructor for JUnit tests","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"    public User() {","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"    //constructor for usage in terminal","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"    public User(String filePath) {","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"            fileHandler \u003d new UserFileHandler(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"            ArrayList\u003cString\u003e data \u003d fileHandler.getUserDataFromFile();","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"            if (data.size() \u003d\u003d 8) {","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"                name \u003d data.get(NAME_INDEX);","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"                height \u003d Integer.parseInt(data.get(HEIGHT_INDEX));","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"                weight \u003d Integer.parseInt(data.get(WEIGHT_INDEX));","lastModifiedDate":"2024-03-28"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"                age \u003d Integer.parseInt(data.get(AGE_INDEX));","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"                sex \u003d data.get(SEX_INDEX);","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"                exerciseLevels \u003d Integer.parseInt(data.get(EXERCISE_INDEX));","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"                goal \u003d Integer.parseInt(data.get(GOAL_INDEX));","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"                caloriesRequired \u003d Integer.parseInt(data.get(REQ_CAL_INDEX));","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"            return;","lastModifiedDate":"2024-04-10"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"    public void setUp(String line) {","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"            parseSetUp(line, this);","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"            fileHandler.writeUserData(this);","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-28"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"    public void update(String line) {","lastModifiedDate":"2024-04-10"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-04-10"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"            parseUpdate(line, this);","lastModifiedDate":"2024-04-10"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"            fileHandler.writeUserData(this);","lastModifiedDate":"2024-04-10"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-04-10"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-04-10"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"    public void setName(String name) {","lastModifiedDate":"2024-03-28"},{"lineNumber":84,"author":{"gitId":"paturikarthik"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-03-28"},{"lineNumber":85,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"    public void setHeight(int height) {","lastModifiedDate":"2024-03-28"},{"lineNumber":88,"author":{"gitId":"paturikarthik"},"content":"        this.height \u003d height;","lastModifiedDate":"2024-03-28"},{"lineNumber":89,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":90,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":91,"author":{"gitId":"paturikarthik"},"content":"    public void setWeight(int weight) {","lastModifiedDate":"2024-03-28"},{"lineNumber":92,"author":{"gitId":"paturikarthik"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-28"},{"lineNumber":93,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"    public void setAge(int age) {","lastModifiedDate":"2024-03-28"},{"lineNumber":96,"author":{"gitId":"paturikarthik"},"content":"        this.age \u003d age;","lastModifiedDate":"2024-03-28"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":98,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":99,"author":{"gitId":"paturikarthik"},"content":"    public void setSex(String sex) {","lastModifiedDate":"2024-03-28"},{"lineNumber":100,"author":{"gitId":"paturikarthik"},"content":"        this.sex \u003d sex;","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":103,"author":{"gitId":"paturikarthik"},"content":"    public void setExerciseLevels(int exerciseLevels) {","lastModifiedDate":"2024-04-04"},{"lineNumber":104,"author":{"gitId":"paturikarthik"},"content":"        this.exerciseLevels \u003d exerciseLevels;","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":106,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"    public void setGoal(int goal) {","lastModifiedDate":"2024-04-04"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"        this.goal \u003d goal;","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"    public String getName() {","lastModifiedDate":"2024-04-04"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"        return name;","lastModifiedDate":"2024-04-04"},{"lineNumber":113,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":114,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"    public int getHeight() {","lastModifiedDate":"2024-03-28"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"        return height;","lastModifiedDate":"2024-03-28"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"    public int getWeight() {","lastModifiedDate":"2024-03-28"},{"lineNumber":120,"author":{"gitId":"paturikarthik"},"content":"        return weight;","lastModifiedDate":"2024-03-28"},{"lineNumber":121,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":122,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":123,"author":{"gitId":"paturikarthik"},"content":"    public int getAge() {","lastModifiedDate":"2024-03-28"},{"lineNumber":124,"author":{"gitId":"paturikarthik"},"content":"        return age;","lastModifiedDate":"2024-03-28"},{"lineNumber":125,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":126,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":127,"author":{"gitId":"paturikarthik"},"content":"    public String getSex() {","lastModifiedDate":"2024-03-28"},{"lineNumber":128,"author":{"gitId":"paturikarthik"},"content":"        return sex;","lastModifiedDate":"2024-03-28"},{"lineNumber":129,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":130,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":131,"author":{"gitId":"paturikarthik"},"content":"    public int getExerciseLevels() {","lastModifiedDate":"2024-04-04"},{"lineNumber":132,"author":{"gitId":"paturikarthik"},"content":"        return exerciseLevels;","lastModifiedDate":"2024-03-28"},{"lineNumber":133,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":134,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":135,"author":{"gitId":"paturikarthik"},"content":"    public int getGoal() {","lastModifiedDate":"2024-04-04"},{"lineNumber":136,"author":{"gitId":"paturikarthik"},"content":"        return goal;","lastModifiedDate":"2024-03-28"},{"lineNumber":137,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":138,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":139,"author":{"gitId":"paturikarthik"},"content":"    public void getHealthInfo() {","lastModifiedDate":"2024-03-28"},{"lineNumber":140,"author":{"gitId":"paturikarthik"},"content":"        UserGoals.getHealthInfo(this);","lastModifiedDate":"2024-03-28"},{"lineNumber":141,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":142,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":143,"author":{"gitId":"paturikarthik"},"content":"    public void setCaloriesRequired(int caloriesRequired) {","lastModifiedDate":"2024-03-28"},{"lineNumber":144,"author":{"gitId":"paturikarthik"},"content":"        this.caloriesRequired \u003d caloriesRequired;","lastModifiedDate":"2024-03-28"},{"lineNumber":145,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":146,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":147,"author":{"gitId":"paturikarthik"},"content":"    public int getCaloriesRequired() {","lastModifiedDate":"2024-03-28"},{"lineNumber":148,"author":{"gitId":"paturikarthik"},"content":"        return caloriesRequired;","lastModifiedDate":"2024-03-28"},{"lineNumber":149,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":150,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":151,"author":{"gitId":"paturikarthik"},"content":"    public int getHydrationRequired() {","lastModifiedDate":"2024-04-02"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"        return hydrationRequired;","lastModifiedDate":"2024-04-02"},{"lineNumber":153,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":154,"author":{"gitId":"paturikarthik"},"content":"    public int getSleepRequired() {","lastModifiedDate":"2024-04-13"},{"lineNumber":155,"author":{"gitId":"paturikarthik"},"content":"        return sleepRequired;","lastModifiedDate":"2024-04-13"},{"lineNumber":156,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":157,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"paturikarthik"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-28"},{"lineNumber":159,"author":{"gitId":"paturikarthik"},"content":"        return (name + \";\" + height + \";\" + weight + \";\" + age + \";\" + sex + \";\" +","lastModifiedDate":"2024-04-15"},{"lineNumber":160,"author":{"gitId":"paturikarthik"},"content":"                exerciseLevels + \";\" + goal + \";\" + caloriesRequired);","lastModifiedDate":"2024-03-28"},{"lineNumber":161,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":162,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":163,"author":{"gitId":"paturikarthik"},"content":"    public void getCaloriesProgressBar() {","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"paturikarthik"},"content":"        UserGoals.getCaloriesProgressBar(this);","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":166,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"paturikarthik"},"content":"    public void getHydrationProgressBar() {","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"paturikarthik"},"content":"        UserGoals.getHydrationProgressBar(this);","lastModifiedDate":"2024-04-02"},{"lineNumber":169,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":170,"author":{"gitId":"paturikarthik"},"content":"    public void getSleepProgressBar() {","lastModifiedDate":"2024-04-13"},{"lineNumber":171,"author":{"gitId":"paturikarthik"},"content":"        UserGoals.getSleepProgressBar(this);","lastModifiedDate":"2024-04-13"},{"lineNumber":172,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":173,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":174,"author":{"gitId":"paturikarthik"},"content":"    public String getExerciseLevelAsString() {","lastModifiedDate":"2024-04-11"},{"lineNumber":175,"author":{"gitId":"paturikarthik"},"content":"        if (exerciseLevels \u003d\u003d 1) {","lastModifiedDate":"2024-04-11"},{"lineNumber":176,"author":{"gitId":"paturikarthik"},"content":"            return \"Sedentary\";","lastModifiedDate":"2024-04-11"},{"lineNumber":177,"author":{"gitId":"paturikarthik"},"content":"        } else if (exerciseLevels \u003d\u003d 2) {","lastModifiedDate":"2024-04-11"},{"lineNumber":178,"author":{"gitId":"paturikarthik"},"content":"            return \"Lightly Active\";","lastModifiedDate":"2024-04-11"},{"lineNumber":179,"author":{"gitId":"paturikarthik"},"content":"        } else if (exerciseLevels \u003d\u003d 5) {","lastModifiedDate":"2024-04-11"},{"lineNumber":180,"author":{"gitId":"paturikarthik"},"content":"            return \"Extremely Active\";","lastModifiedDate":"2024-04-11"},{"lineNumber":181,"author":{"gitId":"paturikarthik"},"content":"        } else if (exerciseLevels \u003d\u003d 4) {","lastModifiedDate":"2024-04-11"},{"lineNumber":182,"author":{"gitId":"paturikarthik"},"content":"            return \"Very Active\";","lastModifiedDate":"2024-04-11"},{"lineNumber":183,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-11"},{"lineNumber":184,"author":{"gitId":"paturikarthik"},"content":"            return \"Moderately Active\";","lastModifiedDate":"2024-04-11"},{"lineNumber":185,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-11"},{"lineNumber":186,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":187,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-11"},{"lineNumber":188,"author":{"gitId":"paturikarthik"},"content":"    public String getGoalAsString() {","lastModifiedDate":"2024-04-11"},{"lineNumber":189,"author":{"gitId":"paturikarthik"},"content":"        if (goal \u003d\u003d 1) {","lastModifiedDate":"2024-04-11"},{"lineNumber":190,"author":{"gitId":"paturikarthik"},"content":"            return \"Quick Weight Loss\";","lastModifiedDate":"2024-04-11"},{"lineNumber":191,"author":{"gitId":"paturikarthik"},"content":"        } else if (goal \u003d\u003d 2) {","lastModifiedDate":"2024-04-11"},{"lineNumber":192,"author":{"gitId":"paturikarthik"},"content":"            return \"Moderate Weight Loss\";","lastModifiedDate":"2024-04-11"},{"lineNumber":193,"author":{"gitId":"paturikarthik"},"content":"        } else if (goal \u003d\u003d 5) {","lastModifiedDate":"2024-04-11"},{"lineNumber":194,"author":{"gitId":"paturikarthik"},"content":"            return \"Quick Weight Gain\";","lastModifiedDate":"2024-04-11"},{"lineNumber":195,"author":{"gitId":"paturikarthik"},"content":"        } else if (goal \u003d\u003d 4) {","lastModifiedDate":"2024-04-11"},{"lineNumber":196,"author":{"gitId":"paturikarthik"},"content":"            return \"Moderate Weight Gain\";","lastModifiedDate":"2024-04-11"},{"lineNumber":197,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-11"},{"lineNumber":198,"author":{"gitId":"paturikarthik"},"content":"            return \"Maintain Weight\";","lastModifiedDate":"2024-04-11"},{"lineNumber":199,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-11"},{"lineNumber":200,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-11"},{"lineNumber":201,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":202,"author":{"gitId":"paturikarthik"},"content":"    public void getUserDetails(){","lastModifiedDate":"2024-04-14"},{"lineNumber":203,"author":{"gitId":"paturikarthik"},"content":"        printUserDetails(this);","lastModifiedDate":"2024-04-14"},{"lineNumber":204,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":205,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"paturikarthik":205}},{"path":"src/main/java/seedu/lifetrack/user/usergoals/UserGoals.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"//@@author paturikarthik","lastModifiedDate":"2024-04-10"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.user.usergoals;","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-13"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.LifeTrack.calorieList;","lastModifiedDate":"2024-04-01"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.LifeTrack.hydrationList;","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.LifeTrack.sleepList;","lastModifiedDate":"2024-04-13"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printUserCalorieProgress;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printUserHydrationProgress;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printUserSleepProgress;","lastModifiedDate":"2024-04-13"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"public class UserGoals {","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"    private static final int BMR_WEIGHT_MULTIPLIER \u003d 10;","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    private static final double BMR_HEIGHT_MULTIPLIER \u003d 6.25;","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"    private static final int BMR_AGE_MULTIPLIER \u003d 5;","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"    private static final int BMR_MALE_MODIFIER \u003d 5;","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"    private static final int BMR_FEMALE_MODIFIER \u003d -161;","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"    private static final int PROGRESS_BAR_WIDTH \u003d 50;","lastModifiedDate":"2024-04-10"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"    private static final int INDEX_OF_TODAY \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"    private static final int INDEX_OF_YESTERDAY \u003d 1;","lastModifiedDate":"2024-04-13"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"    private static final int INDEX_OF_DAY_BEFORE \u003d 2;","lastModifiedDate":"2024-04-13"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"    private static final int NUMBER_OF_DAYS_TO_TRACK \u003d 3;","lastModifiedDate":"2024-04-13"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"    private static final int NUMBER_OF_DAYS_TO_YESTERDAY \u003d -1;","lastModifiedDate":"2024-04-13"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"    private static final int NUMBER_OF_DAYS_TO_DAY_BEFORE \u003d -2;","lastModifiedDate":"2024-04-13"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    public static void getHealthInfo(User user) {","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"        double rawBMR \u003d BMR_WEIGHT_MULTIPLIER * user.getWeight() + BMR_HEIGHT_MULTIPLIER * user.getHeight()","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"                - BMR_AGE_MULTIPLIER * user.getAge();","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"        String gender \u003d user.getSex();","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"        int genderBMRModifier \u003d gender.equals(\"male\") ? BMR_MALE_MODIFIER : BMR_FEMALE_MODIFIER;","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"        int exerciseLevel \u003d user.getExerciseLevels();","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"        double rawAMR \u003d getAMR(rawBMR + genderBMRModifier, exerciseLevel);","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"        int goal \u003d user.getGoal();","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"        int caloriesRequired \u003d adjustAMRWithGoal(rawAMR, goal);","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"        user.setCaloriesRequired(caloriesRequired);","lastModifiedDate":"2024-04-04"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"    private static int adjustAMRWithGoal(double rawAMR, int goal) {","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"        if (goal \u003d\u003d 1) {","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"            rawAMR *\u003d 0.8;","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"        } else if (goal \u003d\u003d 2) {","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"            rawAMR *\u003d 0.9;","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"        } else if (goal \u003d\u003d 4) {","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"            rawAMR *\u003d 1.1;","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"        } else if (goal \u003d\u003d 5) {","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"            rawAMR *\u003d 1.2;","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"        return (int) rawAMR;","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"    private static double getAMR(double calories, int exerciseLevel) {","lastModifiedDate":"2024-04-04"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"        if (exerciseLevel \u003d\u003d 1) {","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.2;","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"        } else if (exerciseLevel \u003d\u003d 2) {","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.375;","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"        } else if (exerciseLevel \u003d\u003d 3) {","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.55;","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"        } else if (exerciseLevel \u003d\u003d 4) {","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.725;","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.9;","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"        return calories;","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"    public static void getCaloriesProgressBar(User user) {","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"        int caloriesRequired \u003d user.getCaloriesRequired();","lastModifiedDate":"2024-04-01"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"        int caloriesConsumedToday \u003d calorieList.getCaloriesConsumed(LocalDate.now());","lastModifiedDate":"2024-04-13"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"        if (caloriesConsumedToday \u003c 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"            caloriesConsumedToday \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"        double progressToday \u003d (double) caloriesConsumedToday / caloriesRequired;","lastModifiedDate":"2024-04-13"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"        int caloriesConsumedYesterday \u003d calorieList.getCaloriesConsumed","lastModifiedDate":"2024-04-13"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"                (LocalDate.now().plusDays(NUMBER_OF_DAYS_TO_YESTERDAY));","lastModifiedDate":"2024-04-13"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"        if (caloriesConsumedYesterday \u003c 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"            caloriesConsumedYesterday \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"        double progressYesterday \u003d (double) caloriesConsumedYesterday / caloriesRequired;","lastModifiedDate":"2024-04-13"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"        int width \u003d PROGRESS_BAR_WIDTH;","lastModifiedDate":"2024-04-10"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":84,"author":{"gitId":"paturikarthik"},"content":"        int caloriesConsumedDayBefore \u003d calorieList.getCaloriesConsumed","lastModifiedDate":"2024-04-13"},{"lineNumber":85,"author":{"gitId":"paturikarthik"},"content":"                (LocalDate.now().plusDays(NUMBER_OF_DAYS_TO_DAY_BEFORE));","lastModifiedDate":"2024-04-13"},{"lineNumber":86,"author":{"gitId":"paturikarthik"},"content":"        if (caloriesConsumedDayBefore \u003c 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"            caloriesConsumedDayBefore \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":88,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":89,"author":{"gitId":"paturikarthik"},"content":"        double progressDayBefore \u003d (double) caloriesConsumedDayBefore / caloriesRequired;","lastModifiedDate":"2024-04-13"},{"lineNumber":90,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":91,"author":{"gitId":"paturikarthik"},"content":"        double[] progress \u003d new double[NUMBER_OF_DAYS_TO_TRACK];","lastModifiedDate":"2024-04-13"},{"lineNumber":92,"author":{"gitId":"paturikarthik"},"content":"        progress[INDEX_OF_TODAY] \u003d progressToday;","lastModifiedDate":"2024-04-13"},{"lineNumber":93,"author":{"gitId":"paturikarthik"},"content":"        progress[INDEX_OF_YESTERDAY] \u003d progressYesterday;","lastModifiedDate":"2024-04-13"},{"lineNumber":94,"author":{"gitId":"paturikarthik"},"content":"        progress[INDEX_OF_DAY_BEFORE] \u003d progressDayBefore;","lastModifiedDate":"2024-04-13"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":96,"author":{"gitId":"paturikarthik"},"content":"        int[] caloriesConsumed \u003d new int[NUMBER_OF_DAYS_TO_TRACK];","lastModifiedDate":"2024-04-13"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"        caloriesConsumed[INDEX_OF_TODAY] \u003d caloriesConsumedToday;","lastModifiedDate":"2024-04-13"},{"lineNumber":98,"author":{"gitId":"paturikarthik"},"content":"        caloriesConsumed[INDEX_OF_YESTERDAY] \u003d caloriesConsumedYesterday;","lastModifiedDate":"2024-04-13"},{"lineNumber":99,"author":{"gitId":"paturikarthik"},"content":"        caloriesConsumed[INDEX_OF_DAY_BEFORE] \u003d caloriesConsumedDayBefore;","lastModifiedDate":"2024-04-13"},{"lineNumber":100,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"        for (int date \u003d 0; date \u003c NUMBER_OF_DAYS_TO_TRACK; date++) {","lastModifiedDate":"2024-04-13"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"            int progressWidth \u003d (int) (width * progress[date]);","lastModifiedDate":"2024-04-13"},{"lineNumber":103,"author":{"gitId":"paturikarthik"},"content":"            StringBuilder progressBar \u003d new StringBuilder(\"[\");","lastModifiedDate":"2024-04-01"},{"lineNumber":104,"author":{"gitId":"paturikarthik"},"content":"            for (int i \u003d 0; i \u003c width; i++) {","lastModifiedDate":"2024-04-01"},{"lineNumber":105,"author":{"gitId":"paturikarthik"},"content":"                if (i \u003c progressWidth) {","lastModifiedDate":"2024-04-01"},{"lineNumber":106,"author":{"gitId":"paturikarthik"},"content":"                    progressBar.append(\"\u003d\");","lastModifiedDate":"2024-04-01"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"                } else {","lastModifiedDate":"2024-04-01"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"                    progressBar.append(\" \");","lastModifiedDate":"2024-04-01"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"                }","lastModifiedDate":"2024-04-01"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-01"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"            progressBar.append(\"] \");","lastModifiedDate":"2024-04-01"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":113,"author":{"gitId":"paturikarthik"},"content":"            int percentage \u003d (int) (progress[date] * 100);","lastModifiedDate":"2024-04-13"},{"lineNumber":114,"author":{"gitId":"paturikarthik"},"content":"            printUserCalorieProgress(caloriesConsumed[date], caloriesRequired, progressBar.toString(),","lastModifiedDate":"2024-04-13"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"                    percentage, date);","lastModifiedDate":"2024-04-13"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"    public static void getHydrationProgressBar(User user) {","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"paturikarthik"},"content":"        int hydrationRequired \u003d user.getHydrationRequired();","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"paturikarthik"},"content":"        int hydrationConsumedToday \u003d hydrationList.getHydrationConsumed(LocalDate.now());","lastModifiedDate":"2024-04-13"},{"lineNumber":122,"author":{"gitId":"paturikarthik"},"content":"        if (hydrationConsumedToday \u003c 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":123,"author":{"gitId":"paturikarthik"},"content":"            hydrationConsumedToday \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":124,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":125,"author":{"gitId":"paturikarthik"},"content":"        double progressToday \u003d (double) hydrationConsumedToday / hydrationRequired;","lastModifiedDate":"2024-04-13"},{"lineNumber":126,"author":{"gitId":"paturikarthik"},"content":"        int hydrationConsumedYesterday \u003d hydrationList.getHydrationConsumed","lastModifiedDate":"2024-04-13"},{"lineNumber":127,"author":{"gitId":"paturikarthik"},"content":"                (LocalDate.now().plusDays(NUMBER_OF_DAYS_TO_YESTERDAY));","lastModifiedDate":"2024-04-13"},{"lineNumber":128,"author":{"gitId":"paturikarthik"},"content":"        if (hydrationConsumedYesterday \u003c 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":129,"author":{"gitId":"paturikarthik"},"content":"            hydrationConsumedYesterday \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":130,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":131,"author":{"gitId":"paturikarthik"},"content":"        double progressYesterday \u003d (double) hydrationConsumedYesterday / hydrationRequired;","lastModifiedDate":"2024-04-13"},{"lineNumber":132,"author":{"gitId":"paturikarthik"},"content":"        int width \u003d PROGRESS_BAR_WIDTH;","lastModifiedDate":"2024-04-10"},{"lineNumber":133,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"paturikarthik"},"content":"        int hydrationConsumedDayBefore \u003d hydrationList.getHydrationConsumed","lastModifiedDate":"2024-04-13"},{"lineNumber":135,"author":{"gitId":"paturikarthik"},"content":"                (LocalDate.now().plusDays(NUMBER_OF_DAYS_TO_DAY_BEFORE));","lastModifiedDate":"2024-04-13"},{"lineNumber":136,"author":{"gitId":"paturikarthik"},"content":"        if (hydrationConsumedDayBefore \u003c 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":137,"author":{"gitId":"paturikarthik"},"content":"            hydrationConsumedDayBefore \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":138,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":139,"author":{"gitId":"paturikarthik"},"content":"        double progressDayBefore \u003d (double) hydrationConsumedDayBefore / hydrationRequired;","lastModifiedDate":"2024-04-13"},{"lineNumber":140,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":141,"author":{"gitId":"paturikarthik"},"content":"        double[] progress \u003d new double[NUMBER_OF_DAYS_TO_TRACK];","lastModifiedDate":"2024-04-13"},{"lineNumber":142,"author":{"gitId":"paturikarthik"},"content":"        progress[INDEX_OF_TODAY] \u003d progressToday;","lastModifiedDate":"2024-04-13"},{"lineNumber":143,"author":{"gitId":"paturikarthik"},"content":"        progress[INDEX_OF_YESTERDAY] \u003d progressYesterday;","lastModifiedDate":"2024-04-13"},{"lineNumber":144,"author":{"gitId":"paturikarthik"},"content":"        progress[INDEX_OF_DAY_BEFORE] \u003d progressDayBefore;","lastModifiedDate":"2024-04-13"},{"lineNumber":145,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":146,"author":{"gitId":"paturikarthik"},"content":"        int[] hydrationConsumed \u003d new int[NUMBER_OF_DAYS_TO_TRACK];","lastModifiedDate":"2024-04-13"},{"lineNumber":147,"author":{"gitId":"paturikarthik"},"content":"        hydrationConsumed[INDEX_OF_TODAY] \u003d hydrationConsumedToday;","lastModifiedDate":"2024-04-13"},{"lineNumber":148,"author":{"gitId":"paturikarthik"},"content":"        hydrationConsumed[INDEX_OF_YESTERDAY] \u003d hydrationConsumedYesterday;","lastModifiedDate":"2024-04-13"},{"lineNumber":149,"author":{"gitId":"paturikarthik"},"content":"        hydrationConsumed[INDEX_OF_DAY_BEFORE] \u003d hydrationConsumedDayBefore;","lastModifiedDate":"2024-04-13"},{"lineNumber":150,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":151,"author":{"gitId":"paturikarthik"},"content":"        for (int date \u003d 0; date \u003c NUMBER_OF_DAYS_TO_TRACK; date++) {","lastModifiedDate":"2024-04-13"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":153,"author":{"gitId":"paturikarthik"},"content":"            int progressWidth \u003d (int) (width * progress[date]);","lastModifiedDate":"2024-04-13"},{"lineNumber":154,"author":{"gitId":"paturikarthik"},"content":"            StringBuilder progressBar \u003d new StringBuilder(\"[\");","lastModifiedDate":"2024-04-02"},{"lineNumber":155,"author":{"gitId":"paturikarthik"},"content":"            for (int i \u003d 0; i \u003c width; i++) {","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"paturikarthik"},"content":"                if (i \u003c progressWidth) {","lastModifiedDate":"2024-04-02"},{"lineNumber":157,"author":{"gitId":"paturikarthik"},"content":"                    progressBar.append(\"\u003d\");","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"paturikarthik"},"content":"                } else {","lastModifiedDate":"2024-04-02"},{"lineNumber":159,"author":{"gitId":"paturikarthik"},"content":"                    progressBar.append(\" \");","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"paturikarthik"},"content":"                }","lastModifiedDate":"2024-04-02"},{"lineNumber":161,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"paturikarthik"},"content":"            progressBar.append(\"] \");","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"paturikarthik"},"content":"            int percentage \u003d (int) (progress[date] * 100);","lastModifiedDate":"2024-04-13"},{"lineNumber":165,"author":{"gitId":"paturikarthik"},"content":"            printUserHydrationProgress(hydrationConsumed[date], hydrationRequired, progressBar.toString(),","lastModifiedDate":"2024-04-13"},{"lineNumber":166,"author":{"gitId":"paturikarthik"},"content":"                    percentage, date);","lastModifiedDate":"2024-04-13"},{"lineNumber":167,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":168,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-13"},{"lineNumber":169,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":170,"author":{"gitId":"paturikarthik"},"content":"    public static void getSleepProgressBar(User user) {","lastModifiedDate":"2024-04-13"},{"lineNumber":171,"author":{"gitId":"paturikarthik"},"content":"        int sleepRequired \u003d user.getSleepRequired();","lastModifiedDate":"2024-04-13"},{"lineNumber":172,"author":{"gitId":"paturikarthik"},"content":"        double sleepConsumedToday \u003d sleepList.getSleepConsumed(LocalDate.now());","lastModifiedDate":"2024-04-14"},{"lineNumber":173,"author":{"gitId":"paturikarthik"},"content":"        if (sleepConsumedToday \u003c 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":174,"author":{"gitId":"paturikarthik"},"content":"            sleepConsumedToday \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":175,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":176,"author":{"gitId":"paturikarthik"},"content":"        double progressToday \u003d sleepConsumedToday / sleepRequired;","lastModifiedDate":"2024-04-14"},{"lineNumber":177,"author":{"gitId":"paturikarthik"},"content":"        double sleepConsumedYesterday \u003d sleepList.getSleepConsumed","lastModifiedDate":"2024-04-14"},{"lineNumber":178,"author":{"gitId":"paturikarthik"},"content":"                (LocalDate.now().plusDays(NUMBER_OF_DAYS_TO_YESTERDAY));","lastModifiedDate":"2024-04-13"},{"lineNumber":179,"author":{"gitId":"paturikarthik"},"content":"        if (sleepConsumedYesterday \u003c 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":180,"author":{"gitId":"paturikarthik"},"content":"            sleepConsumedYesterday \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":181,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":182,"author":{"gitId":"paturikarthik"},"content":"        double progressYesterday \u003d sleepConsumedYesterday / sleepRequired;","lastModifiedDate":"2024-04-14"},{"lineNumber":183,"author":{"gitId":"paturikarthik"},"content":"        int width \u003d PROGRESS_BAR_WIDTH;","lastModifiedDate":"2024-04-13"},{"lineNumber":184,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":185,"author":{"gitId":"paturikarthik"},"content":"        double sleepConsumedDayBefore \u003d sleepList.getSleepConsumed","lastModifiedDate":"2024-04-14"},{"lineNumber":186,"author":{"gitId":"paturikarthik"},"content":"                (LocalDate.now().plusDays(NUMBER_OF_DAYS_TO_DAY_BEFORE));","lastModifiedDate":"2024-04-13"},{"lineNumber":187,"author":{"gitId":"paturikarthik"},"content":"        if (sleepConsumedDayBefore \u003c 0) {","lastModifiedDate":"2024-04-13"},{"lineNumber":188,"author":{"gitId":"paturikarthik"},"content":"            sleepConsumedDayBefore \u003d 0;","lastModifiedDate":"2024-04-13"},{"lineNumber":189,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":190,"author":{"gitId":"paturikarthik"},"content":"        double progressDayBefore \u003d sleepConsumedDayBefore / sleepRequired;","lastModifiedDate":"2024-04-14"},{"lineNumber":191,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":192,"author":{"gitId":"paturikarthik"},"content":"        double[] progress \u003d new double[NUMBER_OF_DAYS_TO_TRACK];","lastModifiedDate":"2024-04-13"},{"lineNumber":193,"author":{"gitId":"paturikarthik"},"content":"        progress[INDEX_OF_TODAY] \u003d progressToday;","lastModifiedDate":"2024-04-13"},{"lineNumber":194,"author":{"gitId":"paturikarthik"},"content":"        progress[INDEX_OF_YESTERDAY] \u003d progressYesterday;","lastModifiedDate":"2024-04-13"},{"lineNumber":195,"author":{"gitId":"paturikarthik"},"content":"        progress[INDEX_OF_DAY_BEFORE] \u003d progressDayBefore;","lastModifiedDate":"2024-04-13"},{"lineNumber":196,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":197,"author":{"gitId":"paturikarthik"},"content":"        double[] sleepConsumed \u003d new double[NUMBER_OF_DAYS_TO_TRACK];","lastModifiedDate":"2024-04-14"},{"lineNumber":198,"author":{"gitId":"paturikarthik"},"content":"        sleepConsumed[INDEX_OF_TODAY] \u003d sleepConsumedToday;","lastModifiedDate":"2024-04-13"},{"lineNumber":199,"author":{"gitId":"paturikarthik"},"content":"        sleepConsumed[INDEX_OF_YESTERDAY] \u003d sleepConsumedYesterday;","lastModifiedDate":"2024-04-13"},{"lineNumber":200,"author":{"gitId":"paturikarthik"},"content":"        sleepConsumed[INDEX_OF_DAY_BEFORE] \u003d sleepConsumedDayBefore;","lastModifiedDate":"2024-04-13"},{"lineNumber":201,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":202,"author":{"gitId":"paturikarthik"},"content":"        for (int date \u003d 0; date \u003c NUMBER_OF_DAYS_TO_TRACK; date++) {","lastModifiedDate":"2024-04-13"},{"lineNumber":203,"author":{"gitId":"paturikarthik"},"content":"            int progressWidth \u003d (int) (width * progress[date]);","lastModifiedDate":"2024-04-13"},{"lineNumber":204,"author":{"gitId":"paturikarthik"},"content":"            StringBuilder progressBar \u003d new StringBuilder(\"[\");","lastModifiedDate":"2024-04-13"},{"lineNumber":205,"author":{"gitId":"paturikarthik"},"content":"            for (int i \u003d 0; i \u003c width; i++) {","lastModifiedDate":"2024-04-13"},{"lineNumber":206,"author":{"gitId":"paturikarthik"},"content":"                if (i \u003c progressWidth) {","lastModifiedDate":"2024-04-13"},{"lineNumber":207,"author":{"gitId":"paturikarthik"},"content":"                    progressBar.append(\"\u003d\");","lastModifiedDate":"2024-04-13"},{"lineNumber":208,"author":{"gitId":"paturikarthik"},"content":"                } else {","lastModifiedDate":"2024-04-13"},{"lineNumber":209,"author":{"gitId":"paturikarthik"},"content":"                    progressBar.append(\" \");","lastModifiedDate":"2024-04-13"},{"lineNumber":210,"author":{"gitId":"paturikarthik"},"content":"                }","lastModifiedDate":"2024-04-13"},{"lineNumber":211,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-13"},{"lineNumber":212,"author":{"gitId":"paturikarthik"},"content":"            progressBar.append(\"] \");","lastModifiedDate":"2024-04-13"},{"lineNumber":213,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-13"},{"lineNumber":214,"author":{"gitId":"paturikarthik"},"content":"            int percentage \u003d (int) (progress[date] * 100);","lastModifiedDate":"2024-04-13"},{"lineNumber":215,"author":{"gitId":"paturikarthik"},"content":"            printUserSleepProgress(sleepConsumed[date], sleepRequired, progressBar.toString(),","lastModifiedDate":"2024-04-13"},{"lineNumber":216,"author":{"gitId":"paturikarthik"},"content":"                    percentage, date);","lastModifiedDate":"2024-04-13"},{"lineNumber":217,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-13"},{"lineNumber":218,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":219,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"paturikarthik":219}},{"path":"src/test/java/seedu/lifetrack/CalorieListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-29"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"public class CalorieListTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"    private final String ADDED_ENTRY_HEADER \u003d \"\\t The following entry has been added to your caloric list!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"    private final String DELETE_ENTRY_HEADER \u003d \"\\t The following calorie record has been successfully deleted!\";","lastModifiedDate":"2024-04-10"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"    private final String DELETE_ENTRY_INVALID_INPUT \u003d \"\\t Please enter a valid positive integer \" +","lastModifiedDate":"2024-04-10"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"            \"within the range of all caloriesID shown in the calories list.\\n\" +","lastModifiedDate":"2024-04-15"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"            \"\\t Example input: calories delete CALORIES_ID\";","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"    public void addEntry_validInput_entryAdded() {","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"        // Test setup","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"        String validInputCalorieIn \u003d \"calories in Eat burger c/369 d/2024-03-14\";","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"        String validInputCalorieOut \u003d \"calories out run c/679 d/2024-03-15\";","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"        // Call method to test","lastModifiedDate":"2024-03-14"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"        calorieList.addEntry(validInputCalorieIn);","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"        calorieList.addEntry(validInputCalorieOut);","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"        // Verify that the entry has been added to the list","lastModifiedDate":"2024-03-14"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"        assertEquals(2, calorieList.getSize());","lastModifiedDate":"2024-03-15"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"        InputEntry firstEntry \u003d (InputEntry)calorieList.getEntry(0);","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"        OutputEntry secondEntry \u003d (OutputEntry)calorieList.getEntry(1);","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"        // Check calories intake entry","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"        LocalDate dateIntake \u003d LocalDate.parse(\"2024-03-14\");","lastModifiedDate":"2024-03-29"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"        assertTrue(firstEntry.getDate().isEqual(dateIntake));","lastModifiedDate":"2024-03-29"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"        assertEquals(\"Eat burger\", firstEntry.getDescription());","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"        assertEquals(369, firstEntry.getCalories());","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"        // Check calories outflow entry","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"        LocalDate dateOutflow \u003d LocalDate.parse(\"2024-03-15\");","lastModifiedDate":"2024-03-29"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"        assertTrue(secondEntry.getDate().isEqual(dateOutflow));","lastModifiedDate":"2024-03-29"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"        assertEquals(\"run\", secondEntry.getDescription());","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        assertEquals(679, secondEntry.getCalories());","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author a-wild-chocolate","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteCalorieValidIndex() {","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories out Run c/200 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d calorieList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete 1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize - 1, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories out Run c/200 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories in Eat c/200 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"a-wild-chocolate"},"content":"        initialSize \u003d calorieList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete 2\");","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize - 1, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteCalorieInvalidIndex() {","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"a-wild-chocolate"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories out Run c/200 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d calorieList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete 2\"); // Index out of bounds","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete -1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"    //@@author shawnpong","lastModifiedDate":"2024-03-22"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"    public void testPrintCalorieListEmpty() {","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t Your caloric list is empty. \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"                \"Add new entries to populate your list :)\" + lineSeparator;","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"    public void testPrintCalorieListNonEmpty() {","lastModifiedDate":"2024-03-21"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in burger king c/200 d/2024-03-14\");","lastModifiedDate":"2024-04-09"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d ADDED_ENTRY_HEADER + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"                \"\\t \" + calorieList.getEntry(0).toString() + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Caloric List:\" + lineSeparator + lineSeparator +","lastModifiedDate":"2024-04-09"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Caloric Inflow List:\" + lineSeparator +","lastModifiedDate":"2024-04-09"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. \\t caloriesID: 1, Date: 2024-03-14, Description: burger king, Calories: 200\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"                lineSeparator + \"\\t Your Caloric Outflow List:\" + lineSeparator;","lastModifiedDate":"2024-04-10"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"    public void testPrintCalorieListMultipleEntries() {","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in burger king c/200 d/2024-03-14\");","lastModifiedDate":"2024-04-09"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Walk c/150 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in acai c/500 d/2024-03-14\");","lastModifiedDate":"2024-04-09"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Run c/250 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in commhall dinner c/300 d/2024-03-14\");","lastModifiedDate":"2024-04-09"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"        StringBuilder expectedOutput \u003d new StringBuilder();","lastModifiedDate":"2024-03-21"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2024-03-21"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"            expectedOutput.append(ADDED_ENTRY_HEADER)","lastModifiedDate":"2024-04-10"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator).append(\"\\t \").append(calorieList.getEntry(i).toString())","lastModifiedDate":"2024-03-21"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator);","lastModifiedDate":"2024-03-21"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"        expectedOutput.append(\"\\t Your Caloric List:\")","lastModifiedDate":"2024-03-21"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t Your Caloric Inflow List:\")","lastModifiedDate":"2024-04-09"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t caloriesID: 1, Date: 2024-03-14, Description: burger king, Calories: 200\")","lastModifiedDate":"2024-04-10"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 2. \\t caloriesID: 3, Date: 2024-03-14, Description: acai, Calories: 500\")","lastModifiedDate":"2024-04-10"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 3. \\t caloriesID: 5, Date: 2024-03-14, Description: commhall dinner, Calories: 300\")","lastModifiedDate":"2024-04-10"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-09"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-09"},{"lineNumber":141,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t Your Caloric Outflow List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-09"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t caloriesID: 2, Date: 2024-03-14, Description: Walk, Calories: 150\")","lastModifiedDate":"2024-04-10"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-09"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 2. \\t caloriesID: 4, Date: 2024-03-14, Description: Run, Calories: 250\")","lastModifiedDate":"2024-04-10"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator);","lastModifiedDate":"2024-03-21"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput.toString(), outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"        assertEquals(5, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":151,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":152,"author":{"gitId":"shawnpong"},"content":"    public void testAddEntry_addDifferentDates_datesSortedCorrectly() {","lastModifiedDate":"2024-04-10"},{"lineNumber":153,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":154,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-10"},{"lineNumber":155,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-04-10"},{"lineNumber":156,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":157,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-04-10"},{"lineNumber":158,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in burger king c/200 d/2024-03-14\");","lastModifiedDate":"2024-04-10"},{"lineNumber":159,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Walk c/150 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":160,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in acai c/500 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":161,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Run c/250 d/2024-03-14\");","lastModifiedDate":"2024-04-10"},{"lineNumber":162,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in commhall dinner c/300 d/2021-01-11\");","lastModifiedDate":"2024-04-10"},{"lineNumber":163,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out play pool c/69 d/2021-01-11\");","lastModifiedDate":"2024-04-10"},{"lineNumber":164,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-04-10"},{"lineNumber":165,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":166,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-04-10"},{"lineNumber":167,"author":{"gitId":"shawnpong"},"content":"        StringBuilder expectedOutput \u003d new StringBuilder();","lastModifiedDate":"2024-04-10"},{"lineNumber":168,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":169,"author":{"gitId":"shawnpong"},"content":"        // expected output string for adding entries","lastModifiedDate":"2024-04-10"},{"lineNumber":170,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 1; i \u003c 7; i++) {","lastModifiedDate":"2024-04-10"},{"lineNumber":171,"author":{"gitId":"shawnpong"},"content":"            expectedOutput.append(ADDED_ENTRY_HEADER)","lastModifiedDate":"2024-04-10"},{"lineNumber":172,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator).append(\"\\t \")","lastModifiedDate":"2024-04-10"},{"lineNumber":173,"author":{"gitId":"shawnpong"},"content":"                    .append(calorieList.getEntry(calorieList.getIndexFromEntryID(i)).toString())","lastModifiedDate":"2024-04-10"},{"lineNumber":174,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":175,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":176,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":177,"author":{"gitId":"shawnpong"},"content":"        // expected output string for printing calorie list","lastModifiedDate":"2024-04-10"},{"lineNumber":178,"author":{"gitId":"shawnpong"},"content":"        expectedOutput.append(\"\\t Your Caloric List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":179,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":180,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":181,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t Your Caloric Inflow List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":182,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":183,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t caloriesID: 5, Date: 2021-01-11, Description: commhall dinner, Calories: 300\")","lastModifiedDate":"2024-04-10"},{"lineNumber":184,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":185,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 2. \\t caloriesID: 3, Date: 2022-02-22, Description: acai, Calories: 500\")","lastModifiedDate":"2024-04-10"},{"lineNumber":186,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":187,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 3. \\t caloriesID: 1, Date: 2024-03-14, Description: burger king, Calories: 200\")","lastModifiedDate":"2024-04-10"},{"lineNumber":188,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":189,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":190,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t Your Caloric Outflow List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":191,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":192,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t caloriesID: 6, Date: 2021-01-11, Description: play pool, Calories: 69\")","lastModifiedDate":"2024-04-10"},{"lineNumber":193,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":194,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 2. \\t caloriesID: 2, Date: 2022-02-22, Description: Walk, Calories: 150\")","lastModifiedDate":"2024-04-10"},{"lineNumber":195,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":196,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 3. \\t caloriesID: 4, Date: 2024-03-14, Description: Run, Calories: 250\")","lastModifiedDate":"2024-04-10"},{"lineNumber":197,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":198,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput.toString(), outputStream.toString());","lastModifiedDate":"2024-04-10"},{"lineNumber":199,"author":{"gitId":"shawnpong"},"content":"        assertEquals(6, calorieList.getSize());","lastModifiedDate":"2024-04-10"},{"lineNumber":200,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":201,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":202,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":203,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteEntry_deleteUsingEntryID_correctlyDeletesBasedOnEntryID() {","lastModifiedDate":"2024-04-10"},{"lineNumber":204,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":205,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-10"},{"lineNumber":206,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-04-10"},{"lineNumber":207,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":208,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-04-10"},{"lineNumber":209,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in burger king c/200 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":210,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Walk c/150 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":211,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in acai c/500 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":212,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":213,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-04-10"},{"lineNumber":214,"author":{"gitId":"shawnpong"},"content":"        StringBuilder expectedOutput \u003d new StringBuilder();","lastModifiedDate":"2024-04-10"},{"lineNumber":215,"author":{"gitId":"shawnpong"},"content":"        // expected output string for adding entries","lastModifiedDate":"2024-04-10"},{"lineNumber":216,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 1; i \u003c 4; i++) {","lastModifiedDate":"2024-04-10"},{"lineNumber":217,"author":{"gitId":"shawnpong"},"content":"            expectedOutput.append(ADDED_ENTRY_HEADER)","lastModifiedDate":"2024-04-10"},{"lineNumber":218,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator).append(\"\\t \")","lastModifiedDate":"2024-04-10"},{"lineNumber":219,"author":{"gitId":"shawnpong"},"content":"                    .append(calorieList.getEntry(calorieList.getIndexFromEntryID(i)).toString())","lastModifiedDate":"2024-04-10"},{"lineNumber":220,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":221,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":222,"author":{"gitId":"shawnpong"},"content":"        // expected output string for deleting entry","lastModifiedDate":"2024-04-10"},{"lineNumber":223,"author":{"gitId":"shawnpong"},"content":"        expectedOutput.append(DELETE_ENTRY_HEADER)","lastModifiedDate":"2024-04-10"},{"lineNumber":224,"author":{"gitId":"shawnpong"},"content":"                        .append(lineSeparator).append(\"\\t \")","lastModifiedDate":"2024-04-10"},{"lineNumber":225,"author":{"gitId":"shawnpong"},"content":"                        .append(calorieList.getEntry(calorieList.getIndexFromEntryID(3)).toString())","lastModifiedDate":"2024-04-10"},{"lineNumber":226,"author":{"gitId":"shawnpong"},"content":"                        .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":227,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":228,"author":{"gitId":"shawnpong"},"content":"        calorieList.deleteEntry(\"calories delete 3\");","lastModifiedDate":"2024-04-10"},{"lineNumber":229,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-04-10"},{"lineNumber":230,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":231,"author":{"gitId":"shawnpong"},"content":"        // expected output string for printing calories list","lastModifiedDate":"2024-04-10"},{"lineNumber":232,"author":{"gitId":"shawnpong"},"content":"        expectedOutput.append(\"\\t Your Caloric List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":233,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":234,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":235,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t Your Caloric Inflow List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":236,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":237,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t caloriesID: 1, Date: 2022-02-22, Description: burger king, Calories: 200\")","lastModifiedDate":"2024-04-10"},{"lineNumber":238,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":239,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":240,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t Your Caloric Outflow List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":241,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":242,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t caloriesID: 2, Date: 2022-02-22, Description: Walk, Calories: 150\")","lastModifiedDate":"2024-04-10"},{"lineNumber":243,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":244,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput.toString(), outputStream.toString());","lastModifiedDate":"2024-04-10"},{"lineNumber":245,"author":{"gitId":"shawnpong"},"content":"        assertEquals(2, calorieList.getSize());","lastModifiedDate":"2024-04-10"},{"lineNumber":246,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":247,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":248,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":249,"author":{"gitId":"shawnpong"},"content":"    public void testAddEntry_addAndDeleteEntries_entryIDIncrementsProperly() {","lastModifiedDate":"2024-04-10"},{"lineNumber":250,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":251,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-10"},{"lineNumber":252,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-04-10"},{"lineNumber":253,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":254,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-04-10"},{"lineNumber":255,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in burger king c/200 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":256,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Walk c/150 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":257,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in acai c/500 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":258,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":259,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-04-10"},{"lineNumber":260,"author":{"gitId":"shawnpong"},"content":"        StringBuilder expectedOutput \u003d new StringBuilder();","lastModifiedDate":"2024-04-10"},{"lineNumber":261,"author":{"gitId":"shawnpong"},"content":"        // expected output string for first 3 added entries","lastModifiedDate":"2024-04-10"},{"lineNumber":262,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 1; i \u003c 4; i++) {","lastModifiedDate":"2024-04-10"},{"lineNumber":263,"author":{"gitId":"shawnpong"},"content":"            expectedOutput.append(ADDED_ENTRY_HEADER)","lastModifiedDate":"2024-04-10"},{"lineNumber":264,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator).append(\"\\t \")","lastModifiedDate":"2024-04-10"},{"lineNumber":265,"author":{"gitId":"shawnpong"},"content":"                    .append(calorieList.getEntry(calorieList.getIndexFromEntryID(i)).toString())","lastModifiedDate":"2024-04-10"},{"lineNumber":266,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":267,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":268,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":269,"author":{"gitId":"shawnpong"},"content":"        // expected output string for first deleted entry","lastModifiedDate":"2024-04-10"},{"lineNumber":270,"author":{"gitId":"shawnpong"},"content":"        expectedOutput.append(DELETE_ENTRY_HEADER)","lastModifiedDate":"2024-04-10"},{"lineNumber":271,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator).append(\"\\t \")","lastModifiedDate":"2024-04-10"},{"lineNumber":272,"author":{"gitId":"shawnpong"},"content":"                .append(calorieList.getEntry(calorieList.getIndexFromEntryID(3)).toString())","lastModifiedDate":"2024-04-10"},{"lineNumber":273,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":274,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":275,"author":{"gitId":"shawnpong"},"content":"        calorieList.deleteEntry(\"calories delete 3\");","lastModifiedDate":"2024-04-10"},{"lineNumber":276,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in yong tau foo c/688 d/2022-02-22 m/10,10,10\");","lastModifiedDate":"2024-04-10"},{"lineNumber":277,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":278,"author":{"gitId":"shawnpong"},"content":"        // expected output string for fourth added entry","lastModifiedDate":"2024-04-10"},{"lineNumber":279,"author":{"gitId":"shawnpong"},"content":"        expectedOutput.append(ADDED_ENTRY_HEADER)","lastModifiedDate":"2024-04-10"},{"lineNumber":280,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator).append(\"\\t \")","lastModifiedDate":"2024-04-10"},{"lineNumber":281,"author":{"gitId":"shawnpong"},"content":"                .append(calorieList.getEntry(calorieList.getIndexFromEntryID(4)).toString())","lastModifiedDate":"2024-04-10"},{"lineNumber":282,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":283,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":284,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-04-10"},{"lineNumber":285,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":286,"author":{"gitId":"shawnpong"},"content":"        // expected output string for printing calorie list","lastModifiedDate":"2024-04-10"},{"lineNumber":287,"author":{"gitId":"shawnpong"},"content":"        expectedOutput.append(\"\\t Your Caloric List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":288,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":289,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":290,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t Your Caloric Inflow List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":291,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":292,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t caloriesID: 1, Date: 2022-02-22, Description: burger king, Calories: 200\")","lastModifiedDate":"2024-04-10"},{"lineNumber":293,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":294,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 2. \\t caloriesID: 4, Date: 2022-02-22, Description: yong tau foo, Calories: 688 \" +","lastModifiedDate":"2024-04-10"},{"lineNumber":295,"author":{"gitId":"shawnpong"},"content":"                        \"(C: 10, P: 10, F: 10)\")","lastModifiedDate":"2024-04-10"},{"lineNumber":296,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":297,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":298,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t Your Caloric Outflow List:\")","lastModifiedDate":"2024-04-10"},{"lineNumber":299,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-04-10"},{"lineNumber":300,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t caloriesID: 2, Date: 2022-02-22, Description: Walk, Calories: 150\")","lastModifiedDate":"2024-04-10"},{"lineNumber":301,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":302,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput.toString(), outputStream.toString());","lastModifiedDate":"2024-04-10"},{"lineNumber":303,"author":{"gitId":"shawnpong"},"content":"        assertEquals(3, calorieList.getSize());","lastModifiedDate":"2024-04-10"},{"lineNumber":304,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":305,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":306,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":307,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-10"},{"lineNumber":308,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteEntry_invalidInputs_exceptionThrown() {","lastModifiedDate":"2024-04-10"},{"lineNumber":309,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-04-10"},{"lineNumber":310,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-10"},{"lineNumber":311,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-04-10"},{"lineNumber":312,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":313,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-04-10"},{"lineNumber":314,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in burger king c/200 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":315,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Walk c/150 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":316,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in acai c/500 d/2022-02-22\");","lastModifiedDate":"2024-04-10"},{"lineNumber":317,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":318,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-04-10"},{"lineNumber":319,"author":{"gitId":"shawnpong"},"content":"        StringBuilder expectedOutput \u003d new StringBuilder();","lastModifiedDate":"2024-04-10"},{"lineNumber":320,"author":{"gitId":"shawnpong"},"content":"        // expected output string for adding entries","lastModifiedDate":"2024-04-10"},{"lineNumber":321,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 1; i \u003c 4; i++) {","lastModifiedDate":"2024-04-10"},{"lineNumber":322,"author":{"gitId":"shawnpong"},"content":"            expectedOutput.append(ADDED_ENTRY_HEADER)","lastModifiedDate":"2024-04-10"},{"lineNumber":323,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator).append(\"\\t \")","lastModifiedDate":"2024-04-10"},{"lineNumber":324,"author":{"gitId":"shawnpong"},"content":"                    .append(calorieList.getEntry(calorieList.getIndexFromEntryID(i)).toString())","lastModifiedDate":"2024-04-10"},{"lineNumber":325,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":326,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":327,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":328,"author":{"gitId":"shawnpong"},"content":"        // Invalid Inputs for calories delete","lastModifiedDate":"2024-04-10"},{"lineNumber":329,"author":{"gitId":"shawnpong"},"content":"        calorieList.deleteEntry(\"calories delete     \");","lastModifiedDate":"2024-04-10"},{"lineNumber":330,"author":{"gitId":"shawnpong"},"content":"        calorieList.deleteEntry(\"calories delete\");","lastModifiedDate":"2024-04-10"},{"lineNumber":331,"author":{"gitId":"shawnpong"},"content":"        calorieList.deleteEntry(\"calories delete a b\");","lastModifiedDate":"2024-04-10"},{"lineNumber":332,"author":{"gitId":"shawnpong"},"content":"        calorieList.deleteEntry(\"calories delete 1 2\");","lastModifiedDate":"2024-04-10"},{"lineNumber":333,"author":{"gitId":"shawnpong"},"content":"        calorieList.deleteEntry(\"calories delete $12\");","lastModifiedDate":"2024-04-10"},{"lineNumber":334,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":335,"author":{"gitId":"shawnpong"},"content":"        // expected output string for invalid entry inputs","lastModifiedDate":"2024-04-10"},{"lineNumber":336,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2024-04-10"},{"lineNumber":337,"author":{"gitId":"shawnpong"},"content":"            expectedOutput.append(DELETE_ENTRY_INVALID_INPUT).append(lineSeparator);","lastModifiedDate":"2024-04-10"},{"lineNumber":338,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-10"},{"lineNumber":339,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-10"},{"lineNumber":340,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput.toString(), outputStream.toString());","lastModifiedDate":"2024-04-10"},{"lineNumber":341,"author":{"gitId":"shawnpong"},"content":"        assertEquals(3, calorieList.getSize());","lastModifiedDate":"2024-04-10"},{"lineNumber":342,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-10"},{"lineNumber":343,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"rexyyong":34,"a-wild-chocolate":25,"owx0130":17,"shawnpong":266,"paturikarthik":1}},{"path":"src/test/java/seedu/lifetrack/CaloriesFileHandlerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.storage.CaloriesFileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"public class CaloriesFileHandlerTest {","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    private String filePath \u003d \"sample-data/caloriesTestData.txt\";","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    private CaloriesFileHandler fileHandler \u003d new CaloriesFileHandler(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    private ArrayList\u003cEntry\u003e expectedEntries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    public void getCalorieEntriesFromFile_correctCaloriesInInput_allEntriesRetrievedFromFile() {","lastModifiedDate":"2024-04-15"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"            InputEntry expectedEntry_1 \u003d new InputEntry(1, \"burger\", 200, LocalDate.parse(\"2024-02-02\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"            InputEntry expectedEntry_2 \u003d new InputEntry(2, \"rice\", 190, LocalDate.parse(\"2024-02-01\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"            InputEntry expectedEntry_3 \u003d new InputEntry(3, \"noodle\", 180, LocalDate.parse(\"2024-02-03\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_1);","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_2);","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_3);","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeEntries(expectedEntries);","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"            ArrayList\u003cEntry\u003e actualEntries \u003d fileHandler.getCalorieEntriesFromFile();","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"            for (int i \u003d 0; i \u003c expectedEntries.size(); i++) {","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"                InputEntry expectedEntryOut \u003d (InputEntry)expectedEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"                InputEntry actualEntryOut \u003d (InputEntry)actualEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getEntryID(), actualEntryOut.getEntryID());","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDescription(), actualEntryOut.getDescription());","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDate(), actualEntryOut.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getCalories(), actualEntryOut.getCalories());","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"            expectedEntries.clear();","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"            return;","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"    public void getCalorieEntriesFromFile_correctCaloriesInInputWithMacros_allEntriesRetrievedFromFile() {","lastModifiedDate":"2024-04-15"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"            Food food_1 \u003d new Food(100, 200, 300);","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"            InputEntry expectedEntry_1 \u003d new InputEntry(1, \"burger\", 200, LocalDate.parse(\"2024-02-02\"), food_1);","lastModifiedDate":"2024-04-14"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"            Food food_2 \u003d new Food(200, 400, 600);","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"            InputEntry expectedEntry_2 \u003d new InputEntry(2, \"rice\", 190, LocalDate.parse(\"2024-02-01\"), food_2);","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"            Food food_3 \u003d new Food(300, 600, 900);","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"            InputEntry expectedEntry_3 \u003d new InputEntry(3, \"noodle\", 180, LocalDate.parse(\"2024-02-03\"), food_3);","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_1);","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_2);","lastModifiedDate":"2024-04-14"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_3);","lastModifiedDate":"2024-04-14"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeEntries(expectedEntries);","lastModifiedDate":"2024-04-14"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"            ArrayList\u003cEntry\u003e actualEntries \u003d fileHandler.getCalorieEntriesFromFile();","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"            for (int i \u003d 0; i \u003c expectedEntries.size(); i++) {","lastModifiedDate":"2024-04-14"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"                InputEntry expectedEntryOut \u003d (InputEntry)expectedEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"                InputEntry actualEntryOut \u003d (InputEntry)actualEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"                Food expectedFoodOut \u003d expectedEntryOut.getFood();","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"                Food actualFoodOut \u003d actualEntryOut.getFood();","lastModifiedDate":"2024-04-14"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getEntryID(), actualEntryOut.getEntryID());","lastModifiedDate":"2024-04-14"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDescription(), actualEntryOut.getDescription());","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDate(), actualEntryOut.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getCalories(), actualEntryOut.getCalories());","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedFoodOut.getCarbohydrates(), actualFoodOut.getCarbohydrates());","lastModifiedDate":"2024-04-14"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedFoodOut.getProteins(), actualFoodOut.getProteins());","lastModifiedDate":"2024-04-14"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedFoodOut.getFats(), actualFoodOut.getFats());","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"            expectedEntries.clear();","lastModifiedDate":"2024-04-14"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"            return;","lastModifiedDate":"2024-04-14"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"    public void getCalorieEntriesFromFile_correctCaloriesOutInput_allEntriesRetrievedFromFile() {","lastModifiedDate":"2024-04-15"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"            OutputEntry expectedEntry_1 \u003d new OutputEntry(1, \"run\", 200, LocalDate.parse(\"2024-02-02\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"            OutputEntry expectedEntry_2 \u003d new OutputEntry(2, \"swim\", 190, LocalDate.parse(\"2024-02-01\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"            OutputEntry expectedEntry_3 \u003d new OutputEntry(3, \"football\", 180, LocalDate.parse(\"2024-02-03\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_1);","lastModifiedDate":"2024-04-14"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_2);","lastModifiedDate":"2024-04-14"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_3);","lastModifiedDate":"2024-04-14"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeEntries(expectedEntries);","lastModifiedDate":"2024-04-14"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"            ArrayList\u003cEntry\u003e actualEntries \u003d fileHandler.getCalorieEntriesFromFile();","lastModifiedDate":"2024-04-14"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"            for (int i \u003d 0; i \u003c expectedEntries.size(); i++) {","lastModifiedDate":"2024-04-14"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"                OutputEntry expectedEntryOut \u003d (OutputEntry)expectedEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"                OutputEntry actualEntryOut \u003d (OutputEntry)actualEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getEntryID(), actualEntryOut.getEntryID());","lastModifiedDate":"2024-04-14"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDescription(), actualEntryOut.getDescription());","lastModifiedDate":"2024-04-14"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDate(), actualEntryOut.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":97,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getCalories(), actualEntryOut.getCalories());","lastModifiedDate":"2024-04-14"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"            expectedEntries.clear();","lastModifiedDate":"2024-04-14"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":101,"author":{"gitId":"owx0130"},"content":"            return;","lastModifiedDate":"2024-04-14"},{"lineNumber":102,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"owx0130":104}},{"path":"src/test/java/seedu/lifetrack/HydrationFileHandlerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationEntry;","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.storage.HydrationFileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"public class HydrationFileHandlerTest {","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    private String filePath \u003d \"sample-data/hydrationTestData.txt\";","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    private HydrationFileHandler fileHandler \u003d new HydrationFileHandler(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    private ArrayList\u003cEntry\u003e expectedEntries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    public void getHydrationEntriesFromFile_correctHydrationInInput_allEntriesRetrievedFromFile() {","lastModifiedDate":"2024-04-15"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"            HydrationEntry expectedEntry_1 \u003d new HydrationEntry(1, \"milo\", 200, LocalDate.parse(\"2024-02-02\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"            HydrationEntry expectedEntry_2 \u003d new HydrationEntry(2, \"coffee\", 190, LocalDate.parse(\"2024-02-01\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"            HydrationEntry expectedEntry_3 \u003d new HydrationEntry(3, \"tea\", 180, LocalDate.parse(\"2024-02-03\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_1);","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_2);","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_3);","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeEntries(expectedEntries);","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"            ArrayList\u003cEntry\u003e actualEntries \u003d fileHandler.getHydrationEntriesFromFile();","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"            for (int i \u003d 0; i \u003c expectedEntries.size(); i++) {","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"                HydrationEntry expectedEntryOut \u003d (HydrationEntry)expectedEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"                HydrationEntry actualEntryOut \u003d (HydrationEntry)actualEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getEntryID(), actualEntryOut.getEntryID());","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDescription(), actualEntryOut.getDescription());","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDate(), actualEntryOut.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getVolume(), actualEntryOut.getVolume());","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"            expectedEntries.clear();","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"            return;","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"owx0130":44}},{"path":"src/test/java/seedu/lifetrack/HydrationListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"//@@author shawnpong","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationList;","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"public class HydrationListTest {","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteHydrationValidIndex() {","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration in Milo v/200 d/2024-02-22\");","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d hydrationList.getSize();","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"        hydrationList.deleteEntry(\"hydration delete 1\");","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize - 1, hydrationList.getSize());","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteHydrationInvalidIndex() {","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration in Milo v/200 d/2024-02-22\");","lastModifiedDate":"2024-04-09"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d hydrationList.getSize();","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"        hydrationList.deleteEntry(\"hydration delete 2\"); // Index out of bounds","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"        hydrationList.deleteEntry(\"hydration delete -1\");","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize, hydrationList.getSize());","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"    public void testPrintHydrationListEmpty() {","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"        hydrationList.printHydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t Your hydration list is empty. Add new entries to populate your list :)\" +","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"                lineSeparator;","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"    public void testPrintHydrationListNonEmpty() {","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration in Milo v/200 d/2024-02-22\");","lastModifiedDate":"2024-04-09"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"        hydrationList.printHydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t hydrationID: 1, Date: 2024-02-22, Description: Milo, Volume: 200\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Hydration List:\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. \\t hydrationID: 1, Date: 2024-02-22, Description: Milo, Volume: 200\" + lineSeparator;","lastModifiedDate":"2024-04-10"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"    public void testPrintHydrationListMultipleEntries() {","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration in Milo v/200 d/2024-02-22\");","lastModifiedDate":"2024-04-09"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration in Water v/300 d/2024-02-22\");","lastModifiedDate":"2024-04-09"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration in Juice v/150 d/2024-02-22\");","lastModifiedDate":"2024-04-09"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"        hydrationList.printHydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t hydrationID: 1, Date: 2024-02-22, Description: Milo, Volume: 200\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"                \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t hydrationID: 2, Date: 2024-02-22, Description: Water, Volume: 300\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"                \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t hydrationID: 3, Date: 2024-02-22, Description: Juice, Volume: 150\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Hydration List:\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. \\t hydrationID: 1, Date: 2024-02-22, Description: Milo, Volume: 200\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"                \"\\t 2. \\t hydrationID: 2, Date: 2024-02-22, Description: Water, Volume: 300\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"                \"\\t 3. \\t hydrationID: 3, Date: 2024-02-22, Description: Juice, Volume: 150\" + lineSeparator;","lastModifiedDate":"2024-04-10"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"        assertEquals(3, hydrationList.getSize());","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"    public void testAddEntry() {","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d hydrationList.getSize();","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration in Water v/250 d/2024-02-23\");","lastModifiedDate":"2024-04-09"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize + 1, hydrationList.getSize());","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteEntryFromEmptyList() {","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d hydrationList.getSize();","lastModifiedDate":"2024-04-02"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"        hydrationList.deleteEntry(\"hydration delete 1\");","lastModifiedDate":"2024-04-02"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize, hydrationList.getSize());","lastModifiedDate":"2024-04-02"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"    public void testPrintHydrationListWithMultipleEntries() {","lastModifiedDate":"2024-04-02"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-04-02"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-02"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-04-02"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration in Coffee v/150 d/2024-02-22\");","lastModifiedDate":"2024-04-09"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration in Tea v/200 d/2024-02-22\");","lastModifiedDate":"2024-04-09"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"        hydrationList.printHydrationList();","lastModifiedDate":"2024-04-02"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t hydrationID: 1, Date: 2024-02-22, Description: Coffee, Volume: 150\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"                \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t hydrationID: 2, Date: 2024-02-22, Description: Tea, Volume: 200\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Hydration List:\" + lineSeparator +","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. \\t hydrationID: 1, Date: 2024-02-22, Description: Coffee, Volume: 150\" + lineSeparator +","lastModifiedDate":"2024-04-10"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"                \"\\t 2. \\t hydrationID: 2, Date: 2024-02-22, Description: Tea, Volume: 200\" + lineSeparator;","lastModifiedDate":"2024-04-10"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"        assertEquals(2, hydrationList.getSize());","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"shawnpong":123}},{"path":"src/test/java/seedu/lifetrack/ParserCaloriesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"//@@author owx0130","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.parser.ParserCalories.parseCaloriesInput;","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncorrectCaloriesInputMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncorrectMacrosInputMessage;","lastModifiedDate":"2024-04-10"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getWhitespaceInInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncompleteMacrosMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getMacrosInCaloriesOutMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesIncorrectOrderMessage;","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesMissingKeywordsMessage;","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getWhitespaceInMacrosInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"class ParserCaloriesTest {","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_missingKeywords_exceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger\", 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"            assertEquals(getCaloriesMissingKeywordsMessage(), e.getMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incompleteInput_exceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger c/ d/2024-02-02\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"            assertEquals(getWhitespaceInInputMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incorrectlyOrderedInput_exceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger d/2024-02-02 c/123\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"            assertEquals(getCaloriesIncorrectOrderMessage(), e.getMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incorrectMacrosInput_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger c/123 d/2024-03-22 m/abc\", 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncorrectMacrosInputMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incorrectCaloriesInput_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories out Running c/abc d/2024-02-02\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncorrectCaloriesInputMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incompleteMacrosInput_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger c/123 d/2024-02-02 m/123,132\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncompleteMacrosMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_macrosInCaloriesOut_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories out running c/123 d/2024-02-02 m/123,123,132\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"            assertEquals(getMacrosInCaloriesOutMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_whitespaceInMacrosInput_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger c/123 d/2024-02-02 m/123,  ,132\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"            assertEquals(getWhitespaceInMacrosInputMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_negativeMacrosInput_exceptionThrown() {","lastModifiedDate":"2024-04-14"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":101,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger c/123 d/2024-02-02 m/123,-3,132\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":102,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncorrectMacrosInputMessage(), e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_negativeCaloriesInput_exceptionThrown() {","lastModifiedDate":"2024-04-14"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger c/-123 d/2024-02-02 m/123,123,123\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":111,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":112,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncorrectCaloriesInputMessage(), e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":113,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":114,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":115,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":116,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":117,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_correctCaloriesInInput_entryReturned() {","lastModifiedDate":"2024-04-14"},{"lineNumber":118,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":119,"author":{"gitId":"owx0130"},"content":"            InputEntry expectedEntry \u003d new InputEntry(1, \"burger\", 123, LocalDate.parse(\"2024-02-02\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":120,"author":{"gitId":"owx0130"},"content":"            InputEntry entry \u003d (InputEntry)parseCaloriesInput(\"calories in burger c/123 d/2024-02-02\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":121,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getEntryID(), entry.getEntryID());","lastModifiedDate":"2024-04-14"},{"lineNumber":122,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getDescription(), entry.getDescription());","lastModifiedDate":"2024-04-14"},{"lineNumber":123,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getDate(), entry.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":124,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getCalories(), entry.getCalories());","lastModifiedDate":"2024-04-14"},{"lineNumber":125,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":126,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncorrectCaloriesInputMessage(), e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":128,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":130,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":131,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_correctCaloriesInInputWithMacros_entryReturned() {","lastModifiedDate":"2024-04-14"},{"lineNumber":132,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"            Food expectedFood \u003d new Food(10, 10, 10);","lastModifiedDate":"2024-04-14"},{"lineNumber":134,"author":{"gitId":"owx0130"},"content":"            InputEntry expectedEntry \u003d new InputEntry(1, \"burger\", 123, LocalDate.parse(\"2024-02-02\"), expectedFood);","lastModifiedDate":"2024-04-14"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"            InputEntry actualEntry \u003d ","lastModifiedDate":"2024-04-14"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"                    (InputEntry)parseCaloriesInput(\"calories in burger c/123 d/2024-02-02 m/10,10,10\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":137,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getEntryID(), actualEntry.getEntryID());","lastModifiedDate":"2024-04-14"},{"lineNumber":138,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getDescription(), actualEntry.getDescription());","lastModifiedDate":"2024-04-14"},{"lineNumber":139,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getDate(), actualEntry.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":140,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getCalories(), actualEntry.getCalories());","lastModifiedDate":"2024-04-14"},{"lineNumber":141,"author":{"gitId":"owx0130"},"content":"            Food actualFood \u003d actualEntry.getFood();","lastModifiedDate":"2024-04-14"},{"lineNumber":142,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedFood.getCarbohydrates(), actualFood.getCarbohydrates());","lastModifiedDate":"2024-04-14"},{"lineNumber":143,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedFood.getProteins(), actualFood.getProteins());","lastModifiedDate":"2024-04-14"},{"lineNumber":144,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedFood.getFats(), actualFood.getFats());","lastModifiedDate":"2024-04-14"},{"lineNumber":145,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":146,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncorrectCaloriesInputMessage(), e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":147,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":148,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":149,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":150,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":151,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_correctCaloriesOutInput_entryReturned() {","lastModifiedDate":"2024-04-14"},{"lineNumber":152,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":153,"author":{"gitId":"owx0130"},"content":"            OutputEntry expectedEntry \u003d new OutputEntry(1, \"run\", 123, LocalDate.parse(\"2024-02-02\"));","lastModifiedDate":"2024-04-14"},{"lineNumber":154,"author":{"gitId":"owx0130"},"content":"            OutputEntry entry \u003d (OutputEntry)parseCaloriesInput(\"calories out run c/123 d/2024-02-02\", 0);","lastModifiedDate":"2024-04-14"},{"lineNumber":155,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getEntryID(), entry.getEntryID());","lastModifiedDate":"2024-04-14"},{"lineNumber":156,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getDescription(), entry.getDescription());","lastModifiedDate":"2024-04-14"},{"lineNumber":157,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getDate(), entry.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":158,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedEntry.getCalories(), entry.getCalories());","lastModifiedDate":"2024-04-14"},{"lineNumber":159,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":160,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncorrectCaloriesInputMessage(), e.getMessage());","lastModifiedDate":"2024-04-14"},{"lineNumber":161,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":162,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":163,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"owx0130":163}},{"path":"src/test/java/seedu/lifetrack/ParserHydrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"//@@author rexyyong","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"import static seedu.lifetrack.system.parser.ParserHydration.parseHydrationInput;","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"public class ParserHydrationTest {","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputContains2Beverages_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in Milo b/1000 b/1000\";","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput, 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputContains2Volumes_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in Milo v/1000 v/1000\";","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput, 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputMissingVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in Milo date/221024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput, 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputWrongOrderDateBeforeVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"hydration add Milo d/221024 v/1000\";","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput, 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":68,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that you have keyed the input in the correct order!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":72,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputNonIntegerValueForVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"hydration in Milo v/##s100 d/221024\";","lastModifiedDate":"2024-04-09"},{"lineNumber":79,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput, 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":83,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that positive integer value is keyed in for volume!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":87,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputNegativeValueForVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":92,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"hydration add Milo v/-1000 d/221024\";","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput, 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":98,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that positive integer value is keyed in for volume!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":102,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":104,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"    //@@author shawnpong","lastModifiedDate":"2024-03-22"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"    public void parseHydrationInput_missingKeywords_exceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"            parseHydrationInput(\"liquids in\", 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"    public void parseHydrationInput_incompleteInput_exceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"            parseHydrationInput(\"liquids in b/Milo\", 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"    public void parseHydrationInput_emptyBeverageName_exceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"            parseHydrationInput(\"liquids in v/1000\", 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"shawnpong"},"content":"    public void parseHydrationInput_emptyVolumeDescription_exceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"            parseHydrationInput(\"liquids in Milo v/   \", 0);","lastModifiedDate":"2024-04-09"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Example input: hydration in Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":151,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"rexyyong":104,"shawnpong":47}},{"path":"src/test/java/seedu/lifetrack/ParserSleepTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.parser.ParserSleep.parseSleepInput;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"public class ParserSleepTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseSleepInput_inputContains2Duration_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"        // setup test","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"        String invalidInput \u003d \"sleep add 8.0 9.2\";","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(invalidInput);","lastModifiedDate":"2024-04-09"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"            assertEquals(\"\\t Invalid input!\\n\"+\"\\t Please ensure that you have entered all keywords!\\n\"+","lastModifiedDate":"2024-04-09"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"                    \"\\t Example input: sleep add 7.5 d/2024-03-11\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseSleepInput_inputContains2Date_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"        // setup test","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"        String invalidInput \u003d \"sleep add d/2024-12-12 d/2024-11-11\";","lastModifiedDate":"2024-04-09"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(invalidInput);","lastModifiedDate":"2024-04-09"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"            assertEquals(\"Please ensure that you have keyed in the correct format: \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"                    \"sleep add \u003cduration\u003e d/\u003cstrDate\u003e\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseSleepInput_inputMissingDuration_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"        // setup test","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"        String invalidInput \u003d \"sleep add d/2024-02-11\";","lastModifiedDate":"2024-04-09"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(invalidInput);","lastModifiedDate":"2024-04-09"},{"lineNumber":41,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"a-wild-chocolate"},"content":"            assertEquals(\"Please ensure that you have keyed in the correct format: \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"                    \"sleep add \u003cduration\u003e d/\u003cstrDate\u003e\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseSleepInput_inputNonPositiveValueForDuration_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"        // setup test","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"        String invalidInput \u003d \"sleep add -2 d/2024-03-11\";","lastModifiedDate":"2024-04-09"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(invalidInput);","lastModifiedDate":"2024-04-09"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"            assertEquals(\"\\t Please input one positive real number into the sleep duration field!\"","lastModifiedDate":"2024-04-09"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"                    , e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseSleepInput_missingKeywords_exceptionThrown() {","lastModifiedDate":"2024-04-09"},{"lineNumber":62,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(\"sleep add\");","lastModifiedDate":"2024-04-09"},{"lineNumber":65,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"a-wild-chocolate"},"content":"            assertEquals(\"\\t Invalid input!\\n\"+\"\\t Please ensure that you have entered all keywords!\\n\"+","lastModifiedDate":"2024-04-09"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"                    \"\\t Example input: sleep add 7.5 d/2024-03-11\", e.getMessage());","lastModifiedDate":"2024-04-09"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"rexyyong":2,"a-wild-chocolate":68}},{"path":"src/test/java/seedu/lifetrack/ParserUserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.system.parser.ParserUser;","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"public class ParserUserTest {","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_validInput_success() throws InvalidInputException {","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseSetUp(input, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(\"karthik\", user.getName());","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(175, user.getHeight());","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(70, user.getWeight());","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(25, user.getAge());","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(\"male\", user.getSex());","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(3, user.getExerciseLevels());","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(2, user.getGoal());","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_emptyInput_throwsException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup\";","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_inCorrectOrder_throwsException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik w/175 h/70 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_invalidNumberOfInputs_throwException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/3 g/2 h/140\";","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_missingName_throwsException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup h/175 w/70 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_missingHeight_throwsException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/ w/70 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_missingWeight_throwsException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/ a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_missingAge_throwsException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/ s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_missingSex_throwsException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/ e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_missingExerciseLevels_throwsException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/ g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":84,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":85,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":86,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":88,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":89,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_missingGoal_throwsException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":90,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/3 g/\";","lastModifiedDate":"2024-04-14"},{"lineNumber":91,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":92,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":93,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":94,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":96,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_invalidHeight_throwsInvalidInputException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/80 w/70 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":98,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":99,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":100,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":103,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_invalidWeight_throwsInvalidInputException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":104,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/20 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":105,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":106,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_invalidAge_throwsInvalidInputException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/10 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":113,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":114,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_invalidGender_throwsInvalidInputException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/non-binary e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":120,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":121,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":122,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":123,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":124,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_invalidExerciseLevels_throwsInvalidInputException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":125,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/6 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":126,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":127,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":128,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":129,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":130,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":131,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserSetUp_invalidGoal_throwsInvalidInputException() {","lastModifiedDate":"2024-04-14"},{"lineNumber":132,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/3 g/7\";","lastModifiedDate":"2024-04-14"},{"lineNumber":133,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":134,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseSetUp(input, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":135,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":136,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":137,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":138,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserUpdate_validNameSetUp() throws InvalidInputException {","lastModifiedDate":"2024-04-14"},{"lineNumber":139,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":140,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":141,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseSetUp(input, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":142,"author":{"gitId":"paturikarthik"},"content":"        String name \u003d \"user update name John\";","lastModifiedDate":"2024-04-14"},{"lineNumber":143,"author":{"gitId":"paturikarthik"},"content":"        String height \u003d \"user update height 174\";","lastModifiedDate":"2024-04-14"},{"lineNumber":144,"author":{"gitId":"paturikarthik"},"content":"        String weight \u003d \"user update weight 90\";","lastModifiedDate":"2024-04-14"},{"lineNumber":145,"author":{"gitId":"paturikarthik"},"content":"        String age \u003d \"user update age 18\";","lastModifiedDate":"2024-04-14"},{"lineNumber":146,"author":{"gitId":"paturikarthik"},"content":"        String sex \u003d \"user update sex female\";","lastModifiedDate":"2024-04-14"},{"lineNumber":147,"author":{"gitId":"paturikarthik"},"content":"        String exerciseLevel \u003d \"user update exercise levels 2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":148,"author":{"gitId":"paturikarthik"},"content":"        String goal \u003d \"user update goal 1\";","lastModifiedDate":"2024-04-14"},{"lineNumber":149,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseUpdate(name, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":150,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseUpdate(height, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":151,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseUpdate(weight, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseUpdate(age, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":153,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseUpdate(sex, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":154,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseUpdate(exerciseLevel, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":155,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseUpdate(goal, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":156,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(\"John\", user.getName());","lastModifiedDate":"2024-04-14"},{"lineNumber":157,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(174, user.getHeight());","lastModifiedDate":"2024-04-14"},{"lineNumber":158,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(90, user.getWeight());","lastModifiedDate":"2024-04-14"},{"lineNumber":159,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(18, user.getAge());","lastModifiedDate":"2024-04-14"},{"lineNumber":160,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(\"female\", user.getSex());","lastModifiedDate":"2024-04-14"},{"lineNumber":161,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(2, user.getExerciseLevels());","lastModifiedDate":"2024-04-14"},{"lineNumber":162,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertEquals(1, user.getGoal());","lastModifiedDate":"2024-04-14"},{"lineNumber":163,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":164,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":165,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":166,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserUpdate_emptyCommand_throwsException() throws InvalidInputException {","lastModifiedDate":"2024-04-14"},{"lineNumber":167,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":168,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":169,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseSetUp(input, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":170,"author":{"gitId":"paturikarthik"},"content":"        String test \u003d \"user update\";","lastModifiedDate":"2024-04-14"},{"lineNumber":171,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseUpdate(test, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":172,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":173,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":174,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":175,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserUpdate_emptyField_throwsException() throws InvalidInputException {","lastModifiedDate":"2024-04-14"},{"lineNumber":176,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":177,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":178,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseSetUp(input, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":179,"author":{"gitId":"paturikarthik"},"content":"        String test \u003d \"user update name\";","lastModifiedDate":"2024-04-14"},{"lineNumber":180,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseUpdate(test, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":181,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":182,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":183,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":184,"author":{"gitId":"paturikarthik"},"content":"    public void parseUserUpdate_unknownInput_throwsException() throws InvalidInputException {","lastModifiedDate":"2024-04-14"},{"lineNumber":185,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"user setup karthik h/175 w/70 a/25 s/male e/3 g/2\";","lastModifiedDate":"2024-04-14"},{"lineNumber":186,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":187,"author":{"gitId":"paturikarthik"},"content":"        ParserUser.parseSetUp(input, user);","lastModifiedDate":"2024-04-14"},{"lineNumber":188,"author":{"gitId":"paturikarthik"},"content":"        String test \u003d \"user update abcd abcd\";","lastModifiedDate":"2024-04-14"},{"lineNumber":189,"author":{"gitId":"paturikarthik"},"content":"        Assertions.assertThrows(InvalidInputException.class, () -\u003e ParserUser.parseUpdate(test, user));","lastModifiedDate":"2024-04-14"},{"lineNumber":190,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":191,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":192,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"paturikarthik":192}},{"path":"src/test/java/seedu/lifetrack/SleepFileHandlerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-04-15"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-04-15"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepEntry;","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.storage.SleepFileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"public class SleepFileHandlerTest {","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    private String filePath \u003d \"sample-data/sleepTestData.txt\";","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    private SleepFileHandler fileHandler \u003d new SleepFileHandler(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    private ArrayList\u003cEntry\u003e expectedEntries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    public void getSleepEntriesFromFile_correctSleepAddInput_allEntriesRetrievedFromFile() {","lastModifiedDate":"2024-04-15"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"            SleepEntry expectedEntry_1 \u003d new SleepEntry(1, 20.3, LocalDate.parse(\"2024-02-02\"));","lastModifiedDate":"2024-04-15"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"            SleepEntry expectedEntry_2 \u003d new SleepEntry(2, 19.2, LocalDate.parse(\"2024-02-01\"));","lastModifiedDate":"2024-04-15"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"            SleepEntry expectedEntry_3 \u003d new SleepEntry(3, 18.1, LocalDate.parse(\"2024-02-03\"));","lastModifiedDate":"2024-04-15"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_1);","lastModifiedDate":"2024-04-15"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_2);","lastModifiedDate":"2024-04-15"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"            expectedEntries.add(expectedEntry_3);","lastModifiedDate":"2024-04-15"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeEntries(expectedEntries);","lastModifiedDate":"2024-04-15"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"            ArrayList\u003cEntry\u003e actualEntries \u003d fileHandler.getSleepEntriesFromFile();","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"            for (int i \u003d 0; i \u003c expectedEntries.size(); i++) {","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"                SleepEntry expectedEntryOut \u003d (SleepEntry)expectedEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"                SleepEntry actualEntryOut \u003d (SleepEntry)actualEntries.get(i);","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getEntryID(), actualEntryOut.getEntryID());","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDescription(), actualEntryOut.getDescription());","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDate(), actualEntryOut.getDate());","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"                assertEquals(expectedEntryOut.getDuration(), actualEntryOut.getDuration());","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"            expectedEntries.clear();","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-04-15"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"            return;","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"owx0130":44}},{"path":"src/test/java/seedu/lifetrack/SleepListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepList;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"public class SleepListTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteSleepValidIndex(){","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.addSleep(\"sleep add 7.5 d/2024-03-03\");","lastModifiedDate":"2024-04-10"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"        sleepList.addSleep(\"sleep add 8 d/2024-12-10\");","lastModifiedDate":"2024-03-29"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.printSleepList();","lastModifiedDate":"2024-04-10"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d sleepList.getSize();","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"        sleepList.deleteSleep(\"sleep delete \"+sleepList.getSleep(0).getEntryID());","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize - 1, sleepList.getSize());","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteSleepInvalidIndex() {","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.addSleep(\"sleep add 7.5 d/2024-13-10\");","lastModifiedDate":"2024-04-10"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.addSleep(\"sleep add 8\");","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d sleepList.getSize();","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.deleteSleep(\"sleep delete 20\"); // Index out of bounds","lastModifiedDate":"2024-04-10"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.deleteSleep(\"sleep delete -2\");","lastModifiedDate":"2024-04-10"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize, sleepList.getSize());","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testPrintSleepListEmpty() {","lastModifiedDate":"2024-04-09"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.printSleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        String expectedOutput \u003d \"\\t Your sleep list is empty. Add new entries to populate your list :)\" +","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"                lineSeparator;","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testPrintSleepListNonEmpty() {","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"        sleepList.addSleep(\"sleep add 7.5 d/2024-03-11\");","lastModifiedDate":"2024-03-29"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.printSleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your sleep list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"                \"\\t \\t Sleep ID: 4, Date: 2024-03-11, Duration: 7.50 hours\" + lineSeparator +","lastModifiedDate":"2024-04-15"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"                \"\\t Your Sleep List:\" + lineSeparator +","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"                \"\\t 1. \\t Sleep ID: 4, Date: 2024-03-11, Duration: 7.50 hours\" + lineSeparator;","lastModifiedDate":"2024-04-15"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testPrintSleepListMultipleEntries() {","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"a-wild-chocolate"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"a-wild-chocolate"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"        sleepList.addSleep(\"sleep add 7.5 d/2024-03-11\");","lastModifiedDate":"2024-03-29"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.addSleep(\"sleep add 8.0 d/2024-04-09\");","lastModifiedDate":"2024-04-10"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.addSleep(\"sleep add 4.2 d/2024-02-21\");","lastModifiedDate":"2024-04-10"},{"lineNumber":69,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.printSleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-26"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your sleep list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"                \"\\t \\t Sleep ID: 5, Date: 2024-03-11, Duration: 7.50 hours\" + lineSeparator +","lastModifiedDate":"2024-04-15"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"                \"\\t The following entry has been added to your sleep list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"                \"\\t \\t Sleep ID: 6, Date: 2024-04-09, Duration: 8.00 hours\" + lineSeparator +","lastModifiedDate":"2024-04-15"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"                \"\\t The following entry has been added to your sleep list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"                \"\\t \\t Sleep ID: 7, Date: 2024-02-21, Duration: 4.20 hours\" + lineSeparator +","lastModifiedDate":"2024-04-15"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"                \"\\t Your Sleep List:\" + lineSeparator +","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"                \"\\t 1. \\t Sleep ID: 7, Date: 2024-02-21, Duration: 4.20 hours\" + lineSeparator +","lastModifiedDate":"2024-04-15"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"                \"\\t 2. \\t Sleep ID: 5, Date: 2024-03-11, Duration: 7.50 hours\" + lineSeparator +","lastModifiedDate":"2024-04-15"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"                \"\\t 3. \\t Sleep ID: 6, Date: 2024-04-09, Duration: 8.00 hours\" + lineSeparator;","lastModifiedDate":"2024-04-15"},{"lineNumber":81,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(3, sleepList.getSize());","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"rexyyong":3,"a-wild-chocolate":64,"owx0130":17}},{"path":"src/test/java/seedu/lifetrack/UITest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-15"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationList;","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepList;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.ui.Ui;","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"public class UITest {","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"    public void setUpStreams() {","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"    @AfterEach","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"    public void restoreStreams() {","lastModifiedDate":"2024-03-15"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"    // Expect Empty String as function is exited","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    public void handleUserInput_inputBye_printByeMessage() {","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"bye\";","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"        Ui.handleUserInput(input, calorieList, hydrationList,user,sleepList);","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"        assertEquals(\"\", outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"a-wild-chocolate":2,"owx0130":6,"paturikarthik":34}},{"path":"src/test/java/seedu/lifetrack/UserFileHandlerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-04-14"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-04-14"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-04-14"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-14"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.storage.UserFileHandler;","lastModifiedDate":"2024-04-14"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-04-14"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"public class UserFileHandlerTest {","lastModifiedDate":"2024-04-14"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-04-14"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    //user data constants","lastModifiedDate":"2024-04-14"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    private final int NAME_INDEX \u003d 0;","lastModifiedDate":"2024-04-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    private final int HEIGHT_INDEX \u003d 1;","lastModifiedDate":"2024-04-14"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    private final int WEIGHT_INDEX \u003d 2;","lastModifiedDate":"2024-04-14"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    private final int AGE_INDEX \u003d 3;","lastModifiedDate":"2024-04-14"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    private final int SEX_INDEX \u003d 4;","lastModifiedDate":"2024-04-14"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    private final int EXERCISE_INDEX \u003d 5;","lastModifiedDate":"2024-04-14"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    private final int GOAL_INDEX \u003d 6;","lastModifiedDate":"2024-04-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    private final int REQ_CAL_INDEX \u003d 7;","lastModifiedDate":"2024-04-14"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    private String filePath \u003d \"sample-data/userTestData.txt\";","lastModifiedDate":"2024-04-14"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    private UserFileHandler fileHandler \u003d new UserFileHandler(filePath);","lastModifiedDate":"2024-04-14"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-14"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-04-14"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    public void getUserDataFromFile_correctUserInput_allUserDataRetrievedFromFile() {","lastModifiedDate":"2024-04-15"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-04-14"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"            User expectedUser \u003d new User();","lastModifiedDate":"2024-04-14"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"            expectedUser.setName(\"john\");","lastModifiedDate":"2024-04-14"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"            expectedUser.setHeight(170);","lastModifiedDate":"2024-04-14"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"            expectedUser.setWeight(90);","lastModifiedDate":"2024-04-14"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"            expectedUser.setAge(23);","lastModifiedDate":"2024-04-14"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"            expectedUser.setSex(\"male\");","lastModifiedDate":"2024-04-14"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"            expectedUser.setExerciseLevels(5);","lastModifiedDate":"2024-04-14"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"            expectedUser.setGoal(5);","lastModifiedDate":"2024-04-14"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"            expectedUser.setCaloriesRequired(1900);","lastModifiedDate":"2024-04-14"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeUserData(expectedUser);","lastModifiedDate":"2024-04-14"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"            ArrayList\u003cString\u003e data \u003d fileHandler.getUserDataFromFile();","lastModifiedDate":"2024-04-14"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedUser.getName(), data.get(NAME_INDEX));","lastModifiedDate":"2024-04-14"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedUser.getHeight(), Integer.parseInt(data.get(HEIGHT_INDEX)));","lastModifiedDate":"2024-04-14"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedUser.getWeight(), Integer.parseInt(data.get(WEIGHT_INDEX)));","lastModifiedDate":"2024-04-14"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedUser.getAge(), Integer.parseInt(data.get(AGE_INDEX)));","lastModifiedDate":"2024-04-14"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedUser.getSex(), data.get(SEX_INDEX));","lastModifiedDate":"2024-04-14"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedUser.getExerciseLevels(), Integer.parseInt(data.get(EXERCISE_INDEX)));","lastModifiedDate":"2024-04-14"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedUser.getGoal(), Integer.parseInt(data.get(GOAL_INDEX)));","lastModifiedDate":"2024-04-14"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"            assertEquals(expectedUser.getCaloriesRequired(), Integer.parseInt(data.get(REQ_CAL_INDEX)));","lastModifiedDate":"2024-04-14"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-04-14"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"            return;","lastModifiedDate":"2024-04-14"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-04-14"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-04-14"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-04-14"}],"authorContributionMap":{"owx0130":54}}]
