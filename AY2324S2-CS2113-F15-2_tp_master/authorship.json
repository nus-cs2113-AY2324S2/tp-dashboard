[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"    mainClass.set(\"seedu.lifetrack.LifeTrack\")","lastModifiedDate":"2024-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"    archiveBaseName.set(\"lifetrack\")","lastModifiedDate":"2024-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"rexyyong":2,"-":44,"paturikarthik":1}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display |      Name      |               Github Profile               | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"--------|:--------------:|:------------------------------------------:|:---------:","lastModifiedDate":"2024-03-08"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"![](https://avatars.githubusercontent.com/u/64789669?v\u003d4) | Paturi Karthik | [Github](https://github.com/paturikarthik) | [Portfolio](docs/team/paturikarthik.md)","lastModifiedDate":"2024-03-08"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"![](https://avatars.githubusercontent.com/u/110764881?s\u003d400\u0026u\u003df41e3f40315f394bd71538063882c06bcfa2b624\u0026v\u003d4) | Shawn Pong | [Github](https://github.com/shawnpong) | [Portfolio](docs/team/shawnpong.md)","lastModifiedDate":"2024-03-08"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"![](https://drive.google.com/file/d/1BM0lQP13brp_vlVJsgHYzQHSWaREHrnP/view?usp\u003ddrive_link) | Rex Yong Jin Xiang | [Github](https://github.com/rexyyong) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2024-03-08"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yanyu | [Github](https://github.com/a-wild-chocolate/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"rexyyong":1,"a-wild-chocolate":1,"shawnpong":1,"-":3,"paturikarthik":2}},{"path":"docs/CaloriesAddEntrySeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"@startuml","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"actor Bob","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"Bob -\u003e UI: Input \"calories in\" or \"calories out\" command","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"activate UI","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"UI -\u003e UI: handleUserInput()","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"activate UI","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"UI -\u003e UI: handleCaloriesInput()","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"activate UI","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"UI -\u003e CalorieList: addEntry()","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"activate CalorieList","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"CalorieList -\u003e ParserCalories: parseCaloriesInput()","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"activate ParserCalories","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"return entry","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"CalorieList -\u003e CalorieList: calorieArrayList.add(entry)","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"activate CalorieList","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"return","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"CalorieList -\u003e CalorieList: updateFile()","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"activate CalorieList","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"return","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"return","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"return","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"return","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"return","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"@enduml","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"rexyyong":2,"owx0130":30}},{"path":"docs/CaloriesListClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"class LifeTrack {","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"    + main(args: String[]): void","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"package ui {","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"    class Ui {","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"        + readUserInput(calorieList: calories.CalorieList, hydrationList: hydration.HydrationList, user: user.User, sleepList: sleep.SleepList): void","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"        + handleCaloriesInput(line: String, calorieList: calories.CalorieList): void","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"package calories {","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"    package calorielist {","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"        class CalorieList {","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"            - ArrayList\u003cEntry\u003e calorieArrayList","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"            + printCalorieList(): void","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"        class CalorieListUi {","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"            + calorieListHeader(): void","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"            + emptyListMessage(): void","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"LifeTrack --\u003e calories.calorielist.CalorieList","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"LifeTrack -[dotted]-\u003e ui.Ui","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"ui.Ui -[dotted]-\u003e calories.calorielist.CalorieList","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"CalorieList -[dotted]-\u003e CalorieListUi","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"rexyyong":37}},{"path":"docs/CaloriesListSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"@startuml","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"actor Bob","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"Bob -\u003e UI: Input \"calories list\" command","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"UI -\u003e UI: handleUserInput(input, calorieList, .....)","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"UI -\u003e UI: handleCaloriesInput(input, calorieList, .....)","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"activate UI","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"UI -\u003e CalorieList: printCalorieList()","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"loop calorieArrayList.size()","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"CalorieList -\u003e CalorieList : calorieArrayList.get(i)","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"activate CalorieList","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"end","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"return","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"@enduml","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"rexyyong":27}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"{list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Design \u0026 implementation","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"### Adding calorie entries feature","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"#### Implementation","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"This functionality is facilitated by `UI`, `CalorieList`, `FileHandler` and `ParserCalories`. It implements one operation, namely:","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"- `UI#handleCaloriesInput(String, CalorieList)`","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"- `CalorieList#addEntry(String)`","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"- `ParserCalories#parseCaloriesInput(String)`","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"- `FileHandler#updateFile()`","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"This feature is activated when the user inputs a `calories in` or `calories out` command in the terminal.","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"- Step 1: When the user inputs the command `calories in burger c/200 d/2024-02-02` in the terminal,","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"the string is sent to `UI#handleCaloriesInput(String, CalorieList)`, which calls `CalorieList#addEntry(String)`.","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"- Step 2: Inside `CalorieList#addEntry(String)`, the function `ParserCalories#parseCaloriesInput(String)` is then called to extract information such as the description, number of calories, and date of entry.","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"- Step 3: The obtained information is sent to the private method `ParserCalories#makeNewInputEntry(String, int, String)` to create a new entry of class `InputEntry` that extends `Entry`. An `Entry` object is then returned to the caller, `CalorieList#addEntry(String)`.","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"- Step 4: The returned `Entry` object is added into the `calorieArrayList` member of type `ArrayList\u003cEntry\u003e` in the `CalorieList`, via the `ArrayList.add()` method.","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"- Step 5: `FileHandler#updateFile()` is then called to update the data file with the new entry in the `CalorieList`.","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"The sequence diagram for this feature is shown below:","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"![CaloriesAddEntrySeqDiagram](http://www.plantuml.com/plantuml/proxy?cache\u003dno\u0026src\u003dhttps://raw.githubusercontent.com/rexyyong/tp/RexDG/docs/CaloriesAddEntrySeqDiagram.puml)","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"### Calculating calorie requirements based on a user`s goals","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"#### Implementation","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"This functionality is facilitated by `UserGoals`. It implements one operation, namely:","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"- `UserGoals#getHealthInfo(User)`","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"This operation is exposed in the `User` class as `User#getHealhInfo()`.","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"- Step 1: When the user inputs the command `user setup` in the terminal, ","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"  the input string is sent to `Ui#handleUserCommands(User,String)`, which calls `User#setup(String)`.","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"- Step 2: `User#setup(String)` calls `ParserUser#parseSetUp(String, User)` which parses the user\u0027s information such as ","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"  his height, weight, age, gender, exercise levels and intended goal and sets these information to the `User`.","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"- Step 3: `User#setup(String)` then calls `User#getHealthInfo()` which calls `UserGoals#getHealthInfo(User)`.","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"- Step 4: This method calculates the basal metabolism rate of the `user` using the user\u0027s height, weight, age and gender.","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"- Step 5: Using the `user`\u0027s exercise levels, the method calculates his active metabolism rate, and finally calculates the calories required by the user to achieve their goals based on their input.","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"- Step 6: This value is set to `User.caloriesRequired` by `User#setCaloriesRequired(int)`.","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"The Sequence Diagram for the above-mentioned process is as follows:","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"![Sequence Diagram](UserCalculateCaloriesSeqDiagram.png)","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"#### Design considerations","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"- **Alternative 1 (current choice):** Uses an algorithm to find the number of calories needed","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"  - Pros: Not dependent on external APIs","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"  - Cons: Need to come up with an algorithm to use","lastModifiedDate":"2024-03-28"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"- **Alternative 2 :** Uses an API to get the calories needed","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"    - Pros: No need to figure out the optimal algorithm","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"    - Cons: Need to parse response to sieve out necessary information","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"rexyyong"},"content":"### Calories list feature","lastModifiedDate":"2024-03-28"},{"lineNumber":76,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"rexyyong"},"content":"The `calories list` feature lists out the record of all the Calories data that the user has keyed in. The Calories data are all stored into a `ArrayList\u003cEntry\u003e calorieArrayList` attribute of the `CalorieList` Class. Calories data are printed when the `printCalorieList()` function is called. ","lastModifiedDate":"2024-03-28"},{"lineNumber":78,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":79,"author":{"gitId":"rexyyong"},"content":"The `printCalorieList()` function iterates through the `calorieArrayList` and prints out the Entries according to its order in the Array List.","lastModifiedDate":"2024-03-28"},{"lineNumber":80,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":81,"author":{"gitId":"rexyyong"},"content":"The Class diagram and sequence diagram for Calories list feature is shown below. Unrelated attributes and Classes were excluded.","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":83,"author":{"gitId":"rexyyong"},"content":"![CaloriesListClassDiagram](http://www.plantuml.com/plantuml/proxy?cache\u003dno\u0026src\u003dhttps://raw.githubusercontent.com/rexyyong/tp/DevGuideRex/docs/CaloriesListClassDiagram.puml)","lastModifiedDate":"2024-03-28"},{"lineNumber":84,"author":{"gitId":"rexyyong"},"content":"![CaloriesListSequenceDiagram](http://www.plantuml.com/plantuml/proxy?cache\u003dno\u0026src\u003dhttps://raw.githubusercontent.com/rexyyong/tp/RexDG/docs/CaloriesListSequenceDiagram.puml)","lastModifiedDate":"2024-04-03"},{"lineNumber":85,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"a-wild-chocolate"},"content":"### Calories delete feature","lastModifiedDate":"2024-03-28"},{"lineNumber":87,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":88,"author":{"gitId":"a-wild-chocolate"},"content":"The `calories delete` feature can delete the calories record at specific index of calorie list. This functionality is facilitated by `CaloriesList`. It implements one operation, namely:","lastModifiedDate":"2024-03-28"},{"lineNumber":89,"author":{"gitId":"a-wild-chocolate"},"content":"- `deleteEntry(String line)`","lastModifiedDate":"2024-03-28"},{"lineNumber":90,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":91,"author":{"gitId":"a-wild-chocolate"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-03-28"},{"lineNumber":92,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 1: When the user inputs the command `calories delete INDEX` in the terminal, the string is sent to `Ui#handleUserInput()`, which will call `Ui#handleCaloriesInput()`.","lastModifiedDate":"2024-03-28"},{"lineNumber":93,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 2: After the `Ui#handleCaloriesInput()` matching `delete calories` key word, the string will be passed into deleteEntry(String line) to execute delete process.","lastModifiedDate":"2024-03-28"},{"lineNumber":95,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":96,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 3: The string will be divided to two substrings according to the command syntax. Index will be tried to get from the second substring by `Integer.parseInt()`.","lastModifiedDate":"2024-03-28"},{"lineNumber":97,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":98,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 4: The calories record (`Entry`) stored in the `ArrayList\u003cEntry\u003e caloriesList` will be deleted by calling `calorieArrayList.remove((index-1));` and a successful deleting message will be shown in terminal by calling `CalorieListUi#successfulDeletedMessage(toDelete)`","lastModifiedDate":"2024-03-28"},{"lineNumber":99,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":100,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 5: The latest calories list will be updated to saving file by calling `CalorieList#updateFile()`.","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":102,"author":{"gitId":"a-wild-chocolate"},"content":"The Class diagram for Calories delete feature is shown below:","lastModifiedDate":"2024-03-28"},{"lineNumber":103,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":104,"author":{"gitId":"a-wild-chocolate"},"content":"![CaloriesDeleteClassDiagram](https://github.com/a-wild-chocolate/tp/blob/master/docs/caloriesDeleteUML.jpg)","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"### Parsing user input for hydration entries","lastModifiedDate":"2024-04-02"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"This functionality is facilitated by `ParserHydration`. It implements one operation, namely:","lastModifiedDate":"2024-04-02"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"- `ParserHydration#parseHydrationInput(String input)`","lastModifiedDate":"2024-04-02"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"This operation is exposed in the `HydrationList` class as `HydrationList#addEntry(String)`.","lastModifiedDate":"2024-04-02"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"- Step 1: When the user inputs the command `hydration in Milo v/100 d/2022-01-02` in the terminal,","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"  the string is sent to `HydrationList#addEntry(String)`, which calls `ParserHydration#parseHydrationInput(String)`.","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"- Step 2: Using `String.split()`, the method extracts information such as the description, volume of beverage, and date of entry. The obtained information is sent to the private method `ParserHydration#makeNewInputEntry(String, int, String)` to create a new entry of class `HydrationEntry` that extends `Entry`.","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"- Step 3: The created `HydrationEntry` instance is added into the `ArrayList\u003cEntry\u003e` attribute of the `HydrationList`.","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"### Calculating hydration requirements for each user","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"#### Design Considerations","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"**General Health Guidelines:** The recommended daily intake of water for an average adult is around 8 glasses or approximately 2000 milliliters. This guideline is commonly recommended by health authorities and organizations such as HealthHub.","lastModifiedDate":"2024-04-02"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"**Ease of Implementation:** Setting a standard hydration requirement simplifies the tracking process for users. It provides a clear goal to strive for, making it easier for individuals to monitor and maintain their hydration levels consistently.","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"### Hydration list feature","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"The `hydration list` feature lists out the record of all the Hydration data that the user has keyed in. The Hydration data are all stored into a `ArrayList\u003cEntry\u003e hydrationArrayList` attribute of the `HydrationList` Class. Hydration data are printed when the `printHydrationList()` function is called.","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"The `printHydrationList()` function iterates through the `hydrationArrayList` and prints out the Entries according to its order in the Array List.","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"The Class diagram for Hydration list feature is shown below. Unrelated attributes and Classes were excluded.","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"![HydrationListClassDiagram.png](HydrationListClassDiagram.png)","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"### Hydration delete feature","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":141,"author":{"gitId":"shawnpong"},"content":"The `hydration delete` feature can delete the hydration record at specific index of hydration list. This functionality is facilitated by `HydrationList`. It implements one operation, namely:","lastModifiedDate":"2024-04-02"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"- `deleteEntry(String line)`","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-02"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"- Step 1: When the user inputs the command `hydration delete INDEX` in the terminal, the string is sent to `Ui#handleUserInput()`, which will call `Ui#handleHydrationInput()`.","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"- Step 2: After the `Ui#handleHydrationInput()` matching `delete hydration` key word, the string will be passed into deleteEntry(String line) to execute delete process.","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"- Step 3: The string will be divided to two substrings according to the command syntax. Index will be tried to get from the second substring by `Integer.parseInt()`.","lastModifiedDate":"2024-04-02"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":151,"author":{"gitId":"shawnpong"},"content":"- Step 4: The hydration record (`Entry`) stored in the `ArrayList\u003cEntry\u003e hydrationList` will be deleted by calling `hydrationArrayList.remove((index-1));` and a successful deleting message will be shown in terminal by calling `HydrationListUi#successfulDeletedMessage(toDelete)`","lastModifiedDate":"2024-04-02"},{"lineNumber":152,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":153,"author":{"gitId":"shawnpong"},"content":"- Step 5: The latest hydration list will be updated to saving file by calling `HydrationList#updateFile()`.","lastModifiedDate":"2024-04-02"},{"lineNumber":154,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":155,"author":{"gitId":"shawnpong"},"content":"The Sequence diagram for Hydration delete feature is shown below:","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"shawnpong"},"content":"![HydrationDeleteDiagram.png](HydrationDeleteDiagram.png)","lastModifiedDate":"2024-04-02"},{"lineNumber":157,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"a-wild-chocolate"},"content":"### Adding sleep entries feature","lastModifiedDate":"2024-04-04"},{"lineNumber":159,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":160,"author":{"gitId":"a-wild-chocolate"},"content":"#### Implementation","lastModifiedDate":"2024-04-04"},{"lineNumber":161,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":162,"author":{"gitId":"a-wild-chocolate"},"content":"This functionality is facilitated by `UI`, `SleepList`, `FileHandler` and `ParserSleep`. It implements one operation, namely:","lastModifiedDate":"2024-04-04"},{"lineNumber":163,"author":{"gitId":"a-wild-chocolate"},"content":"- `UI#handleSleepInput(String,SleepList)`","lastModifiedDate":"2024-04-04"},{"lineNumber":164,"author":{"gitId":"a-wild-chocolate"},"content":"- `SleepList#addEntry(String)`","lastModifiedDate":"2024-04-04"},{"lineNumber":165,"author":{"gitId":"a-wild-chocolate"},"content":"- `ParserSleep#parseSleepInput(String)`","lastModifiedDate":"2024-04-04"},{"lineNumber":166,"author":{"gitId":"a-wild-chocolate"},"content":"- `FileHandler#updateFile()`","lastModifiedDate":"2024-04-04"},{"lineNumber":167,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":168,"author":{"gitId":"a-wild-chocolate"},"content":"This feature is activated when the user inputs a `sleep add` command in the terminal.","lastModifiedDate":"2024-04-04"},{"lineNumber":169,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":170,"author":{"gitId":"a-wild-chocolate"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-04"},{"lineNumber":171,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":172,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 1: When the user inputs the command `sleep add 7.5 d/2022-01-02` in the terminal,","lastModifiedDate":"2024-04-04"},{"lineNumber":173,"author":{"gitId":"a-wild-chocolate"},"content":"  the string is sent to `UI#handleSleepInput(String, SleepList)`, which calls `SleepList#addSleep(String)`.","lastModifiedDate":"2024-04-04"},{"lineNumber":174,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":175,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 2: Inside `SleepList#addSleep(String)`, the function `ParserSleep#parseSleepInput(String)` is then called to extract information such as the duration and date of entry.","lastModifiedDate":"2024-04-04"},{"lineNumber":176,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":177,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 3: It will create a new entry of class `SleepEntry` that extends `Entry`based on the information.","lastModifiedDate":"2024-04-04"},{"lineNumber":178,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":179,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 4: The created `SleepEntry` instance is added into the `ArrayList\u003cEntry\u003e sleepList` attribute of the `SleepList`.","lastModifiedDate":"2024-04-04"},{"lineNumber":180,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":181,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 5: `FileHandler#updateFile()` is then called to update the data file with the new entry in the `SleepList`.","lastModifiedDate":"2024-04-04"},{"lineNumber":182,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":183,"author":{"gitId":"a-wild-chocolate"},"content":"The sequence diagram for this feature is shown below:","lastModifiedDate":"2024-04-04"},{"lineNumber":184,"author":{"gitId":"a-wild-chocolate"},"content":"![SleepAddSeqDiagram](https://github.com/a-wild-chocolate/tp/blob/f9a94746e763ddf54a4309583b71e0fdbabdb141/docs/SleepAddSeqDiagram.jpg)","lastModifiedDate":"2024-04-04"},{"lineNumber":185,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":186,"author":{"gitId":"a-wild-chocolate"},"content":"### Parsing user input for sleep entries","lastModifiedDate":"2024-04-03"},{"lineNumber":187,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":188,"author":{"gitId":"a-wild-chocolate"},"content":"This functionality is facilitated by `ParserSleep`. It implements one operation, namely:","lastModifiedDate":"2024-04-03"},{"lineNumber":189,"author":{"gitId":"a-wild-chocolate"},"content":"- `ParserSleep#parseSleepInput(String input)`","lastModifiedDate":"2024-04-03"},{"lineNumber":190,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":191,"author":{"gitId":"a-wild-chocolate"},"content":"This operation is exposed in the `SleepList` class as `SleepList#addSleep(String)`.","lastModifiedDate":"2024-04-03"},{"lineNumber":192,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":193,"author":{"gitId":"a-wild-chocolate"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-03"},{"lineNumber":194,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 1: When the user inputs the command `sleep add 7.5 d/2022-01-02` in the terminal,","lastModifiedDate":"2024-04-03"},{"lineNumber":195,"author":{"gitId":"a-wild-chocolate"},"content":"  the string is sent to `SleepList#addEntry(String)`, which calls `ParserSleep#parseSleepInput(String)`.","lastModifiedDate":"2024-04-03"},{"lineNumber":196,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":197,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 2: Using `String.split()`, the method extracts information such as the duration and date of entry.","lastModifiedDate":"2024-04-03"},{"lineNumber":198,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":199,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 3: It will create a new entry of class `SleepEntry` that extends `Entry`based on the information.","lastModifiedDate":"2024-04-03"},{"lineNumber":200,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":201,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 4: The created `SleepEntry` instance is added into the `ArrayList\u003cEntry\u003e sleepList` attribute of the `SleepList`.","lastModifiedDate":"2024-04-03"},{"lineNumber":202,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":203,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":204,"author":{"gitId":"a-wild-chocolate"},"content":"### Sleep list feature","lastModifiedDate":"2024-04-03"},{"lineNumber":205,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":206,"author":{"gitId":"a-wild-chocolate"},"content":"The `sleep list` feature lists out the record of all the sleep data that the user has keyed in. The sleep data are all stored into a `ArrayList\u003cEntry\u003e sleepList` attribute of the `SleepList` Class. Sleep data are printed when the `printSleepList()` function is called.","lastModifiedDate":"2024-04-03"},{"lineNumber":207,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":208,"author":{"gitId":"a-wild-chocolate"},"content":"The `printSleepList()` function iterates through the `sleepList` and each entry will call `SleepEntry#toString()` to return its information string to be printed.","lastModifiedDate":"2024-04-03"},{"lineNumber":209,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":210,"author":{"gitId":"a-wild-chocolate"},"content":"The Sequence diagram for Sleep list feature is shown below. Unrelated attributes and Classes were excluded.","lastModifiedDate":"2024-04-03"},{"lineNumber":211,"author":{"gitId":"a-wild-chocolate"},"content":"![SleepListSeqDiagram](https://github.com/a-wild-chocolate/tp/blob/f9a94746e763ddf54a4309583b71e0fdbabdb141/docs/SleepListSeqDiagram.jpg)","lastModifiedDate":"2024-04-04"},{"lineNumber":212,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":213,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":214,"author":{"gitId":"a-wild-chocolate"},"content":"### Sleep delete feature","lastModifiedDate":"2024-04-03"},{"lineNumber":215,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":216,"author":{"gitId":"a-wild-chocolate"},"content":"The `sleep delete` feature can delete the sleep record at specific index of sleep list. This functionality is facilitated by `SleepList`. It implements one operation, namely:","lastModifiedDate":"2024-04-03"},{"lineNumber":217,"author":{"gitId":"a-wild-chocolate"},"content":"- `deleteSleep(String line)`","lastModifiedDate":"2024-04-03"},{"lineNumber":218,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":219,"author":{"gitId":"a-wild-chocolate"},"content":"Given below is an example usage scenario and how this mechanism behaves at every step:","lastModifiedDate":"2024-04-03"},{"lineNumber":220,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 1: When the user inputs the command `sleep delete INDEX` in the terminal, the string is sent to `Ui#handleUserInput()`, which will call `Ui#handleSleepInput()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":221,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":222,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 2: After the `Ui#handleSleepInput()` matching `sleep delete` key word, the string will be passed into deleteSleep(String line) to execute delete process.","lastModifiedDate":"2024-04-03"},{"lineNumber":223,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":224,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 3: The string will be divided to two substrings according to the command syntax. Index will be tried to get from the second substring by `Integer.parseInt()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":225,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":226,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 4: The sleep record (`Entry`) stored in the `ArrayList\u003cEntry\u003e sleepList` will be deleted by calling `sleepArrayList.remove((index-1));` and a successful deleting message will be shown in terminal by calling `SleepListUi#successfulDeletedMessage(toDelete)`","lastModifiedDate":"2024-04-03"},{"lineNumber":227,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":228,"author":{"gitId":"a-wild-chocolate"},"content":"- Step 5: The latest sleep list will be updated to saving file by calling `SleepList#updateFile()`.","lastModifiedDate":"2024-04-03"},{"lineNumber":229,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":230,"author":{"gitId":"a-wild-chocolate"},"content":"The Sequence diagram for Sleep delete feature is shown below:","lastModifiedDate":"2024-04-03"},{"lineNumber":231,"author":{"gitId":"a-wild-chocolate"},"content":"![SleepDeleteDiagram.jpg](https://github.com/a-wild-chocolate/tp/blob/f9a94746e763ddf54a4309583b71e0fdbabdb141/docs/SleepDeleteSeqDiagram.jpg)","lastModifiedDate":"2024-04-04"},{"lineNumber":232,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":233,"author":{"gitId":"a-wild-chocolate"},"content":"### Calculating sleep requirements for each user (Planning)","lastModifiedDate":"2024-04-03"},{"lineNumber":234,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":235,"author":{"gitId":"a-wild-chocolate"},"content":"#### Design Considerations","lastModifiedDate":"2024-04-03"},{"lineNumber":236,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":237,"author":{"gitId":"a-wild-chocolate"},"content":"**General Health Guidelines:** The recommended daily sleep duration for an average adult is around 7.5 hours. However, sleep standard is different for different individual with different healthy status. This feature will calculate recommend sleep duration by formula based on user health information.","lastModifiedDate":"2024-04-03"},{"lineNumber":238,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":239,"author":{"gitId":"a-wild-chocolate"},"content":"**Ease of Implementation:** Setting a standard sleep requirement simplifies the tracking process for users. It provides a clear goal to strive for, making it easier for individuals to monitor and maintain their sleep time levels consistently.","lastModifiedDate":"2024-04-03"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":242,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":244,"author":{"gitId":"-"},"content":"{Describe the target user profile}","lastModifiedDate":"2020-05-24"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":246,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":248,"author":{"gitId":"-"},"content":"{Describe the value proposition: what problem does it solve?}","lastModifiedDate":"2020-05-24"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":250,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":252,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2020-05-24"},{"lineNumber":253,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2020-05-24"},{"lineNumber":254,"author":{"gitId":"-"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|","lastModifiedDate":"2020-05-24"},{"lineNumber":255,"author":{"gitId":"-"},"content":"|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|","lastModifiedDate":"2020-05-24"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":257,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":259,"author":{"gitId":"-"},"content":"{Give non-functional requirements}","lastModifiedDate":"2020-05-24"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":261,"author":{"gitId":"-"},"content":"## Glossary","lastModifiedDate":"2020-05-24"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* *glossary item* - Definition","lastModifiedDate":"2020-05-24"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Instructions for manual testing","lastModifiedDate":"2020-05-24"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":267,"author":{"gitId":"-"},"content":"{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"rexyyong":12,"a-wild-chocolate":104,"owx0130":24,"shawnpong":51,"-":39,"paturikarthik":37}},{"path":"docs/HydrationDeleteDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"@startuml","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"actor User","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"participant \"Ui#handleUserInput()\" as UI","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"participant \"Ui#handleHydrationInput()\" as HydrationInput","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"participant \"HydrationList#deleteEntry(String line)\" as DeleteEntry","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"participant \"HydrationList#updateFile()\" as UpdateFile","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"participant \"FileHandler#writeEntries(ArrayList\u003cEntry\u003e entries)\" as WriteEntries","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"User -\u003e UI : Enters command","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"activate UI","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"UI -\u003e HydrationInput : Sends command for hydration input handling","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"activate HydrationInput","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"HydrationInput -\u003e DeleteEntry : Calls delete entry method","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"activate DeleteEntry","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"DeleteEntry -\u003e UpdateFile : Deletes entry","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"activate UpdateFile","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"UpdateFile -\u003e WriteEntries : Updates file with new entries","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"activate WriteEntries","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"WriteEntries --\u003e UpdateFile : Updates file","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"deactivate WriteEntries","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"UpdateFile --\u003e DeleteEntry : File updated","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"deactivate UpdateFile","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"DeleteEntry --\u003e HydrationInput : Entry deleted","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"deactivate DeleteEntry","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"HydrationInput --\u003e UI : Sends success message","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"deactivate HydrationInput","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"UI -\u003e User : Displays success message","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"deactivate UI","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"@enduml","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"shawnpong":31}},{"path":"docs/HydrationListClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"@startuml","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"class LifeTrack {","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"    + main(args: String[]): void","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"package ui {","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"    class Ui {","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"        + readUserInput(calorieList: calories.CalorieList, hydrationList: hydration.HydrationList, user: user.User, sleepList: sleep.SleepList): void","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"        + handleHydrationInput(line: String, hydrationList: hydration.HydrationList): void","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"package hydration {","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    package hydrationlist {","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"        class HydrationList {","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"            - ArrayList\u003cEntry\u003e hydrationArrayList","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"            + printHydrationList(): void","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"        class HydrationListUi {","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"            + hydrationListHeader(): void","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"            + emptyListMessage(): void","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"LifeTrack --\u003e hydration.hydrationlist.HydrationList","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"LifeTrack -[dotted]-\u003e ui.Ui","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"ui.Ui -[dotted]-\u003e hydration.hydrationlist.HydrationList","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"HydrationList -[dotted]-\u003e HydrationListUi","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"@enduml","lastModifiedDate":"2024-04-02"}],"authorContributionMap":{"shawnpong":33}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"# LifeTrack","lastModifiedDate":"2024-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"{Give product intro here}","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"-":6,"paturikarthik":1}},{"path":"docs/UserCalculateCaloriesSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"@startuml","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"actor Tom","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"Tom -\u003e UI: Input \"user setup\" command","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"activate UI","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"UI -\u003e UI: handleUserInput()","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"activate UI","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"UI -\u003e UI: handleUserCommands()","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"activate UI","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"UI -\u003e User : setUp()","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"activate User","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"User -\u003e ParserUser: parseSetUp()","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"activate ParserUser","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"ParserUser -\u003e User: setName(),setHeight(),setWeight(),setAge(),setSex(),setExerciseLevels(),setGoal()","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"ParserUser -\u003e User: getHealthInfo()","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"activate User","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"User -\u003e UserGoals : getHealthInfo(user)","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"activate UserGoals","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"return caloriesRequired","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"return","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"@enduml","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"paturikarthik":36}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"LifeTrack is a desktop app for students to track their health data, optimized for use via a Command Line Interface (CLI). It tracks calories, hydration and sleep data for the user, while also providing daily recommendations for calorie and hydration intake, based on the user\u0027s build and gender, as well as their body goals and activity levels.","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"## Quick links","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"- [General](#general)","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"  - [help](#viewing-help-help)","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"  - [bye](#exiting-the-program-bye)","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"- [Calories Tracker](#calories-tracker)","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"  - [Input calories Intake](#input-calorie-intake-calories-in)","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"  - [Input calorie loss](#input-calorie-loss-calories-out)","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"  - [Listing calorie items](#listing-calorie-items-calories-list)","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"  - [Deleting a calorie item](#deleting-a-calorie-item-calories-delete)","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"- [Hydration Tracker](#hydration-tracker)","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"  - [Input hydration intake](#input-hydration-intake-hydration-in)","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"  - [Listing hydration items](#listing-hydration-items-hydration-list)","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"  - [Deleting a hydration item](#deleting-a-hydration-item-hydration-delete)","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"- [Sleep Tracker](#sleep-tracker)","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"  - [Input sleeping hours](#input-sleeping-hours-sleep-add)","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"  - [Listing sleep records](#listing-sleep-records-sleep-list)","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"  - [Deleting a sleep record](#deleting-a-sleep-record-sleep-delete)","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"- [User Profile](#user-profile)","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"  - [Set Up User Profile](#set-up-user-profile-user-setup)","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"  - [Check User\u0027s daily calories and hydration consumption](#check-your-daily-calories-and-hydration-consumption-user-progress)","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"- [FAQ](#faq)","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"- [Command Summary](#command-summary)","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"{Give steps to get started quickly}","lastModifiedDate":"2020-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Ensure that you have Java 11 or above installed.","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"2. Download the latest version of `LifeTrack` from [here](http://link.to/duke).","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"[//]: # (## Features )","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"## General","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"### Viewing help: `help`","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"Shows a help message listing the commands available in the application.","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"**Format:** ","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"`help`","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"Exits the program.","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"**Format:** ","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"`bye`","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"#### Expected output","lastModifiedDate":"2024-04-04"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"         Bye! See you again soon ^^","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"## Calories Tracker","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"### Input calorie intake: `calories in`","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"Adds a calorie gaining activity into the calories tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"Macronutrients such as Carbohydrates, Proteins and Fats can be included if needed.","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"**Format:** ","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"`calories in DESCRIPTION c/CALORIES d/DATE [m/CARBOHYDRATES,PROTEIN,FATS]`","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"rexyyong"},"content":"* The `DESCRIPTION` refers to the food that the person consumed.","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"* The `CALORIES` must be a positive integer 1, 2, 3, …, measured in kcal. ","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"rexyyong"},"content":"* The `DATE` provided should be of the form YYYY-MM-DD, such as 2024-03-04.","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"rexyyong"},"content":"* Macronutrients field including `CARBOHYDRATES`, `PROTEINS` and `FATS` is optional. The macronutrients must be a positive integer 1, 2, 3, measured in grams.","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"**Examples:** ","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"rexyyong"},"content":"* `calories in chicken rice c/678 d/2022-02-24`","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"rexyyong"},"content":"* `calories in hamburger c/983 d/2024-04-03`","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"rexyyong"},"content":"* `calories in cai png c/543 d/2024-04-13 m/200, 150, 100`","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"rexyyong"},"content":"* `calories in drink liho milk tea c/200 d/2024-04-25 m/50, 20, 10`","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"### Input calorie loss: `calories out`","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"Adds a calorie burning activity into the calories tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"**Format:** ","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"rexyyong"},"content":"`calories out DESCRIPTION c/CALORIES d/DATE`","lastModifiedDate":"2024-04-03"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"rexyyong"},"content":"* The `DESCRIPTION` refers to any activity that resulted in loss of calories.","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"rexyyong"},"content":"* The `CALORIES` must be a positive integer 1, 2, 3, …, measured in kcal. ","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"rexyyong"},"content":"* The `DATE` provided should be of the form YYYY-MM-DD such as 2024-04-03.","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"* `calories out Run around NUS c/678 d/2022-02-24` ","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"* `calories out Walk to i3 building c/67 d/2022-03-25`","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"rexyyong"},"content":"* `calories out go gym c/300 d/2024-04-03`","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"### Listing calorie items: `calories list`","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"rexyyong"},"content":"Shows a list of all activities in the calories tracker. Includes both calories in and out.","lastModifiedDate":"2024-04-03"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"`calories list`","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"#### Expected output","lastModifiedDate":"2024-04-04"},{"lineNumber":104,"author":{"gitId":"rexyyong"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-03"},{"lineNumber":105,"author":{"gitId":"rexyyong"},"content":"\t Your Caloric List:","lastModifiedDate":"2024-04-03"},{"lineNumber":106,"author":{"gitId":"rexyyong"},"content":"\t 1. \t Date: 2024-06-15, Description: chicken, Calories: 1000","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"rexyyong"},"content":"\t 2. \t Date: 2024-06-15, Description: chicken, Calories: 1000","lastModifiedDate":"2024-04-03"},{"lineNumber":108,"author":{"gitId":"rexyyong"},"content":"\t 3. \t Date: 2024-05-15, Description: chicken, Calories: 1000","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"rexyyong"},"content":"\t 4. \t Date: 2023-03-01, Description: taco, Calories: 1","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"rexyyong"},"content":"\t 5. \t Date: 2024-04-03, Description: burger, Calories: 100","lastModifiedDate":"2024-04-03"},{"lineNumber":111,"author":{"gitId":"rexyyong"},"content":"\t 6. \t Date: 2024-04-03, Description: cai png, Calories: 1000","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"rexyyong"},"content":"\t 7. \t Date: 2024-04-03, Description: cai png, Calories: 500","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"rexyyong"},"content":"\t 8. \t Date: 2024-04-13, Description: liho milk tea, Calories: 200","lastModifiedDate":"2024-04-03"},{"lineNumber":114,"author":{"gitId":"rexyyong"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"### Deleting a calorie item: `calories delete`","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"Deletes the specified activity from the calories tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"`calories delete INDEX`","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"* `calories list` followed by `calories delete 2` deletes the 2nd activity in the calories tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"## Hydration Tracker","lastModifiedDate":"2024-04-02"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"### Input hydration intake: `hydration in`","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"Adds a hydration record into the hydration tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"`hydration in DESCRIPTION v/VOLUME d/DATE`","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"* The volume must be a positive integer 1, 2, 3, …, measured in milliliters.","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"* The time indicated should follow the 24-hour system.","lastModifiedDate":"2024-04-02"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"* The date provided should be of the form YYYY-MM-DD.","lastModifiedDate":"2024-04-02"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"* `hydration in Milo v/1000 d/2022-03-25`","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"* `hydration in Tea v/200 d/2022-02-05`","lastModifiedDate":"2024-04-02"},{"lineNumber":141,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"### Listing hydration items: `hydration list`","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"Show the list of all hydration records in the hydration tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"`hydration list`","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"### Deleting a hydration item: `hydration delete`","lastModifiedDate":"2024-04-02"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"Deletes the hydration record according to the index.","lastModifiedDate":"2024-04-02"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":151,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":152,"author":{"gitId":"shawnpong"},"content":"`hydration delete INDEX`","lastModifiedDate":"2024-04-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":154,"author":{"gitId":"shawnpong"},"content":"Delete the drinking water record at the specific index. The index refers to the index number shown in the displayed Hydration list. The index must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2024-04-02"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":157,"author":{"gitId":"shawnpong"},"content":"* `hydration list` followed by `hydration delete 2` deletes the 2nd hydration record from the hydration tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":159,"author":{"gitId":"shawnpong"},"content":"## Sleep Tracker","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":161,"author":{"gitId":"shawnpong"},"content":"### Input sleeping hours: `sleep add`","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"shawnpong"},"content":"Adds a sleep record into the sleep tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"shawnpong"},"content":"`sleep add DURATION d/DATE`","lastModifiedDate":"2024-04-02"},{"lineNumber":166,"author":{"gitId":"shawnpong"},"content":"* The duration provided must be a positive real number.","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"shawnpong"},"content":"* The time indicated should follow the 24-hour system.","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"shawnpong"},"content":"* The date provided should be of the form YYYY-MM-DD.","lastModifiedDate":"2024-04-02"},{"lineNumber":169,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":171,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":172,"author":{"gitId":"a-wild-chocolate"},"content":"* `sleep add 7.5 d/2024-03-11`","lastModifiedDate":"2024-04-05"},{"lineNumber":173,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-04-05"},{"lineNumber":174,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":175,"author":{"gitId":"shawnpong"},"content":"### Listing sleep records: `sleep list`","lastModifiedDate":"2024-04-02"},{"lineNumber":176,"author":{"gitId":"shawnpong"},"content":"Show the list of all sleep records in the sleep tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":177,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":178,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":179,"author":{"gitId":"shawnpong"},"content":"`sleep list`","lastModifiedDate":"2024-04-02"},{"lineNumber":180,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":181,"author":{"gitId":"shawnpong"},"content":"### Deleting a sleep record: `sleep delete`","lastModifiedDate":"2024-04-02"},{"lineNumber":182,"author":{"gitId":"shawnpong"},"content":"Deletes the sleep record according to the index.","lastModifiedDate":"2024-04-02"},{"lineNumber":183,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":184,"author":{"gitId":"shawnpong"},"content":"**Format:**","lastModifiedDate":"2024-04-02"},{"lineNumber":185,"author":{"gitId":"shawnpong"},"content":"`sleep delete INDEX`","lastModifiedDate":"2024-04-02"},{"lineNumber":186,"author":{"gitId":"shawnpong"},"content":"* Delete the sleep record at the specific index.","lastModifiedDate":"2024-04-02"},{"lineNumber":187,"author":{"gitId":"shawnpong"},"content":"* The index refers to the index number shown in the displayed sleeping records list.","lastModifiedDate":"2024-04-02"},{"lineNumber":188,"author":{"gitId":"shawnpong"},"content":"* The index must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2024-04-02"},{"lineNumber":189,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":190,"author":{"gitId":"shawnpong"},"content":"**Examples:**","lastModifiedDate":"2024-04-02"},{"lineNumber":191,"author":{"gitId":"shawnpong"},"content":"* `list` followed by `sleep delete 2` deletes the 2nd sleep record from the sleep tracker.","lastModifiedDate":"2024-04-02"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":193,"author":{"gitId":"paturikarthik"},"content":"## User Profile","lastModifiedDate":"2024-04-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":195,"author":{"gitId":"paturikarthik"},"content":"### Set up user profile: `user setup`","lastModifiedDate":"2024-04-04"},{"lineNumber":196,"author":{"gitId":"paturikarthik"},"content":"Creates/edits an existing user profile.","lastModifiedDate":"2024-04-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":198,"author":{"gitId":"paturikarthik"},"content":"**Format:**","lastModifiedDate":"2024-04-04"},{"lineNumber":199,"author":{"gitId":"paturikarthik"},"content":"`user setup NAME h/HEIGHT w/WEIGHT a/AGE s/GENDER e/EXERCISE LEVELS g/BODY GOAL`","lastModifiedDate":"2024-04-04"},{"lineNumber":200,"author":{"gitId":"paturikarthik"},"content":"* The height provided must be an integer between 90 and 225 cms.","lastModifiedDate":"2024-04-04"},{"lineNumber":201,"author":{"gitId":"paturikarthik"},"content":"* The weight provided must be an integer between 30 and 200 kgs.","lastModifiedDate":"2024-04-04"},{"lineNumber":202,"author":{"gitId":"paturikarthik"},"content":"* The age provided must be an integer between 13 and 110 years old.","lastModifiedDate":"2024-04-04"},{"lineNumber":203,"author":{"gitId":"paturikarthik"},"content":"* The gender provided must be either `male` or `female`.","lastModifiedDate":"2024-04-04"},{"lineNumber":204,"author":{"gitId":"paturikarthik"},"content":"* The exercise levels provided must be an integer between 1 and 5.","lastModifiedDate":"2024-04-04"},{"lineNumber":205,"author":{"gitId":"paturikarthik"},"content":"* The body goal provided must be an integer between 1 and 5.","lastModifiedDate":"2024-04-04"},{"lineNumber":206,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":207,"author":{"gitId":"paturikarthik"},"content":"**Notes about the command format:**","lastModifiedDate":"2024-04-04"},{"lineNumber":208,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":209,"author":{"gitId":"paturikarthik"},"content":"| Exercise Level Input | Corresponding Exercise Levels |","lastModifiedDate":"2024-04-04"},{"lineNumber":210,"author":{"gitId":"paturikarthik"},"content":"|:--------------------:|:-----------------------------:|","lastModifiedDate":"2024-04-04"},{"lineNumber":211,"author":{"gitId":"paturikarthik"},"content":"|          1           |           Sedentary           |","lastModifiedDate":"2024-04-04"},{"lineNumber":212,"author":{"gitId":"paturikarthik"},"content":"|          2           |        Lightly Active         |","lastModifiedDate":"2024-04-04"},{"lineNumber":213,"author":{"gitId":"paturikarthik"},"content":"|          3           |       Moderately Active       |","lastModifiedDate":"2024-04-04"},{"lineNumber":214,"author":{"gitId":"paturikarthik"},"content":"|          4           |          Very Active          |","lastModifiedDate":"2024-04-04"},{"lineNumber":215,"author":{"gitId":"paturikarthik"},"content":"|          5           |       Extremely Active        |","lastModifiedDate":"2024-04-04"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":217,"author":{"gitId":"paturikarthik"},"content":"| Body Goal Input |  Corresponding Goal  |","lastModifiedDate":"2024-04-04"},{"lineNumber":218,"author":{"gitId":"paturikarthik"},"content":"|:---------------:|:--------------------:|","lastModifiedDate":"2024-04-04"},{"lineNumber":219,"author":{"gitId":"paturikarthik"},"content":"|        1        |  Quick Weight Loss   |","lastModifiedDate":"2024-04-04"},{"lineNumber":220,"author":{"gitId":"paturikarthik"},"content":"|        2        | Moderate Weight Loss |","lastModifiedDate":"2024-04-04"},{"lineNumber":221,"author":{"gitId":"paturikarthik"},"content":"|        3        |   Maintain Weight    |","lastModifiedDate":"2024-04-04"},{"lineNumber":222,"author":{"gitId":"paturikarthik"},"content":"|        4        | Moderate Weight Gain |","lastModifiedDate":"2024-04-04"},{"lineNumber":223,"author":{"gitId":"paturikarthik"},"content":"|        5        |  Quick Weight Gain   |","lastModifiedDate":"2024-04-04"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":226,"author":{"gitId":"paturikarthik"},"content":"**Examples:**","lastModifiedDate":"2024-04-04"},{"lineNumber":227,"author":{"gitId":"paturikarthik"},"content":"* `user setup Tom h/180 w/80 a/25 s/male e/3 g/2`","lastModifiedDate":"2024-04-04"},{"lineNumber":228,"author":{"gitId":"paturikarthik"},"content":"* `user setup Jane h/163 w/54 a/23 s/female e/2 g/3`","lastModifiedDate":"2024-04-04"},{"lineNumber":229,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":230,"author":{"gitId":"paturikarthik"},"content":"### Check your daily calories and hydration consumption: `user progress`","lastModifiedDate":"2024-04-04"},{"lineNumber":231,"author":{"gitId":"paturikarthik"},"content":"Displays a progress bar to show the percentage of calories and hydration you have consumed.","lastModifiedDate":"2024-04-04"},{"lineNumber":232,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":233,"author":{"gitId":"paturikarthik"},"content":"**Format:**","lastModifiedDate":"2024-04-04"},{"lineNumber":234,"author":{"gitId":"paturikarthik"},"content":"`user progress`","lastModifiedDate":"2024-04-04"},{"lineNumber":235,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":236,"author":{"gitId":"paturikarthik"},"content":"**Notes about the command:**","lastModifiedDate":"2024-04-04"},{"lineNumber":237,"author":{"gitId":"paturikarthik"},"content":"If you have not set your user up beforehand, this command will prompt you to do so instead.","lastModifiedDate":"2024-04-04"},{"lineNumber":238,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":239,"author":{"gitId":"owx0130"},"content":"#### Expected output","lastModifiedDate":"2024-04-04"},{"lineNumber":240,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":241,"author":{"gitId":"paturikarthik"},"content":"        -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-04"},{"lineNumber":242,"author":{"gitId":"paturikarthik"},"content":"\t Calories:","lastModifiedDate":"2024-04-04"},{"lineNumber":243,"author":{"gitId":"paturikarthik"},"content":"\t You have consumed 350 calories out of your goal of 2140 calories so far.","lastModifiedDate":"2024-04-04"},{"lineNumber":244,"author":{"gitId":"paturikarthik"},"content":"\t [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d                                          ]  16%","lastModifiedDate":"2024-04-04"},{"lineNumber":245,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":246,"author":{"gitId":"paturikarthik"},"content":"\t Hydration:","lastModifiedDate":"2024-04-04"},{"lineNumber":247,"author":{"gitId":"paturikarthik"},"content":"\t You have consumed 200ml out of your goal of 2000ml so far.","lastModifiedDate":"2024-04-04"},{"lineNumber":248,"author":{"gitId":"paturikarthik"},"content":"\t [\u003d\u003d\u003d\u003d\u003d                                             ]  10%","lastModifiedDate":"2024-04-04"},{"lineNumber":249,"author":{"gitId":"paturikarthik"},"content":"         -----------------------------------------------------------------------------","lastModifiedDate":"2024-04-04"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":252,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-24"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":254,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer? ","lastModifiedDate":"2020-05-24"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":256,"author":{"gitId":"-"},"content":"**A**: {your answer here}","lastModifiedDate":"2020-05-24"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":258,"author":{"gitId":"owx0130"},"content":"## Coming soon","lastModifiedDate":"2024-04-04"},{"lineNumber":259,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":260,"author":{"gitId":"owx0130"},"content":"### Calorie lists to show calorie intakes and outflow separately","lastModifiedDate":"2024-04-04"},{"lineNumber":261,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":262,"author":{"gitId":"owx0130"},"content":"When the user inputs `calorie list` into the terminal, they should be able to see the calorie lists for their calorie intakes and outflow separately.","lastModifiedDate":"2024-04-04"},{"lineNumber":263,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":264,"author":{"gitId":"owx0130"},"content":"This upcoming feature will be implemented by allowing the `CalorieList` class to have two `ArrayList` members that store the calorie inflows and outflows separately.","lastModifiedDate":"2024-04-04"},{"lineNumber":265,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":266,"author":{"gitId":"owx0130"},"content":"### Calorie and hydration progress to be calculated based on date","lastModifiedDate":"2024-04-04"},{"lineNumber":267,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":268,"author":{"gitId":"owx0130"},"content":"The current implementation of the calorie and hydration progress calculates the calories/hydration consumed based on the total number of entries in the list, irregardless of the date.","lastModifiedDate":"2024-04-04"},{"lineNumber":269,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":270,"author":{"gitId":"owx0130"},"content":"We want to be able to provide accurate representations of users meeting their daily calorie and hydration needs, so this feature will be updated very soon to accommodate that.","lastModifiedDate":"2024-04-04"},{"lineNumber":271,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":272,"author":{"gitId":"owx0130"},"content":"### Reduce reliance on network features","lastModifiedDate":"2024-04-04"},{"lineNumber":273,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":274,"author":{"gitId":"owx0130"},"content":"As of current, calorie requirements for users is calculated from an external API. However, to reduce the reliance on having a strong network connection for our application to work well, we are implementing a failsafe to calculate calorie requirements even if the network connection is not good.","lastModifiedDate":"2024-04-04"},{"lineNumber":275,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":276,"author":{"gitId":"owx0130"},"content":"### Edit user details","lastModifiedDate":"2024-04-04"},{"lineNumber":277,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":278,"author":{"gitId":"owx0130"},"content":"The user should be able to quickly edit their details without having to run the `user setup` command again, as they may only need to change a few details for their account.","lastModifiedDate":"2024-04-04"},{"lineNumber":279,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":280,"author":{"gitId":"-"},"content":"## Command Summary","lastModifiedDate":"2020-05-24"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":282,"author":{"gitId":"rexyyong"},"content":"| Action                 | Format, Examples                                                                 |","lastModifiedDate":"2024-04-03"},{"lineNumber":283,"author":{"gitId":"paturikarthik"},"content":"|------------------------|----------------------------------------------------------------------------------|","lastModifiedDate":"2024-04-04"},{"lineNumber":284,"author":{"gitId":"rexyyong"},"content":"| Help                   | `help`                                                                           |","lastModifiedDate":"2024-04-03"},{"lineNumber":285,"author":{"gitId":"rexyyong"},"content":"| Add calories intake    | `calories in DESCRIPTION c/CALORIES d/DATE [m/CARBOHYDRATES,PROTEIN,FATS]`       |","lastModifiedDate":"2024-04-03"},{"lineNumber":286,"author":{"gitId":"rexyyong"},"content":"| Add calories outflow   | `calories out DESCRIPTION c/CALORIES d/DATE`                                     |","lastModifiedDate":"2024-04-03"},{"lineNumber":287,"author":{"gitId":"rexyyong"},"content":"| List calories          | `calories list`                                                                  |","lastModifiedDate":"2024-04-03"},{"lineNumber":288,"author":{"gitId":"rexyyong"},"content":"| Delete calories entry  | `calories delete INDEX`                                                          |","lastModifiedDate":"2024-04-03"},{"lineNumber":289,"author":{"gitId":"rexyyong"},"content":"| Add hydration intake   | `hydration in DESCRIPTION v/VOLUME d/DATE`                                       |","lastModifiedDate":"2024-04-03"},{"lineNumber":290,"author":{"gitId":"rexyyong"},"content":"| List hydration         | `hydration list`                                                                 |","lastModifiedDate":"2024-04-03"},{"lineNumber":291,"author":{"gitId":"rexyyong"},"content":"| Delete hydration entry | `hydration delete INDEX`                                                         |","lastModifiedDate":"2024-04-03"},{"lineNumber":292,"author":{"gitId":"rexyyong"},"content":"| Add sleep              | `sleep add DURATION d/DATE`                                                      |","lastModifiedDate":"2024-04-03"},{"lineNumber":293,"author":{"gitId":"rexyyong"},"content":"| List sleep             | `sleep list`                                                                     |","lastModifiedDate":"2024-04-03"},{"lineNumber":294,"author":{"gitId":"rexyyong"},"content":"| Delete sleep entry     | `sleep delete INDEX`                                                             |","lastModifiedDate":"2024-04-03"},{"lineNumber":295,"author":{"gitId":"paturikarthik"},"content":"| Set Up User Profile    | `user setup NAME h/HEIGHT w/WEIGHT a/AGE s/GENDER e/EXERCISE LEVELS g/BODY GOAL` |","lastModifiedDate":"2024-04-04"},{"lineNumber":296,"author":{"gitId":"paturikarthik"},"content":"| Check User Progress    | `user progress`                                                                  |","lastModifiedDate":"2024-04-04"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"rexyyong":60,"a-wild-chocolate":2,"owx0130":30,"shawnpong":111,"-":36,"paturikarthik":58}},{"path":"docs/team/paturikarthik.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"# Paturi Karthik - Project Portfolio Page","lastModifiedDate":"2024-03-08"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"## Overview","lastModifiedDate":"2024-03-08"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"Hello","lastModifiedDate":"2024-03-08"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"### Summary of Contributions","lastModifiedDate":"2024-03-08"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"Hello","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"paturikarthik":7}},{"path":"docs/team/shawnpong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"this is my profile :D","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"shawnpong":1}},{"path":"src/main/java/seedu/lifetrack/Entry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-27"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"public abstract class Entry {","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    private String description;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"    private LocalDate date;","lastModifiedDate":"2024-03-29"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"    public Entry(String description, LocalDate date){","lastModifiedDate":"2024-03-29"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    public String getDescription() {","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"        return description;","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-29"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"        return date;","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    public String toString() {","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"        return String.format(\"\\t Date: \" + date + \", Description: \" + description);","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"        return String.format(date + \";\" + description);","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"rexyyong":5,"owx0130":17,"paturikarthik":8}},{"path":"src/main/java/seedu/lifetrack/LifeTrack.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-11"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationList;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepList;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.ui.Ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import java.io.File;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"public class LifeTrack {","lastModifiedDate":"2024-03-11"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    public static CalorieList calorieList \u003d new CalorieList(\"data/caloriesData.txt\");","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    public static HydrationList hydrationList \u003d new HydrationList(\"data/hydrationData.txt\");","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    public static SleepList sleepList \u003d new SleepList(\"data/sleepData.txt\");","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    public static User user \u003d new User(\"data/userData.txt\");","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"     * Main entry-point for the java.lifetrack.LifeTrack application.","lastModifiedDate":"2024-03-11"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-03-11"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"        new File(\"data/\").mkdir();","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"        Ui.sayHello();","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"        Ui.readUserInput(calorieList,hydrationList,user,sleepList);","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"        Ui.byeMessage();","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"rexyyong":2,"a-wild-chocolate":1,"owx0130":8,"paturikarthik":15}},{"path":"src/main/java/seedu/lifetrack/calories/Activity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.calories;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"public class Activity {","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"    public Activity(){","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"owx0130":8}},{"path":"src/main/java/seedu/lifetrack/calories/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.calories;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"public class Food {","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"    private int carbohydrates;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"    private int proteins;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    private int fats;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"    public Food(int carbohydrates, int proteins, int fats) {","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"        this.carbohydrates \u003d carbohydrates;","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    public int getCarbohydrates() {","lastModifiedDate":"2024-03-22"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"        return carbohydrates;","lastModifiedDate":"2024-03-22"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    public int getProteins() {","lastModifiedDate":"2024-03-22"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"        return proteins;","lastModifiedDate":"2024-03-22"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    public int getFats() {","lastModifiedDate":"2024-03-22"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"        return fats;","lastModifiedDate":"2024-03-22"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"owx0130":26}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/CalorieList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.ErrorMessages;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-19"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.parser.ParserCalories;","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.storage.FileHandler;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.ui.CalorieListUi;","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-11"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"public class CalorieList {","lastModifiedDate":"2024-03-11"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"    private static Logger logr \u003d Logger.getLogger(CalorieList.class.getName());","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    private final int SIZE_OF_DELETE \u003d 16;","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"    private ArrayList\u003cEntry\u003e calorieArrayList;","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    private FileHandler fileHandler;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    //constructor for JUnit tests","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"    public CalorieList() {","lastModifiedDate":"2024-03-11"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"        calorieArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-11"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new CalorieList object using a file path.","lastModifiedDate":"2024-04-03"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"     * This constructor is intended for usage in a terminal environment.","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"     * @param filePath the path to the file containing calorie entries","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    public CalorieList(String filePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"            fileHandler \u003d new FileHandler(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"            calorieArrayList \u003d fileHandler.getCalorieEntriesFromFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"            calorieArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"            System.out.println(ErrorMessages.getFileNotFoundMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"     * Updates the file with the current list of calorie entries.","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"     * If the file handler is not initialized, no action is taken.","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"    private void updateFile() {","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"        if (fileHandler !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeEntries(calorieArrayList);","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"    public Entry getEntry(int index) {","lastModifiedDate":"2024-03-15"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"        return calorieArrayList.get(index);","lastModifiedDate":"2024-03-15"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"    /**","lastModifiedDate":"2024-03-11"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"     * Deletes a calorie entry from the list based on the provided index.","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"     * Index should be in an integer from 1 to size of the list.","lastModifiedDate":"2024-03-11"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"     * @param line the string containing the index of calorie record user want to delete","lastModifiedDate":"2024-03-15"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"     */","lastModifiedDate":"2024-03-11"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"    public void deleteEntry(String line) {","lastModifiedDate":"2024-03-15"},{"lineNumber":66,"author":{"gitId":"a-wild-chocolate"},"content":"        assert (line.startsWith(\"calories delete\") ) : \"ensures that input is correct\";","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-11"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"            int index \u003d Integer.parseInt(line.substring(SIZE_OF_DELETE).trim());","lastModifiedDate":"2024-03-15"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"            Entry toDelete \u003d calorieArrayList.get(index-1);","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"rexyyong"},"content":"            calorieArrayList.remove((index-1));  // transfer to scope 0 to size-1","lastModifiedDate":"2024-03-13"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"            updateFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"            CalorieListUi.successfulDeletedMessage(toDelete);","lastModifiedDate":"2024-03-28"},{"lineNumber":74,"author":{"gitId":"rexyyong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-13"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"            System.out.println(CalorieListUi.deleteLogIndexMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-19"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"            System.out.println(CalorieListUi.deleteLogNumberMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":78,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-11"},{"lineNumber":79,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-11"},{"lineNumber":80,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-11"},{"lineNumber":81,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-03-13"},{"lineNumber":82,"author":{"gitId":"rexyyong"},"content":"     * Parses a string input representing calorie intake and adds it to the calorie list.","lastModifiedDate":"2024-03-13"},{"lineNumber":83,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":84,"author":{"gitId":"rexyyong"},"content":"     * This method takes a string input representing calorie intake information and","lastModifiedDate":"2024-03-13"},{"lineNumber":85,"author":{"gitId":"rexyyong"},"content":"     * attempts to parse it using the parseCaloriesIn method from the Parser class.","lastModifiedDate":"2024-03-13"},{"lineNumber":86,"author":{"gitId":"rexyyong"},"content":"     * If the input format is incorrect or contains missing components, it catches","lastModifiedDate":"2024-03-13"},{"lineNumber":87,"author":{"gitId":"rexyyong"},"content":"     * the InvalidInputException and prints an error message. Otherwise, it adds","lastModifiedDate":"2024-03-13"},{"lineNumber":88,"author":{"gitId":"rexyyong"},"content":"     * the parsed Entry object to the calorieArrayList.","lastModifiedDate":"2024-03-13"},{"lineNumber":89,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-03-13"},{"lineNumber":90,"author":{"gitId":"rexyyong"},"content":"     * @param input the input string containing date, time, activity, and calorie count","lastModifiedDate":"2024-03-13"},{"lineNumber":91,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-03-13"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"    public void addEntry(String input) {","lastModifiedDate":"2024-03-14"},{"lineNumber":93,"author":{"gitId":"rexyyong"},"content":"        assert (input.startsWith(\"calories in\") || input.startsWith(\"calories out\")) : \"ensures that input is correct\";","lastModifiedDate":"2024-03-21"},{"lineNumber":94,"author":{"gitId":"a-wild-chocolate"},"content":"        logr.setLevel(Level.WARNING);","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-13"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"            Entry newEntry \u003d ParserCalories.parseCaloriesInput(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":97,"author":{"gitId":"rexyyong"},"content":"            calorieArrayList.add(newEntry);","lastModifiedDate":"2024-03-13"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"            updateFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"            CalorieListUi.printNewCalorieEntry(newEntry);","lastModifiedDate":"2024-03-28"},{"lineNumber":100,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-13"},{"lineNumber":101,"author":{"gitId":"a-wild-chocolate"},"content":"            logr.log(Level.WARNING, e.getMessage(), e);","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":103,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-14"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"     * Prints the list of calorie entries along with its activity description.","lastModifiedDate":"2024-03-14"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"     * If the list is empty, it prints a message indicating that the list is empty.","lastModifiedDate":"2024-03-14"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"     * Otherwise, it prints each entry\u0027s activity description and calorie count.","lastModifiedDate":"2024-03-14"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-14"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"    public void printCalorieList() {","lastModifiedDate":"2024-03-14"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"        if (calorieArrayList.isEmpty()) {","lastModifiedDate":"2024-03-14"},{"lineNumber":112,"author":{"gitId":"owx0130"},"content":"            CalorieListUi.emptyListMessage();","lastModifiedDate":"2024-03-28"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-03-14"},{"lineNumber":114,"author":{"gitId":"owx0130"},"content":"            CalorieListUi.calorieListHeader();","lastModifiedDate":"2024-03-28"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"            for (int i \u003d 0; i \u003c calorieArrayList.size(); i++) {","lastModifiedDate":"2024-03-14"},{"lineNumber":116,"author":{"gitId":"owx0130"},"content":"                Entry entry \u003d calorieArrayList.get(i);","lastModifiedDate":"2024-03-22"},{"lineNumber":117,"author":{"gitId":"owx0130"},"content":"                System.out.println(\"\\t \" + (i + 1) + \". \" + entry);","lastModifiedDate":"2024-03-22"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-03-14"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-14"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":121,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":122,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":123,"author":{"gitId":"rexyyong"},"content":"     * Returns the size of the list of calorie entries.","lastModifiedDate":"2024-04-03"},{"lineNumber":124,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":125,"author":{"gitId":"rexyyong"},"content":"     * @return the number of calorie entries in the list","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"    public int getSize() {","lastModifiedDate":"2024-03-14"},{"lineNumber":128,"author":{"gitId":"owx0130"},"content":"        return calorieArrayList.size();","lastModifiedDate":"2024-03-14"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":130,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":131,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":132,"author":{"gitId":"rexyyong"},"content":"     * Calculates and returns the total number of calories consumed from all entries in the list.","lastModifiedDate":"2024-04-03"},{"lineNumber":133,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":134,"author":{"gitId":"rexyyong"},"content":"     * @return the total number of calories consumed","lastModifiedDate":"2024-04-03"},{"lineNumber":135,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"    public int getCaloriesConsumed() {","lastModifiedDate":"2024-04-01"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2024-04-01"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 0; i \u003c calorieArrayList.size(); i++) {","lastModifiedDate":"2024-04-02"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"            InputEntry tempEntry \u003d (InputEntry) calorieArrayList.get(i);","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"            totalCalories +\u003d tempEntry.getCalories();","lastModifiedDate":"2024-04-02"},{"lineNumber":141,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"        return totalCalories;","lastModifiedDate":"2024-04-01"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":144,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-11"}],"authorContributionMap":{"rexyyong":46,"a-wild-chocolate":17,"owx0130":45,"shawnpong":21,"paturikarthik":15}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/InputEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":" * Represents an entry for calories intake.","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":" * Extends the Entry class and includes additional fields and methods specific to input entries.","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"public class InputEntry extends Entry {","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    private Food food;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    private int calories;","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    private boolean doesFoodExist \u003d false;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new InputEntry object with the given description, calories, and date.","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories consumed","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"    public InputEntry(String description, int calories, LocalDate date) {","lastModifiedDate":"2024-03-29"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"        super(description, date);","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new InputEntry object with the given description, calories, date,","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"     * and food details with macronutrients.","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories consumed","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"     * @param food the food details with macronutrients associated with the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"    public InputEntry(String description, int calories, LocalDate date, Food food) {","lastModifiedDate":"2024-03-29"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        super(description, date);","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        this.food \u003d food;","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"        this.doesFoodExist \u003d true;","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"    public Food getFood() {","lastModifiedDate":"2024-03-22"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"        return food;","lastModifiedDate":"2024-03-22"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"    public int getCalories() {","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"        return this.calories;","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"    public String toString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"        return String.format(super.toString() + \", Calories: \" + calories + (doesFoodExist ?","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"                \" (C: \" + food.getCarbohydrates() +","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"                \", P: \" + food.getProteins() +","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"                \", F: \" + food.getFats() + \")\"","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"                : \"\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"        return String.format(super.toFileFriendlyString() + \";C_IN;\" + calories +","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"                (doesFoodExist ? \";\" + food.getCarbohydrates() + \";\" + food.getProteins() + \";\" + food.getFats()","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"                : \"\"));","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":24,"owx0130":40,"shawnpong":3}},{"path":"src/main/java/seedu/lifetrack/calories/calorielist/OutputEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.calories.calorielist;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Activity;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":" * Represents an entry for calories output.","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":" * Extends the Entry class and includes additional fields and methods specific to output entries.","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"public class OutputEntry extends Entry {","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"    private Activity activity;","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    private int calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    private boolean doesActivityExist \u003d false;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new OutputEntry object with the given description, calories, and date.","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories burnt","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"    public OutputEntry(String description, int calories, LocalDate date) {","lastModifiedDate":"2024-03-29"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"        super(description, date);","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new OutputEntry object with the given description, calories, date, and activity details.","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories burnt","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"     * @param activity the activity details associated with the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"    public OutputEntry(String description, int calories, LocalDate date, Activity activity) {","lastModifiedDate":"2024-03-29"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"        super(description, date);","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        this.activity \u003d activity;","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"        this.doesActivityExist \u003d true;","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    public Activity getActivity() {","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"        return activity;","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"    public int getCalories() {","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        return calories;","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"    public String toString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"        return String.format(super.toString() + \", Calories: \" + calories);","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"        return String.format(super.toFileFriendlyString() + \";C_OUT;\" + calories);","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":23,"owx0130":37}},{"path":"src/main/java/seedu/lifetrack/hydration/hydrationlist/HydrationEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.hydration.hydrationlist;","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"public class HydrationEntry extends Entry {","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"    private int volume;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"    public HydrationEntry(String description, int volume, LocalDate date){","lastModifiedDate":"2024-03-29"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"        super(description, date);","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"        this.volume\u003d volume;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"    public  int getHydration() {","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"        return volume;","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    public int getVolume() {","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"        return volume;","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    public String toString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"        return String.format(super.toString() + \", Volume: \" + volume);","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"        return String.format(super.toFileFriendlyString() + \";\" + volume);","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":3,"owx0130":16,"shawnpong":12}},{"path":"src/main/java/seedu/lifetrack/hydration/hydrationlist/HydrationList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.hydration.hydrationlist;","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.ErrorMessages;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.parser.ParserHydration;","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.storage.FileHandler;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.ui.HydrationListUI;","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":" * Represents a list of liquid entries.","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":" * Provides methods to add, delete, and print liquid entries.","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"public class HydrationList {","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    private static Logger logr \u003d Logger.getLogger(CalorieList.class.getName());","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    private final int DELETE_PADDING \u003d 16;","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    private ArrayList\u003cEntry\u003e hydrationArrayList;","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    private FileHandler fileHandler;","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    //constructor for JUnit tests","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    public HydrationList() {","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        hydrationArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    //constructor for usage in terminal","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    public HydrationList(String filePath) {","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"            fileHandler \u003d new FileHandler(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"            hydrationArrayList \u003d fileHandler.getHydrationEntriesFromFile();","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"            hydrationArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"            System.out.println(ErrorMessages.getFileNotFoundMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"     * Updates the file with the current list of hydration entries.","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"    private void updateFile() {","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"        if (fileHandler !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeEntries(hydrationArrayList);","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the liquid entry at the specified index.","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"     * @param index the index of the liquid entry to retrieve","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"     * @return the liquid entry at the specified index","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"     * @throws IndexOutOfBoundsException if the index is out of range","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"    public Entry getEntry(int index) {","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"        return hydrationArrayList.get(index);","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"     * Deletes the liquid entry indicated by the provided line.","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"     * @param line the string containing the index of the liquid record to delete","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"    public void deleteEntry(String line) {","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"            int index \u003d Integer.parseInt(line.substring(DELETE_PADDING).trim());","lastModifiedDate":"2024-03-24"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"            Entry toDelete \u003d hydrationArrayList.get(index - 1);","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"            hydrationArrayList.remove(index - 1);","lastModifiedDate":"2024-03-28"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"            updateFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"            HydrationListUI.successfulDeletedMessage(toDelete);","lastModifiedDate":"2024-03-28"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"            System.out.println(HydrationListUI.deleteLogIndexMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"            System.out.println(HydrationListUI.deleteLogNumberMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"     * Adds a new liquid entry based on the provided input.","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"     * @param input the input string containing liquid entry information","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"    public void addEntry(String input) {","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"        assert (input.startsWith(\"hydration add\")) : \"ensures that input is correct\";","lastModifiedDate":"2024-03-28"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"            Entry newEntry \u003d ParserHydration.parseHydrationInput(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"            hydrationArrayList.add(newEntry);","lastModifiedDate":"2024-03-28"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"            updateFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"            HydrationListUI.printNewHydrationEntry(newEntry);","lastModifiedDate":"2024-03-28"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"a-wild-chocolate"},"content":"            logr.log(Level.WARNING, e.getMessage(), e);","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"     * Prints the list of liquid entries.","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"     * If the list is empty, prints a message indicating that the list is empty.","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"    public void printHydrationList() {","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"        if (hydrationArrayList.isEmpty()) {","lastModifiedDate":"2024-03-28"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"            HydrationListUI.emptyListMessage();","lastModifiedDate":"2024-03-28"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"            HydrationListUI.hydrationListHeader();","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"            for (int i \u003d 0; i \u003c hydrationArrayList.size(); i++) {","lastModifiedDate":"2024-03-28"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"                Entry entry \u003d hydrationArrayList.get(i);","lastModifiedDate":"2024-03-28"},{"lineNumber":111,"author":{"gitId":"owx0130"},"content":"                System.out.println(\"\\t \" + (i + 1) + \". \" + entry);","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the total amount of hydration consumed.","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"     * @return the total amount of hydration consumed","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"    public int getHydrationConsumed() {","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"        int totalHydration \u003d 0;","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 0; i \u003c hydrationArrayList.size(); i++) {","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"            HydrationEntry tempEntry \u003d (HydrationEntry) hydrationArrayList.get(i);","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"            totalHydration +\u003d tempEntry.getHydration();","lastModifiedDate":"2024-04-02"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"        return totalHydration;","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the size of the liquid list.","lastModifiedDate":"2024-03-20"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"     * @return the number of liquid entries in the list","lastModifiedDate":"2024-03-20"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"    public int getSize() {","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"        return hydrationArrayList.size();","lastModifiedDate":"2024-03-28"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"a-wild-chocolate":4,"owx0130":57,"shawnpong":76,"paturikarthik":1}},{"path":"src/main/java/seedu/lifetrack/sleep/sleeplist/SleepEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.sleep.sleeplist;","lastModifiedDate":"2024-03-27"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"public class SleepEntry extends Entry {","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"    private LocalDate date;","lastModifiedDate":"2024-03-29"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"    private double duration;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"    /***","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"     * Sleep constructor: date can be empty. If date input is empty, automatically fill with N/A;","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"     * date should be in format DDMMYY, duration should be a positive real number in hour unit.","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"     * @param date","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"     * @param duration","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"     */","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"    public SleepEntry (double duration, LocalDate date){","lastModifiedDate":"2024-03-29"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"        super(\"SLEEP\", date);","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-03-29"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2024-03-29"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"        return date;","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"    public double getDuration() {","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"        return duration;","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"    public String toString() {","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"        return \"\\t Date: \" + date +","lastModifiedDate":"2024-03-29"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"                \", Duration: \" + String.format(\"%.1f\", duration) + \" hours\";","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"        return String.format(super.toFileFriendlyString() + \";\" + duration);","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"rexyyong":7,"a-wild-chocolate":22,"owx0130":11}},{"path":"src/main/java/seedu/lifetrack/sleep/sleeplist/SleepList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack.sleep.sleeplist;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.ErrorMessages;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.system.parser.ParserSleep;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.storage.FileHandler;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.ui.SleepListUi;","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getIncorrectSleepInputMessage;","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"public class SleepList {","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    private ArrayList\u003cEntry\u003e sleepList;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    private FileHandler fileHandler;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    //constructor for JUnit tests","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"    public SleepList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"        sleepList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    //constructor for usage in terminal","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    public SleepList(String filePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"            fileHandler \u003d new FileHandler(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"            sleepList \u003d fileHandler.getSleepEntriesFromFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"            sleepList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"            System.out.println(ErrorMessages.getFileNotFoundMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"    private void updateFile() {","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"        if (fileHandler !\u003d null) {","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeEntries(sleepList);","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"    public Entry getSleep(int index) {","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"a-wild-chocolate"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c sleepList.size() : \"Index out of bounds\";","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"        return sleepList.get(index);","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"    public void addSleep(String input) {","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"            Entry newSleep \u003d ParserSleep.parseSleepInput(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList.add(newSleep);","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"            updateFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"            SleepListUi.printNewSleepEntry(newSleep);","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"            System.out.println(getIncorrectSleepInputMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"    public void deleteSleep(String line) {","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"            int index \u003d Integer.parseInt(line.split(\" \")[2]) ; //User input format: sleep delete INDEX, here get index","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"            Entry toDelete \u003d sleepList.get(index-1);","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList.remove(index - 1);","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"            updateFile();","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"            SleepListUi.successfulDeletedMessage(toDelete);","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"a-wild-chocolate"},"content":"            System.out.println(SleepListUi.deleteLogIndexMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"            System.out.println(SleepListUi.deleteLogNumberMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"a-wild-chocolate"},"content":"    public void printSleepList() {","lastModifiedDate":"2024-03-26"},{"lineNumber":72,"author":{"gitId":"a-wild-chocolate"},"content":"        if (this.sleepList.isEmpty()) {","lastModifiedDate":"2024-03-26"},{"lineNumber":73,"author":{"gitId":"a-wild-chocolate"},"content":"            SleepListUi.emptyListMessage();","lastModifiedDate":"2024-03-26"},{"lineNumber":74,"author":{"gitId":"a-wild-chocolate"},"content":"        } else {","lastModifiedDate":"2024-03-26"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"            SleepListUi.sleepListHeader();","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"            for (int i \u003d 0; i \u003c sleepList.size(); i++) {","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"                Entry entry \u003d sleepList.get(i);","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"                System.out.println(\"\\t \" + (i + 1) + \". \" + entry);","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"a-wild-chocolate"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"a-wild-chocolate"},"content":"    public int getSize() {","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"a-wild-chocolate"},"content":"        return sleepList.size();","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"a-wild-chocolate":43,"owx0130":43}},{"path":"src/main/java/seedu/lifetrack/system/exceptions/ErrorMessages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.system.exceptions;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":" * Utility class for managing error messages related to the application.","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"public class ErrorMessages {","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"    private static final String WHITESPACE \u003d \"         \";","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"    public static void printIndexOutOfBoundsError(){","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Sorry, this index is invalid. Please enter a positive integer \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"                \"within the size of the list.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"    public static void printNumberFormatError() {","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Please enter a valid number within the command\");","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    public static String getIncorrectCaloriesInputMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please input only positive integers into the calories field!\";","lastModifiedDate":"2024-03-22"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"    public static String getIncorrectVolumeInputMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"        return \"\\t Please input only positive integers into the volume field!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    public static String getIncorrectMacrosInputMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please input only positive integers into the macronutrients field!\";","lastModifiedDate":"2024-03-22"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"    public static String getInvalidNumberOfSetUpInputs() {","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Sorry, this command is invalid. Please enter the setup command in the following format \" +","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"                \"user setup {NAME} h/{HEIGHT} w/{WEIGHT} a/{AGE} s/{SEX} e/{EXERCISE LEVELS} g/{GOAL}\";","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"    public static String getInvalidGoalNumberMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Invalid input for goal number. Please enter a number between 1 and 5.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"    public static String getInvalidExerciseLevelsNumberMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Invalid input for exercise level. Please enter a number between 1 and 5.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"    public static String getIOExceptionMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"        return \"\\t Unable to write to file!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"    public static String getFileNotFoundMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"        return WHITESPACE + \"No file found! The initialised list will be empty.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String getIncorrectSleepInputMessage() {","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"        return \"\\t Please input only positive real number into the sleep duration field!\";","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String getIncorrectSleepDateInputMessage() {","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"        return \"\\t Error: Date must be in YYYY-MM-DD format.!\";","lastModifiedDate":"2024-03-29"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"    public static String getHeightOutOfRangeMessage() {","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter a valid height!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"    public static String getInvalidHeightNumberMessage(){","lastModifiedDate":"2024-04-04"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter your height(in cm) as an integer!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"    public static String getWeightOutOfRangeMessage(){","lastModifiedDate":"2024-04-04"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter a valid weight!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"    public static String  getInvalidWeightNumberMessage(){","lastModifiedDate":"2024-04-04"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter your weight(in kg) as an integer!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"    public static String getUnderAgeMessage(){","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t You are too young to use this app :(\";","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"    public static String getAgeOutOfRangeMessage(){","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter a valid age!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"    public static String getInvalidAgeNumberMessage(){","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please enter your age as an integer!\";","lastModifiedDate":"2024-04-04"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"rexyyong":4,"a-wild-chocolate":5,"owx0130":19,"shawnpong":4,"paturikarthik":51}},{"path":"src/main/java/seedu/lifetrack/system/exceptions/InvalidInputException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.system.exceptions;","lastModifiedDate":"2024-03-19"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-25"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Level;","lastModifiedDate":"2024-03-25"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2024-03-25"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2024-03-13"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"    private static Logger logr \u003d Logger.getLogger(CalorieList.class.getName());","lastModifiedDate":"2024-03-25"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"    public final String heythere \u003d \"\";","lastModifiedDate":"2024-03-25"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new InvalidInputException with a default error message.","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"     * The default message provides guidance on ensuring correct input format.","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"    public InvalidInputException(){","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"        super(\"\\t Please ensure that you have keyed in the correct format!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"        logr.setLevel(Level.SEVERE);","lastModifiedDate":"2024-03-25"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"        logr.log(Level.WARNING,\"\\t Please ensure that you have keyed in the correct format!\");","lastModifiedDate":"2024-03-25"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"     * Constructs a new InvalidInputException with a custom error message.","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"     * @param exception the custom error message describing the specific input error","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"    public InvalidInputException(String exception) {","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"        super(exception);","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"rexyyong":14,"a-wild-chocolate":8,"owx0130":2,"paturikarthik":6}},{"path":"src/main/java/seedu/lifetrack/system/exceptions/InvalidInputExceptionMessage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.exceptions;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"/**","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":" * Utility class for managing error messages related to invalid input exceptions.","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":" */","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"public class InvalidInputExceptionMessage {","lastModifiedDate":"2024-03-22"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"    private static final String HEADER \u003d \"\\t Invalid input!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"    private static final String CALORIES_IN_INPUT \u003d \"\\t Example input: calories in DESCRIPTION \" +","lastModifiedDate":"2024-03-22"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"            \"c/INTEGER_CALORIES d/DATE [m/MACROS]\";","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"    private static final String CALORIES_OUT_INPUT \u003d \"\\t Example input: calories out DESCRIPTION \" +","lastModifiedDate":"2024-03-22"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"            \"c/INTEGER_CALORIES d/DATE\";","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"    private static final String MACROS_INPUT \u003d \"\\t Example input: ....... m/CARBS_INT, PROTEIN_INT, FATS_INT\";","lastModifiedDate":"2024-03-22"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"    private static final String HYDRATION_IN_INPUT \u003d \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\" ;","lastModifiedDate":"2024-03-29"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"    private static final String USER_SETUP_INPUT \u003d \"\\t Example input: user set up Tom h/170 w/80 a/25 s/male e/4 g/3\";","lastModifiedDate":"2024-03-31"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    //calories list related methods","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    public static String getCaloriesIncorrectOrderMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that you have keyed the input in the correct order!\\n\";","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + CALORIES_IN_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    public static String getCaloriesMissingKeywordsMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that you have entered all keywords!\\n\";","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + CALORIES_IN_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    public static String getWhitespaceInInputMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that there is no whitespace in your input!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + CALORIES_IN_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    public static String getIncompleteMacrosMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that all macronutrients fields are filled up!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + MACROS_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"    public static String getWhitespaceInMacrosInputMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Please ensure that there is no whitespace in your macros input!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + MACROS_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"    public static String getMacrosInCaloriesOutMessage() {","lastModifiedDate":"2024-03-22"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"        String message \u003d \"\\t Calorie output entry cannot have macros!\\n\";","lastModifiedDate":"2024-03-22"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"        return HEADER + message + CALORIES_OUT_INPUT;","lastModifiedDate":"2024-03-22"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"    //hydration list related methods","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"    public static String getHydrationMissingKeywordMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"        String message \u003d \"\\t Please ensure that you have entered all keywords!\\n\";","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"    public static String getHydrationIncorrectOrderMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"        String message \u003d \"\\t Please ensure that you have keyed the input in the correct order!\\n\";","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"    public static String getHydrationEmptyDescriptionMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"        String message \u003d \"\\t Please ensure that beverage and volume is not empty!\\n\";","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-03-27"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"    public static String getHydrationNegativeIntegerVolumeMessage() {","lastModifiedDate":"2024-03-27"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"        String message \u003d \"\\t Please ensure that positive integer value is keyed in for volume!\\n\";","lastModifiedDate":"2024-03-27"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"        return HEADER + message + HYDRATION_IN_INPUT;","lastModifiedDate":"2024-03-27"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"    // User related Messages","lastModifiedDate":"2024-03-31"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"    public static String getOutOfGoalRangeMessage() {","lastModifiedDate":"2024-03-31"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please key in a number between 1 and 5! 1 being quick fat loss \" +","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"                \"and 5 being quick bulking\";","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"    public static String getOutOfExerciseLevelsRangeMessage() {","lastModifiedDate":"2024-03-31"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"        return \"\\t Please key in a number between 1 and 5! 1 being little exercise done per week and 5 being\" +","lastModifiedDate":"2024-03-31"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"                \" very heavy levels of exercise done per week.\";","lastModifiedDate":"2024-04-04"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"    public static String getEmptyUserSetupInputMessage() {","lastModifiedDate":"2024-03-31"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"        return HEADER + \"\\t Please key in the relevant user fields!\\n\" + USER_SETUP_INPUT;","lastModifiedDate":"2024-03-31"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-22"}],"authorContributionMap":{"rexyyong":17,"owx0130":41,"shawnpong":8,"paturikarthik":17}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserCalories.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Activity;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getIncorrectCaloriesInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getIncorrectMacrosInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getWhitespaceInInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncompleteMacrosMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getMacrosInCaloriesOutMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesIncorrectOrderMessage;","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesMissingKeywordsMessage;","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getWhitespaceInMacrosInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-29"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"public class ParserCalories {","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    private static final int CARBS_IDX \u003d 0;","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"    private static final int PROTEINS_IDX \u003d 1;","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    private static final int FATS_IDX \u003d 2;","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"    private static final int CALORIES_OUT_PADDING \u003d 12;","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"     * Parses a string input to create an Entry object representing calorie intake.","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"     * This method expects the input string to follow a specific format, where the","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"     * description, calorie count, date and macronutrients are separated by the","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"     * delimiters \u0027desc/\u0027, \u0027c/\u0027, \u0027date/\u0027, and \u0027m/\u0027. The method extracts these components","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"     * and creates either an InputEntry or OutputEntry object depending on the user command.","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"     * If required inputs are missing or empty, an InvalidInputException is thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"     * @param input the input string to be parsed, containing date, time, activity,","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"     *              and calorie count information","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"     * @return an Entry object representing calorie intake","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"     * @throws InvalidInputException if the input string is missing components or contains empty fields","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"    public static Entry parseCaloriesInput(String input) throws InvalidInputException {","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"        int caloriesIndex \u003d input.indexOf(\"c/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"        int dateIndex \u003d input.indexOf(\"d/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"        int macrosIndex \u003d input.indexOf(\"m/\");","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"        checkKeywordsExist(caloriesIndex, dateIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"        assert caloriesIndex !\u003d -1 : \"The c/ keyword should exist!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        assert dateIndex !\u003d -1 : \"The d/ keyword should exist!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"        checkKeywordsCorrectlyOrdered(caloriesIndex, dateIndex, macrosIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"        assert caloriesIndex \u003c dateIndex : \"The c/ keyword must appear before strDate/ in the input!\";","lastModifiedDate":"2024-03-29"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"        //extract command, description, calories, strDate from input","lastModifiedDate":"2024-03-29"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"        String[] parts \u003d input.split(\"c/|d/|m/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"        String command \u003d parts[0].substring(0, CALORIES_OUT_PADDING).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"        String description \u003d getDescriptionFromInput(input, command, caloriesIndex);","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"        String strCalories \u003d parts[1].trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"        // Try catch here is needed because if i input , calories in chicken c/1000 d/  , code fails","lastModifiedDate":"2024-03-29"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"        // code fails because index out of bounds occurs due to parts[2].trim()","lastModifiedDate":"2024-03-29"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"        String strDate \u003d null;","lastModifiedDate":"2024-03-29"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-29"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"            strDate \u003d parts[2].trim();","lastModifiedDate":"2024-03-29"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(getWhitespaceInInputMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":68,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-29"},{"lineNumber":69,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"        checkInputsAreNonEmpty(description, strCalories, strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"        assert description !\u003d \"\" : \"The description field should be a non-empty string!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"        assert strCalories !\u003d \"\" : \"The calories field should be a non-empty string!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"        assert strDate !\u003d \"\" : \"The strDate field should be a non-empty string!\";","lastModifiedDate":"2024-03-29"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"        //extract macronutrients if user provided it in their input, otherwise initialise it as null","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"        int[] macros \u003d null;","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"        if (macrosIndex !\u003d -1) {","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"            if (command.equals(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"                throw new InvalidInputException(getMacrosInCaloriesOutMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"rexyyong"},"content":"            String macroString \u003d parts[3].trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"rexyyong"},"content":"            try {","lastModifiedDate":"2024-03-21"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"                macros \u003d getMacrosFromInput(macroString);","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"rexyyong"},"content":"            } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"rexyyong"},"content":"                throw new InvalidInputException(e.getMessage());","lastModifiedDate":"2024-03-21"},{"lineNumber":86,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"        //convert calories from string to integer","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"        int calories \u003d getIntegerCaloriesFromInput(strCalories);","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"        checkCaloriesIsPositiveInteger(calories);","lastModifiedDate":"2024-03-21"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"        assert calories \u003e 0 : \"Calories value must be a positive integer!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":94,"author":{"gitId":"rexyyong"},"content":"        //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":95,"author":{"gitId":"rexyyong"},"content":"        // Convert strDate from type String to date of type LocalDate","lastModifiedDate":"2024-03-29"},{"lineNumber":96,"author":{"gitId":"rexyyong"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2024-03-29"},{"lineNumber":97,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-29"},{"lineNumber":98,"author":{"gitId":"rexyyong"},"content":"            date \u003d getLocalDateFromInput(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":99,"author":{"gitId":"rexyyong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":100,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(\"Invalid date format\");","lastModifiedDate":"2024-03-29"},{"lineNumber":101,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-29"},{"lineNumber":102,"author":{"gitId":"rexyyong"},"content":"        //@@author","lastModifiedDate":"2024-03-29"},{"lineNumber":103,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":104,"author":{"gitId":"rexyyong"},"content":"        if (command.equals(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"            return makeNewOutputEntry(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"        } else if (macros \u003d\u003d null) {","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"            return makeNewInputEntry(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"            return makeNewInputEntry(description, calories, date, macros);","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"rexyyong"},"content":"    //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":114,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"rexyyong"},"content":"     * Parses a string representation of a date and returns a LocalDate object.","lastModifiedDate":"2024-04-03"},{"lineNumber":116,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":117,"author":{"gitId":"rexyyong"},"content":"     * @param strDate the string representation of the date","lastModifiedDate":"2024-04-03"},{"lineNumber":118,"author":{"gitId":"rexyyong"},"content":"     * @return the LocalDate object parsed from the input string","lastModifiedDate":"2024-04-03"},{"lineNumber":119,"author":{"gitId":"rexyyong"},"content":"     * @throws DateTimeParseException if the input string cannot be parsed as a valid date","lastModifiedDate":"2024-04-03"},{"lineNumber":120,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"rexyyong"},"content":"    public static LocalDate getLocalDateFromInput(String strDate) throws DateTimeParseException {","lastModifiedDate":"2024-03-29"},{"lineNumber":122,"author":{"gitId":"rexyyong"},"content":"        LocalDate date \u003d LocalDate.parse(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":123,"author":{"gitId":"rexyyong"},"content":"        return date;","lastModifiedDate":"2024-03-29"},{"lineNumber":124,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":125,"author":{"gitId":"rexyyong"},"content":"    //@@author","lastModifiedDate":"2024-03-29"},{"lineNumber":126,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":127,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":128,"author":{"gitId":"rexyyong"},"content":"     * Parses a string representation of calories and returns an integer value.","lastModifiedDate":"2024-04-03"},{"lineNumber":129,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":130,"author":{"gitId":"rexyyong"},"content":"     * @param strCalories the string representation of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":131,"author":{"gitId":"rexyyong"},"content":"     * @return the integer value of calories parsed from the input string","lastModifiedDate":"2024-04-03"},{"lineNumber":132,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"    private static int getIntegerCaloriesFromInput(String strCalories) {","lastModifiedDate":"2024-03-21"},{"lineNumber":134,"author":{"gitId":"owx0130"},"content":"        int calories \u003d 0;","lastModifiedDate":"2024-03-21"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"            calories \u003d Integer.parseInt(strCalories);","lastModifiedDate":"2024-03-21"},{"lineNumber":137,"author":{"gitId":"owx0130"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":138,"author":{"gitId":"owx0130"},"content":"            System.out.println(getIncorrectCaloriesInputMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":139,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":140,"author":{"gitId":"owx0130"},"content":"        return calories;","lastModifiedDate":"2024-03-21"},{"lineNumber":141,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":142,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":143,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":144,"author":{"gitId":"rexyyong"},"content":"     * Extracts the description from the input string based on the command and the index of calories.","lastModifiedDate":"2024-04-03"},{"lineNumber":145,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":146,"author":{"gitId":"rexyyong"},"content":"     * @param inputString the input string containing the description","lastModifiedDate":"2024-04-03"},{"lineNumber":147,"author":{"gitId":"rexyyong"},"content":"     * @param command the command string indicating the type of entry (\"calories in\" or \"calories out\")","lastModifiedDate":"2024-04-03"},{"lineNumber":148,"author":{"gitId":"rexyyong"},"content":"     * @param caloriesIndex the index of the \"calories\" keyword in the input string","lastModifiedDate":"2024-04-03"},{"lineNumber":149,"author":{"gitId":"rexyyong"},"content":"     * @return the description extracted from the input string","lastModifiedDate":"2024-04-03"},{"lineNumber":150,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":151,"author":{"gitId":"owx0130"},"content":"    private static String getDescriptionFromInput(String inputString, String command, int caloriesIndex) {","lastModifiedDate":"2024-03-21"},{"lineNumber":152,"author":{"gitId":"owx0130"},"content":"        String description;","lastModifiedDate":"2024-03-21"},{"lineNumber":153,"author":{"gitId":"owx0130"},"content":"        if (command.equals(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":154,"author":{"gitId":"owx0130"},"content":"            description \u003d inputString.substring(CALORIES_OUT_PADDING, caloriesIndex).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":155,"author":{"gitId":"owx0130"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":156,"author":{"gitId":"owx0130"},"content":"            command \u003d inputString.substring(0, CALORIES_OUT_PADDING - 1).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":157,"author":{"gitId":"owx0130"},"content":"            description \u003d inputString.substring(CALORIES_OUT_PADDING - 1, caloriesIndex).trim();","lastModifiedDate":"2024-03-21"},{"lineNumber":158,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":159,"author":{"gitId":"owx0130"},"content":"        return description;","lastModifiedDate":"2024-03-21"},{"lineNumber":160,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":161,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":162,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":163,"author":{"gitId":"rexyyong"},"content":"     * Parses a string containing macros (carbs, proteins, fats) and returns an array of integers.","lastModifiedDate":"2024-04-03"},{"lineNumber":164,"author":{"gitId":"rexyyong"},"content":"     * The string should be in the format \"carbs,proteins,fats\".","lastModifiedDate":"2024-04-03"},{"lineNumber":165,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":166,"author":{"gitId":"rexyyong"},"content":"     * @param macroString the string containing macros separated by commas","lastModifiedDate":"2024-04-03"},{"lineNumber":167,"author":{"gitId":"rexyyong"},"content":"     * @return an array of integers representing macros [carbs, proteins, fats]","lastModifiedDate":"2024-04-03"},{"lineNumber":168,"author":{"gitId":"rexyyong"},"content":"     * @throws InvalidInputException if the input string is not in the correct format or contains invalid values","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":170,"author":{"gitId":"owx0130"},"content":"    private static int[] getMacrosFromInput(String macroString) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":171,"author":{"gitId":"owx0130"},"content":"        int[] macros \u003d new int[3];","lastModifiedDate":"2024-03-20"},{"lineNumber":172,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-20"},{"lineNumber":173,"author":{"gitId":"owx0130"},"content":"            String[] macroParts \u003d macroString.split(\",\");","lastModifiedDate":"2024-03-20"},{"lineNumber":174,"author":{"gitId":"owx0130"},"content":"            int idx \u003d 0;","lastModifiedDate":"2024-03-20"},{"lineNumber":175,"author":{"gitId":"owx0130"},"content":"            for (String macro: macroParts) {","lastModifiedDate":"2024-03-20"},{"lineNumber":176,"author":{"gitId":"owx0130"},"content":"                //throw exception if user inputs whitespace in the macros field i.e. m/123, ,123","lastModifiedDate":"2024-03-21"},{"lineNumber":177,"author":{"gitId":"rexyyong"},"content":"                if (macro.trim().isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":178,"author":{"gitId":"owx0130"},"content":"                    throw new InvalidInputException(getWhitespaceInMacrosInputMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":179,"author":{"gitId":"rexyyong"},"content":"                }","lastModifiedDate":"2024-03-21"},{"lineNumber":180,"author":{"gitId":"rexyyong"},"content":"                macros[idx] \u003d Integer.parseInt(macro.trim());","lastModifiedDate":"2024-03-21"},{"lineNumber":181,"author":{"gitId":"owx0130"},"content":"                idx++;","lastModifiedDate":"2024-03-20"},{"lineNumber":182,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":183,"author":{"gitId":"owx0130"},"content":"            //throw exception if there are missing values in the macros field","lastModifiedDate":"2024-03-21"},{"lineNumber":184,"author":{"gitId":"rexyyong"},"content":"            if (idx !\u003d 3) {","lastModifiedDate":"2024-03-21"},{"lineNumber":185,"author":{"gitId":"owx0130"},"content":"                throw new InvalidInputException(getIncompleteMacrosMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":186,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":187,"author":{"gitId":"owx0130"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":188,"author":{"gitId":"owx0130"},"content":"            System.out.println(getIncorrectMacrosInputMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":189,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":190,"author":{"gitId":"owx0130"},"content":"        return macros;","lastModifiedDate":"2024-03-20"},{"lineNumber":191,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":192,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":193,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":194,"author":{"gitId":"rexyyong"},"content":"     * Checks if the calorie value is a positive integer.","lastModifiedDate":"2024-04-03"},{"lineNumber":195,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":196,"author":{"gitId":"rexyyong"},"content":"     * @param calories the calorie value to check","lastModifiedDate":"2024-04-03"},{"lineNumber":197,"author":{"gitId":"rexyyong"},"content":"     * @throws InvalidInputException if the calorie value is not a positive integer","lastModifiedDate":"2024-04-03"},{"lineNumber":198,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":199,"author":{"gitId":"owx0130"},"content":"    private static void checkCaloriesIsPositiveInteger(int calories) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":200,"author":{"gitId":"owx0130"},"content":"        if (calories \u003c\u003d 0) {","lastModifiedDate":"2024-03-21"},{"lineNumber":201,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getIncorrectCaloriesInputMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":202,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":203,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":204,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":205,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":206,"author":{"gitId":"rexyyong"},"content":"     * Checks if the inputs (description, calories, and date) are non-empty strings.","lastModifiedDate":"2024-04-03"},{"lineNumber":207,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":208,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":209,"author":{"gitId":"rexyyong"},"content":"     * @param strCalories the string representation of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":210,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":211,"author":{"gitId":"rexyyong"},"content":"     * @throws InvalidInputException if any of the inputs are empty strings","lastModifiedDate":"2024-04-03"},{"lineNumber":212,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":213,"author":{"gitId":"owx0130"},"content":"    private static void checkInputsAreNonEmpty(String description, String strCalories, String date)","lastModifiedDate":"2024-03-21"},{"lineNumber":214,"author":{"gitId":"owx0130"},"content":"            throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":215,"author":{"gitId":"owx0130"},"content":"        //check if the description, calories or date fields are empty","lastModifiedDate":"2024-03-21"},{"lineNumber":216,"author":{"gitId":"owx0130"},"content":"        if (description.isEmpty() || strCalories.isEmpty() || date.isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":217,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getWhitespaceInInputMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":218,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":219,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":220,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":221,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":222,"author":{"gitId":"rexyyong"},"content":"     * Checks if the keywords for calories and date exist in the input string.","lastModifiedDate":"2024-04-03"},{"lineNumber":223,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":224,"author":{"gitId":"rexyyong"},"content":"     * @param caloriesIndex the index of the \"c/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":225,"author":{"gitId":"rexyyong"},"content":"     * @param dateIndex the index of the \"date/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":226,"author":{"gitId":"rexyyong"},"content":"     * @throws InvalidInputException if the keywords are missing","lastModifiedDate":"2024-04-03"},{"lineNumber":227,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":228,"author":{"gitId":"owx0130"},"content":"    private static void checkKeywordsExist(int caloriesIndex, int dateIndex) throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":229,"author":{"gitId":"owx0130"},"content":"        //check that c/ and date/ keywords exist in the input, else throw exception","lastModifiedDate":"2024-03-21"},{"lineNumber":230,"author":{"gitId":"owx0130"},"content":"        if (caloriesIndex \u003d\u003d -1 || dateIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-21"},{"lineNumber":231,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getCaloriesMissingKeywordsMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":232,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":233,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":234,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":235,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":236,"author":{"gitId":"rexyyong"},"content":"     * Checks if the keywords for calories and date are correctly ordered in the input string.","lastModifiedDate":"2024-04-03"},{"lineNumber":237,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":238,"author":{"gitId":"rexyyong"},"content":"     * @param caloriesIndex the index of the \"c/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":239,"author":{"gitId":"rexyyong"},"content":"     * @param dateIndex the index of the \"date/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":240,"author":{"gitId":"rexyyong"},"content":"     * @param macrosIndex the index of the \"macros/\" keyword in the input","lastModifiedDate":"2024-04-03"},{"lineNumber":241,"author":{"gitId":"rexyyong"},"content":"     * @throws InvalidInputException if the keywords are not correctly ordered","lastModifiedDate":"2024-04-03"},{"lineNumber":242,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":243,"author":{"gitId":"owx0130"},"content":"    private static void checkKeywordsCorrectlyOrdered(int caloriesIndex, int dateIndex, int macrosIndex)","lastModifiedDate":"2024-03-21"},{"lineNumber":244,"author":{"gitId":"owx0130"},"content":"            throws InvalidInputException {","lastModifiedDate":"2024-03-21"},{"lineNumber":245,"author":{"gitId":"owx0130"},"content":"        if ((macrosIndex !\u003d -1 \u0026\u0026 !(caloriesIndex \u003c dateIndex \u0026\u0026 dateIndex \u003c macrosIndex)) ||","lastModifiedDate":"2024-03-21"},{"lineNumber":246,"author":{"gitId":"owx0130"},"content":"                (macrosIndex \u003d\u003d -1 \u0026\u0026 !(caloriesIndex \u003c dateIndex))) {","lastModifiedDate":"2024-03-21"},{"lineNumber":247,"author":{"gitId":"owx0130"},"content":"            throw new InvalidInputException(getCaloriesIncorrectOrderMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":248,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":249,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":250,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":251,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":252,"author":{"gitId":"rexyyong"},"content":"     * Creates a new output entry with the given description, calories, and date.","lastModifiedDate":"2024-04-03"},{"lineNumber":253,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":254,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":255,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":256,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":257,"author":{"gitId":"rexyyong"},"content":"     * @return a new OutputEntry object","lastModifiedDate":"2024-04-03"},{"lineNumber":258,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":259,"author":{"gitId":"rexyyong"},"content":"    private static Entry makeNewOutputEntry(String description, int calories, LocalDate date) {","lastModifiedDate":"2024-03-29"},{"lineNumber":260,"author":{"gitId":"owx0130"},"content":"        Activity newActivity \u003d new Activity();","lastModifiedDate":"2024-03-20"},{"lineNumber":261,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":262,"author":{"gitId":"owx0130"},"content":"        return new OutputEntry(description, calories, date, newActivity);","lastModifiedDate":"2024-03-20"},{"lineNumber":263,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":264,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":265,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":266,"author":{"gitId":"rexyyong"},"content":"     * Creates a new input entry with the given description, calories, and date.","lastModifiedDate":"2024-04-03"},{"lineNumber":267,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":268,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":269,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":270,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":271,"author":{"gitId":"rexyyong"},"content":"     * @return a new InputEntry object","lastModifiedDate":"2024-04-03"},{"lineNumber":272,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":273,"author":{"gitId":"rexyyong"},"content":"    private static Entry makeNewInputEntry(String description, int calories, LocalDate date) {","lastModifiedDate":"2024-03-29"},{"lineNumber":274,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":275,"author":{"gitId":"owx0130"},"content":"        return new InputEntry(description, calories, date);","lastModifiedDate":"2024-03-20"},{"lineNumber":276,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":277,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":278,"author":{"gitId":"rexyyong"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":279,"author":{"gitId":"rexyyong"},"content":"     * Creates a new input entry with the given description, calories, date, and food macros.","lastModifiedDate":"2024-04-03"},{"lineNumber":280,"author":{"gitId":"rexyyong"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":281,"author":{"gitId":"rexyyong"},"content":"     * @param description the description of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":282,"author":{"gitId":"rexyyong"},"content":"     * @param calories the number of calories","lastModifiedDate":"2024-04-03"},{"lineNumber":283,"author":{"gitId":"rexyyong"},"content":"     * @param date the date of the entry","lastModifiedDate":"2024-04-03"},{"lineNumber":284,"author":{"gitId":"rexyyong"},"content":"     * @param foodMacros an array containing food macros (carbs, proteins, fats)","lastModifiedDate":"2024-04-03"},{"lineNumber":285,"author":{"gitId":"rexyyong"},"content":"     * @return a new InputEntry object with food macros","lastModifiedDate":"2024-04-03"},{"lineNumber":286,"author":{"gitId":"rexyyong"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":287,"author":{"gitId":"rexyyong"},"content":"    private static Entry makeNewInputEntry(String description, int calories, LocalDate date, int[] foodMacros) {","lastModifiedDate":"2024-03-29"},{"lineNumber":288,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":289,"author":{"gitId":"owx0130"},"content":"        Food newFood \u003d new Food(foodMacros[CARBS_IDX], foodMacros[PROTEINS_IDX], foodMacros[FATS_IDX]);","lastModifiedDate":"2024-03-20"},{"lineNumber":290,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":291,"author":{"gitId":"owx0130"},"content":"        return new InputEntry(description, calories, date, newFood);","lastModifiedDate":"2024-03-20"},{"lineNumber":292,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":293,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":135,"owx0130":158}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserHydration.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"//@@author shawnpong","lastModifiedDate":"2024-04-02"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationEntry;","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-29"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getIncorrectVolumeInputMessage;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationEmptyDescriptionMessage;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationIncorrectOrderMessage;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationMissingKeywordMessage;","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getHydrationNegativeIntegerVolumeMessage;","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"public class ParserHydration {","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"    private static final int VOLUME_IDX \u003d 1;","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"    private static final int DATE_IDX \u003d 2;","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"    private static final int HYDRATION_ADD_PADDING \u003d 13;","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"     * Parses a string input to create a Liquid object representing liquid intake.","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"     * This method expects the input string to follow a specific format, where the","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"     * beverage name and quantity are separated by the delimiters \u0027b/\u0027 and \u0027v/\u0027.","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"     * The method extracts these components and creates a Liquid object.","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"     * If any part of the input is missing or empty, an InvalidInputException is thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"     * @param input the input string to be parsed, containing beverage name and quantity","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"     * @return a Liquid object representing liquid intake","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if the input string is missing components or","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"     *                              contains empty fields","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"    public static Entry parseHydrationInput(String input) throws InvalidInputException {","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"        ","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"        int volumeIndex \u003d input.indexOf(\"v/\");","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"        int dateIndex \u003d input.indexOf(\"d/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"        checkKeywordsExist(dateIndex, volumeIndex);","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"        assert volumeIndex !\u003d -1 : \"The v/ keyword should exist!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"        assert dateIndex !\u003d -1 : \"The d/ keyword should exist!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"        checkKeywordsCorrectlyOrdered(dateIndex, volumeIndex);","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"        assert volumeIndex \u003c dateIndex : \"The v/ keyword must appear before date/ in the input!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"        String[] parts \u003d input.split(\"v/|d/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"        String description \u003d getDescriptionFromInput(input, volumeIndex);","lastModifiedDate":"2024-03-27"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"        String strVolume \u003d parts[VOLUME_IDX].trim();","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"        String strDate \u003d parts[DATE_IDX].trim();","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"        checkInputsAreNonEmpty(description, strVolume, strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"        assert description !\u003d \"\" : \"The description field should be a non-empty string!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"        assert strVolume !\u003d \"\" : \"The volume field should be a non-empty string!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"        assert strDate !\u003d \"\" : \"The date field should be a non-empty string!\";","lastModifiedDate":"2024-03-29"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"        int volume \u003d getIntegerVolumeFromInput(strVolume);","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"        checkVolumeIsPositiveInteger(volume);","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"        assert volume \u003e 0 : \"Volume value must be a positive integer!\";","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"        //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"        // Convert strDate from type String to date of type LocalDate","lastModifiedDate":"2024-03-29"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2024-03-29"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-29"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"            date \u003d getLocalDateFromInput(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"            throw new InvalidInputException(\"Invalid date format\");","lastModifiedDate":"2024-03-29"},{"lineNumber":68,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-29"},{"lineNumber":69,"author":{"gitId":"rexyyong"},"content":"        //@@author","lastModifiedDate":"2024-03-29"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        return makeNewInputEntry(description, volume, date);","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"     * Creates a new HydrationEntry object with the specified description, volume, and date.","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"     * @param description the description of the hydration entry","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"     * @param volume the volume of liquid intake","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"     * @param date the date of the hydration entry","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"     * @return a new HydrationEntry object with the specified attributes","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"rexyyong"},"content":"    private static HydrationEntry makeNewInputEntry(String description, int volume, LocalDate date) {","lastModifiedDate":"2024-03-29"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"        return new HydrationEntry(description, volume, date);","lastModifiedDate":"2024-03-28"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"     * Parses a string representation of a date and returns a LocalDate object.","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"     * @param strDate the string representation of the date","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"     * @return a LocalDate object representing the parsed date","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"     * @throws DateTimeParseException if the input string cannot be parsed into a valid date","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"rexyyong"},"content":"    //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":94,"author":{"gitId":"rexyyong"},"content":"    public static LocalDate getLocalDateFromInput(String strDate) throws DateTimeParseException {","lastModifiedDate":"2024-03-29"},{"lineNumber":95,"author":{"gitId":"rexyyong"},"content":"        LocalDate date \u003d LocalDate.parse(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":96,"author":{"gitId":"rexyyong"},"content":"        return date;","lastModifiedDate":"2024-03-29"},{"lineNumber":97,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":98,"author":{"gitId":"rexyyong"},"content":"    //@@author","lastModifiedDate":"2024-03-29"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"     * Parses the volume from a string and returns the integer value.","lastModifiedDate":"2024-04-02"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"     * @param strVolume the string representation of the volume","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"     * @return the integer value of the volume","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"    private static int getIntegerVolumeFromInput(String strVolume) {","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"        int volume \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"rexyyong"},"content":"            volume \u003d Integer.parseInt(strVolume);","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"rexyyong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"            System.out.println(getIncorrectVolumeInputMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"        return volume;","lastModifiedDate":"2024-03-27"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":114,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"     * Checks if the given volume is a positive integer.","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"     * @param volume the volume value to be checked","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if the volume is not a positive integer","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"    private static void checkVolumeIsPositiveInteger(int volume) throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"rexyyong"},"content":"        if (volume \u003c\u003d 0) {","lastModifiedDate":"2024-03-21"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationNegativeIntegerVolumeMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":125,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":126,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"     * Checks if the description, volume, and date fields are non-empty.","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"     * @param description the description of the hydration entry","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"     * @param strVolume the string representation of the volume","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"     * @param date the string representation of the date","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if any of the fields are empty","lastModifiedDate":"2024-04-02"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"    private static void checkInputsAreNonEmpty(String description, String strVolume, String date)","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"            throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"        if (description.isEmpty() || strVolume.isEmpty() || date.isEmpty()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationEmptyDescriptionMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"     * Extracts the description from the input string.","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"     * @param inputString the input string containing description, volume, and date","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"     * @param volumeIndex the index of the \u0027v/\u0027 delimiter","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"     * @return the description extracted from the input string","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"    private static String getDescriptionFromInput(String inputString, int volumeIndex) {","lastModifiedDate":"2024-03-27"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"        String description;","lastModifiedDate":"2024-03-27"},{"lineNumber":151,"author":{"gitId":"owx0130"},"content":"        description \u003d inputString.substring(HYDRATION_ADD_PADDING, volumeIndex).trim();","lastModifiedDate":"2024-03-28"},{"lineNumber":152,"author":{"gitId":"shawnpong"},"content":"        return description;","lastModifiedDate":"2024-03-27"},{"lineNumber":153,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":154,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":155,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":156,"author":{"gitId":"shawnpong"},"content":"     * Checks if the \u0027v/\u0027 and \u0027d/\u0027 keywords are in the correct order in the input string.","lastModifiedDate":"2024-04-02"},{"lineNumber":157,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":158,"author":{"gitId":"shawnpong"},"content":"     * @param dateIndex the index of the \u0027d/\u0027 keyword","lastModifiedDate":"2024-04-02"},{"lineNumber":159,"author":{"gitId":"shawnpong"},"content":"     * @param volumeIndex the index of the \u0027v/\u0027 keyword","lastModifiedDate":"2024-04-02"},{"lineNumber":160,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if the keywords are in the incorrect order","lastModifiedDate":"2024-04-02"},{"lineNumber":161,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":162,"author":{"gitId":"shawnpong"},"content":"    private static void checkKeywordsCorrectlyOrdered(int dateIndex, int volumeIndex) throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":163,"author":{"gitId":"shawnpong"},"content":"        if (volumeIndex \u003e\u003d dateIndex) {","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationIncorrectOrderMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":165,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":166,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":167,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":168,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":169,"author":{"gitId":"shawnpong"},"content":"     * Checks if the \u0027v/\u0027 and \u0027d/\u0027 keywords exist in the input string.","lastModifiedDate":"2024-04-02"},{"lineNumber":170,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":171,"author":{"gitId":"shawnpong"},"content":"     * @param dateIndex the index of the \u0027d/\u0027 keyword","lastModifiedDate":"2024-04-02"},{"lineNumber":172,"author":{"gitId":"shawnpong"},"content":"     * @param volumeIndex the index of the \u0027v/\u0027 keyword","lastModifiedDate":"2024-04-02"},{"lineNumber":173,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException if any of the keywords are missing","lastModifiedDate":"2024-04-02"},{"lineNumber":174,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":175,"author":{"gitId":"shawnpong"},"content":"    private static void checkKeywordsExist(int dateIndex, int volumeIndex) throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":176,"author":{"gitId":"shawnpong"},"content":"        if (dateIndex \u003d\u003d -1 || volumeIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-27"},{"lineNumber":177,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(getHydrationMissingKeywordMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":178,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":179,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":180,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":181,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"rexyyong":25,"owx0130":7,"shawnpong":149}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserSleep.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getIncorrectSleepInputMessage;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepEntry;","lastModifiedDate":"2024-03-27"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-29"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"//@@author a-wild-chocloate","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ParserSleep {","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static SleepEntry parseSleepInput(String input) throws InvalidInputException {","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            String strDate \u003d \"N/A\"; // Default if no strDate is provided","lastModifiedDate":"2024-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            LocalDate date \u003d null;","lastModifiedDate":"2024-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            double duration \u003d 0;","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            String[] parts \u003d input.split(\" \");","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            for (String part : parts) {","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                if (part.matches(\"^-?\\\\d+(\\\\.\\\\d+)?$\")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                    duration \u003d Double.parseDouble(part);","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                    if (duration \u003c 0) {","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                        throw new InvalidInputException(getIncorrectSleepInputMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                    }","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                } else if (part.startsWith(\"d/\")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                    strDate \u003d part.substring(2);","lastModifiedDate":"2024-03-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            if (duration \u003d\u003d 0) {","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                throw new InvalidInputException(\"Please ensure that you have keyed in the correct format: \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                        \"sleep add \u003cduration\u003e d/\u003cstrDate\u003e\");","lastModifiedDate":"2024-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2024-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            //@author","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"            //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"            // Parse str date to date of type LocalDate","lastModifiedDate":"2024-03-29"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"            try {","lastModifiedDate":"2024-03-29"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"                date \u003d getLocalDateFromInput(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-29"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"                throw new InvalidInputException(\"Invalid date format\");","lastModifiedDate":"2024-03-29"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"            }","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"            //@@author","lastModifiedDate":"2024-03-29"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"            return new SleepEntry(duration, date);","lastModifiedDate":"2024-03-27"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"            throw new InvalidInputException(\"Please ensure that you have keyed in the correct format: \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"                    \"sleep add \u003cduration\u003e d/\u003cdate\u003e\");","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-29"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"    //@@author rexyyong","lastModifiedDate":"2024-03-29"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"    public static LocalDate getLocalDateFromInput(String strDate) throws DateTimeParseException {","lastModifiedDate":"2024-03-29"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"        LocalDate date \u003d LocalDate.parse(strDate);","lastModifiedDate":"2024-03-29"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"        return date;","lastModifiedDate":"2024-03-29"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-29"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"    //@@author","lastModifiedDate":"2024-03-29"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"rexyyong":18,"a-wild-chocolate":12,"owx0130":3,"-":24}},{"path":"src/main/java/seedu/lifetrack/system/parser/ParserUser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.system.parser;","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getAgeOutOfRangeMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getHeightOutOfRangeMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getInvalidAgeNumberMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getInvalidExerciseLevelsNumberMessage;","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getInvalidGoalNumberMessage;","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getInvalidHeightNumberMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getInvalidNumberOfSetUpInputs;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getInvalidWeightNumberMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getUnderAgeMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getWeightOutOfRangeMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getEmptyUserSetupInputMessage;","lastModifiedDate":"2024-03-31"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getOutOfExerciseLevelsRangeMessage;","lastModifiedDate":"2024-03-31"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getOutOfGoalRangeMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printUserSetUpComplete;","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"/**","lastModifiedDate":"2024-03-31"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":" * Utility Class to parse the commands made with regard to the User class.","lastModifiedDate":"2024-03-31"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":" */","lastModifiedDate":"2024-03-31"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"public class ParserUser {","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"    private static final int LENGTH_OF_SETUP_COMMAND \u003d \"user setup\".length();","lastModifiedDate":"2024-03-31"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"     * Parses the input from user to sieve out name, height, weight, age, gender, exercise levels and goals of the user","lastModifiedDate":"2024-03-31"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"     * and sets them accordingly in the User class.","lastModifiedDate":"2024-03-31"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"     * @param input input String from the user","lastModifiedDate":"2024-03-31"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"     * @param user  current user of the app","lastModifiedDate":"2024-03-31"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if user does not input all the information in the correct order and format","lastModifiedDate":"2024-03-31"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"     * @throws NumberFormatException if user does not input a number for exercise levels and goals","lastModifiedDate":"2024-03-31"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"    public static void parseSetUp(String input, User user) throws InvalidInputException, NumberFormatException {","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"        checkEmptyInput(input);","lastModifiedDate":"2024-03-31"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"        int heightIndex \u003d input.indexOf(\"h/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"        int weightIndex \u003d input.indexOf(\"w/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"        int ageIndex \u003d input.indexOf(\"a/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"        int sexIndex \u003d input.indexOf(\"s/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"        int exerciseLevelsIndex \u003d input.indexOf(\"e/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"        int goalIndex \u003d input.indexOf(\"g/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"        if (heightIndex \u003d\u003d -1 || weightIndex \u003d\u003d -1 || ageIndex \u003d\u003d -1 || sexIndex \u003d\u003d -1","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"                || exerciseLevelsIndex \u003d\u003d -1 || goalIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidNumberOfSetUpInputs());","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"        checkSetUpInputsCorrectOrder(heightIndex, weightIndex, ageIndex, sexIndex, exerciseLevelsIndex, goalIndex);","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"        String[] parts \u003d input.split(\"h/|w/|a/|s/|e/|g/\");","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"        if (parts.length !\u003d 7) {","lastModifiedDate":"2024-03-31"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidNumberOfSetUpInputs());","lastModifiedDate":"2024-03-31"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"        String name \u003d parts[0].substring(LENGTH_OF_SETUP_COMMAND).trim();","lastModifiedDate":"2024-03-31"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"        int height \u003d parseHeightIndex(parts[1].trim());","lastModifiedDate":"2024-04-04"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"        int weight \u003d parseWeightIndex(parts[2].trim());","lastModifiedDate":"2024-04-04"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"        int age \u003d parseAgeIndex(parts[3].trim());","lastModifiedDate":"2024-04-04"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"        String sex \u003d parts[4].trim().toLowerCase();","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"        int exerciseLevels \u003d parseExerciseLevels(parts[5].trim());","lastModifiedDate":"2024-04-04"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"        int goal \u003d parseGoalIndex(parts[6].trim());","lastModifiedDate":"2024-04-04"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"        user.setName(name);","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"        user.setHeight(height);","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"        user.setWeight(weight);","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"        user.setAge(age);","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"        user.setSex(sex);","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"        user.setExerciseLevels(exerciseLevels);","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"        user.setGoal(goal);","lastModifiedDate":"2024-03-28"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"        user.getHealthInfo();","lastModifiedDate":"2024-04-04"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"        int caloriesRequired \u003d user.getCaloriesRequired();","lastModifiedDate":"2024-04-04"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"        printUserSetUpComplete(user.getName(), caloriesRequired);","lastModifiedDate":"2024-04-04"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s height input for an Integer","lastModifiedDate":"2024-04-04"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s height input","lastModifiedDate":"2024-04-04"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"     * @return user\u0027s height as an integer","lastModifiedDate":"2024-04-04"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the height input is not an integer or if the user\u0027s height is not between","lastModifiedDate":"2024-04-04"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"     *     90 and 225 cm","lastModifiedDate":"2024-04-04"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"    private static int parseHeightIndex(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":84,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":85,"author":{"gitId":"paturikarthik"},"content":"            int height \u003d Integer.parseInt(input);","lastModifiedDate":"2024-04-04"},{"lineNumber":86,"author":{"gitId":"paturikarthik"},"content":"            if (height \u003c 90 || height \u003e 225){","lastModifiedDate":"2024-04-04"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getHeightOutOfRangeMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":88,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":89,"author":{"gitId":"paturikarthik"},"content":"            return height;","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-04"},{"lineNumber":91,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidHeightNumberMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":92,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":93,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":94,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":96,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s weight input for an Integer","lastModifiedDate":"2024-04-04"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":98,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s weight input","lastModifiedDate":"2024-04-04"},{"lineNumber":99,"author":{"gitId":"paturikarthik"},"content":"     * @return user\u0027s weight as an integer","lastModifiedDate":"2024-04-04"},{"lineNumber":100,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the weight input is not an integer or if the user\u0027s weight is not between","lastModifiedDate":"2024-04-04"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"     *     30 and 200 kg","lastModifiedDate":"2024-04-04"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":103,"author":{"gitId":"paturikarthik"},"content":"    private static int parseWeightIndex(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":104,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-04-04"},{"lineNumber":105,"author":{"gitId":"paturikarthik"},"content":"            int weight \u003d Integer.parseInt(input);","lastModifiedDate":"2024-04-04"},{"lineNumber":106,"author":{"gitId":"paturikarthik"},"content":"            if (weight\u003c30 || weight \u003e 200){","lastModifiedDate":"2024-04-04"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getWeightOutOfRangeMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"            return weight;","lastModifiedDate":"2024-04-04"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2024-04-04"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidWeightNumberMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":113,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":114,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-04-04"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s age input for an Integer","lastModifiedDate":"2024-04-04"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s age input","lastModifiedDate":"2024-04-04"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"     * @return user\u0027s age as an integer","lastModifiedDate":"2024-04-04"},{"lineNumber":120,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the age input is not an integer or if the user\u0027s age is not between","lastModifiedDate":"2024-04-04"},{"lineNumber":121,"author":{"gitId":"paturikarthik"},"content":"     *     13 and 110 years old","lastModifiedDate":"2024-04-04"},{"lineNumber":122,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-04-04"},{"lineNumber":123,"author":{"gitId":"paturikarthik"},"content":"    private static int parseAgeIndex(String input) throws InvalidInputException{","lastModifiedDate":"2024-04-04"},{"lineNumber":124,"author":{"gitId":"paturikarthik"},"content":"        try{","lastModifiedDate":"2024-04-04"},{"lineNumber":125,"author":{"gitId":"paturikarthik"},"content":"            int age \u003d Integer.parseInt(input);","lastModifiedDate":"2024-04-04"},{"lineNumber":126,"author":{"gitId":"paturikarthik"},"content":"            if(age \u003c13 \u0026\u0026 age \u003e 0){","lastModifiedDate":"2024-04-04"},{"lineNumber":127,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getUnderAgeMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":128,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":129,"author":{"gitId":"paturikarthik"},"content":"            if (age \u003c0 || age \u003e 110) {","lastModifiedDate":"2024-04-04"},{"lineNumber":130,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getAgeOutOfRangeMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":131,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-04-04"},{"lineNumber":132,"author":{"gitId":"paturikarthik"},"content":"            return age;","lastModifiedDate":"2024-04-04"},{"lineNumber":133,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2024-04-04"},{"lineNumber":134,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidAgeNumberMessage());","lastModifiedDate":"2024-04-04"},{"lineNumber":135,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":136,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":137,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":138,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":139,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s goal input for an Integer and assigns the String equivalent of it","lastModifiedDate":"2024-03-31"},{"lineNumber":140,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-03-31"},{"lineNumber":141,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s goal input","lastModifiedDate":"2024-03-31"},{"lineNumber":142,"author":{"gitId":"paturikarthik"},"content":"     * @return String equivalent of User\u0027s goals","lastModifiedDate":"2024-03-31"},{"lineNumber":143,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the goal input is not an integer between 1 and 7","lastModifiedDate":"2024-03-31"},{"lineNumber":144,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":145,"author":{"gitId":"paturikarthik"},"content":"    private static int parseGoalIndex(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":146,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-03-28"},{"lineNumber":147,"author":{"gitId":"paturikarthik"},"content":"            int goalNumber \u003d Integer.parseInt(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":148,"author":{"gitId":"paturikarthik"},"content":"            if (goalNumber \u003e 5 || goalNumber \u003c 1) {","lastModifiedDate":"2024-04-04"},{"lineNumber":149,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":150,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getOutOfGoalRangeMessage());","lastModifiedDate":"2024-03-31"},{"lineNumber":151,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-03-28"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"            return goalNumber;","lastModifiedDate":"2024-04-04"},{"lineNumber":153,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-28"},{"lineNumber":154,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidGoalNumberMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":155,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":156,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":157,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":158,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":159,"author":{"gitId":"paturikarthik"},"content":"     * Parses the user\u0027s exercise levels input for an Integer and assigns the String equivalent of it","lastModifiedDate":"2024-03-31"},{"lineNumber":160,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":161,"author":{"gitId":"paturikarthik"},"content":"     * @param input user\u0027s exercise levels input","lastModifiedDate":"2024-03-31"},{"lineNumber":162,"author":{"gitId":"paturikarthik"},"content":"     * @return String equivalent of User\u0027s exercise levels","lastModifiedDate":"2024-03-31"},{"lineNumber":163,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the goal input is not an integer between 1 and 5","lastModifiedDate":"2024-03-31"},{"lineNumber":164,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":165,"author":{"gitId":"paturikarthik"},"content":"    private static int parseExerciseLevels(String input) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":166,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-03-28"},{"lineNumber":167,"author":{"gitId":"paturikarthik"},"content":"            int levelInNumber \u003d Integer.parseInt(input);","lastModifiedDate":"2024-03-28"},{"lineNumber":168,"author":{"gitId":"paturikarthik"},"content":"            if (levelInNumber \u003c 1 || levelInNumber \u003e 5) {","lastModifiedDate":"2024-04-04"},{"lineNumber":169,"author":{"gitId":"paturikarthik"},"content":"                throw new InvalidInputException(getOutOfExerciseLevelsRangeMessage());","lastModifiedDate":"2024-03-31"},{"lineNumber":170,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-03-28"},{"lineNumber":171,"author":{"gitId":"paturikarthik"},"content":"            return levelInNumber;","lastModifiedDate":"2024-04-04"},{"lineNumber":172,"author":{"gitId":"paturikarthik"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-28"},{"lineNumber":173,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidExerciseLevelsNumberMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":174,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":175,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":176,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":177,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":178,"author":{"gitId":"paturikarthik"},"content":"     * Ensures that the input given by the user is in the correct order","lastModifiedDate":"2024-03-31"},{"lineNumber":179,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":180,"author":{"gitId":"paturikarthik"},"content":"     * @param heightIndex         Index of the input where user\u0027s height is specified","lastModifiedDate":"2024-03-31"},{"lineNumber":181,"author":{"gitId":"paturikarthik"},"content":"     * @param weightIndex         Index of the input where user\u0027s weight is specified","lastModifiedDate":"2024-03-31"},{"lineNumber":182,"author":{"gitId":"paturikarthik"},"content":"     * @param ageIndex            Index of the input where user\u0027s age is specified","lastModifiedDate":"2024-03-31"},{"lineNumber":183,"author":{"gitId":"paturikarthik"},"content":"     * @param sexIndex            Index of the input where user\u0027s gender is specified","lastModifiedDate":"2024-03-31"},{"lineNumber":184,"author":{"gitId":"paturikarthik"},"content":"     * @param exerciseLevelsIndex Index of the input where user\u0027s exercise levels is specified in Integer form","lastModifiedDate":"2024-03-31"},{"lineNumber":185,"author":{"gitId":"paturikarthik"},"content":"     * @param goalIndex           Index of the input where user\u0027s goal is specified in Integer form","lastModifiedDate":"2024-03-31"},{"lineNumber":186,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the order of the inputs is not correct. The input should be in this order:","lastModifiedDate":"2024-03-31"},{"lineNumber":187,"author":{"gitId":"paturikarthik"},"content":"     *                               height, weight, age, gender, exercise levels and goal.","lastModifiedDate":"2024-03-31"},{"lineNumber":188,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":189,"author":{"gitId":"paturikarthik"},"content":"    private static void checkSetUpInputsCorrectOrder(int heightIndex, int weightIndex, int ageIndex, int sexIndex,","lastModifiedDate":"2024-03-28"},{"lineNumber":190,"author":{"gitId":"paturikarthik"},"content":"                                                     int exerciseLevelsIndex,","lastModifiedDate":"2024-04-04"},{"lineNumber":191,"author":{"gitId":"paturikarthik"},"content":"                                                     int goalIndex) throws InvalidInputException {","lastModifiedDate":"2024-04-04"},{"lineNumber":192,"author":{"gitId":"paturikarthik"},"content":"        if (!(heightIndex \u003c weightIndex \u0026\u0026 weightIndex \u003c ageIndex \u0026\u0026 sexIndex \u003c exerciseLevelsIndex","lastModifiedDate":"2024-03-28"},{"lineNumber":193,"author":{"gitId":"paturikarthik"},"content":"                \u0026\u0026 exerciseLevelsIndex \u003c goalIndex)) {","lastModifiedDate":"2024-03-28"},{"lineNumber":194,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getInvalidNumberOfSetUpInputs());","lastModifiedDate":"2024-03-31"},{"lineNumber":195,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-31"},{"lineNumber":196,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-31"},{"lineNumber":197,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-31"},{"lineNumber":198,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-31"},{"lineNumber":199,"author":{"gitId":"paturikarthik"},"content":"     * Checks if User Setup command is empty","lastModifiedDate":"2024-03-31"},{"lineNumber":200,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-04-04"},{"lineNumber":201,"author":{"gitId":"paturikarthik"},"content":"     * @param input input from user","lastModifiedDate":"2024-03-31"},{"lineNumber":202,"author":{"gitId":"paturikarthik"},"content":"     * @throws InvalidInputException if the command is empty","lastModifiedDate":"2024-03-31"},{"lineNumber":203,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-31"},{"lineNumber":204,"author":{"gitId":"paturikarthik"},"content":"    private static void checkEmptyInput(String input) throws InvalidInputException {","lastModifiedDate":"2024-03-31"},{"lineNumber":205,"author":{"gitId":"paturikarthik"},"content":"        if (input.substring(LENGTH_OF_SETUP_COMMAND).trim().isEmpty()) {","lastModifiedDate":"2024-03-31"},{"lineNumber":206,"author":{"gitId":"paturikarthik"},"content":"            throw new InvalidInputException(getEmptyUserSetupInputMessage());","lastModifiedDate":"2024-03-31"},{"lineNumber":207,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":208,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":209,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"paturikarthik":209}},{"path":"src/main/java/seedu/lifetrack/system/storage/FileHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack.system.storage;","lastModifiedDate":"2024-03-27"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import java.io.File;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-03-27"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-03-27"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-27"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-27"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.Food;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-03-27"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationEntry;","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepEntry;","lastModifiedDate":"2024-03-27"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.ErrorMessages;","lastModifiedDate":"2024-03-27"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"public class FileHandler {","lastModifiedDate":"2024-03-27"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    //general list constants","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    private static final int DATE_INDEX \u003d 0;","lastModifiedDate":"2024-03-27"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    private static final int DESCRIPTION_INDEX \u003d 1;","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    //calorie list constants","lastModifiedDate":"2024-03-27"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    private static final int ENTRY_TYPE_INDEX \u003d 2;","lastModifiedDate":"2024-03-27"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    private static final int CALORIES_INDEX \u003d 3;","lastModifiedDate":"2024-03-27"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    private static final int CARBOHYDRATES_INDEX \u003d 4;","lastModifiedDate":"2024-03-27"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"    private static final int PROTEINS_INDEX \u003d 5;","lastModifiedDate":"2024-03-27"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    private static final int FATS_INDEX \u003d 6;","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    //liquids list constants","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    private static final int VOLUME_INDEX \u003d 2;","lastModifiedDate":"2024-03-27"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"    //sleep list constants","lastModifiedDate":"2024-03-27"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"    private static final int DURATION_INDEX \u003d 2;","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"    //user data constants","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"    private static final int NAME_INDEX \u003d 0;","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"    private static final int HEIGHT_INDEX \u003d 1;","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"    private static final int WEIGHT_INDEX \u003d 2;","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"    private static final int AGE_INDEX \u003d 3;","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"    private static final int SEX_INDEX \u003d 4;","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"    private static final int EXERCISE_INDEX \u003d 5;","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"    private static final int GOAL_INDEX \u003d 6;","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"    private static final int REQ_CAL_INDEX \u003d 7;","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"    private String filePath;","lastModifiedDate":"2024-03-27"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"    public FileHandler(String filePath) {","lastModifiedDate":"2024-03-27"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-03-27"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"    private void writeToFile(String textToAdd) throws IOException {","lastModifiedDate":"2024-03-27"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2024-03-27"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"        fw.close();","lastModifiedDate":"2024-03-27"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"    public void writeUserData(User user) {","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"            writeToFile(user.toFileFriendlyString());","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"            System.out.println(ErrorMessages.getIOExceptionMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"    public void writeEntries(ArrayList\u003cEntry\u003e entries) {","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"            String newData \u003d \"\";","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"            for (Entry entry : entries) {","lastModifiedDate":"2024-03-27"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"                newData +\u003d entry.toFileFriendlyString() + System.lineSeparator();","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"            writeToFile(newData);","lastModifiedDate":"2024-03-27"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"            System.out.println(ErrorMessages.getIOExceptionMessage());","lastModifiedDate":"2024-03-27"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"    public ArrayList\u003cEntry\u003e getCalorieEntriesFromFile() throws FileNotFoundException {","lastModifiedDate":"2024-03-27"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-03-27"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"        String line \u003d \"\";","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"            line \u003d s.nextLine();","lastModifiedDate":"2024-03-27"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"            String[] words \u003d line.split(\";\");","lastModifiedDate":"2024-03-27"},{"lineNumber":89,"author":{"gitId":"rexyyong"},"content":"            LocalDate date \u003d LocalDate.parse(words[DATE_INDEX]);","lastModifiedDate":"2024-03-29"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"            String description \u003d words[DESCRIPTION_INDEX];","lastModifiedDate":"2024-03-27"},{"lineNumber":91,"author":{"gitId":"owx0130"},"content":"            int calories \u003d Integer.parseInt(words[CALORIES_INDEX]);","lastModifiedDate":"2024-03-27"},{"lineNumber":92,"author":{"gitId":"owx0130"},"content":"            String entryType \u003d words[ENTRY_TYPE_INDEX];","lastModifiedDate":"2024-03-27"},{"lineNumber":93,"author":{"gitId":"owx0130"},"content":"            if (entryType.equals(\"C_IN\") \u0026\u0026 words.length \u003d\u003d 5) {","lastModifiedDate":"2024-03-27"},{"lineNumber":94,"author":{"gitId":"owx0130"},"content":"                int carbohydrates \u003d Integer.parseInt(words[CARBOHYDRATES_INDEX]);","lastModifiedDate":"2024-03-27"},{"lineNumber":95,"author":{"gitId":"owx0130"},"content":"                int proteins \u003d Integer.parseInt(words[PROTEINS_INDEX]);","lastModifiedDate":"2024-03-27"},{"lineNumber":96,"author":{"gitId":"owx0130"},"content":"                int fats \u003d Integer.parseInt(words[FATS_INDEX]);","lastModifiedDate":"2024-03-27"},{"lineNumber":97,"author":{"gitId":"owx0130"},"content":"                Food food \u003d new Food(carbohydrates, proteins, fats);","lastModifiedDate":"2024-03-27"},{"lineNumber":98,"author":{"gitId":"owx0130"},"content":"                entries.add(new InputEntry(description, calories, date, food));","lastModifiedDate":"2024-03-27"},{"lineNumber":99,"author":{"gitId":"owx0130"},"content":"            } else if (entryType.equals(\"C_IN\")) {","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"owx0130"},"content":"                entries.add(new InputEntry(description, calories, date));","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"owx0130"},"content":"            } else {","lastModifiedDate":"2024-03-27"},{"lineNumber":102,"author":{"gitId":"owx0130"},"content":"                entries.add(new OutputEntry(description, calories, date));","lastModifiedDate":"2024-03-27"},{"lineNumber":103,"author":{"gitId":"owx0130"},"content":"            }","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":105,"author":{"gitId":"owx0130"},"content":"        return entries;","lastModifiedDate":"2024-03-27"},{"lineNumber":106,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":107,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":108,"author":{"gitId":"owx0130"},"content":"    public ArrayList\u003cEntry\u003e getHydrationEntriesFromFile() throws FileNotFoundException {","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"owx0130"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":110,"author":{"gitId":"owx0130"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-03-27"},{"lineNumber":111,"author":{"gitId":"owx0130"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"owx0130"},"content":"        String line \u003d \"\";","lastModifiedDate":"2024-03-27"},{"lineNumber":113,"author":{"gitId":"owx0130"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":114,"author":{"gitId":"owx0130"},"content":"            line \u003d s.nextLine();","lastModifiedDate":"2024-03-27"},{"lineNumber":115,"author":{"gitId":"owx0130"},"content":"            String[] words \u003d line.split(\";\");","lastModifiedDate":"2024-03-27"},{"lineNumber":116,"author":{"gitId":"rexyyong"},"content":"            LocalDate date \u003d LocalDate.parse(words[DATE_INDEX]);","lastModifiedDate":"2024-03-29"},{"lineNumber":117,"author":{"gitId":"owx0130"},"content":"            String description \u003d words[DESCRIPTION_INDEX];","lastModifiedDate":"2024-03-27"},{"lineNumber":118,"author":{"gitId":"owx0130"},"content":"            int volume \u003d Integer.parseInt(words[VOLUME_INDEX]);","lastModifiedDate":"2024-03-27"},{"lineNumber":119,"author":{"gitId":"owx0130"},"content":"            entries.add(new HydrationEntry(description, volume, date));","lastModifiedDate":"2024-03-28"},{"lineNumber":120,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":121,"author":{"gitId":"owx0130"},"content":"        return entries;","lastModifiedDate":"2024-03-27"},{"lineNumber":122,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"owx0130"},"content":"    public ArrayList\u003cEntry\u003e getSleepEntriesFromFile() throws FileNotFoundException {","lastModifiedDate":"2024-03-27"},{"lineNumber":125,"author":{"gitId":"owx0130"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-03-27"},{"lineNumber":126,"author":{"gitId":"owx0130"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-03-27"},{"lineNumber":127,"author":{"gitId":"owx0130"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-27"},{"lineNumber":128,"author":{"gitId":"owx0130"},"content":"        String line \u003d \"\";","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"owx0130"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"owx0130"},"content":"            line \u003d s.nextLine();","lastModifiedDate":"2024-03-27"},{"lineNumber":131,"author":{"gitId":"owx0130"},"content":"            String[] words \u003d line.split(\";\");","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"rexyyong"},"content":"            LocalDate date \u003d LocalDate.parse(words[DATE_INDEX]);","lastModifiedDate":"2024-03-29"},{"lineNumber":133,"author":{"gitId":"owx0130"},"content":"            double duration \u003d Double.parseDouble(words[DURATION_INDEX]);","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"owx0130"},"content":"            entries.add(new SleepEntry(duration, date));","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"        return entries;","lastModifiedDate":"2024-03-27"},{"lineNumber":137,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-28"},{"lineNumber":139,"author":{"gitId":"owx0130"},"content":"    public ArrayList\u003cString\u003e getUserDataFromFile() throws FileNotFoundException {","lastModifiedDate":"2024-03-28"},{"lineNumber":140,"author":{"gitId":"owx0130"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-03-28"},{"lineNumber":141,"author":{"gitId":"owx0130"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-03-28"},{"lineNumber":142,"author":{"gitId":"owx0130"},"content":"        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-28"},{"lineNumber":143,"author":{"gitId":"owx0130"},"content":"        String line \u003d s.nextLine();","lastModifiedDate":"2024-03-28"},{"lineNumber":144,"author":{"gitId":"owx0130"},"content":"        String[] words \u003d line.split(\";\");","lastModifiedDate":"2024-03-28"},{"lineNumber":145,"author":{"gitId":"owx0130"},"content":"        data.add(words[NAME_INDEX]);","lastModifiedDate":"2024-03-28"},{"lineNumber":146,"author":{"gitId":"owx0130"},"content":"        data.add(words[HEIGHT_INDEX]);","lastModifiedDate":"2024-03-28"},{"lineNumber":147,"author":{"gitId":"owx0130"},"content":"        data.add(words[WEIGHT_INDEX]);","lastModifiedDate":"2024-03-28"},{"lineNumber":148,"author":{"gitId":"owx0130"},"content":"        data.add(words[AGE_INDEX]);","lastModifiedDate":"2024-03-28"},{"lineNumber":149,"author":{"gitId":"owx0130"},"content":"        data.add(words[SEX_INDEX]);","lastModifiedDate":"2024-03-28"},{"lineNumber":150,"author":{"gitId":"owx0130"},"content":"        data.add(words[EXERCISE_INDEX]);","lastModifiedDate":"2024-03-28"},{"lineNumber":151,"author":{"gitId":"owx0130"},"content":"        data.add(words[GOAL_INDEX]);","lastModifiedDate":"2024-03-28"},{"lineNumber":152,"author":{"gitId":"owx0130"},"content":"        data.add(words[REQ_CAL_INDEX]);","lastModifiedDate":"2024-03-28"},{"lineNumber":153,"author":{"gitId":"owx0130"},"content":"        return data;","lastModifiedDate":"2024-03-28"},{"lineNumber":154,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":155,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-27"}],"authorContributionMap":{"rexyyong":4,"owx0130":151}},{"path":"src/main/java/seedu/lifetrack/ui/CalorieListUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-27"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"public class CalorieListUi {","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"    public static void successfulDeletedMessage(Entry toDelete) {","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t The following calorie record has been successfully deleted!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t \" + toDelete.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"    public static void emptyListMessage() {","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Your caloric list is empty. Add new entries to populate your list :)\");","lastModifiedDate":"2024-03-21"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String deleteLogIndexMessage() {","lastModifiedDate":"2024-03-25"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"        return \"\\t Sorry, this index is invalid. Please enter a positive integer within the size of the list.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String deleteLogNumberMessage() {","lastModifiedDate":"2024-03-25"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please enter a valid index!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-25"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-25"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"    public static void calorieListHeader() {","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Your Caloric List:\");","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"    public static void printNewCalorieEntry(Entry newEntry) {","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t The following entry has been added to your caloric list!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t \" + newEntry.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"a-wild-chocolate":5,"owx0130":4,"paturikarthik":23}},{"path":"src/main/java/seedu/lifetrack/ui/HydrationListUI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-24"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"public class HydrationListUI {","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    public static void successfulDeletedMessage(Entry toDelete) {","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t The following hydration record has been successfully deleted!\");","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t \" + toDelete.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"    public static void emptyListMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t Your hydration list is empty. Add new entries to populate your list :)\");","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    public static String deleteLogIndexMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"        return \"\\t Sorry, this index is invalid. Please enter a positive integer within the size of the list.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    public static String deleteLogNumberMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please enter a valid index!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    public static void hydrationListHeader() {","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t Your Hydration List:\");","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    public static void printNewHydrationEntry(Entry newEntry) {","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t The following entry has been added to your hydration list!\");","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t \" + newEntry.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-24"}],"authorContributionMap":{"owx0130":17,"paturikarthik":15}},{"path":"src/main/java/seedu/lifetrack/ui/SleepListUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.Entry;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"public class SleepListUi {","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"    public static void successfulDeletedMessage(Entry toDelete) {","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t The following sleep record has been successfully deleted!\");","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t \" + toDelete.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"    public static void emptyListMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t Your sleep list is empty. Add new entries to populate your list :)\");","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"    public static String deleteLogIndexMessage() {","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"        return \"\\t Sorry, this index is invalid. Please enter a positive integer within the size of the list.\";","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    public static String deleteLogNumberMessage() {","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"        return \"\\t Please enter a valid index!\";","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"    public static void sleepListHeader() {","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t Your Sleep List:\");","lastModifiedDate":"2024-03-27"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    public static void printNewSleepEntry(Entry newEntry) {","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t The following entry has been added to your sleep list!\");","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t \" + newEntry.toString());","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"a-wild-chocolate":11,"owx0130":21}},{"path":"src/main/java/seedu/lifetrack/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-03-13"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-19"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationList;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepList;","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-13"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printNoUserYetMessage;","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"/**","lastModifiedDate":"2024-03-13"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":" * Reads user input from the console and processes it.","lastModifiedDate":"2024-03-13"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":" * This method continuously reads input from the console until the user","lastModifiedDate":"2024-03-13"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":" * inputs \"bye\". For each input line, it checks if it\u0027s empty and prompts","lastModifiedDate":"2024-03-13"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":" * the user to enter a non-empty input if it is. If the input line starts","lastModifiedDate":"2024-03-13"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":" * with \"calories in\", it attempts to parse the input as calorie intake","lastModifiedDate":"2024-03-13"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":" * information using the calorieIn method from the CalorieList class.","lastModifiedDate":"2024-03-13"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":" */","lastModifiedDate":"2024-03-13"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"public class Ui {","lastModifiedDate":"2024-03-13"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-13"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"    private static final String WHITESPACE \u003d \"         \";","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"    private static final String logo \u003d","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"            \"\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"                    \".____    .__  _____        ___________                     __\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"                    \"|    |   |__|/ ____\\\\____   \\\\__    ___/___________    ____ |  | __\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"                    \"|    |   |  \\\\   __\\\\/ __ \\\\    |    |  \\\\_  __ \\\\__  \\\\ _/ ___\\\\|  |/ /\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"                    \"|    |___|  ||  | \\\\  ___/    |    |   |  | \\\\// __ \\\\\\\\  \\\\___|    \u003c\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"                    \"|_______ \\\\__||__|  \\\\___  \u003e   |____|   |__|  (____  /\\\\___  \u003e__|_ \\\\\\n\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"                    \"        \\\\/             \\\\/                        \\\\/     \\\\/     \\\\/\\n\";","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"     * Reads in the input from the user","lastModifiedDate":"2024-03-24"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"     *","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"     * @param calorieList list containing all entries pertinent to calories","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"     * @param hydrationList list containing all entries pertinent to liquids","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"    public static void readUserInput(CalorieList calorieList, HydrationList hydrationList,","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"            User user, SleepList sleepList) {","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"        String line;","lastModifiedDate":"2024-03-13"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"        do {","lastModifiedDate":"2024-03-15"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"            line \u003d new Scanner(System.in).nextLine();","lastModifiedDate":"2024-03-15"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"            handleUserInput(line, calorieList, hydrationList, user, sleepList);","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"        } while (!line.equalsIgnoreCase(\"bye\"));","lastModifiedDate":"2024-03-15"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"    /**","lastModifiedDate":"2024-03-24"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"     * handles input from the user ","lastModifiedDate":"2024-03-24"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"     * @param line input from the user","lastModifiedDate":"2024-03-24"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"     * @param calorieList list containing all entries pertinent to calories","lastModifiedDate":"2024-03-24"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"     */","lastModifiedDate":"2024-03-24"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"    public static void handleCaloriesInput(String line, CalorieList calorieList) {","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"paturikarthik"},"content":"        assert !line.startsWith(\"bye\") : \"exit the app\";","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"paturikarthik"},"content":"        if (line.startsWith(\"calories in\") || line.startsWith(\"calories out\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":57,"author":{"gitId":"paturikarthik"},"content":"            calorieList.addEntry(line);","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"calories list\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"paturikarthik"},"content":"            calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.startsWith(\"calories delete\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"            calorieList.deleteEntry(line);","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"paturikarthik"},"content":"            handleUnknownInput();","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"    public static void handleHydrationInput(String line, HydrationList hydrationList) {","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"        assert !line.startsWith(\"bye\") : \"exit the app\";","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"        if (line.startsWith(\"hydration in\")) {","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"            hydrationList.addEntry(line);","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        } else if (line.startsWith(\"hydration list\")) {","lastModifiedDate":"2024-03-27"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"            hydrationList.printHydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"        } else if (line.startsWith(\"hydration delete\")) {","lastModifiedDate":"2024-03-27"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"            hydrationList.deleteEntry(line);","lastModifiedDate":"2024-03-28"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"            handleUnknownInput();","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"a-wild-chocolate"},"content":"    public static void handleSleepInput(String line, SleepList sleepList) {","lastModifiedDate":"2024-03-26"},{"lineNumber":80,"author":{"gitId":"a-wild-chocolate"},"content":"        assert !line.startsWith(\"bye\") : \"exit the app\";","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"a-wild-chocolate"},"content":"        if (line.startsWith(\"sleep add\"))  {","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList.addSleep(line);","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"a-wild-chocolate"},"content":"        } else if (line.startsWith(\"sleep list\")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":84,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList.printSleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":85,"author":{"gitId":"a-wild-chocolate"},"content":"        } else if (line.startsWith(\"sleep delete\")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":86,"author":{"gitId":"a-wild-chocolate"},"content":"            sleepList.deleteSleep(line);","lastModifiedDate":"2024-03-26"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"paturikarthik"},"content":"            handleUnknownInput();","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":92,"author":{"gitId":"paturikarthik"},"content":"    public static void handleUserInput(String line, CalorieList calorieList, HydrationList hydrationList,","lastModifiedDate":"2024-03-28"},{"lineNumber":93,"author":{"gitId":"paturikarthik"},"content":"            User user ,SleepList sleepList) {","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"paturikarthik"},"content":"        if (!line.startsWith(\"bye\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"            printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"paturikarthik"},"content":"            line \u003d line.trim().toLowerCase();","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"            if (line.isEmpty()) {","lastModifiedDate":"2024-03-21"},{"lineNumber":98,"author":{"gitId":"paturikarthik"},"content":"                printEmptyInputMessage();","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"calories\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"paturikarthik"},"content":"                handleCaloriesInput(line, calorieList);","lastModifiedDate":"2024-03-21"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"help\")) {","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"                showHelp();","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"            } else if (line.startsWith(\"hydration\")) {","lastModifiedDate":"2024-03-27"},{"lineNumber":104,"author":{"gitId":"owx0130"},"content":"                handleHydrationInput(line, hydrationList);","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"a-wild-chocolate"},"content":"            } else if (line.startsWith(\"sleep\")) {","lastModifiedDate":"2024-03-26"},{"lineNumber":106,"author":{"gitId":"a-wild-chocolate"},"content":"                handleSleepInput(line, sleepList);","lastModifiedDate":"2024-03-26"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"            } else if (line.startsWith(\"user\")) {","lastModifiedDate":"2024-03-28"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"                handleUserCommands(line, user);","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"            } else {","lastModifiedDate":"2024-03-21"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"                handleUnknownInput();","lastModifiedDate":"2024-03-21"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"            }","lastModifiedDate":"2024-03-21"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"            printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":113,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-13"},{"lineNumber":114,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"    public static void handleUserCommands(String line, User user) {","lastModifiedDate":"2024-03-28"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"        if (line.contains(\"setup\")) {","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"            user.setUp(line);","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"        } else if (line.contains(\"progress\")) {","lastModifiedDate":"2024-03-28"},{"lineNumber":120,"author":{"gitId":"paturikarthik"},"content":"            handleUserProgress(user);","lastModifiedDate":"2024-04-04"},{"lineNumber":121,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":122,"author":{"gitId":"paturikarthik"},"content":"            handleUnknownInput();","lastModifiedDate":"2024-04-04"},{"lineNumber":123,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":124,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":125,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":126,"author":{"gitId":"paturikarthik"},"content":"    private static void handleUserProgress(User user) {","lastModifiedDate":"2024-04-04"},{"lineNumber":127,"author":{"gitId":"paturikarthik"},"content":"        if (user.getName() \u003d\u003d null){","lastModifiedDate":"2024-04-04"},{"lineNumber":128,"author":{"gitId":"paturikarthik"},"content":"            printNoUserYetMessage();","lastModifiedDate":"2024-04-04"},{"lineNumber":129,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"            user.getCaloriesProgressBar();","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"            user.getHydrationProgressBar();","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":133,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":134,"author":{"gitId":"paturikarthik"},"content":"    public static void sayHello() {","lastModifiedDate":"2024-03-21"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"        System.out.println(WHITESPACE + \"Hello from\\n\\n\" + logo);","lastModifiedDate":"2024-03-21"},{"lineNumber":136,"author":{"gitId":"owx0130"},"content":"        System.out.println(WHITESPACE + \"How can I help you today?\");","lastModifiedDate":"2024-03-21"},{"lineNumber":137,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":138,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":139,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":140,"author":{"gitId":"paturikarthik"},"content":"    public static void byeMessage() {","lastModifiedDate":"2024-03-15"},{"lineNumber":141,"author":{"gitId":"paturikarthik"},"content":"        printLine();","lastModifiedDate":"2024-03-21"},{"lineNumber":142,"author":{"gitId":"owx0130"},"content":"        System.out.println(WHITESPACE + \"Bye! See you again soon ^^\");","lastModifiedDate":"2024-03-21"},{"lineNumber":143,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":144,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":145,"author":{"gitId":"paturikarthik"},"content":"    public static void printEmptyInputMessage() {","lastModifiedDate":"2024-03-15"},{"lineNumber":146,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Please enter a non-empty input!\");","lastModifiedDate":"2024-03-21"},{"lineNumber":147,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":148,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":149,"author":{"gitId":"paturikarthik"},"content":"    public static void printLine() {","lastModifiedDate":"2024-03-15"},{"lineNumber":150,"author":{"gitId":"owx0130"},"content":"        System.out.println(WHITESPACE + \"-------------------------------------\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":151,"author":{"gitId":"owx0130"},"content":"                \"----------------------------------------\");","lastModifiedDate":"2024-03-21"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":153,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":154,"author":{"gitId":"paturikarthik"},"content":"    public static void handleUnknownInput() {","lastModifiedDate":"2024-03-21"},{"lineNumber":155,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Oops! I\u0027ve never seen this input before...\");","lastModifiedDate":"2024-03-21"},{"lineNumber":156,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t If you are unsure of the commands, use the help command for a quick recap :)\");","lastModifiedDate":"2024-03-21"},{"lineNumber":157,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":158,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":159,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":160,"author":{"gitId":"paturikarthik"},"content":"    public static void showHelp() {","lastModifiedDate":"2024-03-21"},{"lineNumber":161,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t LifeTrack Command List:\");","lastModifiedDate":"2024-03-21"},{"lineNumber":162,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - help: Displays a list of available commands and their descriptions.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":163,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-03-28"},{"lineNumber":164,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t - calories in \u003cfood\u003e c/\u003ccalories\u003e d/\u003cdate, format:YYYY-MM-DD\u003e \" +","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"owx0130"},"content":"                \"m/[carbohydrates, proteins, fats]: Adds a calorie gaining entry into the calories tracker.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":166,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t - calories out \u003cactivity\u003e c/\u003ccalories\u003e d/\u003cdate, format:YYYY-MM-DD\u003e: \" +","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"owx0130"},"content":"                \"Adds a calorie burning entry into the calories tracker.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":168,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories list: Displays all entries currently stored in the calorie list.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":169,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t - calories delete \u003cindex\u003e: Deletes the entry at the specified index\" +","lastModifiedDate":"2024-03-21"},{"lineNumber":170,"author":{"gitId":"paturikarthik"},"content":"                \" from the calorie list.\");","lastModifiedDate":"2024-03-21"},{"lineNumber":171,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-03-28"},{"lineNumber":172,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"\\t - hydration in \u003ctype of beverage\u003e v/\u003cvolume\u003e d/\u003cdate, format:YYYY-MM-DD\u003e: \" +","lastModifiedDate":"2024-04-02"},{"lineNumber":173,"author":{"gitId":"owx0130"},"content":"                \"Adds a hydration entry into the hydration tracker.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":174,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t - hydration list: Displays all entries currently stored in the hydration list.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":175,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t - hydration delete \u003cindex\u003e: Deletes the hydration entry at the specified index \" +","lastModifiedDate":"2024-03-28"},{"lineNumber":176,"author":{"gitId":"owx0130"},"content":"                \"from the hydration list.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":177,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-03-28"},{"lineNumber":178,"author":{"gitId":"rexyyong"},"content":"        System.out.println(\"\\t - sleep add \u003cduration\u003e d/\u003cdate, format:YYYY-MM-DD\u003e: \" +","lastModifiedDate":"2024-03-29"},{"lineNumber":179,"author":{"gitId":"owx0130"},"content":"                \"Adds a sleep entry into the sleep tracker.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":180,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t - sleep list: Displays all entries currently stored in the sleep list.\");","lastModifiedDate":"2024-03-28"},{"lineNumber":181,"author":{"gitId":"a-wild-chocolate"},"content":"        System.out.println(\"\\t - sleep delete \u003cindex\u003e: Deletes the entry at the specified index \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":182,"author":{"gitId":"a-wild-chocolate"},"content":"                \"from the sleep list.\");","lastModifiedDate":"2024-03-26"},{"lineNumber":183,"author":{"gitId":"owx0130"},"content":"        printLine();","lastModifiedDate":"2024-04-02"},{"lineNumber":184,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t - user setup \u003cname\u003e h/\u003cheight\u003e w/\u003cweight\u003e a/\u003cage\u003e s/\u003csex\u003e e/\u003cexercise_level\u003e \" +","lastModifiedDate":"2024-04-02"},{"lineNumber":185,"author":{"gitId":"owx0130"},"content":"                \"g/\u003cbody_goal\u003e: Create a new user, or edit an existing one.\");","lastModifiedDate":"2024-04-02"},{"lineNumber":186,"author":{"gitId":"owx0130"},"content":"        System.out.println(\"\\t - user progress: Display calories and hydration progress towards the daily \" +","lastModifiedDate":"2024-04-02"},{"lineNumber":187,"author":{"gitId":"owx0130"},"content":"                \"requirement.\");","lastModifiedDate":"2024-04-02"},{"lineNumber":188,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-13"},{"lineNumber":189,"author":{"gitId":"rexyyong"},"content":"}","lastModifiedDate":"2024-03-13"}],"authorContributionMap":{"rexyyong":21,"a-wild-chocolate":13,"owx0130":30,"shawnpong":9,"paturikarthik":116}},{"path":"src/main/java/seedu/lifetrack/ui/UserUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.ui;","lastModifiedDate":"2024-04-04"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"public class UserUi {","lastModifiedDate":"2024-04-04"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserCaloriesRequired(int caloriesRequired) {","lastModifiedDate":"2024-04-04"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t You need to consume \" + caloriesRequired + \" calories per day to hit your goals!\");","lastModifiedDate":"2024-04-04"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserCalorieProgress(int caloriesConsumed, int caloriesRequired, String progressBar,","lastModifiedDate":"2024-04-04"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"                                                int percentage) {","lastModifiedDate":"2024-04-04"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"        System.out.print(\"\\t Calories:\\n\");","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"        System.out.printf(\"\\t You have consumed \" + caloriesConsumed + \" calories out of your goal of \"","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"                + caloriesRequired + \" calories so far.\\n\");","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"        System.out.printf(\"\\t %s %d%%\\n\\n\", progressBar, percentage);","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserHydrationProgress(int hydrationConsumed, int hydrationRequired, String progressBar,","lastModifiedDate":"2024-04-04"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"                                                  int percentage) {","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"        System.out.print(\"\\t Hydration:\\n\");","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"        System.out.printf(\"\\t You have consumed \" + hydrationConsumed + \"ml out of your goal of \"","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"                + hydrationRequired + \"ml so far.\\n\");","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"        System.out.printf(\"\\t %s %d%%\\n\", progressBar, percentage);","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"    public static void printUserSetUpComplete(String name, int caloriesRequired){","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t Hello, \" + name + \"! Thank you for completing the setup :)\");","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"        printUserCaloriesRequired(caloriesRequired);","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    public static void printNoUserYetMessage(){","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"        System.out.println(\"\\t\\t Please set up your profile first!\");","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-04-04"}],"authorContributionMap":{"paturikarthik":32}},{"path":"src/main/java/seedu/lifetrack/user/User.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.user;","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.ErrorMessages;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.storage.FileHandler;","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.usergoals.UserGoals;","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.system.parser.ParserUser.parseSetUp;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"public class User {","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"    private FileHandler fileHandler;","lastModifiedDate":"2024-03-28"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"    private String name;","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    private int height;","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"    private int weight;","lastModifiedDate":"2024-03-28"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    private int age;","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    private String sex;","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"    private int exerciseLevels;","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"    private int goal;","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"    private int caloriesRequired;","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    private int hydrationRequired \u003d 2000;","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"    //user data constants","lastModifiedDate":"2024-03-28"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    private final int NAME_INDEX \u003d 0;","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    private final int HEIGHT_INDEX \u003d 1;","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"    private final int WEIGHT_INDEX \u003d 2;","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"    private final int AGE_INDEX \u003d 3;","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"    private final int SEX_INDEX \u003d 4;","lastModifiedDate":"2024-03-28"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    private final int EXERCISE_INDEX \u003d 5;","lastModifiedDate":"2024-03-28"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"    private final int GOAL_INDEX \u003d 6;","lastModifiedDate":"2024-03-28"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"    private final int REQ_CAL_INDEX \u003d 7;","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"    //constructor for JUnit tests","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"    public User() {","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"    //constructor for usage in terminal","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"    public User(String filePath) {","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-28"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"            fileHandler \u003d new FileHandler(filePath);","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"            ArrayList\u003cString\u003e data \u003d fileHandler.getUserDataFromFile();","lastModifiedDate":"2024-03-28"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"            name \u003d data.get(NAME_INDEX);","lastModifiedDate":"2024-03-28"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"            height \u003d Integer.parseInt(data.get(HEIGHT_INDEX));","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"owx0130"},"content":"            weight \u003d Integer.parseInt(data.get(WEIGHT_INDEX));","lastModifiedDate":"2024-03-28"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"            age \u003d Integer.parseInt(data.get(AGE_INDEX));","lastModifiedDate":"2024-03-28"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"            sex \u003d data.get(SEX_INDEX);","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"            exerciseLevels \u003d Integer.parseInt(data.get(EXERCISE_INDEX));","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"            goal \u003d Integer.parseInt(data.get(GOAL_INDEX));","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"            caloriesRequired \u003d Integer.parseInt(data.get(REQ_CAL_INDEX));","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-03-28"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"            System.out.println(ErrorMessages.getFileNotFoundMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":60,"author":{"gitId":"paturikarthik"},"content":"    public void setUp(String line) {","lastModifiedDate":"2024-03-28"},{"lineNumber":61,"author":{"gitId":"paturikarthik"},"content":"        try {","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"paturikarthik"},"content":"            parseSetUp(line, this);","lastModifiedDate":"2024-03-28"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"            fileHandler.writeUserData(this);","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"paturikarthik"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"paturikarthik"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":66,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":67,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"paturikarthik"},"content":"    public void setName(String name) {","lastModifiedDate":"2024-03-28"},{"lineNumber":70,"author":{"gitId":"paturikarthik"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":72,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"paturikarthik"},"content":"    public void setHeight(int height) {","lastModifiedDate":"2024-03-28"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"        this.height \u003d height;","lastModifiedDate":"2024-03-28"},{"lineNumber":75,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":76,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"paturikarthik"},"content":"    public void setWeight(int weight) {","lastModifiedDate":"2024-03-28"},{"lineNumber":78,"author":{"gitId":"paturikarthik"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2024-03-28"},{"lineNumber":79,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":80,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":81,"author":{"gitId":"paturikarthik"},"content":"    public void setAge(int age) {","lastModifiedDate":"2024-03-28"},{"lineNumber":82,"author":{"gitId":"paturikarthik"},"content":"        this.age \u003d age;","lastModifiedDate":"2024-03-28"},{"lineNumber":83,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":84,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":85,"author":{"gitId":"paturikarthik"},"content":"    public void setSex(String sex) {","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"paturikarthik"},"content":"        this.sex \u003d sex;","lastModifiedDate":"2024-03-28"},{"lineNumber":87,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":88,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":89,"author":{"gitId":"paturikarthik"},"content":"    public void setExerciseLevels(int exerciseLevels) {","lastModifiedDate":"2024-04-04"},{"lineNumber":90,"author":{"gitId":"paturikarthik"},"content":"        this.exerciseLevels \u003d exerciseLevels;","lastModifiedDate":"2024-03-28"},{"lineNumber":91,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":92,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":93,"author":{"gitId":"paturikarthik"},"content":"    public void setGoal(int goal) {","lastModifiedDate":"2024-04-04"},{"lineNumber":94,"author":{"gitId":"paturikarthik"},"content":"        this.goal \u003d goal;","lastModifiedDate":"2024-03-28"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":96,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"    public String getName() {","lastModifiedDate":"2024-04-04"},{"lineNumber":98,"author":{"gitId":"paturikarthik"},"content":"        return name;","lastModifiedDate":"2024-04-04"},{"lineNumber":99,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":100,"author":{"gitId":"paturikarthik"},"content":"    public int getHeight() {","lastModifiedDate":"2024-03-28"},{"lineNumber":101,"author":{"gitId":"paturikarthik"},"content":"        return height;","lastModifiedDate":"2024-03-28"},{"lineNumber":102,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":103,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":104,"author":{"gitId":"paturikarthik"},"content":"    public int getWeight() {","lastModifiedDate":"2024-03-28"},{"lineNumber":105,"author":{"gitId":"paturikarthik"},"content":"        return weight;","lastModifiedDate":"2024-03-28"},{"lineNumber":106,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":107,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":108,"author":{"gitId":"paturikarthik"},"content":"    public int getAge() {","lastModifiedDate":"2024-03-28"},{"lineNumber":109,"author":{"gitId":"paturikarthik"},"content":"        return age;","lastModifiedDate":"2024-03-28"},{"lineNumber":110,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":111,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":112,"author":{"gitId":"paturikarthik"},"content":"    public String getSex() {","lastModifiedDate":"2024-03-28"},{"lineNumber":113,"author":{"gitId":"paturikarthik"},"content":"        return sex;","lastModifiedDate":"2024-03-28"},{"lineNumber":114,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":115,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":116,"author":{"gitId":"paturikarthik"},"content":"    public int getExerciseLevels() {","lastModifiedDate":"2024-04-04"},{"lineNumber":117,"author":{"gitId":"paturikarthik"},"content":"        return exerciseLevels;","lastModifiedDate":"2024-03-28"},{"lineNumber":118,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":120,"author":{"gitId":"paturikarthik"},"content":"    public int getGoal() {","lastModifiedDate":"2024-04-04"},{"lineNumber":121,"author":{"gitId":"paturikarthik"},"content":"        return goal;","lastModifiedDate":"2024-03-28"},{"lineNumber":122,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":123,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":124,"author":{"gitId":"paturikarthik"},"content":"    public void getHealthInfo() {","lastModifiedDate":"2024-03-28"},{"lineNumber":125,"author":{"gitId":"paturikarthik"},"content":"        UserGoals.getHealthInfo(this);","lastModifiedDate":"2024-03-28"},{"lineNumber":126,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":127,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":128,"author":{"gitId":"paturikarthik"},"content":"    public void setCaloriesRequired(int caloriesRequired) {","lastModifiedDate":"2024-03-28"},{"lineNumber":129,"author":{"gitId":"paturikarthik"},"content":"        this.caloriesRequired \u003d caloriesRequired;","lastModifiedDate":"2024-03-28"},{"lineNumber":130,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":131,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":132,"author":{"gitId":"paturikarthik"},"content":"    public int getCaloriesRequired() {","lastModifiedDate":"2024-03-28"},{"lineNumber":133,"author":{"gitId":"paturikarthik"},"content":"        return caloriesRequired;","lastModifiedDate":"2024-03-28"},{"lineNumber":134,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":135,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"    public int getHydrationRequired() {","lastModifiedDate":"2024-04-02"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"        return hydrationRequired;","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"owx0130"},"content":"    public String toFileFriendlyString() {","lastModifiedDate":"2024-03-28"},{"lineNumber":141,"author":{"gitId":"owx0130"},"content":"        return String.format(name + \";\" + height + \";\" + weight + \";\" + age + \";\" + sex + \";\" +","lastModifiedDate":"2024-03-28"},{"lineNumber":142,"author":{"gitId":"owx0130"},"content":"                exerciseLevels + \";\" + goal + \";\" + caloriesRequired);","lastModifiedDate":"2024-03-28"},{"lineNumber":143,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"    public void getCaloriesProgressBar() {","lastModifiedDate":"2024-04-02"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"        UserGoals.getCaloriesProgressBar(this);","lastModifiedDate":"2024-04-02"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"    public void getHydrationProgressBar() {","lastModifiedDate":"2024-04-02"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"        UserGoals.getHydrationProgressBar(this);","lastModifiedDate":"2024-04-02"},{"lineNumber":151,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":152,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"owx0130":46,"shawnpong":14,"paturikarthik":92}},{"path":"src/main/java/seedu/lifetrack/user/usergoals/UserGoals.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack.user.usergoals;","lastModifiedDate":"2024-03-28"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.LifeTrack.calorieList;","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"import static seedu.lifetrack.LifeTrack.hydrationList;","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printUserCalorieProgress;","lastModifiedDate":"2024-04-04"},{"lineNumber":8,"author":{"gitId":"paturikarthik"},"content":"import static seedu.lifetrack.ui.UserUi.printUserHydrationProgress;","lastModifiedDate":"2024-04-04"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"paturikarthik"},"content":"public class UserGoals {","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"    private static final int BMR_WEIGHT_MULTIPLIER \u003d 10;","lastModifiedDate":"2024-04-04"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"    private static final double BMR_HEIGHT_MULTIPLIER \u003d 6.25;","lastModifiedDate":"2024-04-04"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"    private static final int BMR_AGE_MULTIPLIER \u003d 5;","lastModifiedDate":"2024-04-04"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"    private static final int BMR_MALE_MODIFIER \u003d 5;","lastModifiedDate":"2024-04-04"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"    private static final int BMR_FEMALE_MODIFIER \u003d -161;","lastModifiedDate":"2024-04-04"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"paturikarthik"},"content":"    public static void getHealthInfo(User user) {","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"        double rawBMR \u003d BMR_WEIGHT_MULTIPLIER * user.getWeight() + BMR_HEIGHT_MULTIPLIER * user.getHeight()","lastModifiedDate":"2024-04-04"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"                - BMR_AGE_MULTIPLIER * user.getAge();","lastModifiedDate":"2024-04-04"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"        String gender \u003d user.getSex();","lastModifiedDate":"2024-04-04"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"        int genderBMRModifier \u003d gender.equals(\"male\") ? BMR_MALE_MODIFIER : BMR_FEMALE_MODIFIER;","lastModifiedDate":"2024-04-04"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"        int exerciseLevel \u003d user.getExerciseLevels();","lastModifiedDate":"2024-04-04"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"        double rawAMR \u003d getAMR(rawBMR + genderBMRModifier, exerciseLevel);","lastModifiedDate":"2024-04-04"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"        int goal \u003d user.getGoal();","lastModifiedDate":"2024-04-04"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"        int caloriesRequired \u003d adjustAMRWithGoal(rawAMR,goal);","lastModifiedDate":"2024-04-04"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"        user.setCaloriesRequired(caloriesRequired);","lastModifiedDate":"2024-04-04"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-04-04"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    private static int adjustAMRWithGoal(double rawAMR, int goal) {","lastModifiedDate":"2024-04-04"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"        if (goal \u003d\u003d 1){","lastModifiedDate":"2024-04-04"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"            rawAMR *\u003d 0.8;","lastModifiedDate":"2024-04-04"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"        } else if (goal \u003d\u003d 2){","lastModifiedDate":"2024-04-04"},{"lineNumber":33,"author":{"gitId":"paturikarthik"},"content":"            rawAMR *\u003d 0.9;","lastModifiedDate":"2024-04-04"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"        } else if (goal \u003d\u003d 4) {","lastModifiedDate":"2024-04-04"},{"lineNumber":35,"author":{"gitId":"paturikarthik"},"content":"            rawAMR *\u003d 1.1;","lastModifiedDate":"2024-04-04"},{"lineNumber":36,"author":{"gitId":"paturikarthik"},"content":"        } else if (goal \u003d\u003d 5) {","lastModifiedDate":"2024-04-04"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"            rawAMR*\u003d1.2;","lastModifiedDate":"2024-04-04"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-03-28"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"        return (int) rawAMR;","lastModifiedDate":"2024-04-04"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-04-04"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"    private static double getAMR(double calories, int exerciseLevel) {","lastModifiedDate":"2024-04-04"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"        if (exerciseLevel \u003d\u003d 1) {","lastModifiedDate":"2024-04-04"},{"lineNumber":43,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.2;","lastModifiedDate":"2024-04-04"},{"lineNumber":44,"author":{"gitId":"paturikarthik"},"content":"        } else if (exerciseLevel \u003d\u003d 2) {","lastModifiedDate":"2024-04-04"},{"lineNumber":45,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.375;","lastModifiedDate":"2024-04-04"},{"lineNumber":46,"author":{"gitId":"paturikarthik"},"content":"        } else if (exerciseLevel \u003d\u003d 3) {","lastModifiedDate":"2024-04-04"},{"lineNumber":47,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.55;","lastModifiedDate":"2024-04-04"},{"lineNumber":48,"author":{"gitId":"paturikarthik"},"content":"        } else if (exerciseLevel \u003d\u003d 4) {","lastModifiedDate":"2024-04-04"},{"lineNumber":49,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.725;","lastModifiedDate":"2024-04-04"},{"lineNumber":50,"author":{"gitId":"paturikarthik"},"content":"        } else {","lastModifiedDate":"2024-04-04"},{"lineNumber":51,"author":{"gitId":"paturikarthik"},"content":"            calories *\u003d 1.9;","lastModifiedDate":"2024-04-04"},{"lineNumber":52,"author":{"gitId":"paturikarthik"},"content":"        }","lastModifiedDate":"2024-04-04"},{"lineNumber":53,"author":{"gitId":"paturikarthik"},"content":"        return calories;","lastModifiedDate":"2024-04-04"},{"lineNumber":54,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"    public static void getCaloriesProgressBar(User user) {","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"        int caloriesRequired \u003d user.getCaloriesRequired();","lastModifiedDate":"2024-04-01"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"        int caloriesConsumed \u003d calorieList.getCaloriesConsumed();","lastModifiedDate":"2024-04-01"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"        double progress \u003d (double) caloriesConsumed / caloriesRequired;","lastModifiedDate":"2024-04-01"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"        int width \u003d 50;","lastModifiedDate":"2024-04-01"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"        int progressWidth \u003d (int) (width * progress);","lastModifiedDate":"2024-04-01"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"        StringBuilder progressBar \u003d new StringBuilder(\"[\");","lastModifiedDate":"2024-04-01"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 0; i \u003c width; i++) {","lastModifiedDate":"2024-04-01"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"            if (i \u003c progressWidth) {","lastModifiedDate":"2024-04-01"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"                progressBar.append(\"\u003d\");","lastModifiedDate":"2024-04-01"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"            } else {","lastModifiedDate":"2024-04-01"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"                progressBar.append(\" \");","lastModifiedDate":"2024-04-01"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-04-01"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        progressBar.append(\"] \");","lastModifiedDate":"2024-04-01"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"        int percentage \u003d (int) (progress * 100);","lastModifiedDate":"2024-04-01"},{"lineNumber":74,"author":{"gitId":"paturikarthik"},"content":"        printUserCalorieProgress(caloriesConsumed,caloriesRequired,progressBar.toString(), percentage);","lastModifiedDate":"2024-04-04"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"    public static void getHydrationProgressBar(User user) {","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"        int hydrationRequired \u003d user.getHydrationRequired();","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"        int hydrationConsumed \u003d hydrationList.getHydrationConsumed();","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"        double progress \u003d (double) hydrationConsumed / hydrationRequired;","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"        int width \u003d 50;","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"        int progressWidth \u003d (int) (width * progress);","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"        StringBuilder progressBar \u003d new StringBuilder(\"[\");","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 0; i \u003c width; i++) {","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"            if (i \u003c progressWidth) {","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"                progressBar.append(\"\u003d\");","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"            } else {","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"                progressBar.append(\" \");","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"        progressBar.append(\"] \");","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"        int percentage \u003d (int) (progress * 100);","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"paturikarthik"},"content":"        printUserHydrationProgress(hydrationConsumed,hydrationRequired,progressBar.toString(),percentage);","lastModifiedDate":"2024-04-04"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":97,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-28"}],"authorContributionMap":{"owx0130":1,"shawnpong":42,"paturikarthik":54}},{"path":"src/test/java/seedu/lifetrack/CalorieListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-14"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-14"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-03-29"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-29"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-19"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.InputEntry;","lastModifiedDate":"2024-03-27"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.OutputEntry;","lastModifiedDate":"2024-03-27"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"public class CalorieListTest {","lastModifiedDate":"2024-03-14"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"    private final String addedEntryHeader \u003d \"\\t The following entry has been added to your caloric list!\";","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-14"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"    public void addEntry_validInput_entryAdded() {","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"        // Test setup","lastModifiedDate":"2024-03-14"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-14"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"        String validInputCalorieIn \u003d \"calories in Eat burger c/369 d/2024-03-14\";","lastModifiedDate":"2024-03-28"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"        String validInputCalorieOut \u003d \"calories out run c/679 d/2024-03-15\";","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"        // Call method to test","lastModifiedDate":"2024-03-14"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"        calorieList.addEntry(validInputCalorieIn);","lastModifiedDate":"2024-03-15"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"        calorieList.addEntry(validInputCalorieOut);","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-14"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"        // Verify that the entry has been added to the list","lastModifiedDate":"2024-03-14"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"        assertEquals(2, calorieList.getSize());","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"        InputEntry firstEntry \u003d (InputEntry)calorieList.getEntry(0);","lastModifiedDate":"2024-03-27"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"        OutputEntry secondEntry \u003d (OutputEntry)calorieList.getEntry(1);","lastModifiedDate":"2024-03-27"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"        // Check calories intake entry","lastModifiedDate":"2024-03-15"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"        LocalDate dateIntake \u003d LocalDate.parse(\"2024-03-14\");","lastModifiedDate":"2024-03-29"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"        assertTrue(firstEntry.getDate().isEqual(dateIntake));","lastModifiedDate":"2024-03-29"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"        assertEquals(\"Eat burger\", firstEntry.getDescription());","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"        assertEquals(369, firstEntry.getCalories());","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"        // Check calories outflow entry","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"        LocalDate dateOutflow \u003d LocalDate.parse(\"2024-03-15\");","lastModifiedDate":"2024-03-29"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"        assertTrue(secondEntry.getDate().isEqual(dateOutflow));","lastModifiedDate":"2024-03-29"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"        assertEquals(\"run\", secondEntry.getDescription());","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"        assertEquals(679, secondEntry.getCalories());","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-14"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"    ","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"    //@@author a-wild-chocolate","lastModifiedDate":"2024-03-22"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteCalorieValidIndex() {","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories out Run c/200 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d calorieList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete 1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize - 1, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories out Run c/200 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories in Eat c/200 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"        initialSize \u003d calorieList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete 2\");","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize - 1, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteCalorieInvalidIndex() {","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"a-wild-chocolate"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.addEntry(\"calories out Run c/200 date/2024-03-14\");","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d calorieList.getSize();","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete 2\"); // Index out of bounds","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"a-wild-chocolate"},"content":"        calorieList.deleteEntry(\"calories delete -1\");","lastModifiedDate":"2024-03-21"},{"lineNumber":70,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":71,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":72,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"    //@@author shawnpong","lastModifiedDate":"2024-03-22"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"    public void testPrintCalorieListEmpty() {","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t Your caloric list is empty. \" +","lastModifiedDate":"2024-03-21"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"                \"Add new entries to populate your list :)\" + lineSeparator;","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"    public void testPrintCalorieListNonEmpty() {","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in Run c/200 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d addedEntryHeader + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"                \"\\t \" + calorieList.getEntry(0).toString() + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Caloric List:\" + lineSeparator +","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. \\t Date: 2024-03-14, Description: Run, Calories: 200\" + lineSeparator;","lastModifiedDate":"2024-03-21"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"    public void testPrintCalorieListMultipleEntries() {","lastModifiedDate":"2024-03-21"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in Run c/200 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Walk c/150 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in Eat c/500 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories out Run c/250 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"        calorieList.addEntry(\"calories in Eat c/300 d/2024-03-14\");","lastModifiedDate":"2024-03-28"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"        calorieList.printCalorieList();","lastModifiedDate":"2024-03-21"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"        StringBuilder expectedOutput \u003d new StringBuilder();","lastModifiedDate":"2024-03-21"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2024-03-21"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"            expectedOutput.append(addedEntryHeader)","lastModifiedDate":"2024-03-21"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator).append(\"\\t \").append(calorieList.getEntry(i).toString())","lastModifiedDate":"2024-03-21"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"                    .append(lineSeparator);","lastModifiedDate":"2024-03-21"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"        expectedOutput.append(\"\\t Your Caloric List:\")","lastModifiedDate":"2024-03-21"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 1. \\t Date: 2024-03-14, Description: Run, Calories: 200\")","lastModifiedDate":"2024-03-21"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 2. \\t Date: 2024-03-14, Description: Walk, Calories: 150\")","lastModifiedDate":"2024-03-21"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 3. \\t Date: 2024-03-14, Description: Eat, Calories: 500\")","lastModifiedDate":"2024-03-21"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 4. \\t Date: 2024-03-14, Description: Run, Calories: 250\")","lastModifiedDate":"2024-03-21"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator)","lastModifiedDate":"2024-03-21"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"                .append(\"\\t 5. \\t Date: 2024-03-14, Description: Eat, Calories: 300\")","lastModifiedDate":"2024-03-21"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"                .append(lineSeparator);","lastModifiedDate":"2024-03-21"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput.toString(), outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"        assertEquals(5, calorieList.getSize());","lastModifiedDate":"2024-03-21"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-14"}],"authorContributionMap":{"rexyyong":28,"a-wild-chocolate":25,"owx0130":18,"shawnpong":67,"paturikarthik":1}},{"path":"src/test/java/seedu/lifetrack/HydrationListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"//@@author shawnpong","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationList;","lastModifiedDate":"2024-03-28"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-28"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"public class HydrationListTest {","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteHydrationValidIndex() {","lastModifiedDate":"2024-03-28"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Milo v/200 d/2024-02-22\");","lastModifiedDate":"2024-03-29"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d hydrationList.getSize();","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"        hydrationList.deleteEntry(\"hydration delete 1\");","lastModifiedDate":"2024-03-28"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize - 1, hydrationList.getSize());","lastModifiedDate":"2024-03-28"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteHydrationInvalidIndex() {","lastModifiedDate":"2024-03-28"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Milo v/200 d/2024-02-22\");","lastModifiedDate":"2024-03-29"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d hydrationList.getSize();","lastModifiedDate":"2024-03-28"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"        hydrationList.deleteEntry(\"hydration delete 2\"); // Index out of bounds","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"        hydrationList.deleteEntry(\"hydration delete -1\");","lastModifiedDate":"2024-03-28"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize, hydrationList.getSize());","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"    public void testPrintHydrationListEmpty() {","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"        hydrationList.printHydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t Your hydration list is empty. Add new entries to populate your list :)\" +","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"                lineSeparator;","lastModifiedDate":"2024-03-28"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"    public void testPrintHydrationListNonEmpty() {","lastModifiedDate":"2024-03-28"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Milo v/200 d/2024-02-22\");","lastModifiedDate":"2024-03-29"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"        hydrationList.printHydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t Date: 2024-02-22, Description: Milo, Volume: 200\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Hydration List:\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. \\t Date: 2024-02-22, Description: Milo, Volume: 200\" + lineSeparator;","lastModifiedDate":"2024-03-29"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"    public void testPrintHydrationListMultipleEntries() {","lastModifiedDate":"2024-03-28"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-21"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Milo v/200 d/2024-02-22\");","lastModifiedDate":"2024-03-29"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Water v/300 d/2024-02-22\");","lastModifiedDate":"2024-03-29"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Juice v/150 d/2024-02-22\");","lastModifiedDate":"2024-03-29"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"        hydrationList.printHydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t Date: 2024-02-22, Description: Milo, Volume: 200\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"                \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t Date: 2024-02-22, Description: Water, Volume: 300\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"                \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t Date: 2024-02-22, Description: Juice, Volume: 150\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Hydration List:\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. \\t Date: 2024-02-22, Description: Milo, Volume: 200\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"                \"\\t 2. \\t Date: 2024-02-22, Description: Water, Volume: 300\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"                \"\\t 3. \\t Date: 2024-02-22, Description: Juice, Volume: 150\" + lineSeparator;","lastModifiedDate":"2024-03-29"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-21"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"        assertEquals(3, hydrationList.getSize());","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"    public void testAddEntry() {","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d hydrationList.getSize();","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Water v/250 d/2024-02-23\");","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize + 1, hydrationList.getSize());","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteEntryFromEmptyList() {","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d hydrationList.getSize();","lastModifiedDate":"2024-04-02"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"        hydrationList.deleteEntry(\"hydration delete 1\");","lastModifiedDate":"2024-04-02"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize, hydrationList.getSize());","lastModifiedDate":"2024-04-02"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"    public void testDeleteEntryWithInvalidFormat() {","lastModifiedDate":"2024-04-02"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-04-02"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Water v/250 d/2024-02-23\");","lastModifiedDate":"2024-04-02"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"        int initialSize \u003d hydrationList.getSize();","lastModifiedDate":"2024-04-02"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"        // Try to delete with invalid format, should not affect the list","lastModifiedDate":"2024-04-02"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"        hydrationList.deleteEntry(\"delete 1\");","lastModifiedDate":"2024-04-02"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"        assertEquals(initialSize, hydrationList.getSize());","lastModifiedDate":"2024-04-02"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"    public void testPrintHydrationListWithMultipleEntries() {","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Coffee v/150 d/2024-02-22\");","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"        hydrationList.addEntry(\"hydration add Tea v/200 d/2024-02-22\");","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"        hydrationList.printHydrationList();","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t Date: 2024-02-22, Description: Coffee, Volume: 150\" + lineSeparator +","lastModifiedDate":"2024-04-02"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"                \"\\t The following entry has been added to your hydration list!\" + lineSeparator +","lastModifiedDate":"2024-04-02"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"                \"\\t \\t Date: 2024-02-22, Description: Tea, Volume: 200\" + lineSeparator +","lastModifiedDate":"2024-04-02"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"                \"\\t Your Hydration List:\" + lineSeparator +","lastModifiedDate":"2024-04-02"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"                \"\\t 1. \\t Date: 2024-02-22, Description: Coffee, Volume: 150\" + lineSeparator +","lastModifiedDate":"2024-04-02"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"                \"\\t 2. \\t Date: 2024-02-22, Description: Tea, Volume: 200\" + lineSeparator;","lastModifiedDate":"2024-04-02"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-04-02"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"        assertEquals(2, hydrationList.getSize());","lastModifiedDate":"2024-04-02"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-04-02"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"shawnpong":133}},{"path":"src/test/java/seedu/lifetrack/ParserCaloriesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"owx0130"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-21"},{"lineNumber":2,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"owx0130"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.parser.ParserCalories.parseCaloriesInput;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getIncorrectCaloriesInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.ErrorMessages.getIncorrectMacrosInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":10,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getWhitespaceInInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":11,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getIncompleteMacrosMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":12,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getMacrosInCaloriesOutMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":13,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesIncorrectOrderMessage;","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getCaloriesMissingKeywordsMessage;","lastModifiedDate":"2024-03-28"},{"lineNumber":15,"author":{"gitId":"owx0130"},"content":"import static seedu.lifetrack.system.exceptions.InvalidInputExceptionMessage.getWhitespaceInMacrosInputMessage;","lastModifiedDate":"2024-03-22"},{"lineNumber":16,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"class ParserCaloriesTest {","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":20,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_missingKeywords_exceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":22,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger\");","lastModifiedDate":"2024-03-22"},{"lineNumber":23,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":24,"author":{"gitId":"owx0130"},"content":"            assertEquals(getCaloriesMissingKeywordsMessage(), e.getMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":25,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incompleteInput_exceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":30,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger c/ d/220224\");","lastModifiedDate":"2024-03-28"},{"lineNumber":32,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"            assertEquals(getWhitespaceInInputMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":34,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":36,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":38,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incorrectlyOrderedInput_exceptionThrown() {","lastModifiedDate":"2024-03-21"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger d/220224 c/123\");","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"owx0130"},"content":"            assertEquals(getCaloriesIncorrectOrderMessage(), e.getMessage());","lastModifiedDate":"2024-03-28"},{"lineNumber":43,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":44,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":45,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":46,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":47,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incorrectMacrosInput_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":48,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"            parseCaloriesInput(\"calories in burger c/123 d/2024-03-22 m/abc\");","lastModifiedDate":"2024-03-29"},{"lineNumber":50,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":51,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncorrectMacrosInputMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":53,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":55,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":56,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incorrectCaloriesInput_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":57,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":58,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories out Running c/abc d/220324\");","lastModifiedDate":"2024-03-28"},{"lineNumber":59,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":60,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncorrectCaloriesInputMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":61,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":62,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":63,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":64,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":65,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_incompleteMacrosInput_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":66,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":67,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger c/123 d/220324 m/123,132\");","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":69,"author":{"gitId":"owx0130"},"content":"            assertEquals(getIncompleteMacrosMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":71,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":73,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_macrosInCaloriesOut_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":75,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories out running c/123 d/220324 m/123,123,132\");","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":78,"author":{"gitId":"owx0130"},"content":"            assertEquals(getMacrosInCaloriesOutMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":79,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":80,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":81,"author":{"gitId":"owx0130"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":82,"author":{"gitId":"owx0130"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":83,"author":{"gitId":"owx0130"},"content":"    public void parseCaloriesInput_whitespaceInMacrosInput_exceptionThrown() {","lastModifiedDate":"2024-03-22"},{"lineNumber":84,"author":{"gitId":"owx0130"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":85,"author":{"gitId":"owx0130"},"content":"            parseCaloriesInput(\"calories in burger c/123 d/220324 m/123,  ,132\");","lastModifiedDate":"2024-03-28"},{"lineNumber":86,"author":{"gitId":"owx0130"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":87,"author":{"gitId":"owx0130"},"content":"            assertEquals(getWhitespaceInMacrosInputMessage(), e.getMessage());","lastModifiedDate":"2024-03-22"},{"lineNumber":88,"author":{"gitId":"owx0130"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"owx0130"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"owx0130"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"rexyyong":1,"owx0130":89}},{"path":"src/test/java/seedu/lifetrack/ParserHydrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rexyyong"},"content":"//@@author rexyyong","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"rexyyong"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-21"},{"lineNumber":3,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":4,"author":{"gitId":"rexyyong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-21"},{"lineNumber":5,"author":{"gitId":"rexyyong"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-21"},{"lineNumber":6,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"rexyyong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":8,"author":{"gitId":"rexyyong"},"content":"import static seedu.lifetrack.system.parser.ParserHydration.parseHydrationInput;","lastModifiedDate":"2024-03-28"},{"lineNumber":9,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":10,"author":{"gitId":"rexyyong"},"content":"public class ParserHydrationTest {","lastModifiedDate":"2024-03-28"},{"lineNumber":11,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":12,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":13,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputContains2Beverages_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":14,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in Milo b/1000 b/1000\";","lastModifiedDate":"2024-03-27"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":17,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":19,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput);","lastModifiedDate":"2024-03-28"},{"lineNumber":20,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":21,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":22,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":23,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":24,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":25,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":26,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":27,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":28,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":29,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputContains2Volumes_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":31,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in Milo v/1000 v/1000\";","lastModifiedDate":"2024-03-27"},{"lineNumber":32,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":33,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":34,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":35,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput);","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":37,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":38,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":39,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":40,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":41,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":43,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":44,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":45,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputMissingVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":46,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":47,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"liquids in Milo date/221024\";","lastModifiedDate":"2024-03-27"},{"lineNumber":48,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":50,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":51,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput);","lastModifiedDate":"2024-03-28"},{"lineNumber":52,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":54,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":56,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":57,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":58,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":59,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":60,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":61,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputWrongOrderDateBeforeVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":62,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":63,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"hydration add Milo d/221024 v/1000\";","lastModifiedDate":"2024-03-28"},{"lineNumber":64,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput);","lastModifiedDate":"2024-03-28"},{"lineNumber":68,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":69,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":70,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that you have keyed the input in the correct order!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":71,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":72,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":74,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":75,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":76,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputNonIntegerValueForVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":77,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":78,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"hydration add Milo v/##s100 d/221024\";","lastModifiedDate":"2024-03-28"},{"lineNumber":79,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":80,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":81,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":82,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput);","lastModifiedDate":"2024-03-28"},{"lineNumber":83,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":84,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":85,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that positive integer value is keyed in for volume!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":86,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":87,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":88,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":89,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":90,"author":{"gitId":"rexyyong"},"content":"    @Test","lastModifiedDate":"2024-03-21"},{"lineNumber":91,"author":{"gitId":"rexyyong"},"content":"    public void parseHydrationInput_inputNegativeValueForVolume_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":92,"author":{"gitId":"rexyyong"},"content":"        // setup test","lastModifiedDate":"2024-03-21"},{"lineNumber":93,"author":{"gitId":"rexyyong"},"content":"        String invalidInput \u003d \"hydration add Milo v/-1000 d/221024\";","lastModifiedDate":"2024-03-28"},{"lineNumber":94,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-21"},{"lineNumber":95,"author":{"gitId":"rexyyong"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-21"},{"lineNumber":96,"author":{"gitId":"rexyyong"},"content":"        try {","lastModifiedDate":"2024-03-21"},{"lineNumber":97,"author":{"gitId":"rexyyong"},"content":"            parseHydrationInput(invalidInput);","lastModifiedDate":"2024-03-28"},{"lineNumber":98,"author":{"gitId":"rexyyong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-21"},{"lineNumber":99,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":100,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Please ensure that positive integer value is keyed in for volume!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":101,"author":{"gitId":"rexyyong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":102,"author":{"gitId":"rexyyong"},"content":"        }","lastModifiedDate":"2024-03-21"},{"lineNumber":103,"author":{"gitId":"rexyyong"},"content":"    }","lastModifiedDate":"2024-03-21"},{"lineNumber":104,"author":{"gitId":"rexyyong"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"    //@@author shawnpong","lastModifiedDate":"2024-03-22"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"    public void parseHydrationInput_missingKeywords_exceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"            parseHydrationInput(\"liquids in\");","lastModifiedDate":"2024-03-28"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-22"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"    public void parseHydrationInput_incompleteInput_exceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-22"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"            parseHydrationInput(\"liquids in b/Milo\");","lastModifiedDate":"2024-03-28"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-22"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-22"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-22"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"    public void parseHydrationInput_emptyBeverageName_exceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"            parseHydrationInput(\"liquids in v/1000\");","lastModifiedDate":"2024-03-28"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"    @Test","lastModifiedDate":"2024-03-27"},{"lineNumber":141,"author":{"gitId":"shawnpong"},"content":"    public void parseHydrationInput_emptyVolumeDescription_exceptionThrown() {","lastModifiedDate":"2024-03-28"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-03-27"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"            parseHydrationInput(\"liquids in Milo v/   \");","lastModifiedDate":"2024-03-28"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-27"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"            assertEquals(\"\\t Invalid input!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Please ensure that you have entered all keywords!\\n\" +","lastModifiedDate":"2024-03-27"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"                    \"\\t Example input: hydration add Milo v/1000 d/2024-04-19\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-27"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-27"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-27"},{"lineNumber":151,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-03-21"}],"authorContributionMap":{"rexyyong":104,"shawnpong":47}},{"path":"src/test/java/seedu/lifetrack/ParserSleepTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.system.exceptions.InvalidInputException;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"import static seedu.lifetrack.system.parser.ParserSleep.parseSleepInput;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"public class ParserSleepTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseSleepInput_inputContains2Duration_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"        // setup test","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"        String invalidInput \u003d \"sleep add 8.0 9.2\";","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":16,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(invalidInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"rexyyong"},"content":"            assertEquals(\"Invalid date format\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseSleepInput_inputContains2Date_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"        // setup test","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"        String invalidInput \u003d \"sleep add d/110324 d/280524\";","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(invalidInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"            assertEquals(\"Please ensure that you have keyed in the correct format: \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"rexyyong"},"content":"                    \"sleep add \u003cduration\u003e d/\u003cstrDate\u003e\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseSleepInput_inputMissingDuration_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"        // setup test","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"        String invalidInput \u003d \"sleep add d/110324\";","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(invalidInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":40,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":41,"author":{"gitId":"a-wild-chocolate"},"content":"            assertEquals(\"Please ensure that you have keyed in the correct format: \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"rexyyong"},"content":"                    \"sleep add \u003cduration\u003e d/\u003cstrDate\u003e\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseSleepInput_inputNonPositiveValueForDuration_invalidInputExceptionThrown() {","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"        // setup test","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"a-wild-chocolate"},"content":"        String invalidInput \u003d \"sleep add -2 d/110324\";","lastModifiedDate":"2024-03-26"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"        // Call methods to test","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":53,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(invalidInput);","lastModifiedDate":"2024-03-26"},{"lineNumber":54,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":55,"author":{"gitId":"a-wild-chocolate"},"content":"            assertEquals(\"\\t Please input only positive real number into the sleep duration field!\"","lastModifiedDate":"2024-03-26"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"                    , e.getMessage());","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"    public void parseLiquidInput_missingKeywords_exceptionThrown() {","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"a-wild-chocolate"},"content":"        try {","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"a-wild-chocolate"},"content":"            parseSleepInput(\"sleep add\");","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"a-wild-chocolate"},"content":"            assertEquals(\"Please ensure that you have keyed in the correct format: \" +","lastModifiedDate":"2024-03-26"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"                    \"sleep add \u003cduration\u003e d/\u003cstrDate\u003e\", e.getMessage());","lastModifiedDate":"2024-03-29"},{"lineNumber":67,"author":{"gitId":"a-wild-chocolate"},"content":"        }","lastModifiedDate":"2024-03-26"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"rexyyong":4,"a-wild-chocolate":65}},{"path":"src/test/java/seedu/lifetrack/SleepListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"a-wild-chocolate"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-26"},{"lineNumber":2,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":3,"author":{"gitId":"a-wild-chocolate"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-26"},{"lineNumber":4,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepList;","lastModifiedDate":"2024-03-26"},{"lineNumber":5,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":6,"author":{"gitId":"a-wild-chocolate"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":7,"author":{"gitId":"a-wild-chocolate"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-26"},{"lineNumber":8,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":9,"author":{"gitId":"a-wild-chocolate"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-26"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"a-wild-chocolate"},"content":"public class SleepListTest {","lastModifiedDate":"2024-03-26"},{"lineNumber":12,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":13,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteSleepValidIndex(){","lastModifiedDate":"2024-03-26"},{"lineNumber":14,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":15,"author":{"gitId":"rexyyong"},"content":"        sleepList.addSleep(\"sleep add 7.5 d/2024-11-03\");","lastModifiedDate":"2024-03-29"},{"lineNumber":16,"author":{"gitId":"rexyyong"},"content":"        sleepList.addSleep(\"sleep add 8 d/2024-12-10\");","lastModifiedDate":"2024-03-29"},{"lineNumber":17,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d sleepList.getSize();","lastModifiedDate":"2024-03-26"},{"lineNumber":18,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.deleteSleep(\"sleep delete 1\");","lastModifiedDate":"2024-03-26"},{"lineNumber":19,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize - 1, sleepList.getSize());","lastModifiedDate":"2024-03-26"},{"lineNumber":20,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":21,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":22,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testDeleteSleepInvalidIndex() {","lastModifiedDate":"2024-03-26"},{"lineNumber":23,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":24,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.addSleep(\"sleep add 7.5 d/110324\");","lastModifiedDate":"2024-03-26"},{"lineNumber":25,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.addSleep(\"sleep add 8\");","lastModifiedDate":"2024-03-26"},{"lineNumber":26,"author":{"gitId":"a-wild-chocolate"},"content":"        int initialSize \u003d sleepList.getSize();","lastModifiedDate":"2024-03-26"},{"lineNumber":27,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.deleteSleep(\"sleep delete 5\"); // Index out of bounds","lastModifiedDate":"2024-03-26"},{"lineNumber":28,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.deleteSleep(\"sleep delete -1\");","lastModifiedDate":"2024-03-26"},{"lineNumber":29,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(initialSize, sleepList.getSize());","lastModifiedDate":"2024-03-26"},{"lineNumber":30,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":31,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":32,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testPrintLiquidListEmpty() {","lastModifiedDate":"2024-03-26"},{"lineNumber":33,"author":{"gitId":"a-wild-chocolate"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":34,"author":{"gitId":"a-wild-chocolate"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-26"},{"lineNumber":35,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-26"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.printSleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":38,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-26"},{"lineNumber":39,"author":{"gitId":"owx0130"},"content":"        String expectedOutput \u003d \"\\t Your sleep list is empty. Add new entries to populate your list :)\" +","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"owx0130"},"content":"                lineSeparator;","lastModifiedDate":"2024-03-28"},{"lineNumber":41,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":42,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":43,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":44,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testPrintSleepListNonEmpty() {","lastModifiedDate":"2024-03-26"},{"lineNumber":45,"author":{"gitId":"a-wild-chocolate"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":46,"author":{"gitId":"a-wild-chocolate"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-26"},{"lineNumber":47,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-26"},{"lineNumber":48,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":49,"author":{"gitId":"rexyyong"},"content":"        sleepList.addSleep(\"sleep add 7.5 d/2024-03-11\");","lastModifiedDate":"2024-03-29"},{"lineNumber":50,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.printSleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":51,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-26"},{"lineNumber":52,"author":{"gitId":"owx0130"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your sleep list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":53,"author":{"gitId":"rexyyong"},"content":"                \"\\t \\t Date: 2024-03-11, Duration: 7.5 hours\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":54,"author":{"gitId":"owx0130"},"content":"                \"\\t Your Sleep List:\" + lineSeparator +","lastModifiedDate":"2024-03-27"},{"lineNumber":55,"author":{"gitId":"rexyyong"},"content":"                \"\\t 1. \\t Date: 2024-03-11, Duration: 7.5 hours\" + lineSeparator;","lastModifiedDate":"2024-03-29"},{"lineNumber":56,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":57,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":58,"author":{"gitId":"a-wild-chocolate"},"content":"","lastModifiedDate":"2024-03-26"},{"lineNumber":59,"author":{"gitId":"a-wild-chocolate"},"content":"    @Test","lastModifiedDate":"2024-03-26"},{"lineNumber":60,"author":{"gitId":"a-wild-chocolate"},"content":"    public void testPrintSleepListMultipleEntries() {","lastModifiedDate":"2024-03-26"},{"lineNumber":61,"author":{"gitId":"a-wild-chocolate"},"content":"        String lineSeparator \u003d System.lineSeparator();","lastModifiedDate":"2024-03-26"},{"lineNumber":62,"author":{"gitId":"a-wild-chocolate"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-26"},{"lineNumber":63,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2024-03-26"},{"lineNumber":64,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":65,"author":{"gitId":"rexyyong"},"content":"        sleepList.addSleep(\"sleep add 7.5 d/2024-03-11\");","lastModifiedDate":"2024-03-29"},{"lineNumber":66,"author":{"gitId":"rexyyong"},"content":"        sleepList.addSleep(\"sleep add 8.0 d/2024-05-28\");","lastModifiedDate":"2024-03-29"},{"lineNumber":67,"author":{"gitId":"rexyyong"},"content":"        sleepList.addSleep(\"sleep add 4.2 d/2024-06-15\");","lastModifiedDate":"2024-03-29"},{"lineNumber":68,"author":{"gitId":"a-wild-chocolate"},"content":"        sleepList.printSleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":69,"author":{"gitId":"a-wild-chocolate"},"content":"        System.setOut(System.out);","lastModifiedDate":"2024-03-26"},{"lineNumber":70,"author":{"gitId":"owx0130"},"content":"        String expectedOutput \u003d \"\\t The following entry has been added to your sleep list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":71,"author":{"gitId":"rexyyong"},"content":"                \"\\t \\t Date: 2024-03-11, Duration: 7.5 hours\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":72,"author":{"gitId":"owx0130"},"content":"                \"\\t The following entry has been added to your sleep list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":73,"author":{"gitId":"rexyyong"},"content":"                \"\\t \\t Date: 2024-05-28, Duration: 8.0 hours\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":74,"author":{"gitId":"owx0130"},"content":"                \"\\t The following entry has been added to your sleep list!\" + lineSeparator +","lastModifiedDate":"2024-03-28"},{"lineNumber":75,"author":{"gitId":"rexyyong"},"content":"                \"\\t \\t Date: 2024-06-15, Duration: 4.2 hours\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":76,"author":{"gitId":"owx0130"},"content":"                \"\\t Your Sleep List:\" + lineSeparator +","lastModifiedDate":"2024-03-27"},{"lineNumber":77,"author":{"gitId":"rexyyong"},"content":"                \"\\t 1. \\t Date: 2024-03-11, Duration: 7.5 hours\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":78,"author":{"gitId":"rexyyong"},"content":"                \"\\t 2. \\t Date: 2024-05-28, Duration: 8.0 hours\" + lineSeparator +","lastModifiedDate":"2024-03-29"},{"lineNumber":79,"author":{"gitId":"rexyyong"},"content":"                \"\\t 3. \\t Date: 2024-06-15, Duration: 4.2 hours\" + lineSeparator;","lastModifiedDate":"2024-03-29"},{"lineNumber":80,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2024-03-26"},{"lineNumber":81,"author":{"gitId":"a-wild-chocolate"},"content":"        assertEquals(3, sleepList.getSize());","lastModifiedDate":"2024-03-26"},{"lineNumber":82,"author":{"gitId":"a-wild-chocolate"},"content":"    }","lastModifiedDate":"2024-03-26"},{"lineNumber":83,"author":{"gitId":"a-wild-chocolate"},"content":"}","lastModifiedDate":"2024-03-26"}],"authorContributionMap":{"rexyyong":14,"a-wild-chocolate":61,"owx0130":8}},{"path":"src/test/java/seedu/lifetrack/UITest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"paturikarthik"},"content":"package seedu.lifetrack;","lastModifiedDate":"2024-03-15"},{"lineNumber":2,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":3,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":4,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-03-15"},{"lineNumber":5,"author":{"gitId":"paturikarthik"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-03-15"},{"lineNumber":6,"author":{"gitId":"owx0130"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-03-21"},{"lineNumber":7,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":8,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.calories.calorielist.CalorieList;","lastModifiedDate":"2024-03-21"},{"lineNumber":9,"author":{"gitId":"owx0130"},"content":"import seedu.lifetrack.hydration.hydrationlist.HydrationList;","lastModifiedDate":"2024-03-28"},{"lineNumber":10,"author":{"gitId":"a-wild-chocolate"},"content":"import seedu.lifetrack.sleep.sleeplist.SleepList;","lastModifiedDate":"2024-03-26"},{"lineNumber":11,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.ui.Ui;","lastModifiedDate":"2024-03-15"},{"lineNumber":12,"author":{"gitId":"paturikarthik"},"content":"import seedu.lifetrack.user.User;","lastModifiedDate":"2024-03-28"},{"lineNumber":13,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":14,"author":{"gitId":"paturikarthik"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":15,"author":{"gitId":"paturikarthik"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-03-15"},{"lineNumber":16,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":17,"author":{"gitId":"owx0130"},"content":"public class UITest {","lastModifiedDate":"2024-03-21"},{"lineNumber":18,"author":{"gitId":"paturikarthik"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-03-15"},{"lineNumber":19,"author":{"gitId":"paturikarthik"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2024-03-15"},{"lineNumber":20,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":21,"author":{"gitId":"paturikarthik"},"content":"    @BeforeEach","lastModifiedDate":"2024-03-15"},{"lineNumber":22,"author":{"gitId":"paturikarthik"},"content":"    public void setUpStreams() {","lastModifiedDate":"2024-03-15"},{"lineNumber":23,"author":{"gitId":"paturikarthik"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2024-03-15"},{"lineNumber":24,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":25,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":26,"author":{"gitId":"paturikarthik"},"content":"    @AfterEach","lastModifiedDate":"2024-03-15"},{"lineNumber":27,"author":{"gitId":"paturikarthik"},"content":"    public void restoreStreams() {","lastModifiedDate":"2024-03-15"},{"lineNumber":28,"author":{"gitId":"paturikarthik"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2024-03-15"},{"lineNumber":29,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":30,"author":{"gitId":"paturikarthik"},"content":"","lastModifiedDate":"2024-03-15"},{"lineNumber":31,"author":{"gitId":"paturikarthik"},"content":"    @Test","lastModifiedDate":"2024-03-15"},{"lineNumber":32,"author":{"gitId":"paturikarthik"},"content":"    // Expect Empty String as function is exited","lastModifiedDate":"2024-03-15"},{"lineNumber":33,"author":{"gitId":"owx0130"},"content":"    public void handleUserInput_inputBye_printByeMessage() {","lastModifiedDate":"2024-03-15"},{"lineNumber":34,"author":{"gitId":"paturikarthik"},"content":"        CalorieList calorieList \u003d new CalorieList();","lastModifiedDate":"2024-03-15"},{"lineNumber":35,"author":{"gitId":"owx0130"},"content":"        HydrationList hydrationList \u003d new HydrationList();","lastModifiedDate":"2024-03-28"},{"lineNumber":36,"author":{"gitId":"a-wild-chocolate"},"content":"        SleepList sleepList \u003d new SleepList();","lastModifiedDate":"2024-03-26"},{"lineNumber":37,"author":{"gitId":"paturikarthik"},"content":"        User user \u003d new User();","lastModifiedDate":"2024-03-28"},{"lineNumber":38,"author":{"gitId":"paturikarthik"},"content":"        String input \u003d \"bye\";","lastModifiedDate":"2024-03-15"},{"lineNumber":39,"author":{"gitId":"paturikarthik"},"content":"        Ui.handleUserInput(input, calorieList, hydrationList,user,sleepList);","lastModifiedDate":"2024-03-28"},{"lineNumber":40,"author":{"gitId":"paturikarthik"},"content":"        assertEquals(\"\", outContent.toString());","lastModifiedDate":"2024-03-15"},{"lineNumber":41,"author":{"gitId":"paturikarthik"},"content":"    }","lastModifiedDate":"2024-03-15"},{"lineNumber":42,"author":{"gitId":"paturikarthik"},"content":"}","lastModifiedDate":"2024-03-15"}],"authorContributionMap":{"a-wild-chocolate":2,"owx0130":6,"paturikarthik":34}}]
